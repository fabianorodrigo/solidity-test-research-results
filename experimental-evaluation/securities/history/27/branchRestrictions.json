,{
  "2020-11-12T22:12:23.486ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:12:29.648ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:12:35.916ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:12:42.331ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:12:48.761ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:12:55.221ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:03.286ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:11.593ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:19.901ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:27.996ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:36.285ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:44.344ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:51.157ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:13:57.799ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+934",
              "sol": "block.timestamp+934"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+934",
                "sol": "block.timestamp+934"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+934",
                "sol": "block.timestamp+934"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+934",
                "sol": "block.timestamp+934"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.746ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.748ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.750ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.752ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1532892062]",
              "sol": "[uint256(1532892062)]"
            },
            {
              "js": "[28]",
              "sol": "[uint256(28)]"
            },
            {
              "js": "[[94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162]]",
              "sol": "[bytes32(stringToBytes32(\"94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162\"))]"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1532892062]",
                "sol": "[uint256(1532892062)]"
              },
              {
                "js": "[28]",
                "sol": "[uint256(28)]"
              },
              {
                "js": "[[94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162]]",
                "sol": "[bytes32(stringToBytes32(\"94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1532892062]",
                "sol": "[uint256(1532892062)]"
              },
              {
                "js": "[28]",
                "sol": "[uint256(28)]"
              },
              {
                "js": "[[94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162]]",
                "sol": "[bytes32(stringToBytes32(\"94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[7]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892062]",
                "sol": "[uint256(1532892062)]"
              },
              {
                "js": "[28]",
                "sol": "[uint256(28)]"
              },
              {
                "js": "[[94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162]]",
                "sol": "[bytes32(stringToBytes32(\"94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892062]",
                "sol": "[uint256(1532892062)]"
              },
              {
                "js": "[28]",
                "sol": "[uint256(28)]"
              },
              {
                "js": "[[94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162]]",
                "sol": "[bytes32(stringToBytes32(\"94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[6],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892062]",
                "sol": "[uint256(1532892062)]"
              },
              {
                "js": "[28]",
                "sol": "[uint256(28)]"
              },
              {
                "js": "[[94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162]]",
                "sol": "[bytes32(stringToBytes32(\"94,157,253,73,143,192,173,85,182,192,76,222,45,176,38,253,234,114,134,144,207,81,106,242,192,162,162,76,231,89,44,162\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.757ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[93,130,170,139,168,16,189,164,191,146,198,189,193,159,200,10,127,191,180,14,125,209,54,175,226,196,180,203,212,108,1,86]",
              "sol": "stringToBytes32(\"93,130,170,139,168,16,189,164,191,146,198,189,193,159,200,10,127,191,180,14,125,209,54,175,226,196,180,203,212,108,1,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[93,130,170,139,168,16,189,164,191,146,198,189,193,159,200,10,127,191,180,14,125,209,54,175,226,196,180,203,212,108,1,86]",
                "sol": "stringToBytes32(\"93,130,170,139,168,16,189,164,191,146,198,189,193,159,200,10,127,191,180,14,125,209,54,175,226,196,180,203,212,108,1,86\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.757ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.758ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[23,135,188,29,69,139,248,120,29,159,132,81,64,6,249,33,20,203,63,215,193,99,67,11,4,82,91,222,126,5,255,170]",
              "sol": "stringToBytes32(\"23,135,188,29,69,139,248,120,29,159,132,81,64,6,249,33,20,203,63,215,193,99,67,11,4,82,91,222,126,5,255,170\")"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "[23,135,188,29,69,139,248,120,29,159,132,81,64,6,249,33,20,203,63,215,193,99,67,11,4,82,91,222,126,5,255,170]",
                "sol": "stringToBytes32(\"23,135,188,29,69,139,248,120,29,159,132,81,64,6,249,33,20,203,63,215,193,99,67,11,4,82,91,222,126,5,255,170\")"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[23,135,188,29,69,139,248,120,29,159,132,81,64,6,249,33,20,203,63,215,193,99,67,11,4,82,91,222,126,5,255,170]",
                "sol": "stringToBytes32(\"23,135,188,29,69,139,248,120,29,159,132,81,64,6,249,33,20,203,63,215,193,99,67,11,4,82,91,222,126,5,255,170\")"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[168,67,195,20,95,167,117,58,163,49,130,29,42,124,205,180,95,122,161,254,85,141,37,10,255,247,93,196,217,219,192,212]",
              "sol": "stringToBytes32(\"168,67,195,20,95,167,117,58,163,49,130,29,42,124,205,180,95,122,161,254,85,141,37,10,255,247,93,196,217,219,192,212\")"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "[168,67,195,20,95,167,117,58,163,49,130,29,42,124,205,180,95,122,161,254,85,141,37,10,255,247,93,196,217,219,192,212]",
                "sol": "stringToBytes32(\"168,67,195,20,95,167,117,58,163,49,130,29,42,124,205,180,95,122,161,254,85,141,37,10,255,247,93,196,217,219,192,212\")"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[168,67,195,20,95,167,117,58,163,49,130,29,42,124,205,180,95,122,161,254,85,141,37,10,255,247,93,196,217,219,192,212]",
                "sol": "stringToBytes32(\"168,67,195,20,95,167,117,58,163,49,130,29,42,124,205,180,95,122,161,254,85,141,37,10,255,247,93,196,217,219,192,212\")"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.761ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.762ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[144,180,53,68,163,165,202,247,96,200,153,186,142,235,126,134,46,220,82,233,243,84,225,48,228,94,96,170,163,79,58,222],[246,151,47,252,34,87,237,57,165,97,161,180,222,69,35,43,13,229,230,248,150,43,71,55,192,42,173,216,210,226,64,119],[244,4,90,225,212,66,71,137,129,145,3,47,202,104,241,188,183,250,249,86,197,151,162,85,135,98,236,53,231,74,115,126],[246,130,179,69,169,90,234,94,155,98,25,98,160,109,9,32,180,177,20,233,138,229,56,71,134,166,33,216,9,45,58,208],[3,44,159,125,74,121,191,25,71,228,195,21,150,15,175,48,203,77,171,15,116,20,110,140,75,86,215,126,49,206,2,253],[149,173,226,61,218,241,231,222,106,120,13,68,144,149,41,55,155,108,214,150,110,5,137,156,101,34,108,105,113,28,207,66],[255,120,249,172,37,187,66,205,52,213,185,120,90,16,254,30,47,60,118,47,62,28,141,55,27,100,193,19,62,165,121,54],[180,169,208,100,66,243,4,127,36,207,211,147,186,204,205,143,34,70,194,123,131,45,105,153,72,175,32,146,76,159,247,36],[57,0,176,196,46,235,133,224,63,139,8,234,101,180,161,104,151,137,103,101,152,31,223,108,204,154,162,219,88,195,214,70],[236,101,81,246,49,188,115,10,223,151,30,199,132,32,74,110,224,250,63,175,51,245,127,248,194,230,87,117,161,9,12,106],[5,241,217,208,103,130,35,42,206,184,24,158,28,136,179,230,101,182,134,157,96,88,159,128,55,208,16,191,155,18,206,152],[85,250,15,164,125,142,45,65,60,27,40,163,207,102,217,162,46,224,80,204,125,108,127,54,119,217,226,121,26,147,139,216],[84,192,225,219,129,229,35,159,22,9,233,67,151,248,177,177,50,89,138,89,115,156,118,143,242,57,195,31,29,59,155,14],[152,241,11,47,43,205,167,225,191,174,113,173,172,140,43,108,94,211,177,167,25,244,60,154,132,41,15,81,184,215,22,149],[220,35,77,96,182,17,46,40,42,109,63,27,188,106,57,221,163,144,38,246,134,189,161,92,224,15,30,4,183,93,69,190],[109,203,202,87,197,1,67,82,224,120,97,209,9,27,52,100,61,90,31,220,60,76,179,174,242,252,7,117,104,166,182,227],[21,2,206,198,2,85,121,2,61,81,72,59,113,106,189,191,147,85,84,116,226,126,111,223,251,160,174,172,161,204,199,223],[228,52,141,64,35,230,48,107,104,54,103,40,121,144,230,110,134,172,243,77,229,207,57,251,108,221,159,70,57,20,24,72],[20,31,243,196,166,251,78,97,55,78,209,122,119,16,58,27,37,98,223,141,110,132,54,26,16,1,187,16,245,78,201,9],[7,168,194,121,76,219,178,138,202,55,228,246,41,174,184,16,134,137,205,15,50,204,69,202,176,203,4,198,112,108,45,19],[15,58,69,133,127,168,156,61,34,73,137,208,169,200,70,121,217,153,138,116,225,163,45,108,155,228,201,17,28,236,84,93],[8,214,204,249,212,38,129,42,240,162,198,12,150,72,253,61,62,57,141,21,69,157,50,123,93,173,4,214,251,23,56,230],[20,20,119,71,46,89,32,112,231,117,132,93,188,102,99,205,32,104,36,61,61,110,185,82,48,198,43,29,185,90,246,162],[51,225,35,69,205,143,196,193,98,31,69,251,208,168,189,196,38,166,212,131,115,236,89,204,7,112,138,241,143,15,123,146],[161,27,238,92,108,141,207,247,108,186,45,16,184,56,81,145,230,35,236,180,40,13,108,155,14,43,242,13,81,173,153,242],[254,88,176,171,199,32,180,246,166,108,38,29,226,245,75,98,185,158,128,69,238,151,38,204,96,188,198,177,238,140,156,125],[171,206,254,170,88,204,144,44,15,193,190,254,93,37,153,170,226,191,61,151,109,128,90,39,54,72,65,80,142,253,224,219],[146,195,223,127,232,6,221,134,50,233,143,128,20,196,99,38,112,99,21,189,169,44,45,136,166,66,107,237,9,187,31,191],[189,199,122,186,239,136,246,193,94,172,108,25,10,134,198,162,65,211,195,5,222,219,27,0,213,159,190,229,102,114,240,65]]",
              "sol": "[bytes32(stringToBytes32(\"144,180,53,68,163,165,202,247,96,200,153,186,142,235,126,134,46,220,82,233,243,84,225,48,228,94,96,170,163,79,58,222\")),bytes32(stringToBytes32(\"246,151,47,252,34,87,237,57,165,97,161,180,222,69,35,43,13,229,230,248,150,43,71,55,192,42,173,216,210,226,64,119\")),bytes32(stringToBytes32(\"244,4,90,225,212,66,71,137,129,145,3,47,202,104,241,188,183,250,249,86,197,151,162,85,135,98,236,53,231,74,115,126\")),bytes32(stringToBytes32(\"246,130,179,69,169,90,234,94,155,98,25,98,160,109,9,32,180,177,20,233,138,229,56,71,134,166,33,216,9,45,58,208\")),bytes32(stringToBytes32(\"3,44,159,125,74,121,191,25,71,228,195,21,150,15,175,48,203,77,171,15,116,20,110,140,75,86,215,126,49,206,2,253\")),bytes32(stringToBytes32(\"149,173,226,61,218,241,231,222,106,120,13,68,144,149,41,55,155,108,214,150,110,5,137,156,101,34,108,105,113,28,207,66\")),bytes32(stringToBytes32(\"255,120,249,172,37,187,66,205,52,213,185,120,90,16,254,30,47,60,118,47,62,28,141,55,27,100,193,19,62,165,121,54\")),bytes32(stringToBytes32(\"180,169,208,100,66,243,4,127,36,207,211,147,186,204,205,143,34,70,194,123,131,45,105,153,72,175,32,146,76,159,247,36\")),bytes32(stringToBytes32(\"57,0,176,196,46,235,133,224,63,139,8,234,101,180,161,104,151,137,103,101,152,31,223,108,204,154,162,219,88,195,214,70\")),bytes32(stringToBytes32(\"236,101,81,246,49,188,115,10,223,151,30,199,132,32,74,110,224,250,63,175,51,245,127,248,194,230,87,117,161,9,12,106\")),bytes32(stringToBytes32(\"5,241,217,208,103,130,35,42,206,184,24,158,28,136,179,230,101,182,134,157,96,88,159,128,55,208,16,191,155,18,206,152\")),bytes32(stringToBytes32(\"85,250,15,164,125,142,45,65,60,27,40,163,207,102,217,162,46,224,80,204,125,108,127,54,119,217,226,121,26,147,139,216\")),bytes32(stringToBytes32(\"84,192,225,219,129,229,35,159,22,9,233,67,151,248,177,177,50,89,138,89,115,156,118,143,242,57,195,31,29,59,155,14\")),bytes32(stringToBytes32(\"152,241,11,47,43,205,167,225,191,174,113,173,172,140,43,108,94,211,177,167,25,244,60,154,132,41,15,81,184,215,22,149\")),bytes32(stringToBytes32(\"220,35,77,96,182,17,46,40,42,109,63,27,188,106,57,221,163,144,38,246,134,189,161,92,224,15,30,4,183,93,69,190\")),bytes32(stringToBytes32(\"109,203,202,87,197,1,67,82,224,120,97,209,9,27,52,100,61,90,31,220,60,76,179,174,242,252,7,117,104,166,182,227\")),bytes32(stringToBytes32(\"21,2,206,198,2,85,121,2,61,81,72,59,113,106,189,191,147,85,84,116,226,126,111,223,251,160,174,172,161,204,199,223\")),bytes32(stringToBytes32(\"228,52,141,64,35,230,48,107,104,54,103,40,121,144,230,110,134,172,243,77,229,207,57,251,108,221,159,70,57,20,24,72\")),bytes32(stringToBytes32(\"20,31,243,196,166,251,78,97,55,78,209,122,119,16,58,27,37,98,223,141,110,132,54,26,16,1,187,16,245,78,201,9\")),bytes32(stringToBytes32(\"7,168,194,121,76,219,178,138,202,55,228,246,41,174,184,16,134,137,205,15,50,204,69,202,176,203,4,198,112,108,45,19\")),bytes32(stringToBytes32(\"15,58,69,133,127,168,156,61,34,73,137,208,169,200,70,121,217,153,138,116,225,163,45,108,155,228,201,17,28,236,84,93\")),bytes32(stringToBytes32(\"8,214,204,249,212,38,129,42,240,162,198,12,150,72,253,61,62,57,141,21,69,157,50,123,93,173,4,214,251,23,56,230\")),bytes32(stringToBytes32(\"20,20,119,71,46,89,32,112,231,117,132,93,188,102,99,205,32,104,36,61,61,110,185,82,48,198,43,29,185,90,246,162\")),bytes32(stringToBytes32(\"51,225,35,69,205,143,196,193,98,31,69,251,208,168,189,196,38,166,212,131,115,236,89,204,7,112,138,241,143,15,123,146\")),bytes32(stringToBytes32(\"161,27,238,92,108,141,207,247,108,186,45,16,184,56,81,145,230,35,236,180,40,13,108,155,14,43,242,13,81,173,153,242\")),bytes32(stringToBytes32(\"254,88,176,171,199,32,180,246,166,108,38,29,226,245,75,98,185,158,128,69,238,151,38,204,96,188,198,177,238,140,156,125\")),bytes32(stringToBytes32(\"171,206,254,170,88,204,144,44,15,193,190,254,93,37,153,170,226,191,61,151,109,128,90,39,54,72,65,80,142,253,224,219\")),bytes32(stringToBytes32(\"146,195,223,127,232,6,221,134,50,233,143,128,20,196,99,38,112,99,21,189,169,44,45,136,166,66,107,237,9,187,31,191\")),bytes32(stringToBytes32(\"189,199,122,186,239,136,246,193,94,172,108,25,10,134,198,162,65,211,195,5,222,219,27,0,213,159,190,229,102,114,240,65\"))]"
            },
            {
              "js": "[[5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147],[211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74],[142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70],[224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11],[74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201],[149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2],[210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234],[219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239],[54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182],[245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176],[111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184],[92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208],[145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134],[50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128],[64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174],[201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7],[25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234],[243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247],[26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214],[129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56],[108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186],[185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19],[85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229],[207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135],[33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22],[19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116],[121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242],[110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137],[222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15]]",
              "sol": "[bytes32(stringToBytes32(\"5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147\")),bytes32(stringToBytes32(\"211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74\")),bytes32(stringToBytes32(\"142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70\")),bytes32(stringToBytes32(\"224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11\")),bytes32(stringToBytes32(\"74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201\")),bytes32(stringToBytes32(\"149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2\")),bytes32(stringToBytes32(\"210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234\")),bytes32(stringToBytes32(\"219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239\")),bytes32(stringToBytes32(\"54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182\")),bytes32(stringToBytes32(\"245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176\")),bytes32(stringToBytes32(\"111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184\")),bytes32(stringToBytes32(\"92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208\")),bytes32(stringToBytes32(\"145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134\")),bytes32(stringToBytes32(\"50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128\")),bytes32(stringToBytes32(\"64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174\")),bytes32(stringToBytes32(\"201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7\")),bytes32(stringToBytes32(\"25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234\")),bytes32(stringToBytes32(\"243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247\")),bytes32(stringToBytes32(\"26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214\")),bytes32(stringToBytes32(\"129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56\")),bytes32(stringToBytes32(\"108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186\")),bytes32(stringToBytes32(\"185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19\")),bytes32(stringToBytes32(\"85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229\")),bytes32(stringToBytes32(\"207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135\")),bytes32(stringToBytes32(\"33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22\")),bytes32(stringToBytes32(\"19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116\")),bytes32(stringToBytes32(\"121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242\")),bytes32(stringToBytes32(\"110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137\")),bytes32(stringToBytes32(\"222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15\"))]"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[144,180,53,68,163,165,202,247,96,200,153,186,142,235,126,134,46,220,82,233,243,84,225,48,228,94,96,170,163,79,58,222],[246,151,47,252,34,87,237,57,165,97,161,180,222,69,35,43,13,229,230,248,150,43,71,55,192,42,173,216,210,226,64,119],[244,4,90,225,212,66,71,137,129,145,3,47,202,104,241,188,183,250,249,86,197,151,162,85,135,98,236,53,231,74,115,126],[246,130,179,69,169,90,234,94,155,98,25,98,160,109,9,32,180,177,20,233,138,229,56,71,134,166,33,216,9,45,58,208],[3,44,159,125,74,121,191,25,71,228,195,21,150,15,175,48,203,77,171,15,116,20,110,140,75,86,215,126,49,206,2,253],[149,173,226,61,218,241,231,222,106,120,13,68,144,149,41,55,155,108,214,150,110,5,137,156,101,34,108,105,113,28,207,66],[255,120,249,172,37,187,66,205,52,213,185,120,90,16,254,30,47,60,118,47,62,28,141,55,27,100,193,19,62,165,121,54],[180,169,208,100,66,243,4,127,36,207,211,147,186,204,205,143,34,70,194,123,131,45,105,153,72,175,32,146,76,159,247,36],[57,0,176,196,46,235,133,224,63,139,8,234,101,180,161,104,151,137,103,101,152,31,223,108,204,154,162,219,88,195,214,70],[236,101,81,246,49,188,115,10,223,151,30,199,132,32,74,110,224,250,63,175,51,245,127,248,194,230,87,117,161,9,12,106],[5,241,217,208,103,130,35,42,206,184,24,158,28,136,179,230,101,182,134,157,96,88,159,128,55,208,16,191,155,18,206,152],[85,250,15,164,125,142,45,65,60,27,40,163,207,102,217,162,46,224,80,204,125,108,127,54,119,217,226,121,26,147,139,216],[84,192,225,219,129,229,35,159,22,9,233,67,151,248,177,177,50,89,138,89,115,156,118,143,242,57,195,31,29,59,155,14],[152,241,11,47,43,205,167,225,191,174,113,173,172,140,43,108,94,211,177,167,25,244,60,154,132,41,15,81,184,215,22,149],[220,35,77,96,182,17,46,40,42,109,63,27,188,106,57,221,163,144,38,246,134,189,161,92,224,15,30,4,183,93,69,190],[109,203,202,87,197,1,67,82,224,120,97,209,9,27,52,100,61,90,31,220,60,76,179,174,242,252,7,117,104,166,182,227],[21,2,206,198,2,85,121,2,61,81,72,59,113,106,189,191,147,85,84,116,226,126,111,223,251,160,174,172,161,204,199,223],[228,52,141,64,35,230,48,107,104,54,103,40,121,144,230,110,134,172,243,77,229,207,57,251,108,221,159,70,57,20,24,72],[20,31,243,196,166,251,78,97,55,78,209,122,119,16,58,27,37,98,223,141,110,132,54,26,16,1,187,16,245,78,201,9],[7,168,194,121,76,219,178,138,202,55,228,246,41,174,184,16,134,137,205,15,50,204,69,202,176,203,4,198,112,108,45,19],[15,58,69,133,127,168,156,61,34,73,137,208,169,200,70,121,217,153,138,116,225,163,45,108,155,228,201,17,28,236,84,93],[8,214,204,249,212,38,129,42,240,162,198,12,150,72,253,61,62,57,141,21,69,157,50,123,93,173,4,214,251,23,56,230],[20,20,119,71,46,89,32,112,231,117,132,93,188,102,99,205,32,104,36,61,61,110,185,82,48,198,43,29,185,90,246,162],[51,225,35,69,205,143,196,193,98,31,69,251,208,168,189,196,38,166,212,131,115,236,89,204,7,112,138,241,143,15,123,146],[161,27,238,92,108,141,207,247,108,186,45,16,184,56,81,145,230,35,236,180,40,13,108,155,14,43,242,13,81,173,153,242],[254,88,176,171,199,32,180,246,166,108,38,29,226,245,75,98,185,158,128,69,238,151,38,204,96,188,198,177,238,140,156,125],[171,206,254,170,88,204,144,44,15,193,190,254,93,37,153,170,226,191,61,151,109,128,90,39,54,72,65,80,142,253,224,219],[146,195,223,127,232,6,221,134,50,233,143,128,20,196,99,38,112,99,21,189,169,44,45,136,166,66,107,237,9,187,31,191],[189,199,122,186,239,136,246,193,94,172,108,25,10,134,198,162,65,211,195,5,222,219,27,0,213,159,190,229,102,114,240,65]]",
                "sol": "[bytes32(stringToBytes32(\"144,180,53,68,163,165,202,247,96,200,153,186,142,235,126,134,46,220,82,233,243,84,225,48,228,94,96,170,163,79,58,222\")),bytes32(stringToBytes32(\"246,151,47,252,34,87,237,57,165,97,161,180,222,69,35,43,13,229,230,248,150,43,71,55,192,42,173,216,210,226,64,119\")),bytes32(stringToBytes32(\"244,4,90,225,212,66,71,137,129,145,3,47,202,104,241,188,183,250,249,86,197,151,162,85,135,98,236,53,231,74,115,126\")),bytes32(stringToBytes32(\"246,130,179,69,169,90,234,94,155,98,25,98,160,109,9,32,180,177,20,233,138,229,56,71,134,166,33,216,9,45,58,208\")),bytes32(stringToBytes32(\"3,44,159,125,74,121,191,25,71,228,195,21,150,15,175,48,203,77,171,15,116,20,110,140,75,86,215,126,49,206,2,253\")),bytes32(stringToBytes32(\"149,173,226,61,218,241,231,222,106,120,13,68,144,149,41,55,155,108,214,150,110,5,137,156,101,34,108,105,113,28,207,66\")),bytes32(stringToBytes32(\"255,120,249,172,37,187,66,205,52,213,185,120,90,16,254,30,47,60,118,47,62,28,141,55,27,100,193,19,62,165,121,54\")),bytes32(stringToBytes32(\"180,169,208,100,66,243,4,127,36,207,211,147,186,204,205,143,34,70,194,123,131,45,105,153,72,175,32,146,76,159,247,36\")),bytes32(stringToBytes32(\"57,0,176,196,46,235,133,224,63,139,8,234,101,180,161,104,151,137,103,101,152,31,223,108,204,154,162,219,88,195,214,70\")),bytes32(stringToBytes32(\"236,101,81,246,49,188,115,10,223,151,30,199,132,32,74,110,224,250,63,175,51,245,127,248,194,230,87,117,161,9,12,106\")),bytes32(stringToBytes32(\"5,241,217,208,103,130,35,42,206,184,24,158,28,136,179,230,101,182,134,157,96,88,159,128,55,208,16,191,155,18,206,152\")),bytes32(stringToBytes32(\"85,250,15,164,125,142,45,65,60,27,40,163,207,102,217,162,46,224,80,204,125,108,127,54,119,217,226,121,26,147,139,216\")),bytes32(stringToBytes32(\"84,192,225,219,129,229,35,159,22,9,233,67,151,248,177,177,50,89,138,89,115,156,118,143,242,57,195,31,29,59,155,14\")),bytes32(stringToBytes32(\"152,241,11,47,43,205,167,225,191,174,113,173,172,140,43,108,94,211,177,167,25,244,60,154,132,41,15,81,184,215,22,149\")),bytes32(stringToBytes32(\"220,35,77,96,182,17,46,40,42,109,63,27,188,106,57,221,163,144,38,246,134,189,161,92,224,15,30,4,183,93,69,190\")),bytes32(stringToBytes32(\"109,203,202,87,197,1,67,82,224,120,97,209,9,27,52,100,61,90,31,220,60,76,179,174,242,252,7,117,104,166,182,227\")),bytes32(stringToBytes32(\"21,2,206,198,2,85,121,2,61,81,72,59,113,106,189,191,147,85,84,116,226,126,111,223,251,160,174,172,161,204,199,223\")),bytes32(stringToBytes32(\"228,52,141,64,35,230,48,107,104,54,103,40,121,144,230,110,134,172,243,77,229,207,57,251,108,221,159,70,57,20,24,72\")),bytes32(stringToBytes32(\"20,31,243,196,166,251,78,97,55,78,209,122,119,16,58,27,37,98,223,141,110,132,54,26,16,1,187,16,245,78,201,9\")),bytes32(stringToBytes32(\"7,168,194,121,76,219,178,138,202,55,228,246,41,174,184,16,134,137,205,15,50,204,69,202,176,203,4,198,112,108,45,19\")),bytes32(stringToBytes32(\"15,58,69,133,127,168,156,61,34,73,137,208,169,200,70,121,217,153,138,116,225,163,45,108,155,228,201,17,28,236,84,93\")),bytes32(stringToBytes32(\"8,214,204,249,212,38,129,42,240,162,198,12,150,72,253,61,62,57,141,21,69,157,50,123,93,173,4,214,251,23,56,230\")),bytes32(stringToBytes32(\"20,20,119,71,46,89,32,112,231,117,132,93,188,102,99,205,32,104,36,61,61,110,185,82,48,198,43,29,185,90,246,162\")),bytes32(stringToBytes32(\"51,225,35,69,205,143,196,193,98,31,69,251,208,168,189,196,38,166,212,131,115,236,89,204,7,112,138,241,143,15,123,146\")),bytes32(stringToBytes32(\"161,27,238,92,108,141,207,247,108,186,45,16,184,56,81,145,230,35,236,180,40,13,108,155,14,43,242,13,81,173,153,242\")),bytes32(stringToBytes32(\"254,88,176,171,199,32,180,246,166,108,38,29,226,245,75,98,185,158,128,69,238,151,38,204,96,188,198,177,238,140,156,125\")),bytes32(stringToBytes32(\"171,206,254,170,88,204,144,44,15,193,190,254,93,37,153,170,226,191,61,151,109,128,90,39,54,72,65,80,142,253,224,219\")),bytes32(stringToBytes32(\"146,195,223,127,232,6,221,134,50,233,143,128,20,196,99,38,112,99,21,189,169,44,45,136,166,66,107,237,9,187,31,191\")),bytes32(stringToBytes32(\"189,199,122,186,239,136,246,193,94,172,108,25,10,134,198,162,65,211,195,5,222,219,27,0,213,159,190,229,102,114,240,65\"))]"
              },
              {
                "js": "[[5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147],[211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74],[142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70],[224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11],[74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201],[149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2],[210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234],[219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239],[54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182],[245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176],[111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184],[92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208],[145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134],[50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128],[64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174],[201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7],[25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234],[243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247],[26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214],[129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56],[108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186],[185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19],[85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229],[207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135],[33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22],[19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116],[121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242],[110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137],[222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15]]",
                "sol": "[bytes32(stringToBytes32(\"5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147\")),bytes32(stringToBytes32(\"211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74\")),bytes32(stringToBytes32(\"142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70\")),bytes32(stringToBytes32(\"224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11\")),bytes32(stringToBytes32(\"74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201\")),bytes32(stringToBytes32(\"149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2\")),bytes32(stringToBytes32(\"210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234\")),bytes32(stringToBytes32(\"219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239\")),bytes32(stringToBytes32(\"54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182\")),bytes32(stringToBytes32(\"245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176\")),bytes32(stringToBytes32(\"111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184\")),bytes32(stringToBytes32(\"92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208\")),bytes32(stringToBytes32(\"145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134\")),bytes32(stringToBytes32(\"50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128\")),bytes32(stringToBytes32(\"64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174\")),bytes32(stringToBytes32(\"201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7\")),bytes32(stringToBytes32(\"25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234\")),bytes32(stringToBytes32(\"243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247\")),bytes32(stringToBytes32(\"26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214\")),bytes32(stringToBytes32(\"129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56\")),bytes32(stringToBytes32(\"108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186\")),bytes32(stringToBytes32(\"185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19\")),bytes32(stringToBytes32(\"85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229\")),bytes32(stringToBytes32(\"207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135\")),bytes32(stringToBytes32(\"33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22\")),bytes32(stringToBytes32(\"19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116\")),bytes32(stringToBytes32(\"121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242\")),bytes32(stringToBytes32(\"110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137\")),bytes32(stringToBytes32(\"222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[92,85,49,239,101,195,112,32,26,93,90,2,85,31,198,218,210,56,48,9,65,44,155,196,192,111,63,214,28,187,170,159],[172,185,162,155,128,22,175,148,25,182,241,49,58,35,145,189,174,79,8,163,211,62,31,227,177,14,221,11,182,164,150,196],[17,178,255,203,201,76,231,247,238,25,58,153,205,91,105,138,14,219,41,236,64,130,19,145,3,66,158,240,171,33,209,46],[226,17,112,164,5,172,122,237,119,81,188,26,101,25,4,254,161,88,183,22,136,135,188,128,207,118,238,56,148,254,154,236],[201,244,79,0,212,34,96,103,74,208,120,1,232,172,221,118,129,62,65,177,170,76,126,122,249,30,32,25,121,72,55,71],[183,94,182,161,228,75,169,6,129,188,5,140,243,66,57,48,31,194,74,180,51,119,171,229,3,66,55,83,130,246,50,38],[178,249,87,226,84,146,113,67,110,246,159,105,30,210,20,142,127,208,109,8,159,167,37,229,171,110,185,33,106,215,213,226],[92,239,120,144,53,12,12,173,221,98,69,117,232,21,124,94,33,39,107,19,187,228,30,195,254,133,172,16,173,189,229,126],[53,89,130,164,195,234,236,48,152,126,171,3,10,78,92,182,39,8,129,228,226,84,145,44,251,253,52,73,114,154,101,30],[238,190,177,5,37,159,242,219,71,186,17,6,235,30,230,161,201,50,27,164,57,94,49,195,200,9,16,225,134,241,254,202],[115,134,237,238,220,20,195,4,37,179,134,190,36,170,145,209,157,238,116,255,196,0,110,115,45,96,242,12,133,127,127,147],[219,106,66,229,166,152,227,105,241,30,145,159,179,89,234,217,171,236,27,76,204,3,91,65,96,204,177,79,232,152,146,49],[194,172,79,14,46,105,214,160,234,130,101,207,174,168,226,173,104,195,0,146,122,139,203,204,92,93,19,10,176,20,62,243],[188,87,232,133,137,226,114,19,153,53,46,60,189,250,235,210,128,163,63,75,22,53,233,66,82,34,74,58,58,225,157,86],[32,102,193,246,48,36,215,86,110,140,7,186,68,220,140,105,15,67,22,184,103,221,225,229,214,18,220,70,91,142,23,53],[55,104,165,57,90,144,70,194,38,83,11,43,151,121,234,4,74,184,30,37,15,95,224,229,48,86,8,175,77,95,146,143],[238,95,184,66,212,190,152,133,182,245,136,160,42,40,17,193,133,22,47,133,47,198,172,119,92,124,215,165,64,169,177,83],[179,198,160,188,87,191,138,5,200,165,100,40,118,15,219,32,93,14,115,38,62,5,157,85,176,3,50,86,186,230,98,10],[199,253,168,73,177,205,255,30,76,131,80,156,2,29,18,74,160,77,4,153,160,196,140,228,193,219,253,12,103,159,198,166],[14,166,232,213,248,104,3,246,250,202,204,187,14,189,203,33,215,109,101,165,48,180,60,178,188,228,255,215,4,159,107,80],[73,17,16,177,104,96,111,6,128,6,164,91,143,42,41,58,26,172,102,109,224,171,247,206,148,92,21,186,38,182,254,130],[168,224,127,77,158,111,11,164,225,175,142,34,235,120,50,220,9,88,27,197,141,104,67,55,66,176,15,57,239,243,93,198],[142,148,60,83,42,20,101,87,180,226,222,242,201,34,146,51,70,66,182,52,246,55,116,43,62,64,71,14,5,188,110,198],[135,145,171,208,230,239,128,71,94,92,102,111,207,218,16,225,121,192,111,153,100,6,32,210,139,215,180,180,118,34,174,125],[197,9,60,253,235,206,162,82,87,174,147,201,251,230,2,78,207,8,67,6,199,180,219,122,29,38,70,106,75,228,124,79],[33,3,212,231,197,246,75,39,197,36,92,205,30,235,116,140,9,158,187,92,166,67,43,106,48,122,6,215,235,162,6,209],[184,104,134,130,114,115,160,204,201,145,248,76,148,224,209,199,190,157,47,27,50,199,112,32,206,210,161,236,18,235,230,230],[114,115,78,77,202,233,118,82,202,11,200,19,74,211,211,24,169,69,80,53,2,226,161,223,255,205,176,115,173,126,84,164],[135,119,54,253,110,158,141,181,210,182,136,156,65,59,161,46,164,68,145,196,10,97,247,24,82,230,82,91,230,193,120,246],[251,130,100,168,80,141,111,37,17,31,78,174,151,109,127,249,98,213,28,228,82,55,81,137,212,141,182,88,126,200,7,157]]",
                "sol": "[stringToBytes32(\"255,148,168,84,119,32,55,48,25,49,38,238,244,17,223,175,188,214,126,86,140,151,21,122,33,44,160,144,239,133,204,171\"),stringToBytes32(\"127,110,60,123,116,46,77,84,142,141,128,242,96,216,3,229,222,180,218,9,247,161,190,182,200,100,149,66,107,191,92,237\"),stringToBytes32(\"23,197,146,91,191,221,220,197,123,32,221,224,206,108,138,207,4,189,184,223,178,229,184,48,104,18,150,186,67,162,227,34\"),stringToBytes32(\"7,253,211,27,100,186,249,31,97,131,154,29,44,72,105,72,173,199,75,186,116,51,54,217,25,44,206,61,68,109,38,118\"),stringToBytes32(\"93,151,209,50,61,242,108,58,181,41,62,14,140,3,64,239,136,236,109,101,153,241,136,187,209,27,243,14,203,119,222,23\"),stringToBytes32(\"105,45,155,85,212,229,142,144,56,249,111,23,146,121,2,50,136,195,208,93,233,144,75,157,187,186,215,244,210,199,50,208\"),stringToBytes32(\"187,142,124,128,88,37,81,172,63,104,177,91,23,75,178,232,94,243,210,53,82,220,101,178,103,228,17,187,21,206,226,50\"),stringToBytes32(\"62,145,2,153,167,86,139,130,95,177,145,219,121,192,75,55,54,163,56,76,71,94,121,251,147,179,54,224,5,211,44,47\"),stringToBytes32(\"47,14,72,205,21,180,222,137,2,110,140,177,177,71,242,97,119,205,133,1,188,159,45,226,211,19,216,12,215,176,160,20\"),stringToBytes32(\"88,169,116,124,138,112,244,240,61,88,25,20,223,166,76,201,173,87,2,130,14,162,180,49,55,6,95,51,67,217,81,22\"),stringToBytes32(\"175,87,28,58,115,91,68,125,116,123,205,16,36,239,86,224,116,137,133,215,177,73,248,85,46,203,198,57,156,98,218,88\"),stringToBytes32(\"6,80,141,205,199,41,248,76,18,31,80,97,178,62,97,93,60,29,13,78,186,99,2,167,23,248,227,141,25,68,21,96\"),stringToBytes32(\"143,167,102,19,102,98,93,226,132,202,70,78,117,210,145,206,45,144,43,19,15,33,207,120,150,143,70,105,125,254,162,184\"),stringToBytes32(\"111,199,117,63,201,226,116,197,50,33,5,77,211,54,244,117,226,11,248,11,208,230,0,2,84,151,182,222,218,79,242,18\"),stringToBytes32(\"198,213,121,96,223,40,172,246,33,183,193,82,236,17,61,249,241,80,194,67,106,112,53,145,27,142,53,81,61,12,241,116\"),stringToBytes32(\"25,93,71,238,219,198,51,112,196,76,158,105,103,180,107,36,61,214,240,138,45,102,193,129,179,84,143,18,60,75,112,104\"),stringToBytes32(\"228,229,250,82,37,4,67,160,217,168,151,145,116,2,4,228,255,92,147,36,32,175,240,51,180,147,194,112,185,221,137,241\"),stringToBytes32(\"223,130,121,81,193,112,133,60,197,73,22,22,47,150,36,38,145,43,42,134,145,175,13,22,3,166,199,218,108,114,20,132\"),stringToBytes32(\"98,116,154,133,237,234,255,99,107,228,227,149,124,127,180,147,220,202,202,141,135,227,49,102,39,255,143,30,138,29,108,182\"),stringToBytes32(\"156,17,218,46,214,59,1,154,183,26,58,108,199,77,98,160,94,88,76,48,127,51,37,151,94,67,208,183,31,150,40,131\"),stringToBytes32(\"10,106,49,42,252,16,165,242,161,158,94,20,1,29,142,248,59,45,120,186,170,245,110,216,85,38,92,9,92,233,233,78\"),stringToBytes32(\"240,247,236,90,104,5,45,173,53,105,180,253,229,103,116,14,30,227,16,83,45,183,60,181,68,130,208,115,48,247,124,118\"),stringToBytes32(\"74,208,36,8,33,4,9,158,46,95,144,167,36,121,123,127,137,21,118,64,174,129,77,13,37,45,83,137,75,146,63,169\"),stringToBytes32(\"0,184,220,109,210,84,144,121,21,80,53,148,197,160,134,80,18,251,244,195,176,132,232,128,206,57,194,84,2,179,225,246\"),stringToBytes32(\"194,57,212,177,103,18,236,24,43,179,216,112,80,73,91,241,44,91,198,120,231,33,53,27,207,120,201,109,81,113,55,66\"),stringToBytes32(\"17,199,151,229,42,52,228,117,110,75,7,130,27,7,154,193,25,240,204,195,54,56,16,98,69,70,95,81,27,19,57,191\"),stringToBytes32(\"102,165,25,109,202,7,16,68,100,129,227,76,154,24,179,244,245,115,4,196,183,4,90,22,146,17,53,122,17,21,133,130\"),stringToBytes32(\"99,98,40,255,151,42,27,121,69,57,198,167,245,3,233,26,32,14,230,183,180,224,41,206,87,36,132,139,235,64,97,52\"),stringToBytes32(\"10,153,216,21,62,171,199,105,173,132,81,211,165,214,253,102,85,245,110,37,47,136,225,77,177,58,194,26,120,38,171,193\"),stringToBytes32(\"240,197,10,224,110,127,5,29,26,152,134,198,90,172,146,116,174,219,44,226,131,88,74,202,166,192,25,184,17,38,128,140\")]"
              },
              {
                "js": "[[5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147],[211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74],[142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70],[224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11],[74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201],[149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2],[210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234],[219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239],[54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182],[245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176],[111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184],[92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208],[145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134],[50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128],[64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174],[201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7],[25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234],[243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247],[26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214],[129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56],[108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186],[185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19],[85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229],[207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135],[33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22],[19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116],[121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242],[110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137],[222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15]]",
                "sol": "[bytes32(stringToBytes32(\"5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147\")),bytes32(stringToBytes32(\"211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74\")),bytes32(stringToBytes32(\"142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70\")),bytes32(stringToBytes32(\"224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11\")),bytes32(stringToBytes32(\"74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201\")),bytes32(stringToBytes32(\"149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2\")),bytes32(stringToBytes32(\"210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234\")),bytes32(stringToBytes32(\"219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239\")),bytes32(stringToBytes32(\"54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182\")),bytes32(stringToBytes32(\"245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176\")),bytes32(stringToBytes32(\"111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184\")),bytes32(stringToBytes32(\"92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208\")),bytes32(stringToBytes32(\"145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134\")),bytes32(stringToBytes32(\"50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128\")),bytes32(stringToBytes32(\"64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174\")),bytes32(stringToBytes32(\"201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7\")),bytes32(stringToBytes32(\"25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234\")),bytes32(stringToBytes32(\"243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247\")),bytes32(stringToBytes32(\"26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214\")),bytes32(stringToBytes32(\"129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56\")),bytes32(stringToBytes32(\"108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186\")),bytes32(stringToBytes32(\"185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19\")),bytes32(stringToBytes32(\"85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229\")),bytes32(stringToBytes32(\"207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135\")),bytes32(stringToBytes32(\"33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22\")),bytes32(stringToBytes32(\"19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116\")),bytes32(stringToBytes32(\"121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242\")),bytes32(stringToBytes32(\"110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137\")),bytes32(stringToBytes32(\"222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147],[211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74],[142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70],[224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11],[74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201],[149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2],[210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234],[219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239],[54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182],[245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176],[111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184],[92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208],[145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134],[50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128],[64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174],[201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7],[25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234],[243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247],[26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214],[129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56],[108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186],[185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19],[85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229],[207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135],[33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22],[19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116],[121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242],[110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137],[222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15]]",
                "sol": "[bytes32(stringToBytes32(\"5,105,102,30,201,143,44,78,224,85,75,10,149,67,163,91,93,225,154,145,191,44,190,196,175,124,69,135,71,164,25,147\")),bytes32(stringToBytes32(\"211,55,241,252,218,213,195,240,91,181,27,140,204,146,194,2,106,122,241,117,58,25,60,216,132,169,251,25,100,64,82,74\")),bytes32(stringToBytes32(\"142,216,153,193,46,210,236,191,207,234,18,50,94,59,219,182,156,188,97,89,229,58,180,140,74,38,197,221,139,194,94,70\")),bytes32(stringToBytes32(\"224,229,70,34,55,153,18,229,70,217,208,169,64,35,188,182,239,12,24,177,145,131,137,234,4,246,115,197,0,225,97,11\")),bytes32(stringToBytes32(\"74,138,13,61,201,113,66,220,60,122,134,133,127,3,120,138,233,39,47,77,128,35,17,160,114,65,39,157,85,128,183,201\")),bytes32(stringToBytes32(\"149,239,163,120,55,99,108,167,240,209,57,3,147,25,36,132,175,207,162,151,21,113,214,13,109,145,150,36,106,136,182,2\")),bytes32(stringToBytes32(\"210,144,245,112,178,123,34,227,78,158,230,189,85,138,254,157,185,73,143,11,177,230,187,64,217,188,107,152,7,117,82,234\")),bytes32(stringToBytes32(\"219,194,91,247,94,116,164,138,219,54,38,240,103,96,26,103,111,99,119,34,122,124,68,194,230,96,102,205,235,191,17,239\")),bytes32(stringToBytes32(\"54,159,131,54,195,21,50,197,48,197,0,143,215,141,80,157,224,175,222,254,94,64,67,168,155,41,150,145,27,169,48,182\")),bytes32(stringToBytes32(\"245,144,75,151,64,253,246,135,210,76,52,65,30,0,24,241,241,191,7,133,219,65,175,128,189,213,29,14,10,38,2,176\")),bytes32(stringToBytes32(\"111,51,62,93,145,143,69,36,179,83,127,242,84,87,153,239,6,220,49,138,138,80,32,253,130,112,6,93,5,38,2,184\")),bytes32(stringToBytes32(\"92,187,123,89,64,149,198,255,244,160,86,77,181,51,22,218,24,65,45,57,84,46,205,134,6,29,111,152,153,82,90,208\")),bytes32(stringToBytes32(\"145,176,207,246,150,110,135,107,106,74,72,148,142,249,111,158,225,233,163,36,100,15,29,127,4,31,148,42,187,146,127,134\")),bytes32(stringToBytes32(\"50,86,139,158,178,72,95,130,12,234,219,248,84,73,81,69,60,117,123,37,149,148,97,215,70,122,146,238,96,113,220,128\")),bytes32(stringToBytes32(\"64,196,28,229,198,22,51,123,87,249,180,38,25,137,121,90,156,161,34,200,47,121,202,50,167,147,54,89,48,133,165,174\")),bytes32(stringToBytes32(\"201,185,15,34,185,236,147,126,169,21,192,65,25,202,102,112,91,16,212,127,10,198,5,229,201,48,202,184,181,128,92,7\")),bytes32(stringToBytes32(\"25,46,194,97,173,116,194,197,130,159,205,90,92,100,241,68,48,89,128,195,25,154,197,167,162,11,68,193,60,198,116,234\")),bytes32(stringToBytes32(\"243,126,74,229,63,25,71,59,53,134,209,237,206,240,30,155,63,21,127,113,55,76,109,168,4,114,18,224,123,126,99,247\")),bytes32(stringToBytes32(\"26,84,220,87,24,100,53,175,110,202,10,106,216,108,237,70,249,76,240,143,113,160,90,175,160,192,109,213,50,238,59,214\")),bytes32(stringToBytes32(\"129,175,189,175,86,148,7,119,30,149,135,54,19,109,44,86,186,160,52,183,94,132,147,34,170,220,146,22,114,13,210,56\")),bytes32(stringToBytes32(\"108,66,102,189,69,194,151,250,125,177,33,93,180,114,79,131,47,60,102,180,250,248,118,55,6,179,61,190,102,232,94,186\")),bytes32(stringToBytes32(\"185,245,194,234,153,160,163,160,63,102,141,164,0,192,185,193,202,103,96,175,159,107,233,41,14,7,201,110,247,156,43,19\")),bytes32(stringToBytes32(\"85,165,193,138,72,15,58,245,75,49,26,208,211,245,101,13,43,42,96,33,102,160,139,64,110,55,194,96,67,140,132,229\")),bytes32(stringToBytes32(\"207,82,205,233,245,235,121,76,197,180,8,48,141,186,4,111,166,119,175,105,179,238,242,190,157,173,50,169,217,156,198,135\")),bytes32(stringToBytes32(\"33,247,129,233,48,121,138,107,230,98,49,131,142,12,213,227,4,181,226,174,140,59,229,100,35,246,200,14,222,52,164,22\")),bytes32(stringToBytes32(\"19,228,195,128,122,102,2,148,211,192,108,159,87,199,26,69,153,27,223,223,188,232,182,30,126,247,208,213,221,210,169,116\")),bytes32(stringToBytes32(\"121,146,235,187,82,60,118,119,50,219,203,92,12,67,84,6,40,26,247,205,205,157,173,201,77,192,92,165,8,227,44,242\")),bytes32(stringToBytes32(\"110,78,166,242,237,158,233,7,128,212,80,143,199,90,23,178,128,79,68,69,114,131,192,70,249,165,178,188,150,215,197,137\")),bytes32(stringToBytes32(\"222,70,21,190,127,25,131,37,171,87,175,107,108,129,59,139,245,84,133,100,98,164,212,12,153,228,89,29,143,167,45,15\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.773ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"PayableExample\"",
                "sol": "\"PayableExample\""
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.779ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[0],accounts[8],accounts[5],accounts[4],accounts[9],accounts[9],accounts[5],accounts[5],accounts[0],accounts[5],accounts[7],accounts[3],accounts[1],accounts[8],accounts[4],accounts[8],accounts[8],accounts[2],accounts[5],accounts[6],accounts[0],accounts[9],accounts[0],accounts[6],accounts[2],accounts[8],accounts[6],accounts[5],accounts[1],accounts[6],accounts[5],accounts[7],accounts[1],accounts[7],accounts[8],accounts[8],accounts[9],accounts[7],accounts[9],accounts[0],accounts[5],accounts[6],accounts[8],accounts[5],accounts[4],accounts[2],accounts[4],accounts[0],accounts[6],accounts[3],accounts[8],accounts[7],accounts[6],accounts[2],accounts[4],accounts[0],accounts[6],accounts[6],accounts[9],accounts[0],accounts[7],accounts[0],accounts[0],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[26,255,4,9999,1,10000,28,95,66,1,1,10000,2,9999,29,5,6,1336,2,1338,2014223716,29,2014223715,1338,26,64,10001,95,255,66,10001,1338,29,95,1532892064,2014223716,256,26,65,2014223715,2014223716,95,0,0,1532892063,1,1532892064,64,29,26,97,2014223714,10001,5,96,66,10001,1337,28,1338,29,2014223714,26,65]",
              "sol": "[uint256(26),uint256(255),uint256(4),uint256(9999),uint256(1),uint256(10000),uint256(28),uint256(95),uint256(66),uint256(1),uint256(1),uint256(10000),uint256(2),uint256(9999),uint256(29),uint256(5),uint256(6),uint256(1336),uint256(2),uint256(1338),uint256(2014223716),uint256(29),uint256(2014223715),uint256(1338),uint256(26),uint256(64),uint256(10001),uint256(95),uint256(255),uint256(66),uint256(10001),uint256(1338),uint256(29),uint256(95),uint256(1532892064),uint256(2014223716),uint256(256),uint256(26),uint256(65),uint256(2014223715),uint256(2014223716),uint256(95),uint256(0),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(64),uint256(29),uint256(26),uint256(97),uint256(2014223714),uint256(10001),uint256(5),uint256(96),uint256(66),uint256(10001),uint256(1337),uint256(28),uint256(1338),uint256(29),uint256(2014223714),uint256(26),uint256(65)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[0],accounts[8],accounts[5],accounts[4],accounts[9],accounts[9],accounts[5],accounts[5],accounts[0],accounts[5],accounts[7],accounts[3],accounts[1],accounts[8],accounts[4],accounts[8],accounts[8],accounts[2],accounts[5],accounts[6],accounts[0],accounts[9],accounts[0],accounts[6],accounts[2],accounts[8],accounts[6],accounts[5],accounts[1],accounts[6],accounts[5],accounts[7],accounts[1],accounts[7],accounts[8],accounts[8],accounts[9],accounts[7],accounts[9],accounts[0],accounts[5],accounts[6],accounts[8],accounts[5],accounts[4],accounts[2],accounts[4],accounts[0],accounts[6],accounts[3],accounts[8],accounts[7],accounts[6],accounts[2],accounts[4],accounts[0],accounts[6],accounts[6],accounts[9],accounts[0],accounts[7],accounts[0],accounts[0],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[26,255,4,9999,1,10000,28,95,66,1,1,10000,2,9999,29,5,6,1336,2,1338,2014223716,29,2014223715,1338,26,64,10001,95,255,66,10001,1338,29,95,1532892064,2014223716,256,26,65,2014223715,2014223716,95,0,0,1532892063,1,1532892064,64,29,26,97,2014223714,10001,5,96,66,10001,1337,28,1338,29,2014223714,26,65]",
                "sol": "[uint256(26),uint256(255),uint256(4),uint256(9999),uint256(1),uint256(10000),uint256(28),uint256(95),uint256(66),uint256(1),uint256(1),uint256(10000),uint256(2),uint256(9999),uint256(29),uint256(5),uint256(6),uint256(1336),uint256(2),uint256(1338),uint256(2014223716),uint256(29),uint256(2014223715),uint256(1338),uint256(26),uint256(64),uint256(10001),uint256(95),uint256(255),uint256(66),uint256(10001),uint256(1338),uint256(29),uint256(95),uint256(1532892064),uint256(2014223716),uint256(256),uint256(26),uint256(65),uint256(2014223715),uint256(2014223716),uint256(95),uint256(0),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(64),uint256(29),uint256(26),uint256(97),uint256(2014223714),uint256(10001),uint256(5),uint256(96),uint256(66),uint256(10001),uint256(1337),uint256(28),uint256(1338),uint256(29),uint256(2014223714),uint256(26),uint256(65)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[2],accounts[9],accounts[6],accounts[9],accounts[2],accounts[8],accounts[8],accounts[9],accounts[1],accounts[4],accounts[2],accounts[3],accounts[8],accounts[4],accounts[8],accounts[9],accounts[7],accounts[6],accounts[4],accounts[5],accounts[3],accounts[1],accounts[6],accounts[2],accounts[0],accounts[9],accounts[8],accounts[0],accounts[1],accounts[6],accounts[4],accounts[7],accounts[2],accounts[1],accounts[8],accounts[2],accounts[1],accounts[8],accounts[2],accounts[0],accounts[5],accounts[8],accounts[8],accounts[5],accounts[6],accounts[4],accounts[7],accounts[3],accounts[3],accounts[6],accounts[0],accounts[1],accounts[4],accounts[8],accounts[0],accounts[5],accounts[8],accounts[6],accounts[7],accounts[7],accounts[0],accounts[1],accounts[5],accounts[5],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[26,255,4,9999,1,10000,28,95,66,1,1,10000,2,9999,29,5,6,1336,2,1338,2014223716,29,2014223715,1338,26,64,10001,95,255,66,10001,1338,29,95,1532892064,2014223716,256,26,65,2014223715,2014223716,95,0,0,1532892063,1,1532892064,64,29,26,97,2014223714,10001,5,96,66,10001,1337,28,1338,29,2014223714,26,65]",
                "sol": "[uint256(26),uint256(255),uint256(4),uint256(9999),uint256(1),uint256(10000),uint256(28),uint256(95),uint256(66),uint256(1),uint256(1),uint256(10000),uint256(2),uint256(9999),uint256(29),uint256(5),uint256(6),uint256(1336),uint256(2),uint256(1338),uint256(2014223716),uint256(29),uint256(2014223715),uint256(1338),uint256(26),uint256(64),uint256(10001),uint256(95),uint256(255),uint256(66),uint256(10001),uint256(1338),uint256(29),uint256(95),uint256(1532892064),uint256(2014223716),uint256(256),uint256(26),uint256(65),uint256(2014223715),uint256(2014223716),uint256(95),uint256(0),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(64),uint256(29),uint256(26),uint256(97),uint256(2014223714),uint256(10001),uint256(5),uint256(96),uint256(66),uint256(10001),uint256(1337),uint256(28),uint256(1338),uint256(29),uint256(2014223714),uint256(26),uint256(65)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[26,255,4,9999,1,10000,28,95,66,1,1,10000,2,9999,29,5,6,1336,2,1338,2014223716,29,2014223715,1338,26,64,10001,95,255,66,10001,1338,29,95,1532892064,2014223716,256,26,65,2014223715,2014223716,95,0,0,1532892063,1,1532892064,64,29,26,97,2014223714,10001,5,96,66,10001,1337,28,1338,29,2014223714,26,65]",
                "sol": "[uint256(26),uint256(255),uint256(4),uint256(9999),uint256(1),uint256(10000),uint256(28),uint256(95),uint256(66),uint256(1),uint256(1),uint256(10000),uint256(2),uint256(9999),uint256(29),uint256(5),uint256(6),uint256(1336),uint256(2),uint256(1338),uint256(2014223716),uint256(29),uint256(2014223715),uint256(1338),uint256(26),uint256(64),uint256(10001),uint256(95),uint256(255),uint256(66),uint256(10001),uint256(1338),uint256(29),uint256(95),uint256(1532892064),uint256(2014223716),uint256(256),uint256(26),uint256(65),uint256(2014223715),uint256(2014223716),uint256(95),uint256(0),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(64),uint256(29),uint256(26),uint256(97),uint256(2014223714),uint256(10001),uint256(5),uint256(96),uint256(66),uint256(10001),uint256(1337),uint256(28),uint256(1338),uint256(29),uint256(2014223714),uint256(26),uint256(65)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.783ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.784ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[3],accounts[7],accounts[8],accounts[7],accounts[6],accounts[0],accounts[9],accounts[2],accounts[0],accounts[7],accounts[5],accounts[3],accounts[0],accounts[4],accounts[1],accounts[3],accounts[1],accounts[4],accounts[6],accounts[8],accounts[3],accounts[0],accounts[2],accounts[9],accounts[3],accounts[5],accounts[7],accounts[3]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[3],accounts[7],accounts[8],accounts[7],accounts[6],accounts[0],accounts[9],accounts[2],accounts[0],accounts[7],accounts[5],accounts[3],accounts[0],accounts[4],accounts[1],accounts[3],accounts[1],accounts[4],accounts[6],accounts[8],accounts[3],accounts[0],accounts[2],accounts[9],accounts[3],accounts[5],accounts[7],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[1],accounts[3],accounts[7],accounts[8],accounts[7],accounts[6],accounts[0],accounts[9],accounts[2],accounts[0],accounts[7],accounts[5],accounts[3],accounts[0],accounts[4],accounts[1],accounts[3],accounts[1],accounts[4],accounts[6],accounts[8],accounts[3],accounts[0],accounts[2],accounts[9],accounts[3],accounts[5],accounts[7],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.788ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.788ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+195",
              "sol": "block.timestamp+195"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+195",
                "sol": "block.timestamp+195"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.793ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.798ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.802ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.810ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.813ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.818ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.818ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.819ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[0],accounts[0],accounts[5],accounts[6],accounts[0],accounts[8],accounts[0],accounts[9],accounts[6],accounts[1],accounts[3],accounts[5],accounts[3],accounts[4],accounts[0],accounts[9],accounts[1],accounts[8],accounts[4],accounts[6],accounts[5],accounts[9],accounts[8],accounts[6],accounts[9],accounts[1],accounts[0],accounts[8],accounts[1],accounts[1],accounts[3],accounts[4],accounts[0],accounts[2],accounts[4],accounts[6],accounts[3],accounts[0],accounts[1],accounts[9],accounts[8],accounts[0],accounts[4],accounts[4],accounts[9],accounts[4],accounts[6],accounts[3],accounts[3],accounts[1],accounts[5],accounts[1],accounts[5],accounts[2],accounts[4],accounts[6],accounts[9],accounts[5],accounts[7],accounts[9],accounts[7],accounts[7],accounts[2],accounts[8],accounts[7],accounts[5],accounts[2],accounts[1],accounts[7],accounts[7],accounts[0],accounts[8],accounts[4],accounts[0],accounts[1],accounts[8],accounts[0],accounts[8],accounts[3],accounts[8],accounts[2],accounts[7],accounts[6],accounts[7],accounts[2],accounts[2],accounts[0],accounts[4],accounts[1],accounts[6],accounts[9],accounts[4],accounts[2],accounts[5],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[0],accounts[0],accounts[5],accounts[6],accounts[0],accounts[8],accounts[0],accounts[9],accounts[6],accounts[1],accounts[3],accounts[5],accounts[3],accounts[4],accounts[0],accounts[9],accounts[1],accounts[8],accounts[4],accounts[6],accounts[5],accounts[9],accounts[8],accounts[6],accounts[9],accounts[1],accounts[0],accounts[8],accounts[1],accounts[1],accounts[3],accounts[4],accounts[0],accounts[2],accounts[4],accounts[6],accounts[3],accounts[0],accounts[1],accounts[9],accounts[8],accounts[0],accounts[4],accounts[4],accounts[9],accounts[4],accounts[6],accounts[3],accounts[3],accounts[1],accounts[5],accounts[1],accounts[5],accounts[2],accounts[4],accounts[6],accounts[9],accounts[5],accounts[7],accounts[9],accounts[7],accounts[7],accounts[2],accounts[8],accounts[7],accounts[5],accounts[2],accounts[1],accounts[7],accounts[7],accounts[0],accounts[8],accounts[4],accounts[0],accounts[1],accounts[8],accounts[0],accounts[8],accounts[3],accounts[8],accounts[2],accounts[7],accounts[6],accounts[7],accounts[2],accounts[2],accounts[0],accounts[4],accounts[1],accounts[6],accounts[9],accounts[4],accounts[2],accounts[5],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[8],accounts[0],accounts[0],accounts[5],accounts[6],accounts[0],accounts[8],accounts[0],accounts[9],accounts[6],accounts[1],accounts[3],accounts[5],accounts[3],accounts[4],accounts[0],accounts[9],accounts[1],accounts[8],accounts[4],accounts[6],accounts[5],accounts[9],accounts[8],accounts[6],accounts[9],accounts[1],accounts[0],accounts[8],accounts[1],accounts[1],accounts[3],accounts[4],accounts[0],accounts[2],accounts[4],accounts[6],accounts[3],accounts[0],accounts[1],accounts[9],accounts[8],accounts[0],accounts[4],accounts[4],accounts[9],accounts[4],accounts[6],accounts[3],accounts[3],accounts[1],accounts[5],accounts[1],accounts[5],accounts[2],accounts[4],accounts[6],accounts[9],accounts[5],accounts[7],accounts[9],accounts[7],accounts[7],accounts[2],accounts[8],accounts[7],accounts[5],accounts[2],accounts[1],accounts[7],accounts[7],accounts[0],accounts[8],accounts[4],accounts[0],accounts[1],accounts[8],accounts[0],accounts[8],accounts[3],accounts[8],accounts[2],accounts[7],accounts[6],accounts[7],accounts[2],accounts[2],accounts[0],accounts[4],accounts[1],accounts[6],accounts[9],accounts[4],accounts[2],accounts[5],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.821ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T22:14:04.822ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T22:14:04.822ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}