,{
  "2020-11-10T19:26:22.516ZPower.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.725ZProxyMathUtils.testvalidPerc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testvalidPerc(uint256)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.725ZProxyMathUtils.testpercOf0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpercOf0(uint256,uint256,uint256) WHEN PERC_DIVISOR>0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.727ZProxyMathUtils.testpercOf1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpercOf1(uint256,uint256) WHEN PERC_DIVISOR>0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.728ZProxyMathUtils.testpercPoints": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpercPoints(uint256,uint256) WHEN _fracDenom>0",
          "parameters": [
            {
              "js": "74",
              "sol": "74"
            },
            {
              "js": "112",
              "sol": "112"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpercPoints(uint256,uint256) when NOT comply with: _fracDenom > 0",
            "parameters": [
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.729ZRelevantTokenMock.roundNum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute roundNum()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.730ZRelevantTokenMock.setRoundNum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRoundNum(uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.731ZRelevantTokenMock.setLastRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setLastRound(uint256,uint256,uint256) WHEN msg.sender==_owner,_roundNum<currentRound",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "35",
              "sol": "35"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setLastRound(uint256,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.743ZRelevantTokenMock.emptyDevBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute emptyDevBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.745ZRelevantToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(string,uint8,string,string,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "32735",
              "sol": "32735"
            },
            {
              "js": "113",
              "sol": "113"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.750ZRelevantToken.releaseTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "114-131",
          "restrictions": [
            "lastRound >= targetRound"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute releaseTokens() WHEN lastRound>=targetRound,lastRound<currentRound",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail releaseTokens() when NOT comply with: lastRound < currentRound",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "121-130",
          "restrictions": [
            "currentRound < targetRound",
            "lastRound < targetRound"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute releaseTokens() WHEN currentRound<targetRound,lastRound<targetRound,lastRound<currentRound",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail releaseTokens() when NOT comply with: lastRound < currentRound",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "124-130",
          "restrictions": [
            "currentRound >= targetRound",
            "lastRound < targetRound"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute releaseTokens() WHEN currentRound>=targetRound,lastRound<targetRound,lastRound<currentRound",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail releaseTokens() when NOT comply with: lastRound < currentRound",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.770ZRelevantToken.partialSum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute partialSum(uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.770ZRelevantToken.allocateRewards": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allocateRewards(uint256) WHEN msg.sender==_owner,_rewards<=rewardFund",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail allocateRewards(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail allocateRewards(uint256) when NOT comply with: _rewards <= rewardFund",
            "parameters": [
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.784ZRelevantToken.allocateAirdrops": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allocateAirdrops(uint256) WHEN msg.sender==_owner,_rewards<=airdropFund",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail allocateAirdrops(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail allocateAirdrops(uint256) when NOT comply with: _rewards <= airdropFund",
            "parameters": [
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.794ZRelevantToken.claimTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(uint256,bytes) WHEN allocatedRewards>=_amount,_owner==recOwner",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[197,82,142,55,61,239,239,160,116,253,204,121,92,110,154,173,210,20,162,247,213,225,120,80,226,180,64,130,76,203,214,159]",
              "sol": "abi.encode(\"197,82,142,55,61,239,239,160,116,253,204,121,92,110,154,173,210,20,162,247,213,225,120,80,226,180,64,130,76,203,214,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(uint256,bytes) when NOT comply with: allocatedRewards >= _amount",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[197,82,142,55,61,239,239,160,116,253,204,121,92,110,154,173,210,20,162,247,213,225,120,80,226,180,64,130,76,203,214,159]",
                "sol": "abi.encode(\"197,82,142,55,61,239,239,160,116,253,204,121,92,110,154,173,210,20,162,247,213,225,120,80,226,180,64,130,76,203,214,159\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.806ZRelevantToken.nonceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute nonceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.807ZRelevantToken.roundNum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute roundNum() WHEN roundLength>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail roundNum() when NOT comply with: roundLength > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.814ZRelevantToken.roundsSincleLast": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute roundsSincleLast()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.816ZProxyRelevantToken.testpreMintTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreMintTokens(uint256)",
          "parameters": [
            {
              "js": "53",
              "sol": "53"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.817ZProxyRelevantToken.testnewTokensForConstantPhase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForConstantPhase(uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.818ZProxyRelevantToken.testnewTokensForDecayPhase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "164-166",
          "restrictions": [
            "lastRound == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN lastRound==0",
          "parameters": [
            {
              "js": "85",
              "sol": "85"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "lastRound != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN lastRound!=0",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "167-180",
          "restrictions": [
            "_roundsPassed < 100000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN _roundsPassed<100000",
          "parameters": [
            {
              "js": "44",
              "sol": "44"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "175-180",
          "restrictions": [
            "_roundsPassed >= 100000",
            "lastRound != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN _roundsPassed>=100000,lastRound!=0",
          "parameters": [
            {
              "js": "982079",
              "sol": "982079"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.822ZProxyRelevantToken.testnewTokensForCrossingDecay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForCrossingDecay()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.823ZProxyRelevantToken.testnewTokensForCrossingConst": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForCrossingConst(uint256)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.823ZProxyRelevantToken.testsplitRewards": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsplitRewards(uint256)",
          "parameters": [
            {
              "js": "982081",
              "sol": "982081"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.824ZProxyRelevantToken.testtoDevFund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoDevFund()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.827ZProxyPower.testpower": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpower(uint256,uint256,uint32,uint32)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.828ZProxyPower.testln": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testln(uint256,uint256) WHEN _numerator<=MAX_NUM",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testln(uint256,uint256) when NOT comply with: _numerator <= MAX_NUM",
            "parameters": [
              {
                "js": "680564733841876926926749214863536422913",
                "sol": "680564733841876926926749214863536422913"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:26:29.829ZProxyPower.testfloorLog2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloorLog2(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.829ZProxyPower.testfindPositionInMaxExpArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "272-273",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "274-275",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x",
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x,maxExpArray<_x",
          "parameters": [
            {
              "js": "74",
              "sol": "74"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:26:29.831ZProxyPower.testfixedExp": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfixedExp(uint256,uint8)",
          "parameters": [
            {
              "js": "112",
              "sol": "112"
            },
            {
              "js": "105",
              "sol": "105"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}