,{
  "2020-11-13T21:13:22.097ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:15:50.335ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:16:27.683ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:16:46.330ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:17:03.602ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:17:21.029ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:17:38.171ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:17:55.642ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:18:12.968ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:18:30.600ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:18:47.962ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.827ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.830ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [217,199,217,150,49,56,11,164,125,133,227,107,109,161,250,83,185,23,249,242,171,222,209,131,41,12,163,16,187,31,239,109],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"217,199,217,150,49,56,11,164,125,133,227,107,109,161,250,83,185,23,249,242,171,222,209,131,41,12,163,16,187,31,239,109\"),161)"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.831ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [132,90,205,51,240,56,12,154,122,18,251,13,103,161,181,175,188,66,56,215,133,197,72,23,120,81,132,255,58,148,63,190],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"132,90,205,51,240,56,12,154,122,18,251,13,103,161,181,175,188,66,56,215,133,197,72,23,120,81,132,255,58,148,63,190\"),95)"
            },
            {
              "js": "[114,143,137,161,49,62,111,79,148,119,45,29,15,255,93,208,76,153,214,154,77,81,217,139,70,2,44,8,10,173,87,75]",
              "sol": "abi.encode(\"114,143,137,161,49,62,111,79,148,119,45,29,15,255,93,208,76,153,214,154,77,81,217,139,70,2,44,8,10,173,87,75\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.831ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [52,15,236,240,141,49,39,38,12,95,94,31,249,211,47,194,67,239,109,177,41,140,30,227,134,143,166,124,250,77,61,159],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"52,15,236,240,141,49,39,38,12,95,94,31,249,211,47,194,67,239,109,177,41,140,30,227,134,143,166,124,250,77,61,159\"),24)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.832ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [202,207,179,65,139,162,202,139,160,109,202,42,52,139,208,217,246,177,51,40,179,205,21,216,234,61,155,204,229,136,202,236],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"202,207,179,65,139,162,202,139,160,109,202,42,52,139,208,217,246,177,51,40,179,205,21,216,234,61,155,204,229,136,202,236\"),256)"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.835ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [18,187,175,137,242,174,104,151,212,101,188,200,188,140,85,231,134,168,199,162,23,160,119,214,148,86,164,102,31,26,54,244],\"capacity\": 30}",
              "sol": "Buffer.buffer(abi.encode(\"18,187,175,137,242,174,104,151,212,101,188,200,188,140,85,231,134,168,199,162,23,160,119,214,148,86,164,102,31,26,54,244\"),30)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.836ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [2,209,207,86,160,113,252,174,134,191,146,145,46,146,8,79,97,103,111,158,219,96,245,169,125,59,207,126,73,230,159,244],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"2,209,207,86,160,113,252,174,134,191,146,145,46,146,8,79,97,103,111,158,219,96,245,169,125,59,207,126,73,230,159,244\"),257)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [96,31,165,80,7,109,157,167,117,90,242,234,154,172,14,81,183,171,186,49,141,98,58,45,217,126,146,223,223,219,156,199],\"capacity\": 46}",
              "sol": "Buffer.buffer(abi.encode(\"96,31,165,80,7,109,157,167,117,90,242,234,154,172,14,81,183,171,186,49,141,98,58,45,217,126,146,223,223,219,156,199\"),46)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.839ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [59,242,90,250,165,57,128,50,122,215,99,16,50,76,253,103,74,96,195,20,76,204,60,84,145,28,73,54,133,61,6,237],\"capacity\": 200000}",
              "sol": "Buffer.buffer(abi.encode(\"59,242,90,250,165,57,128,50,122,215,99,16,50,76,253,103,74,96,195,20,76,204,60,84,145,28,73,54,133,61,6,237\"),200000)"
            },
            {
              "js": "[97,170,193,196,174,56,219,198,7,207,145,0,142,81,99,209,43,130,42,237,217,228,149,56,182,184,159,8,201,78,241,83]",
              "sol": "abi.encode(\"97,170,193,196,174,56,219,198,7,207,145,0,142,81,99,209,43,130,42,237,217,228,149,56,182,184,159,8,201,78,241,83\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.839ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [82,133,219,117,121,129,195,110,149,231,168,71,88,205,29,153,14,219,219,90,245,55,69,125,6,163,79,132,231,135,234,2],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"82,133,219,117,121,129,195,110,149,231,168,71,88,205,29,153,14,219,219,90,245,55,69,125,6,163,79,132,231,135,234,2\"),4)"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.840ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [199,199,123,26,228,254,127,146,143,132,18,70,226,225,78,2,70,104,141,119,223,22,116,239,170,131,128,17,181,8,17,166],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"199,199,123,26,228,254,127,146,143,132,18,70,226,225,78,2,70,104,141,119,223,22,116,239,170,131,128,17,181,8,17,166\"),129)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.841ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [80,28,41,46,108,6,62,71,123,159,110,197,107,154,20,31,207,232,176,20,154,234,70,88,142,55,23,40,141,247,56,155],\"capacity\": 10000}",
              "sol": "Buffer.buffer(abi.encode(\"80,28,41,46,108,6,62,71,123,159,110,197,107,154,20,31,207,232,176,20,154,234,70,88,142,55,23,40,141,247,56,155\"),10000)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.843ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [129,98,221,172,135,132,173,106,98,131,241,143,205,91,184,229,23,212,141,63,4,179,82,175,227,137,25,140,146,4,253,141],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"129,98,221,172,135,132,173,106,98,131,241,143,205,91,184,229,23,212,141,63,4,179,82,175,227,137,25,140,146,4,253,141\"),1024)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.846ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.846ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.846ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.848ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.849ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.850ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "98",
                "sol": "98"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.850ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.851ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.852ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.852ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.853ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[39,234,61,198,212,241,40,115,89,144,90,50,69,89,62,94,136,122,146,219,122,15,230,17,185,138,178,230,41,130,39,46]",
              "sol": "stringToBytes32(\"39,234,61,198,212,241,40,115,89,144,90,50,69,89,62,94,136,122,146,219,122,15,230,17,185,138,178,230,41,130,39,46\")"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.855ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[81,189,176,39,37,37,62,100,224,188,152,38,212,10,131,34,1,7,35,149,234,116,161,131,36,93,255,78,91,36,70,200]",
              "sol": "stringToBytes32(\"81,189,176,39,37,37,62,100,224,188,152,38,212,10,131,34,1,7,35,149,234,116,161,131,36,93,255,78,91,36,70,200\")"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[117,228,11,116,14,175,208,154,254,58,23,193,31,77,181,217,81,89,109,60,178,155,65,187,223,70,246,23,221,214,225,194]",
              "sol": "abi.encode(\"117,228,11,116,14,175,208,154,254,58,23,193,31,77,181,217,81,89,109,60,178,155,65,187,223,70,246,23,221,214,225,194\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.899ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.900ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.900ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.900ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.901ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.901ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.902ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.902ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.904ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.904ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.905ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.905ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.905ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.906ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.906ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"call updateEthPrice\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Example\",\"0\",\"updateEthPrice called\",\"costUSD\",\"IsLibrary\",\"costUSD\",\"listingID arg\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Example\"),string(\"0\"),string(\"updateEthPrice called\"),string(\"costUSD\"),string(\"IsLibrary\"),string(\"costUSD\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.907ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"IsLibrary\",\"ETH\",\"PayableExample\"]",
              "sol": "[string(\"IsLibrary\"),string(\"ETH\"),string(\"PayableExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.908ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"updateEthPrice called\",\"41xhfk\",\"listingID arg\",\"P\",\"409m2i\",\"0\",\"call updateEthPrice\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"41xhfk\"),string(\"listingID arg\"),string(\"P\"),string(\"409m2i\"),string(\"0\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.908ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"P\",\"RevertWithReason\",\"Example\",\"call updateEthPrice\",\"updateEthPrice called\"]",
              "sol": "[string(\"P\"),string(\"RevertWithReason\"),string(\"Example\"),string(\"call updateEthPrice\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.909ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.909ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.910ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.910ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"costUSD\"]",
              "sol": "[string(\"costUSD\")]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.911ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"jt0fyr\"",
              "sol": "\"jt0fyr\""
            },
            {
              "js": "[\"RevertWithReason\",\"updateEthPrice called\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.912ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"L\",\"qgz88c\"]",
              "sol": "[string(\"L\"),string(\"qgz88c\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.912ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"fmakip\"",
              "sol": "\"fmakip\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.913ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"updateEthPrice called\",\"UsesExample\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"UsesExample\")]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.914ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"mjw2aj\"",
              "sol": "\"mjw2aj\""
            },
            {
              "js": "[\"qgz88c\",\"UsesExample\",\"call updateEthPrice\"]",
              "sol": "[string(\"qgz88c\"),string(\"UsesExample\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.914ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"trade.totalPrice\",\"\",\"PayableExample\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"\"),string(\"PayableExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.915ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"PayableExample\",\"\",\"0\"]",
              "sol": "[string(\"PayableExample\"),string(\"\"),string(\"0\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.915ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"call updateEthPrice\",\"Oraclize query was sent, standing by for the answer...\",\"jt0fyr\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"jt0fyr\")]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.916ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0\",\"41xhfk\",\"mjw2aj\",\"fmakip\"]",
              "sol": "[string(\"0\"),string(\"41xhfk\"),string(\"mjw2aj\"),string(\"fmakip\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.916ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"sqxwpm\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"fmakip\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"sqxwpm\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"fmakip\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.917ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"sqxwpm\",\"\\x19Ethereum Signed Message:\\n32\",\"fmakip\",\"fmakip\"]",
              "sol": "[string(\"sqxwpm\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"fmakip\"),string(\"fmakip\")]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.917ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"qgz88c\"",
              "sol": "\"qgz88c\""
            },
            {
              "js": "[\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"PayableExample\",\"UsesExample\"]",
              "sol": "[string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"PayableExample\"),string(\"UsesExample\")]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.918ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"PayableExample\",\"\",\"call updateEthPrice\",\"Oraclize query was sent, standing by for the answer...\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"PayableExample\"),string(\"\"),string(\"call updateEthPrice\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.918ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"PayableExample\",\"\",\"updateEthPrice called\",\"kjr4wt\",\"P\"]",
              "sol": "[string(\"PayableExample\"),string(\"\"),string(\"updateEthPrice called\"),string(\"kjr4wt\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.919ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"jt0fyr\"",
              "sol": "\"jt0fyr\""
            },
            {
              "js": "[\"kjr4wt\",\"UsesExample\",\"41xhfk\",\"P\",\"fmakip\"]",
              "sol": "[string(\"kjr4wt\"),string(\"UsesExample\"),string(\"41xhfk\"),string(\"P\"),string(\"fmakip\")]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.920ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"qgz88c\",\"sqxwpm\",\"fmakip\",\"fmakip\",\"UsesExample\"]",
              "sol": "[string(\"qgz88c\"),string(\"sqxwpm\"),string(\"fmakip\"),string(\"fmakip\"),string(\"UsesExample\")]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.921ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"qgz88c\"",
              "sol": "\"qgz88c\""
            },
            {
              "js": "[[69,82,213,153,13,107,246,206,51,141,22,44,59,239,176,197,47,163,147,10,151,62,143,129,120,242,42,186,193,75,20,29],[37,183,72,191,233,67,240,110,77,172,201,242,102,76,202,98,204,200,1,136,25,215,39,65,139,128,167,250,222,16,253,103]]",
              "sol": "[bytes(abi.encode(\"69,82,213,153,13,107,246,206,51,141,22,44,59,239,176,197,47,163,147,10,151,62,143,129,120,242,42,186,193,75,20,29\")),bytes(abi.encode(\"37,183,72,191,233,67,240,110,77,172,201,242,102,76,202,98,204,200,1,136,25,215,39,65,139,128,167,250,222,16,253,103\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.922ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[90,122,36,35,177,148,172,218,165,8,4,109,153,227,248,114,253,51,203,130,233,174,129,3,15,119,49,121,232,112,245,248],[155,42,198,75,131,50,255,38,11,159,254,169,245,140,234,103,139,121,164,64,233,17,20,22,103,91,53,129,146,210,195,27],[183,226,32,55,5,4,1,248,218,172,64,234,87,238,148,38,165,51,72,89,60,227,99,102,218,15,48,24,62,246,119,248],[251,87,56,96,122,241,116,193,3,230,228,244,28,68,98,187,151,38,124,112,120,6,201,87,49,171,28,200,132,177,55,92],[172,238,149,40,227,205,22,150,70,134,29,190,118,246,212,216,90,124,130,109,69,211,221,194,22,235,62,125,183,127,209,127]]",
              "sol": "[bytes(abi.encode(\"90,122,36,35,177,148,172,218,165,8,4,109,153,227,248,114,253,51,203,130,233,174,129,3,15,119,49,121,232,112,245,248\")),bytes(abi.encode(\"155,42,198,75,131,50,255,38,11,159,254,169,245,140,234,103,139,121,164,64,233,17,20,22,103,91,53,129,146,210,195,27\")),bytes(abi.encode(\"183,226,32,55,5,4,1,248,218,172,64,234,87,238,148,38,165,51,72,89,60,227,99,102,218,15,48,24,62,246,119,248\")),bytes(abi.encode(\"251,87,56,96,122,241,116,193,3,230,228,244,28,68,98,187,151,38,124,112,120,6,201,87,49,171,28,200,132,177,55,92\")),bytes(abi.encode(\"172,238,149,40,227,205,22,150,70,134,29,190,118,246,212,216,90,124,130,109,69,211,221,194,22,235,62,125,183,127,209,127\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.922ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[125,74,189,237,43,105,87,142,15,136,78,51,202,84,36,17,85,201,35,86,12,119,229,100,154,120,220,0,190,101,231,9],[232,97,174,39,81,144,85,124,128,238,64,79,91,27,182,25,50,200,155,250,73,6,0,193,67,15,175,44,172,11,219,35],[255,171,97,56,67,86,223,84,189,127,189,233,187,108,250,148,95,9,218,98,51,255,156,110,102,120,106,29,226,37,163,225],[119,153,187,73,210,226,65,227,72,149,131,20,36,208,55,84,245,12,149,192,176,111,118,111,20,156,234,68,6,140,239,41],[23,37,82,196,83,74,137,222,115,86,94,161,252,217,130,135,200,228,35,197,225,152,211,243,185,40,190,142,151,173,94,218],[238,19,161,184,139,242,154,32,169,140,204,185,212,39,178,16,101,240,41,12,85,154,220,249,107,14,57,152,5,134,171,40],[102,166,68,190,51,228,214,116,38,36,106,146,242,104,21,225,109,177,58,172,232,182,96,110,2,178,1,212,192,23,168,194]]",
              "sol": "[bytes(abi.encode(\"125,74,189,237,43,105,87,142,15,136,78,51,202,84,36,17,85,201,35,86,12,119,229,100,154,120,220,0,190,101,231,9\")),bytes(abi.encode(\"232,97,174,39,81,144,85,124,128,238,64,79,91,27,182,25,50,200,155,250,73,6,0,193,67,15,175,44,172,11,219,35\")),bytes(abi.encode(\"255,171,97,56,67,86,223,84,189,127,189,233,187,108,250,148,95,9,218,98,51,255,156,110,102,120,106,29,226,37,163,225\")),bytes(abi.encode(\"119,153,187,73,210,226,65,227,72,149,131,20,36,208,55,84,245,12,149,192,176,111,118,111,20,156,234,68,6,140,239,41\")),bytes(abi.encode(\"23,37,82,196,83,74,137,222,115,86,94,161,252,217,130,135,200,228,35,197,225,152,211,243,185,40,190,142,151,173,94,218\")),bytes(abi.encode(\"238,19,161,184,139,242,154,32,169,140,204,185,212,39,178,16,101,240,41,12,85,154,220,249,107,14,57,152,5,134,171,40\")),bytes(abi.encode(\"102,166,68,190,51,228,214,116,38,36,106,146,242,104,21,225,109,177,58,172,232,182,96,110,2,178,1,212,192,23,168,194\"))]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.923ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[103,225,180,186,125,130,91,226,69,108,73,102,0,87,129,146,17,179,30,28,102,181,152,217,12,138,58,116,75,43,129,173],[124,87,46,148,165,125,131,68,34,247,142,201,23,120,69,158,19,239,69,114,10,123,118,49,11,152,9,214,245,254,178,176]]",
              "sol": "[bytes(abi.encode(\"103,225,180,186,125,130,91,226,69,108,73,102,0,87,129,146,17,179,30,28,102,181,152,217,12,138,58,116,75,43,129,173\")),bytes(abi.encode(\"124,87,46,148,165,125,131,68,34,247,142,201,23,120,69,158,19,239,69,114,10,123,118,49,11,152,9,214,245,254,178,176\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.924ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[42,133,207,16,233,99,72,224,211,124,144,217,54,198,186,161,138,255,42,123,71,55,38,18,7,97,105,131,76,87,19,90]]",
              "sol": "[bytes(abi.encode(\"42,133,207,16,233,99,72,224,211,124,144,217,54,198,186,161,138,255,42,123,71,55,38,18,7,97,105,131,76,87,19,90\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.924ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[137,51,142,247,91,183,203,240,121,212,220,199,150,116,188,111,27,254,9,165,55,139,89,69,81,122,132,101,60,136,237,72]]",
              "sol": "[bytes(abi.encode(\"137,51,142,247,91,183,203,240,121,212,220,199,150,116,188,111,27,254,9,165,55,139,89,69,81,122,132,101,60,136,237,72\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.925ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[202,138,170,187,122,209,84,221,45,84,62,179,34,106,10,230,158,185,13,132,16,160,74,154,31,122,221,231,154,10,74,249]]",
              "sol": "[bytes(abi.encode(\"202,138,170,187,122,209,84,221,45,84,62,179,34,106,10,230,158,185,13,132,16,160,74,154,31,122,221,231,154,10,74,249\"))]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.925ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[237,0,44,156,158,133,54,112,196,83,27,158,167,116,244,42,35,80,196,105,158,126,118,251,16,135,213,247,221,183,30,48]]",
              "sol": "[bytes(abi.encode(\"237,0,44,156,158,133,54,112,196,83,27,158,167,116,244,42,35,80,196,105,158,126,118,251,16,135,213,247,221,183,30,48\"))]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.926ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[21,14,77,133,29,12,156,24,188,189,211,227,40,81,251,83,247,235,148,216,126,222,178,123,56,200,102,173,88,122,181,202],[141,28,166,19,139,126,226,89,162,227,86,81,4,125,213,143,31,1,201,144,146,159,137,6,50,54,83,244,59,149,116,49]]",
              "sol": "[bytes(abi.encode(\"21,14,77,133,29,12,156,24,188,189,211,227,40,81,251,83,247,235,148,216,126,222,178,123,56,200,102,173,88,122,181,202\")),bytes(abi.encode(\"141,28,166,19,139,126,226,89,162,227,86,81,4,125,213,143,31,1,201,144,146,159,137,6,50,54,83,244,59,149,116,49\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.927ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[67,126,146,79,86,22,130,203,241,206,117,200,243,228,29,173,44,89,167,198,165,226,52,165,41,157,198,197,10,183,137,7],[1,115,45,171,106,210,196,229,117,87,144,74,167,214,28,237,122,165,145,180,87,140,175,35,187,242,90,90,92,144,123,182]]",
              "sol": "[bytes(abi.encode(\"67,126,146,79,86,22,130,203,241,206,117,200,243,228,29,173,44,89,167,198,165,226,52,165,41,157,198,197,10,183,137,7\")),bytes(abi.encode(\"1,115,45,171,106,210,196,229,117,87,144,74,167,214,28,237,122,165,145,180,87,140,175,35,187,242,90,90,92,144,123,182\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.928ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[177,144,44,158,112,51,92,196,41,253,151,194,229,8,198,0,38,81,159,93,34,85,255,224,60,120,193,216,96,141,129,176],[47,109,242,82,195,199,125,201,88,157,162,15,69,214,151,76,218,253,40,156,98,26,144,57,13,163,164,150,47,158,57,67]]",
              "sol": "[bytes(abi.encode(\"177,144,44,158,112,51,92,196,41,253,151,194,229,8,198,0,38,81,159,93,34,85,255,224,60,120,193,216,96,141,129,176\")),bytes(abi.encode(\"47,109,242,82,195,199,125,201,88,157,162,15,69,214,151,76,218,253,40,156,98,26,144,57,13,163,164,150,47,158,57,67\"))]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.928ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[51,115,95,250,100,65,179,132,172,237,28,59,97,229,5,53,117,89,156,160,84,230,48,177,128,82,209,72,106,204,206,66],[201,13,86,58,148,126,174,62,232,132,200,186,214,199,211,89,237,204,36,48,179,83,241,142,200,188,140,186,118,227,132,89]]",
              "sol": "[bytes(abi.encode(\"51,115,95,250,100,65,179,132,172,237,28,59,97,229,5,53,117,89,156,160,84,230,48,177,128,82,209,72,106,204,206,66\")),bytes(abi.encode(\"201,13,86,58,148,126,174,62,232,132,200,186,214,199,211,89,237,204,36,48,179,83,241,142,200,188,140,186,118,227,132,89\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.929ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"sqxwpm\"",
              "sol": "\"sqxwpm\""
            },
            {
              "js": "[[2,147,241,26,129,132,233,162,32,7,41,129,145,4,11,56,38,116,192,254,43,192,82,88,55,245,150,112,117,216,188,68],[94,42,122,115,135,22,89,190,243,134,79,225,236,234,161,2,196,92,74,250,82,94,139,115,62,1,248,217,252,192,121,199],[0,166,94,100,249,131,203,20,152,97,2,135,48,46,158,19,112,141,29,145,165,71,154,19,125,94,104,154,72,56,129,121]]",
              "sol": "[bytes(abi.encode(\"2,147,241,26,129,132,233,162,32,7,41,129,145,4,11,56,38,116,192,254,43,192,82,88,55,245,150,112,117,216,188,68\")),bytes(abi.encode(\"94,42,122,115,135,22,89,190,243,134,79,225,236,234,161,2,196,92,74,250,82,94,139,115,62,1,248,217,252,192,121,199\")),bytes(abi.encode(\"0,166,94,100,249,131,203,20,152,97,2,135,48,46,158,19,112,141,29,145,165,71,154,19,125,94,104,154,72,56,129,121\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.930ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[61,246,153,18,247,165,100,40,171,199,132,245,107,92,150,85,105,11,79,8,18,127,227,97,116,196,41,160,49,9,165,30],[78,177,179,121,141,213,40,178,44,87,69,7,102,99,153,144,110,62,167,160,96,125,246,255,1,46,132,173,82,106,246,24],[148,218,17,153,131,95,224,106,239,122,225,91,174,174,132,155,86,156,217,61,22,85,2,224,111,41,207,143,191,204,109,79]]",
              "sol": "[bytes(abi.encode(\"61,246,153,18,247,165,100,40,171,199,132,245,107,92,150,85,105,11,79,8,18,127,227,97,116,196,41,160,49,9,165,30\")),bytes(abi.encode(\"78,177,179,121,141,213,40,178,44,87,69,7,102,99,153,144,110,62,167,160,96,125,246,255,1,46,132,173,82,106,246,24\")),bytes(abi.encode(\"148,218,17,153,131,95,224,106,239,122,225,91,174,174,132,155,86,156,217,61,22,85,2,224,111,41,207,143,191,204,109,79\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.931ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[145,57,131,220,194,145,194,138,214,236,155,158,191,161,219,238,93,30,244,110,155,235,15,246,234,43,111,169,222,55,43,243],[187,17,99,9,5,178,197,156,238,169,133,39,198,113,180,222,29,84,156,21,155,116,76,68,38,199,161,62,200,168,9,89],[222,20,83,158,252,247,0,214,250,18,91,167,157,151,142,22,23,143,48,17,53,147,123,107,228,250,19,187,4,128,241,29]]",
              "sol": "[bytes(abi.encode(\"145,57,131,220,194,145,194,138,214,236,155,158,191,161,219,238,93,30,244,110,155,235,15,246,234,43,111,169,222,55,43,243\")),bytes(abi.encode(\"187,17,99,9,5,178,197,156,238,169,133,39,198,113,180,222,29,84,156,21,155,116,76,68,38,199,161,62,200,168,9,89\")),bytes(abi.encode(\"222,20,83,158,252,247,0,214,250,18,91,167,157,151,142,22,23,143,48,17,53,147,123,107,228,250,19,187,4,128,241,29\"))]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.932ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[205,125,13,189,246,42,9,232,49,196,98,246,178,36,193,44,36,212,251,166,144,104,233,184,119,56,123,132,163,31,199,173],[137,69,208,221,231,86,207,159,194,231,88,251,147,225,236,88,130,236,241,4,42,234,108,218,22,242,207,240,24,128,138,157],[76,194,94,250,198,229,120,96,61,218,5,109,251,58,254,14,24,91,155,128,5,177,246,170,65,44,73,109,81,43,202,92]]",
              "sol": "[bytes(abi.encode(\"205,125,13,189,246,42,9,232,49,196,98,246,178,36,193,44,36,212,251,166,144,104,233,184,119,56,123,132,163,31,199,173\")),bytes(abi.encode(\"137,69,208,221,231,86,207,159,194,231,88,251,147,225,236,88,130,236,241,4,42,234,108,218,22,242,207,240,24,128,138,157\")),bytes(abi.encode(\"76,194,94,250,198,229,120,96,61,218,5,109,251,58,254,14,24,91,155,128,5,177,246,170,65,44,73,109,81,43,202,92\"))]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.933ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[224,153,1,189,244,76,211,125,70,96,9,173,45,17,249,232,11,211,45,182,122,30,39,135,28,199,3,69,114,252,229,48],[38,140,27,134,34,178,127,206,206,45,255,237,126,116,218,7,200,136,179,104,72,106,29,229,5,33,127,39,139,78,2,5],[142,39,181,250,56,136,19,45,27,253,25,59,204,200,130,72,154,77,245,107,234,229,64,126,27,49,36,31,99,65,131,4],[233,179,80,225,27,185,179,8,101,239,67,135,2,200,167,134,122,25,184,168,139,84,127,53,208,135,171,154,66,209,135,69]]",
              "sol": "[bytes(abi.encode(\"224,153,1,189,244,76,211,125,70,96,9,173,45,17,249,232,11,211,45,182,122,30,39,135,28,199,3,69,114,252,229,48\")),bytes(abi.encode(\"38,140,27,134,34,178,127,206,206,45,255,237,126,116,218,7,200,136,179,104,72,106,29,229,5,33,127,39,139,78,2,5\")),bytes(abi.encode(\"142,39,181,250,56,136,19,45,27,253,25,59,204,200,130,72,154,77,245,107,234,229,64,126,27,49,36,31,99,65,131,4\")),bytes(abi.encode(\"233,179,80,225,27,185,179,8,101,239,67,135,2,200,167,134,122,25,184,168,139,84,127,53,208,135,171,154,66,209,135,69\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.934ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[95,110,1,52,61,222,253,51,250,186,187,125,67,118,190,112,21,247,113,128,18,14,50,168,74,69,71,38,236,194,178,71],[241,133,55,210,87,187,229,52,211,162,195,89,52,59,178,202,226,19,16,160,86,86,30,239,148,70,71,94,192,50,232,102],[123,61,192,15,109,243,249,109,131,39,138,49,131,184,209,62,29,229,53,193,75,155,59,150,181,89,184,185,85,202,173,244],[229,42,245,25,108,157,94,235,181,39,11,184,19,16,42,193,46,50,146,112,35,42,221,136,106,251,154,153,248,87,54,24]]",
              "sol": "[bytes(abi.encode(\"95,110,1,52,61,222,253,51,250,186,187,125,67,118,190,112,21,247,113,128,18,14,50,168,74,69,71,38,236,194,178,71\")),bytes(abi.encode(\"241,133,55,210,87,187,229,52,211,162,195,89,52,59,178,202,226,19,16,160,86,86,30,239,148,70,71,94,192,50,232,102\")),bytes(abi.encode(\"123,61,192,15,109,243,249,109,131,39,138,49,131,184,209,62,29,229,53,193,75,155,59,150,181,89,184,185,85,202,173,244\")),bytes(abi.encode(\"229,42,245,25,108,157,94,235,181,39,11,184,19,16,42,193,46,50,146,112,35,42,221,136,106,251,154,153,248,87,54,24\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.934ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[71,66,238,152,17,86,68,83,145,25,239,109,117,94,107,85,186,172,187,191,152,192,208,70,196,28,4,8,139,53,158,18],[57,248,148,84,94,153,184,44,38,146,93,249,131,233,122,248,46,1,23,3,135,95,55,22,70,236,10,68,138,117,31,243],[129,104,10,8,193,119,37,145,80,227,27,54,3,192,73,70,212,20,180,179,183,59,16,244,178,165,135,99,220,184,39,98],[102,109,234,187,241,87,181,232,190,111,39,45,144,124,213,144,250,123,111,116,18,229,86,250,252,106,2,85,152,175,21,34]]",
              "sol": "[bytes(abi.encode(\"71,66,238,152,17,86,68,83,145,25,239,109,117,94,107,85,186,172,187,191,152,192,208,70,196,28,4,8,139,53,158,18\")),bytes(abi.encode(\"57,248,148,84,94,153,184,44,38,146,93,249,131,233,122,248,46,1,23,3,135,95,55,22,70,236,10,68,138,117,31,243\")),bytes(abi.encode(\"129,104,10,8,193,119,37,145,80,227,27,54,3,192,73,70,212,20,180,179,183,59,16,244,178,165,135,99,220,184,39,98\")),bytes(abi.encode(\"102,109,234,187,241,87,181,232,190,111,39,45,144,124,213,144,250,123,111,116,18,229,86,250,252,106,2,85,152,175,21,34\"))]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.935ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "[[159,238,17,114,133,195,208,47,224,22,70,151,123,214,77,62,26,49,68,191,99,246,81,141,52,34,215,130,117,187,29,190],[59,99,0,94,10,193,71,216,60,100,120,134,133,19,95,226,241,218,110,37,28,59,45,177,134,185,215,9,26,129,210,250],[93,179,124,150,21,126,136,166,179,23,214,76,4,89,24,212,13,149,253,127,151,223,174,227,89,128,202,58,206,202,230,146],[88,173,254,169,111,224,201,90,30,225,41,195,111,102,35,199,129,85,113,194,123,125,75,154,182,227,70,140,187,225,239,209]]",
              "sol": "[bytes(abi.encode(\"159,238,17,114,133,195,208,47,224,22,70,151,123,214,77,62,26,49,68,191,99,246,81,141,52,34,215,130,117,187,29,190\")),bytes(abi.encode(\"59,99,0,94,10,193,71,216,60,100,120,134,133,19,95,226,241,218,110,37,28,59,45,177,134,185,215,9,26,129,210,250\")),bytes(abi.encode(\"93,179,124,150,21,126,136,166,179,23,214,76,4,89,24,212,13,149,253,127,151,223,174,227,89,128,202,58,206,202,230,146\")),bytes(abi.encode(\"88,173,254,169,111,224,201,90,30,225,41,195,111,102,35,199,129,85,113,194,123,125,75,154,182,227,70,140,187,225,239,209\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.935ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[112,192,251,117,162,113,64,182,137,209,115,75,135,123,230,184,153,199,148,96,68,176,198,233,150,232,85,9,235,22,104,59],[68,72,206,208,189,100,11,245,11,173,111,243,157,138,154,185,6,41,39,159,6,64,113,194,205,114,14,43,56,184,239,226],[21,250,136,158,84,90,32,72,215,232,1,36,235,194,87,139,89,25,63,149,11,214,242,72,241,168,129,3,205,231,66,247],[0,160,222,43,211,151,190,71,128,0,193,164,16,173,101,228,131,219,22,110,163,246,135,243,19,101,198,102,131,31,178,187],[94,14,222,222,84,3,39,130,245,220,3,136,69,202,100,237,178,97,147,42,163,2,113,109,185,35,212,250,7,29,149,90]]",
              "sol": "[bytes(abi.encode(\"112,192,251,117,162,113,64,182,137,209,115,75,135,123,230,184,153,199,148,96,68,176,198,233,150,232,85,9,235,22,104,59\")),bytes(abi.encode(\"68,72,206,208,189,100,11,245,11,173,111,243,157,138,154,185,6,41,39,159,6,64,113,194,205,114,14,43,56,184,239,226\")),bytes(abi.encode(\"21,250,136,158,84,90,32,72,215,232,1,36,235,194,87,139,89,25,63,149,11,214,242,72,241,168,129,3,205,231,66,247\")),bytes(abi.encode(\"0,160,222,43,211,151,190,71,128,0,193,164,16,173,101,228,131,219,22,110,163,246,135,243,19,101,198,102,131,31,178,187\")),bytes(abi.encode(\"94,14,222,222,84,3,39,130,245,220,3,136,69,202,100,237,178,97,147,42,163,2,113,109,185,35,212,250,7,29,149,90\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.936ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[128,42,125,62,208,217,225,37,156,191,103,19,225,1,193,216,73,218,126,174,170,242,255,10,66,1,184,72,203,190,152,111],[21,73,209,11,65,202,85,96,95,83,228,42,207,67,135,159,50,125,229,231,11,19,190,160,129,68,45,223,72,184,51,195],[42,153,176,4,54,197,116,9,119,31,242,113,210,225,180,236,245,233,86,25,88,171,167,114,151,129,128,110,172,123,0,28],[150,92,79,179,205,20,142,56,132,174,119,200,57,89,213,162,157,184,123,150,163,112,196,44,144,153,57,21,22,241,84,244],[184,110,142,125,158,198,46,206,26,228,226,148,91,231,185,162,8,216,0,236,77,13,75,63,209,58,240,160,81,50,84,219]]",
              "sol": "[bytes(abi.encode(\"128,42,125,62,208,217,225,37,156,191,103,19,225,1,193,216,73,218,126,174,170,242,255,10,66,1,184,72,203,190,152,111\")),bytes(abi.encode(\"21,73,209,11,65,202,85,96,95,83,228,42,207,67,135,159,50,125,229,231,11,19,190,160,129,68,45,223,72,184,51,195\")),bytes(abi.encode(\"42,153,176,4,54,197,116,9,119,31,242,113,210,225,180,236,245,233,86,25,88,171,167,114,151,129,128,110,172,123,0,28\")),bytes(abi.encode(\"150,92,79,179,205,20,142,56,132,174,119,200,57,89,213,162,157,184,123,150,163,112,196,44,144,153,57,21,22,241,84,244\")),bytes(abi.encode(\"184,110,142,125,158,198,46,206,26,228,226,148,91,231,185,162,8,216,0,236,77,13,75,63,209,58,240,160,81,50,84,219\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.937ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "[[94,38,94,11,172,33,224,213,14,129,22,192,134,22,166,32,158,180,107,0,112,85,237,222,209,152,121,20,76,118,226,189],[39,247,218,200,235,13,149,160,96,74,48,237,41,184,121,99,226,222,155,31,202,233,161,157,174,245,113,174,229,209,86,165],[60,136,206,33,26,32,66,88,135,231,20,186,58,15,156,64,148,164,112,122,190,200,130,245,168,28,180,189,34,111,79,45],[184,186,248,239,168,201,255,125,129,103,233,79,171,28,110,152,41,123,175,13,40,165,55,117,148,167,21,232,92,239,172,39],[68,46,5,213,251,194,189,181,34,242,157,10,45,37,145,52,239,183,43,20,26,179,226,241,40,168,204,220,101,3,52,42]]",
              "sol": "[bytes(abi.encode(\"94,38,94,11,172,33,224,213,14,129,22,192,134,22,166,32,158,180,107,0,112,85,237,222,209,152,121,20,76,118,226,189\")),bytes(abi.encode(\"39,247,218,200,235,13,149,160,96,74,48,237,41,184,121,99,226,222,155,31,202,233,161,157,174,245,113,174,229,209,86,165\")),bytes(abi.encode(\"60,136,206,33,26,32,66,88,135,231,20,186,58,15,156,64,148,164,112,122,190,200,130,245,168,28,180,189,34,111,79,45\")),bytes(abi.encode(\"184,186,248,239,168,201,255,125,129,103,233,79,171,28,110,152,41,123,175,13,40,165,55,117,148,167,21,232,92,239,172,39\")),bytes(abi.encode(\"68,46,5,213,251,194,189,181,34,242,157,10,45,37,145,52,239,183,43,20,26,179,226,241,40,168,204,220,101,3,52,42\"))]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.937ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"sqxwpm\"",
              "sol": "\"sqxwpm\""
            },
            {
              "js": "[[143,72,131,119,111,103,88,134,3,251,116,23,100,84,237,131,132,122,112,211,178,113,208,128,48,170,34,27,249,99,89,189],[100,251,95,169,105,221,118,85,229,14,153,221,189,126,218,42,188,182,41,86,211,186,182,108,119,218,221,184,7,140,72,28],[82,91,107,243,163,120,253,141,190,239,188,110,159,127,176,112,74,222,161,64,184,193,237,34,111,91,52,107,137,77,84,36],[200,145,76,224,19,243,2,224,177,236,125,89,148,116,140,174,73,96,208,168,220,152,246,160,133,57,6,38,38,176,165,136],[20,169,144,79,138,212,212,0,73,255,133,109,105,53,90,44,141,184,72,234,111,50,66,124,211,197,51,230,229,115,198,245]]",
              "sol": "[bytes(abi.encode(\"143,72,131,119,111,103,88,134,3,251,116,23,100,84,237,131,132,122,112,211,178,113,208,128,48,170,34,27,249,99,89,189\")),bytes(abi.encode(\"100,251,95,169,105,221,118,85,229,14,153,221,189,126,218,42,188,182,41,86,211,186,182,108,119,218,221,184,7,140,72,28\")),bytes(abi.encode(\"82,91,107,243,163,120,253,141,190,239,188,110,159,127,176,112,74,222,161,64,184,193,237,34,111,91,52,107,137,77,84,36\")),bytes(abi.encode(\"200,145,76,224,19,243,2,224,177,236,125,89,148,116,140,174,73,96,208,168,220,152,246,160,133,57,6,38,38,176,165,136\")),bytes(abi.encode(\"20,169,144,79,138,212,212,0,73,255,133,109,105,53,90,44,141,184,72,234,111,50,66,124,211,197,51,230,229,115,198,245\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.938ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[223]",
              "sol": "bytes1(\"223\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.938ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.939ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.939ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.940ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.940ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"jt0fyr\"",
              "sol": "\"jt0fyr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.941ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.941ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.941ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.942ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"qgz88c\"",
              "sol": "\"qgz88c\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.942ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"409m2i\"",
              "sol": "\"409m2i\""
            },
            {
              "js": "\"409m2i\"",
              "sol": "\"409m2i\""
            },
            {
              "js": "\"fmakip\"",
              "sol": "\"fmakip\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.942ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "\"6ojidi\"",
              "sol": "\"6ojidi\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"kjr4wt\"",
              "sol": "\"kjr4wt\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.943ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.943ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.944ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.945ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"mjw2aj\"",
              "sol": "\"mjw2aj\""
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.949ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.950ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"Example\",\"updateEthPrice called\",\"Example\",\"PayableExample\",\"fmakip\",\"6ojidi\",\"jt0fyr\",\"call updateEthPrice\",\"fmakip\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Example\"),string(\"updateEthPrice called\"),string(\"Example\"),string(\"PayableExample\"),string(\"fmakip\"),string(\"6ojidi\"),string(\"jt0fyr\"),string(\"call updateEthPrice\"),string(\"fmakip\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.951ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[224,14,225,130,47,2,181,141,55,81,91,194,57,11,119,11,206,217,52,167,159,23,229,248,69,135,21,238,185,106,62,217],[246,17,74,189,186,192,116,108,171,52,197,207,27,89,69,196,52,4,109,75,147,157,28,111,240,193,80,190,96,223,164,160],[35,201,126,220,252,241,188,66,81,184,161,123,96,117,77,99,183,141,185,199,44,208,27,157,201,241,104,24,7,85,109,192],[60,1,49,237,160,108,163,61,179,136,205,228,19,187,40,199,55,248,228,116,85,222,87,92,165,107,119,75,96,139,225,197],[163,205,122,148,190,40,39,52,175,96,17,16,203,198,151,109,152,72,188,120,22,120,157,145,128,249,154,85,239,144,243,57]]",
              "sol": "[bytes(abi.encode(\"224,14,225,130,47,2,181,141,55,81,91,194,57,11,119,11,206,217,52,167,159,23,229,248,69,135,21,238,185,106,62,217\")),bytes(abi.encode(\"246,17,74,189,186,192,116,108,171,52,197,207,27,89,69,196,52,4,109,75,147,157,28,111,240,193,80,190,96,223,164,160\")),bytes(abi.encode(\"35,201,126,220,252,241,188,66,81,184,161,123,96,117,77,99,183,141,185,199,44,208,27,157,201,241,104,24,7,85,109,192\")),bytes(abi.encode(\"60,1,49,237,160,108,163,61,179,136,205,228,19,187,40,199,55,248,228,116,85,222,87,92,165,107,119,75,96,139,225,197\")),bytes(abi.encode(\"163,205,122,148,190,40,39,52,175,96,17,16,203,198,151,109,152,72,188,120,22,120,157,145,128,249,154,85,239,144,243,57\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.952ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.954ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[117,169,30,40,240,172,47,162,251,174,97,201,103,119,204,181,155,87,216,135,221,172,203,37,164,208,37,117,107,49,168,51]",
              "sol": "stringToBytes32(\"117,169,30,40,240,172,47,162,251,174,97,201,103,119,204,181,155,87,216,135,221,172,203,37,164,208,37,117,107,49,168,51\")"
            },
            {
              "js": "[70,233,181,141,96,170,157,139,208,179,100,104,51,136,245,15,207,179,128,253,169,19,179,172,105,198,159,147,153,167,86,197]",
              "sol": "stringToBytes32(\"70,233,181,141,96,170,157,139,208,179,100,104,51,136,245,15,207,179,128,253,169,19,179,172,105,198,159,147,153,167,86,197\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.955ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[239,4,141,93,150,230,111,32,226,146,47,140,162,99,95,50,36,10,207,230,227,238,48,65,99,199,152,22,245,119,147,93]",
              "sol": "stringToBytes32(\"239,4,141,93,150,230,111,32,226,146,47,140,162,99,95,50,36,10,207,230,227,238,48,65,99,199,152,22,245,119,147,93\")"
            },
            {
              "js": "[213,150,44,198,85,119,138,130,221,21,134,130,203,203,25,61,99,24,21,201,0,225,190,200,165,221,240,168,5,147,102,33]",
              "sol": "abi.encode(\"213,150,44,198,85,119,138,130,221,21,134,130,203,203,25,61,99,24,21,201,0,225,190,200,165,221,240,168,5,147,102,33\")"
            },
            {
              "js": "[246,128,203,154,108,82,33,221,38,222,200,160,91,17,106,4,137,220,152,236,76,201,168,196,31,81,181,227,73,46,117,89]",
              "sol": "abi.encode(\"246,128,203,154,108,82,33,221,38,222,200,160,91,17,106,4,137,220,152,236,76,201,168,196,31,81,181,227,73,46,117,89\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.956ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[12,49,199,128,66,155,65,43,196,118,55,44,242,146,45,126,119,74,11,41,208,41,224,131,179,43,144,144,226,12,224,65]",
              "sol": "abi.encode(\"12,49,199,128,66,155,65,43,196,118,55,44,242,146,45,126,119,74,11,41,208,41,224,131,179,43,144,144,226,12,224,65\")"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[41,224,89,191,204,248,16,65,189,211,115,154,223,199,38,26,149,76,4,132,51,10,128,158,71,44,65,129,192,143,173,48]",
              "sol": "abi.encode(\"41,224,89,191,204,248,16,65,189,211,115,154,223,199,38,26,149,76,4,132,51,10,128,158,71,44,65,129,192,143,173,48\")"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.959ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[129,45,96,2,64,51,201,160,144,125,62,94,74,251,46,89,64,29,40,148,95,223,242,69,253,86,93,24,154,209,192,97]",
              "sol": "stringToBytes32(\"129,45,96,2,64,51,201,160,144,125,62,94,74,251,46,89,64,29,40,148,95,223,242,69,253,86,93,24,154,209,192,97\")"
            },
            {
              "js": "\"409m2i\"",
              "sol": "\"409m2i\""
            },
            {
              "js": "[137,218,187,24,16,14,43,61,158,143,161,96,80,33,239,25,201,209,35,124,177,145,134,237,47,211,97,214,23,135,41,82]",
              "sol": "abi.encode(\"137,218,187,24,16,14,43,61,158,143,161,96,80,33,239,25,201,209,35,124,177,145,134,237,47,211,97,214,23,135,41,82\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[156,174,118,12,92,181,99,230,31,128,102,151,143,164,59,90,120,46,109,150,201,51,45,112,135,47,164,192,113,13,225,112]",
              "sol": "stringToBytes32(\"156,174,118,12,92,181,99,230,31,128,102,151,143,164,59,90,120,46,109,150,201,51,45,112,135,47,164,192,113,13,225,112\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[2,227,60,94,162,246,214,178,211,26,245,224,1,167,109,222,99,78,90,174,135,247,74,230,213,253,41,253,64,61,84,183]",
              "sol": "abi.encode(\"2,227,60,94,162,246,214,178,211,26,245,224,1,167,109,222,99,78,90,174,135,247,74,230,213,253,41,253,64,61,84,183\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.960ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[184,66,83,169,9,118,183,49,248,124,187,142,246,146,73,196,222,34,32,118,153,136,43,222,175,0,22,143,215,234,27,245]",
              "sol": "stringToBytes32(\"184,66,83,169,9,118,183,49,248,124,187,142,246,146,73,196,222,34,32,118,153,136,43,222,175,0,22,143,215,234,27,245\")"
            },
            {
              "js": "[130,72,231,146,187,213,63,122,84,74,51,53,142,181,76,177,187,188,101,111,159,212,87,79,73,208,145,115,198,94,95,161]",
              "sol": "abi.encode(\"130,72,231,146,187,213,63,122,84,74,51,53,142,181,76,177,187,188,101,111,159,212,87,79,73,208,145,115,198,94,95,161\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[184,66,83,169,9,118,183,49,248,124,187,142,246,146,73,196,222,34,32,118,153,136,43,222,175,0,22,143,215,234,27,245]",
                "sol": "stringToBytes32(\"184,66,83,169,9,118,183,49,248,124,187,142,246,146,73,196,222,34,32,118,153,136,43,222,175,0,22,143,215,234,27,245\")"
              },
              {
                "js": "[121,101,161,251,94,40,206,154,232,202,182,206,180,166,147,203,173,53,143,207,217,75,196,192,49,87,4,83,115,195,180,141,81]",
                "sol": "bytes33(\"121,101,161,251,94,40,206,154,232,202,182,206,180,166,147,203,173,53,143,207,217,75,196,192,49,87,4,83,115,195,180,141,81\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.962ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[175,198,72,149,66,192,57,211,52,97,93,133,82,228,27,123,54,132,248,0,47,25,18,205,242,222,106,42,52,193,27,215]",
              "sol": "abi.encode(\"175,198,72,149,66,192,57,211,52,97,93,133,82,228,27,123,54,132,248,0,47,25,18,205,242,222,106,42,52,193,27,215\")"
            },
            {
              "js": "[191,237,35,247,190,97,223,13,21,239,11,225,86,111,8,213,173,253,178,142,31,18,2,29,234,48,84,110,115,141,211,13]",
              "sol": "stringToBytes32(\"191,237,35,247,190,97,223,13,21,239,11,225,86,111,8,213,173,253,178,142,31,18,2,29,234,48,84,110,115,141,211,13\")"
            },
            {
              "js": "[80,130,209,66,181,98,66,25,109,40,132,221,167,39,252,62,174,21,141,96,211,143,175,72,120,191,236,15,51,194,52,147]",
              "sol": "abi.encode(\"80,130,209,66,181,98,66,25,109,40,132,221,167,39,252,62,174,21,141,96,211,143,175,72,120,191,236,15,51,194,52,147\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[170,181,37,107,171,112,183,123,233,249,117,137,64,168,195,38,6,127,210,146,210,183,75,85,46,116,138,76,83,47,105,198]",
              "sol": "abi.encode(\"170,181,37,107,171,112,183,123,233,249,117,137,64,168,195,38,6,127,210,146,210,183,75,85,46,116,138,76,83,47,105,198\")"
            },
            {
              "js": "[197,83,173,9,167,44,7,221,169,246,28,96,59,70,233,210,166,137,142,34,229,50,142,240,158,164,220,117,110,41,169,119]",
              "sol": "stringToBytes32(\"197,83,173,9,167,44,7,221,169,246,28,96,59,70,233,210,166,137,142,34,229,50,142,240,158,164,220,117,110,41,169,119\")"
            },
            {
              "js": "[23,149,129,159,22,0,244,125,139,239,144,43,215,173,22,56,247,81,84,73,5,214,248,152,38,165,180,247,253,37,32,49]",
              "sol": "abi.encode(\"23,149,129,159,22,0,244,125,139,239,144,43,215,173,22,56,247,81,84,73,5,214,248,152,38,165,180,247,253,37,32,49\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[88,142,22,177,71,191,74,176,91,32,191,89,180,81,117,109,239,140,76,24,209,219,162,92,219,110,215,212,73,106,194,137]",
              "sol": "abi.encode(\"88,142,22,177,71,191,74,176,91,32,191,89,180,81,117,109,239,140,76,24,209,219,162,92,219,110,215,212,73,106,194,137\")"
            },
            {
              "js": "[48,207,0,129,117,172,42,39,160,224,90,140,10,35,124,135,226,130,9,142,188,50,22,174,25,150,78,152,16,218,178,166]",
              "sol": "stringToBytes32(\"48,207,0,129,117,172,42,39,160,224,90,140,10,35,124,135,226,130,9,142,188,50,22,174,25,150,78,152,16,218,178,166\")"
            },
            {
              "js": "[116,250,116,167,61,177,141,220,16,170,217,3,220,89,130,87,71,154,126,5,5,190,114,73,65,168,0,80,8,35,238,192]",
              "sol": "abi.encode(\"116,250,116,167,61,177,141,220,16,170,217,3,220,89,130,87,71,154,126,5,5,190,114,73,65,168,0,80,8,35,238,192\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[156,229,251,160,102,81,125,63,247,40,144,29,231,130,81,59,170,49,141,83,188,59,133,38,199,181,36,90,72,116,192,112]",
              "sol": "abi.encode(\"156,229,251,160,102,81,125,63,247,40,144,29,231,130,81,59,170,49,141,83,188,59,133,38,199,181,36,90,72,116,192,112\")"
            },
            {
              "js": "[255,226,5,149,187,216,220,14,53,181,91,77,13,28,226,35,242,240,145,8,90,211,51,184,199,207,162,51,51,212,205,76]",
              "sol": "stringToBytes32(\"255,226,5,149,187,216,220,14,53,181,91,77,13,28,226,35,242,240,145,8,90,211,51,184,199,207,162,51,51,212,205,76\")"
            },
            {
              "js": "[203,240,173,254,244,186,83,64,171,123,212,180,255,128,255,253,77,144,202,12,86,85,134,202,161,251,128,30,204,230,84,77]",
              "sol": "abi.encode(\"203,240,173,254,244,186,83,64,171,123,212,180,255,128,255,253,77,144,202,12,86,85,134,202,161,251,128,30,204,230,84,77\")"
            },
            {
              "js": "\"41xhfk\"",
              "sol": "\"41xhfk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[40,48,2,224,32,229,10,192,184,18,2,22,40,32,82,198,38,125,80,155,193,56,10,102,54,142,80,97,139,40,42,166]",
              "sol": "abi.encode(\"40,48,2,224,32,229,10,192,184,18,2,22,40,32,82,198,38,125,80,155,193,56,10,102,54,142,80,97,139,40,42,166\")"
            },
            {
              "js": "[222,84,6,94,102,229,195,74,49,247,103,98,212,163,212,24,41,59,0,123,47,0,83,142,239,162,178,49,112,166,51,54]",
              "sol": "stringToBytes32(\"222,84,6,94,102,229,195,74,49,247,103,98,212,163,212,24,41,59,0,123,47,0,83,142,239,162,178,49,112,166,51,54\")"
            },
            {
              "js": "[214,17,194,25,45,88,35,185,140,56,200,114,3,175,167,64,183,125,63,55,220,70,220,47,44,13,214,100,240,129,247,229]",
              "sol": "abi.encode(\"214,17,194,25,45,88,35,185,140,56,200,114,3,175,167,64,183,125,63,55,220,70,220,47,44,13,214,100,240,129,247,229\")"
            },
            {
              "js": "\"sqxwpm\"",
              "sol": "\"sqxwpm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[95,169,192,115,215,107,6,46,242,158,0,238,208,190,127,20,55,184,78,58,50,133,79,168,102,179,169,128,210,192,230,143]",
              "sol": "abi.encode(\"95,169,192,115,215,107,6,46,242,158,0,238,208,190,127,20,55,184,78,58,50,133,79,168,102,179,169,128,210,192,230,143\")"
            },
            {
              "js": "[158,138,112,232,52,3,144,183,42,171,23,121,238,213,20,195,246,68,54,121,122,126,191,73,34,206,96,194,119,41,64,154]",
              "sol": "stringToBytes32(\"158,138,112,232,52,3,144,183,42,171,23,121,238,213,20,195,246,68,54,121,122,126,191,73,34,206,96,194,119,41,64,154\")"
            },
            {
              "js": "[80,28,146,191,152,72,181,227,31,147,223,120,82,25,31,34,245,50,211,101,78,226,167,244,117,240,39,196,71,82,52,254]",
              "sol": "abi.encode(\"80,28,146,191,152,72,181,227,31,147,223,120,82,25,31,34,245,50,211,101,78,226,167,244,117,240,39,196,71,82,52,254\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[167,105,107,87,253,101,185,3,159,49,245,19,92,150,11,45,37,12,34,183,236,225,166,160,202,145,144,201,118,198,148,172]",
              "sol": "abi.encode(\"167,105,107,87,253,101,185,3,159,49,245,19,92,150,11,45,37,12,34,183,236,225,166,160,202,145,144,201,118,198,148,172\")"
            },
            {
              "js": "[92,121,175,251,255,168,82,25,14,147,181,180,11,76,111,69,115,171,216,43,135,211,206,28,99,90,151,130,126,252,64,94]",
              "sol": "stringToBytes32(\"92,121,175,251,255,168,82,25,14,147,181,180,11,76,111,69,115,171,216,43,135,211,206,28,99,90,151,130,126,252,64,94\")"
            },
            {
              "js": "[139,63,162,40,24,178,131,36,1,94,242,20,6,234,52,163,74,14,52,43,6,146,59,238,46,14,162,240,125,88,150,45]",
              "sol": "abi.encode(\"139,63,162,40,24,178,131,36,1,94,242,20,6,234,52,163,74,14,52,43,6,146,59,238,46,14,162,240,125,88,150,45\")"
            },
            {
              "js": "\"flxyzc\"",
              "sol": "\"flxyzc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[205,16,39,74,158,224,132,155,26,153,252,208,254,205,177,87,17,196,71,48,122,78,65,128,86,107,196,161,18,221,64,139]",
              "sol": "abi.encode(\"205,16,39,74,158,224,132,155,26,153,252,208,254,205,177,87,17,196,71,48,122,78,65,128,86,107,196,161,18,221,64,139\")"
            },
            {
              "js": "[158,111,50,4,166,109,64,34,122,53,104,168,90,4,133,66,180,31,133,103,98,173,139,121,171,252,163,148,29,157,177,107]",
              "sol": "stringToBytes32(\"158,111,50,4,166,109,64,34,122,53,104,168,90,4,133,66,180,31,133,103,98,173,139,121,171,252,163,148,29,157,177,107\")"
            },
            {
              "js": "[249,178,172,10,31,172,195,29,129,94,192,53,123,87,56,54,110,95,84,109,186,245,204,235,4,153,165,60,239,207,38,55]",
              "sol": "abi.encode(\"249,178,172,10,31,172,195,29,129,94,192,53,123,87,56,54,110,95,84,109,186,245,204,235,4,153,165,60,239,207,38,55\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.972ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[135,13,47,156,167,182,9,106,152,125,41,67,23,218,227,42,155,238,223,234,156,25,168,50,24,63,44,131,96,52,58,180]",
              "sol": "abi.encode(\"135,13,47,156,167,182,9,106,152,125,41,67,23,218,227,42,155,238,223,234,156,25,168,50,24,63,44,131,96,52,58,180\")"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "[131,22,23,122,44,205,128,220,35,247,210,187,172,40,10,254,218,184,141,184,21,26,185,109,214,80,159,191,118,221,45,179]",
              "sol": "abi.encode(\"131,22,23,122,44,205,128,220,35,247,210,187,172,40,10,254,218,184,141,184,21,26,185,109,214,80,159,191,118,221,45,179\")"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.973ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[211,16,187,209,139,175,134,86,157,8,180,209,17,182,151,155,57,192,55,213,13,194,0,184,64,185,131,87,239,198,235,174]",
              "sol": "stringToBytes32(\"211,16,187,209,139,175,134,86,157,8,180,209,17,182,151,155,57,192,55,213,13,194,0,184,64,185,131,87,239,198,235,174\")"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "[26,243,153,38,141,208,118,174,167,135,32,101,127,199,118,163,92,186,198,29,67,169,250,54,132,244,37,46,165,218,112,255]",
              "sol": "stringToBytes32(\"26,243,153,38,141,208,118,174,167,135,32,101,127,199,118,163,92,186,198,29,67,169,250,54,132,244,37,46,165,218,112,255\")"
            },
            {
              "js": "[123,238,4,139,42,167,103,81,118,153,115,129,191,143,166,118,69,23,236,217,104,117,147,245,100,22,41,74,78,89,41,30]",
              "sol": "stringToBytes32(\"123,238,4,139,42,167,103,81,118,153,115,129,191,143,166,118,69,23,236,217,104,117,147,245,100,22,41,74,78,89,41,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.974ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[53,252,10,23,60,84,161,9,58,114,147,86,249,247,229,235,96,216,69,53,100,192,53,233,65,176,126,255,38,86,67,103]",
              "sol": "stringToBytes32(\"53,252,10,23,60,84,161,9,58,114,147,86,249,247,229,235,96,216,69,53,100,192,53,233,65,176,126,255,38,86,67,103\")"
            },
            {
              "js": "[57,181,30,171,80,53,208,151,35,167,127,0,160,175,205,30,49,207,19,81,110,68,137,197,254,27,190,224,177,8,30,182,129,197,161,20,24,143,123,97,166,6,5,108,233]",
              "sol": "abi.encode(\"57,181,30,171,80,53,208,151,35,167,127,0,160,175,205,30,49,207,19,81,110,68,137,197,254,27,190,224,177,8,30,182,129,197,161,20,24,143,123,97,166,6,5,108,233\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[63,90,149,114,125,59,39,159,113,134,127,71,140,72,189,130,68,102,224,169,202,97,164,34,218,164,142,146,149,219,187,56]",
              "sol": "stringToBytes32(\"63,90,149,114,125,59,39,159,113,134,127,71,140,72,189,130,68,102,224,169,202,97,164,34,218,164,142,146,149,219,187,56\")"
            },
            {
              "js": "[119,119,65,57,244,195,55,176,126,42,66,236,107,155,79,127,118,60,85,131,13,25,121,55,133,40,199,109,231,80,133,127,244,12,130,38,59,243,92,29,253,82,114,23,172,183,247,4,239,36,60,128,91,132,254,17,253,149,165,250,147,150,23,58,209]",
              "sol": "abi.encode(\"119,119,65,57,244,195,55,176,126,42,66,236,107,155,79,127,118,60,85,131,13,25,121,55,133,40,199,109,231,80,133,127,244,12,130,38,59,243,92,29,253,82,114,23,172,183,247,4,239,36,60,128,91,132,254,17,253,149,165,250,147,150,23,58,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.976ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.978ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.978ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.978ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.979ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.980ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.980ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.981ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.981ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.982ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.982ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.983ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.984ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.985ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.986ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.989ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.993ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[222,113,56,133,74,192,230,77,95,221,133,166,59,210,150,182,120,249,212,200,9,177,176,16,191,144,42,218,47,106,196,164]",
              "sol": "stringToBytes32(\"222,113,56,133,74,192,230,77,95,221,133,166,59,210,150,182,120,249,212,200,9,177,176,16,191,144,42,218,47,106,196,164\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[232,253,147,2,231,188,125,85,11,30,73,12,93,165,102,48,165,39,232,124,98,193,75,246,75,111,15,138,188,248,149,232]",
              "sol": "abi.encode(\"232,253,147,2,231,188,125,85,11,30,73,12,93,165,102,48,165,39,232,124,98,193,75,246,75,111,15,138,188,248,149,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.994ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.995ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.997ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:05.998ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[35,86,80,23,106,128,122,167,123,75,175,196,249,98,4,21,10,82,228,94,235,144,68,70,212,241,149,4,181,180,61,143]",
              "sol": "abi.encode(\"35,86,80,23,106,128,122,167,123,75,175,196,249,98,4,21,10,82,228,94,235,144,68,70,212,241,149,4,181,180,61,143\")"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "[97,65,30,217,19,2,13,250,205,194,239,154,150,250,18,56,215,72,145,243,196,14,116,137,216,150,15,120,148,87,227,65]",
              "sol": "stringToBytes32(\"97,65,30,217,19,2,13,250,205,194,239,154,150,250,18,56,215,72,145,243,196,14,116,137,216,150,15,120,148,87,227,65\")"
            },
            {
              "js": "[81,125,205,31,35,41,141,199,165,252,150,199,132,238,192,111,2,119,223,240,165,77,124,71,73,171,252,180,37,129,194,233]",
              "sol": "stringToBytes32(\"81,125,205,31,35,41,141,199,165,252,150,199,132,238,192,111,2,119,223,240,165,77,124,71,73,171,252,180,37,129,194,233\")"
            },
            {
              "js": "[108,193,83,225,120,46,212,14,76,16,9,27,26,75,183,177,252,100,143,120,9,153,241,179,13,176,197,211,13,225,137,194]",
              "sol": "stringToBytes32(\"108,193,83,225,120,46,212,14,76,16,9,27,26,75,183,177,252,100,143,120,9,153,241,179,13,176,197,211,13,225,137,194\")"
            },
            {
              "js": "[37,211,213,20,155,160,236,144,183,197,48,33,77,215,241,166,96,169,145,29,156,73,69,194,226,51,77,119,18,186,129,108]",
              "sol": "stringToBytes32(\"37,211,213,20,155,160,236,144,183,197,48,33,77,215,241,166,96,169,145,29,156,73,69,194,226,51,77,119,18,186,129,108\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:05.998ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.000ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:06.000ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.001ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.002ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.003ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.004ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:06.008ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:06.010ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:19:06.012ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.013ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.013ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:19:06.015ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}