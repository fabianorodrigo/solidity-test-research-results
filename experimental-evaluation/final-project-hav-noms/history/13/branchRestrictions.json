,{
  "2020-11-11T07:39:15.478ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:41:37.461ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:42:14.502ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:42:32.571ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:42:50.415ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:43:08.102ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:43:26.156ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:43:43.792ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:01.762ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:19.719ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:37.874ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.703ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.706ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [149,220,72,229,89,176,43,97,0,45,55,94,18,120,185,252,233,76,67,36,146,22,80,204,112,77,40,112,184,160,163,125],\"capacity\": 30}",
              "sol": "Buffer.buffer(abi.encode(\"149,220,72,229,89,176,43,97,0,45,55,94,18,120,185,252,233,76,67,36,146,22,80,204,112,77,40,112,184,160,163,125\"),30)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.707ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [61,56,130,71,247,231,146,122,111,252,119,161,150,78,153,8,22,118,127,30,148,179,90,213,239,171,176,182,131,60,46,14],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"61,56,130,71,247,231,146,122,111,252,119,161,150,78,153,8,22,118,127,30,148,179,90,213,239,171,176,182,131,60,46,14\"),65)"
            },
            {
              "js": "[17,189,128,126,167,112,69,140,169,66,113,184,59,173,158,166,255,75,254,27,194,113,237,33,110,233,235,248,152,91,109,193]",
              "sol": "abi.encode(\"17,189,128,126,167,112,69,140,169,66,113,184,59,173,158,166,255,75,254,27,194,113,237,33,110,233,235,248,152,91,109,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.707ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [193,111,250,73,92,136,75,81,213,255,62,48,240,25,184,150,73,162,92,175,208,157,1,183,120,242,31,25,222,24,193,119],\"capacity\": 10000}",
              "sol": "Buffer.buffer(abi.encode(\"193,111,250,73,92,136,75,81,213,255,62,48,240,25,184,150,73,162,92,175,208,157,1,183,120,242,31,25,222,24,193,119\"),10000)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.710ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [195,94,3,251,129,88,118,92,95,179,73,227,72,149,53,5,225,102,250,107,226,74,4,167,184,3,42,219,90,28,232,145],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"195,94,3,251,129,88,118,92,95,179,73,227,72,149,53,5,225,102,250,107,226,74,4,167,184,3,42,219,90,28,232,145\"),57)"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.716ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [205,220,177,35,208,140,80,106,229,46,130,136,79,12,162,157,65,128,132,56,209,95,64,2,86,107,240,47,81,96,137,21],\"capacity\": 102}",
              "sol": "Buffer.buffer(abi.encode(\"205,220,177,35,208,140,80,106,229,46,130,136,79,12,162,157,65,128,132,56,209,95,64,2,86,107,240,47,81,96,137,21\"),102)"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.717ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [7,217,28,57,156,213,244,99,53,148,27,161,114,128,25,203,167,65,218,41,161,239,129,110,142,196,33,126,157,42,175,151],\"capacity\": 255}",
              "sol": "Buffer.buffer(abi.encode(\"7,217,28,57,156,213,244,99,53,148,27,161,114,128,25,203,167,65,218,41,161,239,129,110,142,196,33,126,157,42,175,151\"),255)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [215,18,162,5,247,27,234,84,245,51,8,138,219,240,149,85,93,134,188,156,185,173,15,94,241,14,109,159,199,205,46,203],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"215,18,162,5,247,27,234,84,245,51,8,138,219,240,149,85,93,134,188,156,185,173,15,94,241,14,109,159,199,205,46,203\"),160)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.718ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [121,148,197,216,91,130,200,184,122,133,215,170,117,4,69,86,106,222,143,198,224,40,234,37,174,97,195,158,79,145,235,80],\"capacity\": 199999}",
              "sol": "Buffer.buffer(abi.encode(\"121,148,197,216,91,130,200,184,122,133,215,170,117,4,69,86,106,222,143,198,224,40,234,37,174,97,195,158,79,145,235,80\"),199999)"
            },
            {
              "js": "[26,75,26,202,120,128,4,3,13,91,14,237,40,40,109,210,170,249,255,108,241,67,20,230,193,91,50,157,149,250,185,198]",
              "sol": "abi.encode(\"26,75,26,202,120,128,4,3,13,91,14,237,40,40,109,210,170,249,255,108,241,67,20,230,193,91,50,157,149,250,185,198\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.718ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [90,22,219,103,158,54,244,13,84,165,70,110,242,82,144,133,235,149,72,100,151,48,79,167,30,44,70,119,75,214,76,167],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"90,22,219,103,158,54,244,13,84,165,70,110,242,82,144,133,235,149,72,100,151,48,79,167,30,44,70,119,75,214,76,167\"),95)"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.719ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [117,139,35,118,179,94,93,202,86,119,207,54,244,26,123,205,73,11,138,231,169,38,212,12,157,128,67,211,179,14,170,223],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"117,139,35,118,179,94,93,202,86,119,207,54,244,26,123,205,73,11,138,231,169,38,212,12,157,128,67,211,179,14,170,223\"),28)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.720ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [187,145,140,185,204,109,8,37,124,163,205,237,229,109,198,216,7,171,54,126,135,206,153,106,36,116,39,214,78,180,235,193],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"187,145,140,185,204,109,8,37,124,163,205,237,229,109,198,216,7,171,54,126,135,206,153,106,36,116,39,214,78,180,235,193\"),97)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.721ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [115,181,124,184,160,102,186,8,83,69,231,190,118,230,236,15,242,227,232,32,61,192,46,210,12,237,52,104,243,202,104,88],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"115,181,124,184,160,102,186,8,83,69,231,190,118,230,236,15,242,227,232,32,61,192,46,210,12,237,52,104,243,202,104,88\"),256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.724ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.724ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.724ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.725ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.726ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.726ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.727ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.727ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.728ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.728ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.729ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[65,133,73,88,216,21,29,138,177,248,90,222,88,7,61,243,206,210,44,229,230,5,113,159,231,21,192,217,23,158,80,209]",
              "sol": "stringToBytes32(\"65,133,73,88,216,21,29,138,177,248,90,222,88,7,61,243,206,210,44,229,230,5,113,159,231,21,192,217,23,158,80,209\")"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.731ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[65,246,120,126,36,15,19,251,42,61,106,193,36,3,176,128,233,204,219,63,208,152,197,104,177,46,162,57,220,147,114,195]",
              "sol": "stringToBytes32(\"65,246,120,126,36,15,19,251,42,61,106,193,36,3,176,128,233,204,219,63,208,152,197,104,177,46,162,57,220,147,114,195\")"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[127,234,184,116,252,183,124,60,32,81,56,171,61,171,27,237,110,101,190,12,9,169,205,2,181,199,246,229,95,24,18,98]",
              "sol": "abi.encode(\"127,234,184,116,252,183,124,60,32,81,56,171,61,171,27,237,110,101,190,12,9,169,205,2,181,199,246,229,95,24,18,98\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.779ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.780ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.782ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.783ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.783ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.783ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.784ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"efn1a\"",
              "sol": "\"efn1a\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.784ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"efn1a\"",
              "sol": "\"efn1a\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.785ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"h34xi\"",
              "sol": "\"h34xi\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.785ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.786ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.786ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"efn1a\"",
              "sol": "\"efn1a\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.786ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.787ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.787ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"h34xi\",\"P\",\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"0\",\"0\"]",
              "sol": "[string(\"h34xi\"),string(\"P\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"0\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.788ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"costUSD\",\"RevertWithReason\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"IsLibrary\",\"RevertWithReason\",\"PayableExample\",\"P\"]",
              "sol": "[string(\"costUSD\"),string(\"RevertWithReason\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"IsLibrary\"),string(\"RevertWithReason\"),string(\"PayableExample\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.788ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"call updateEthPrice\",\"wgh89\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"wgh89\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.790ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"uej51e\"",
              "sol": "\"uej51e\""
            },
            {
              "js": "[\"L\",\"uej51e\",\"costUSD\",\"efn1a\",\"P\",\"call updateEthPrice\",\"trade.totalPrice\",\"L\",\"UsesExample\"]",
              "sol": "[string(\"L\"),string(\"uej51e\"),string(\"costUSD\"),string(\"efn1a\"),string(\"P\"),string(\"call updateEthPrice\"),string(\"trade.totalPrice\"),string(\"L\"),string(\"UsesExample\")]"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.790ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"h34xi\"",
              "sol": "\"h34xi\""
            },
            {
              "js": "[\"costUSD\"]",
              "sol": "[string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.791ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"uej51e\"",
              "sol": "\"uej51e\""
            },
            {
              "js": "[\"listingID arg\"]",
              "sol": "[string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.791ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"UsesExample\"]",
              "sol": "[string(\"UsesExample\")]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.792ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"rp8bq\"",
              "sol": "\"rp8bq\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.793ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"efn1a\",\"uej51e\"]",
              "sol": "[string(\"efn1a\"),string(\"uej51e\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.793ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"call updateEthPrice\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.793ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"rp8bq\"",
              "sol": "\"rp8bq\""
            },
            {
              "js": "[\"Example\",\"L\"]",
              "sol": "[string(\"Example\"),string(\"L\")]"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.794ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"0\",\"lrcdib\"]",
              "sol": "[string(\"0\"),string(\"lrcdib\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.794ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"L\",\"Example\",\"IsLibrary\"]",
              "sol": "[string(\"L\"),string(\"Example\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.795ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"h34xi\",\"0\",\"costUSD\"]",
              "sol": "[string(\"h34xi\"),string(\"0\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.795ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"tpmofl\"",
              "sol": "\"tpmofl\""
            },
            {
              "js": "[\"tpmofl\",\"Oraclize query was sent, standing by for the answer...\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"tpmofl\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.796ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"IsLibrary\",\"efn1a\",\"Example\"]",
              "sol": "[string(\"IsLibrary\"),string(\"efn1a\"),string(\"Example\")]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.797ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"uej51e\"",
              "sol": "\"uej51e\""
            },
            {
              "js": "[\"costUSD\",\"wgh89\",\"\",\"wgh89\"]",
              "sol": "[string(\"costUSD\"),string(\"wgh89\"),string(\"\"),string(\"wgh89\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.797ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"costUSD\",\"y0wnx\",\"trade.totalPrice\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"costUSD\"),string(\"y0wnx\"),string(\"trade.totalPrice\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.798ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"tpmofl\"",
              "sol": "\"tpmofl\""
            },
            {
              "js": "[\"lrcdib\",\"\",\"PayableExample\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"lrcdib\"),string(\"\"),string(\"PayableExample\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.799ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"uej51e\"",
              "sol": "\"uej51e\""
            },
            {
              "js": "[\"tpmofl\",\"Oraclize query was sent, standing by for the answer...\",\"\\x19Ethereum Signed Message:\\n32\",\"UsesExample\"]",
              "sol": "[string(\"tpmofl\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"UsesExample\")]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.800ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"PayableExample\",\"\",\"RevertWithReason\",\"costUSD\",\"h34xi\"]",
              "sol": "[string(\"PayableExample\"),string(\"\"),string(\"RevertWithReason\"),string(\"costUSD\"),string(\"h34xi\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.800ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"listingID arg\",\"wgh89\",\"efn1a\",\"efn1a\",\"RevertWithReason\"]",
              "sol": "[string(\"listingID arg\"),string(\"wgh89\"),string(\"efn1a\"),string(\"efn1a\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.802ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"efn1a\",\"0\",\"ETH\",\"L\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"efn1a\"),string(\"0\"),string(\"ETH\"),string(\"L\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.802ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"UsesExample\",\"P\",\"costUSD\",\"efn1a\",\"lrcdib\"]",
              "sol": "[string(\"UsesExample\"),string(\"P\"),string(\"costUSD\"),string(\"efn1a\"),string(\"lrcdib\")]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.803ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[0,23,213,169,172,42,24,51,225,189,142,234,181,219,0,8,6,96,86,187,155,220,159,233,210,4,132,203,198,99,0,86],[232,210,84,219,68,60,223,121,213,117,181,186,130,97,110,9,253,188,165,51,106,209,229,61,247,219,223,212,61,144,170,89],[135,183,173,109,94,67,133,175,224,244,2,75,76,186,29,201,6,232,51,141,18,183,211,129,84,176,81,74,59,90,84,66],[81,241,193,170,152,21,70,25,107,216,132,53,17,14,19,48,64,34,191,61,154,62,215,160,96,186,240,75,81,99,180,221]]",
              "sol": "[bytes(abi.encode(\"0,23,213,169,172,42,24,51,225,189,142,234,181,219,0,8,6,96,86,187,155,220,159,233,210,4,132,203,198,99,0,86\")),bytes(abi.encode(\"232,210,84,219,68,60,223,121,213,117,181,186,130,97,110,9,253,188,165,51,106,209,229,61,247,219,223,212,61,144,170,89\")),bytes(abi.encode(\"135,183,173,109,94,67,133,175,224,244,2,75,76,186,29,201,6,232,51,141,18,183,211,129,84,176,81,74,59,90,84,66\")),bytes(abi.encode(\"81,241,193,170,152,21,70,25,107,216,132,53,17,14,19,48,64,34,191,61,154,62,215,160,96,186,240,75,81,99,180,221\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.803ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"lrcdib\"",
              "sol": "\"lrcdib\""
            },
            {
              "js": "[[146,179,79,81,48,233,173,230,102,143,71,50,27,67,62,11,215,100,158,188,114,164,97,47,40,241,26,187,103,68,240,176],[168,2,179,128,180,118,78,116,75,1,41,114,223,146,13,128,155,55,14,98,8,198,109,108,25,148,140,169,191,178,211,160],[11,164,71,110,36,214,30,171,182,52,28,141,174,61,238,34,244,245,45,107,183,108,46,65,253,155,76,188,25,28,85,173],[215,165,137,92,212,50,156,210,190,59,100,126,62,168,212,87,114,170,62,65,254,43,36,231,7,10,15,98,117,244,130,75],[12,138,248,222,69,132,92,179,63,121,176,203,70,100,181,114,214,207,19,142,150,182,126,165,140,237,17,235,146,179,200,253],[89,134,83,239,149,177,142,251,106,16,112,27,124,73,98,5,123,86,231,27,17,145,43,122,171,34,189,236,244,155,225,196],[212,20,112,152,175,160,34,136,23,173,226,13,243,154,226,109,125,180,138,185,79,168,82,32,162,192,15,229,230,10,16,193],[200,185,208,58,147,234,221,230,219,207,98,215,103,77,120,195,34,162,32,230,238,210,207,36,100,116,198,245,69,245,141,106],[231,24,235,205,110,79,192,203,31,161,32,84,170,239,39,168,3,220,210,156,172,218,206,98,15,158,147,200,87,94,40,161],[117,21,193,11,202,31,34,153,208,249,2,177,179,89,187,149,9,84,134,115,40,164,237,45,63,107,54,55,36,213,106,47]]",
              "sol": "[bytes(abi.encode(\"146,179,79,81,48,233,173,230,102,143,71,50,27,67,62,11,215,100,158,188,114,164,97,47,40,241,26,187,103,68,240,176\")),bytes(abi.encode(\"168,2,179,128,180,118,78,116,75,1,41,114,223,146,13,128,155,55,14,98,8,198,109,108,25,148,140,169,191,178,211,160\")),bytes(abi.encode(\"11,164,71,110,36,214,30,171,182,52,28,141,174,61,238,34,244,245,45,107,183,108,46,65,253,155,76,188,25,28,85,173\")),bytes(abi.encode(\"215,165,137,92,212,50,156,210,190,59,100,126,62,168,212,87,114,170,62,65,254,43,36,231,7,10,15,98,117,244,130,75\")),bytes(abi.encode(\"12,138,248,222,69,132,92,179,63,121,176,203,70,100,181,114,214,207,19,142,150,182,126,165,140,237,17,235,146,179,200,253\")),bytes(abi.encode(\"89,134,83,239,149,177,142,251,106,16,112,27,124,73,98,5,123,86,231,27,17,145,43,122,171,34,189,236,244,155,225,196\")),bytes(abi.encode(\"212,20,112,152,175,160,34,136,23,173,226,13,243,154,226,109,125,180,138,185,79,168,82,32,162,192,15,229,230,10,16,193\")),bytes(abi.encode(\"200,185,208,58,147,234,221,230,219,207,98,215,103,77,120,195,34,162,32,230,238,210,207,36,100,116,198,245,69,245,141,106\")),bytes(abi.encode(\"231,24,235,205,110,79,192,203,31,161,32,84,170,239,39,168,3,220,210,156,172,218,206,98,15,158,147,200,87,94,40,161\")),bytes(abi.encode(\"117,21,193,11,202,31,34,153,208,249,2,177,179,89,187,149,9,84,134,115,40,164,237,45,63,107,54,55,36,213,106,47\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.805ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[67,244,173,200,124,68,246,223,67,69,183,101,75,204,22,212,46,206,222,194,5,168,1,59,42,33,94,141,157,138,216,35],[53,55,172,91,221,81,168,250,59,193,155,156,186,43,156,67,14,85,3,73,192,81,208,138,50,96,38,99,139,186,95,101],[244,82,225,157,238,179,14,219,23,112,124,68,230,103,94,180,126,77,87,238,168,164,202,229,127,235,112,23,241,54,211,51],[21,25,179,7,78,5,112,152,229,92,58,64,52,110,241,221,34,252,77,32,178,20,93,58,79,173,249,51,223,72,177,165],[67,107,119,38,58,146,4,90,203,127,23,133,76,178,219,207,191,17,65,68,32,249,180,196,82,79,215,237,17,195,223,247],[199,28,189,233,3,33,210,143,7,50,43,104,232,239,84,168,133,81,147,141,29,230,184,153,101,253,171,241,34,2,122,37],[46,233,241,200,93,217,210,117,213,140,215,170,69,113,152,108,228,254,133,137,63,238,45,219,46,23,166,0,161,8,166,160],[196,238,88,104,60,128,93,120,55,185,224,213,42,73,120,98,116,101,169,37,49,93,90,98,26,11,229,193,42,37,185,126],[161,5,205,245,216,102,65,193,107,134,182,202,165,173,229,178,165,234,190,176,192,5,225,65,18,62,42,237,137,247,13,105],[26,83,27,70,70,102,93,164,42,255,40,88,33,143,143,166,56,95,174,43,242,200,26,179,212,195,247,184,157,237,85,244]]",
              "sol": "[bytes(abi.encode(\"67,244,173,200,124,68,246,223,67,69,183,101,75,204,22,212,46,206,222,194,5,168,1,59,42,33,94,141,157,138,216,35\")),bytes(abi.encode(\"53,55,172,91,221,81,168,250,59,193,155,156,186,43,156,67,14,85,3,73,192,81,208,138,50,96,38,99,139,186,95,101\")),bytes(abi.encode(\"244,82,225,157,238,179,14,219,23,112,124,68,230,103,94,180,126,77,87,238,168,164,202,229,127,235,112,23,241,54,211,51\")),bytes(abi.encode(\"21,25,179,7,78,5,112,152,229,92,58,64,52,110,241,221,34,252,77,32,178,20,93,58,79,173,249,51,223,72,177,165\")),bytes(abi.encode(\"67,107,119,38,58,146,4,90,203,127,23,133,76,178,219,207,191,17,65,68,32,249,180,196,82,79,215,237,17,195,223,247\")),bytes(abi.encode(\"199,28,189,233,3,33,210,143,7,50,43,104,232,239,84,168,133,81,147,141,29,230,184,153,101,253,171,241,34,2,122,37\")),bytes(abi.encode(\"46,233,241,200,93,217,210,117,213,140,215,170,69,113,152,108,228,254,133,137,63,238,45,219,46,23,166,0,161,8,166,160\")),bytes(abi.encode(\"196,238,88,104,60,128,93,120,55,185,224,213,42,73,120,98,116,101,169,37,49,93,90,98,26,11,229,193,42,37,185,126\")),bytes(abi.encode(\"161,5,205,245,216,102,65,193,107,134,182,202,165,173,229,178,165,234,190,176,192,5,225,65,18,62,42,237,137,247,13,105\")),bytes(abi.encode(\"26,83,27,70,70,102,93,164,42,255,40,88,33,143,143,166,56,95,174,43,242,200,26,179,212,195,247,184,157,237,85,244\"))]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.806ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[194,188,129,172,71,138,79,243,172,195,185,220,204,135,217,95,204,251,62,54,109,126,132,142,164,12,102,1,40,189,21,204],[173,63,116,236,197,100,143,50,82,252,75,107,190,225,32,104,219,44,168,155,150,98,251,201,157,194,42,232,199,55,150,153],[163,132,201,166,131,27,242,156,148,199,242,246,20,56,145,190,98,230,158,119,145,205,118,31,117,31,227,154,214,75,229,178],[203,5,208,37,114,169,87,205,112,37,226,18,224,124,174,131,71,184,42,181,193,230,157,186,33,36,52,189,97,130,77,237],[76,193,67,244,36,184,135,96,230,143,184,141,209,225,187,103,150,124,251,163,17,195,174,224,228,53,79,205,71,75,224,127],[69,20,62,121,214,60,245,21,185,222,32,180,91,82,77,138,195,246,49,86,188,100,34,217,242,228,133,250,240,95,201,28],[94,148,19,162,173,29,32,189,22,205,53,239,252,61,72,222,3,217,171,246,179,70,90,128,219,227,135,132,253,63,64,176]]",
              "sol": "[bytes(abi.encode(\"194,188,129,172,71,138,79,243,172,195,185,220,204,135,217,95,204,251,62,54,109,126,132,142,164,12,102,1,40,189,21,204\")),bytes(abi.encode(\"173,63,116,236,197,100,143,50,82,252,75,107,190,225,32,104,219,44,168,155,150,98,251,201,157,194,42,232,199,55,150,153\")),bytes(abi.encode(\"163,132,201,166,131,27,242,156,148,199,242,246,20,56,145,190,98,230,158,119,145,205,118,31,117,31,227,154,214,75,229,178\")),bytes(abi.encode(\"203,5,208,37,114,169,87,205,112,37,226,18,224,124,174,131,71,184,42,181,193,230,157,186,33,36,52,189,97,130,77,237\")),bytes(abi.encode(\"76,193,67,244,36,184,135,96,230,143,184,141,209,225,187,103,150,124,251,163,17,195,174,224,228,53,79,205,71,75,224,127\")),bytes(abi.encode(\"69,20,62,121,214,60,245,21,185,222,32,180,91,82,77,138,195,246,49,86,188,100,34,217,242,228,133,250,240,95,201,28\")),bytes(abi.encode(\"94,148,19,162,173,29,32,189,22,205,53,239,252,61,72,222,3,217,171,246,179,70,90,128,219,227,135,132,253,63,64,176\"))]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.806ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[60,180,111,106,190,89,88,45,108,125,244,148,91,226,56,34,28,107,115,72,138,21,14,162,5,61,81,210,218,74,172,242]]",
              "sol": "[bytes(abi.encode(\"60,180,111,106,190,89,88,45,108,125,244,148,91,226,56,34,28,107,115,72,138,21,14,162,5,61,81,210,218,74,172,242\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.807ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[35,241,37,120,239,255,144,208,181,251,17,162,8,189,10,98,29,109,23,18,0,204,89,128,3,134,44,21,32,236,89,69]]",
              "sol": "[bytes(abi.encode(\"35,241,37,120,239,255,144,208,181,251,17,162,8,189,10,98,29,109,23,18,0,204,89,128,3,134,44,21,32,236,89,69\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.808ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[140,175,222,125,135,187,174,63,41,109,77,10,99,213,187,29,29,252,64,244,138,140,197,59,88,138,136,133,92,141,202,199]]",
              "sol": "[bytes(abi.encode(\"140,175,222,125,135,187,174,63,41,109,77,10,99,213,187,29,29,252,64,244,138,140,197,59,88,138,136,133,92,141,202,199\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.808ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[196,58,227,104,6,87,182,40,161,238,231,75,200,69,95,61,129,37,4,72,186,164,114,2,113,31,21,92,154,77,146,0]]",
              "sol": "[bytes(abi.encode(\"196,58,227,104,6,87,182,40,161,238,231,75,200,69,95,61,129,37,4,72,186,164,114,2,113,31,21,92,154,77,146,0\"))]"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.809ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[53,153,51,231,242,191,27,154,179,165,24,113,34,126,81,205,226,219,46,105,46,133,35,164,27,27,223,151,255,175,93,95],[226,27,146,10,17,14,166,26,8,235,69,5,154,234,225,191,36,84,130,195,88,255,198,9,178,9,203,229,204,201,30,245]]",
              "sol": "[bytes(abi.encode(\"53,153,51,231,242,191,27,154,179,165,24,113,34,126,81,205,226,219,46,105,46,133,35,164,27,27,223,151,255,175,93,95\")),bytes(abi.encode(\"226,27,146,10,17,14,166,26,8,235,69,5,154,234,225,191,36,84,130,195,88,255,198,9,178,9,203,229,204,201,30,245\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.810ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[14,170,84,175,0,58,10,64,60,145,30,94,109,198,71,29,30,69,202,245,88,100,205,135,70,11,66,32,41,217,63,71],[37,31,121,93,4,170,206,242,117,43,174,170,101,31,31,192,111,34,200,5,161,12,210,144,216,78,156,172,253,71,183,67]]",
              "sol": "[bytes(abi.encode(\"14,170,84,175,0,58,10,64,60,145,30,94,109,198,71,29,30,69,202,245,88,100,205,135,70,11,66,32,41,217,63,71\")),bytes(abi.encode(\"37,31,121,93,4,170,206,242,117,43,174,170,101,31,31,192,111,34,200,5,161,12,210,144,216,78,156,172,253,71,183,67\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.810ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"lrcdib\"",
              "sol": "\"lrcdib\""
            },
            {
              "js": "[[0,110,253,162,254,219,217,8,247,130,165,150,46,162,130,248,86,209,101,129,3,116,123,126,216,229,73,61,103,144,134,124],[164,37,44,17,190,170,24,47,140,29,28,191,198,146,38,5,219,191,116,110,193,204,7,221,245,89,160,250,61,61,78,160]]",
              "sol": "[bytes(abi.encode(\"0,110,253,162,254,219,217,8,247,130,165,150,46,162,130,248,86,209,101,129,3,116,123,126,216,229,73,61,103,144,134,124\")),bytes(abi.encode(\"164,37,44,17,190,170,24,47,140,29,28,191,198,146,38,5,219,191,116,110,193,204,7,221,245,89,160,250,61,61,78,160\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.811ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[147,149,159,149,189,158,78,80,191,227,239,138,179,115,18,112,6,109,95,137,114,168,98,166,146,67,194,128,61,56,205,94],[199,125,189,47,168,51,208,159,8,187,112,194,199,21,203,59,172,88,57,113,222,211,253,167,48,97,207,171,224,97,7,151]]",
              "sol": "[bytes(abi.encode(\"147,149,159,149,189,158,78,80,191,227,239,138,179,115,18,112,6,109,95,137,114,168,98,166,146,67,194,128,61,56,205,94\")),bytes(abi.encode(\"199,125,189,47,168,51,208,159,8,187,112,194,199,21,203,59,172,88,57,113,222,211,253,167,48,97,207,171,224,97,7,151\"))]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.811ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[164,111,118,47,68,98,96,101,188,16,142,108,180,190,33,239,94,203,68,205,232,137,8,197,66,189,215,183,200,148,156,245],[91,89,2,50,254,239,180,241,116,196,136,213,141,122,61,56,229,240,254,29,157,175,202,251,60,7,114,54,100,152,75,174],[28,60,60,113,4,224,167,211,249,150,126,170,138,191,0,73,10,165,176,212,196,193,143,95,13,81,120,116,139,0,12,213]]",
              "sol": "[bytes(abi.encode(\"164,111,118,47,68,98,96,101,188,16,142,108,180,190,33,239,94,203,68,205,232,137,8,197,66,189,215,183,200,148,156,245\")),bytes(abi.encode(\"91,89,2,50,254,239,180,241,116,196,136,213,141,122,61,56,229,240,254,29,157,175,202,251,60,7,114,54,100,152,75,174\")),bytes(abi.encode(\"28,60,60,113,4,224,167,211,249,150,126,170,138,191,0,73,10,165,176,212,196,193,143,95,13,81,120,116,139,0,12,213\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.812ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[203,214,7,133,246,99,26,202,100,23,239,147,207,249,51,253,30,121,45,181,66,60,228,19,94,60,71,253,41,75,121,29],[206,218,127,49,51,229,161,205,153,145,207,159,93,190,98,56,69,94,186,8,217,228,4,225,199,232,241,127,45,16,161,87],[243,118,22,71,1,112,143,60,2,20,67,26,191,46,70,215,125,83,172,2,189,129,227,108,191,19,82,94,65,207,18,85]]",
              "sol": "[bytes(abi.encode(\"203,214,7,133,246,99,26,202,100,23,239,147,207,249,51,253,30,121,45,181,66,60,228,19,94,60,71,253,41,75,121,29\")),bytes(abi.encode(\"206,218,127,49,51,229,161,205,153,145,207,159,93,190,98,56,69,94,186,8,217,228,4,225,199,232,241,127,45,16,161,87\")),bytes(abi.encode(\"243,118,22,71,1,112,143,60,2,20,67,26,191,46,70,215,125,83,172,2,189,129,227,108,191,19,82,94,65,207,18,85\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.812ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[8,129,104,88,16,179,211,165,158,32,237,125,169,209,13,95,175,5,116,175,139,92,39,58,81,103,45,128,181,198,187,220],[193,181,8,161,175,152,110,174,248,110,102,21,193,152,106,229,237,142,83,232,233,56,85,6,44,208,192,105,50,110,146,200],[148,55,162,74,229,155,8,152,64,246,184,133,203,175,173,173,63,120,116,136,225,231,108,203,170,122,206,162,66,234,16,208]]",
              "sol": "[bytes(abi.encode(\"8,129,104,88,16,179,211,165,158,32,237,125,169,209,13,95,175,5,116,175,139,92,39,58,81,103,45,128,181,198,187,220\")),bytes(abi.encode(\"193,181,8,161,175,152,110,174,248,110,102,21,193,152,106,229,237,142,83,232,233,56,85,6,44,208,192,105,50,110,146,200\")),bytes(abi.encode(\"148,55,162,74,229,155,8,152,64,246,184,133,203,175,173,173,63,120,116,136,225,231,108,203,170,122,206,162,66,234,16,208\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.813ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"biyuu6\"",
              "sol": "\"biyuu6\""
            },
            {
              "js": "[[99,114,44,125,137,250,126,171,233,33,33,199,139,220,0,180,133,27,199,111,134,236,132,240,18,83,48,186,242,167,32,98],[226,78,231,202,138,197,142,162,41,12,23,149,31,244,86,15,9,185,113,253,20,146,223,153,4,82,165,237,102,110,50,53],[60,233,154,203,103,187,67,143,234,148,206,147,165,54,159,8,139,12,195,204,16,121,83,204,14,164,59,94,60,214,13,140]]",
              "sol": "[bytes(abi.encode(\"99,114,44,125,137,250,126,171,233,33,33,199,139,220,0,180,133,27,199,111,134,236,132,240,18,83,48,186,242,167,32,98\")),bytes(abi.encode(\"226,78,231,202,138,197,142,162,41,12,23,149,31,244,86,15,9,185,113,253,20,146,223,153,4,82,165,237,102,110,50,53\")),bytes(abi.encode(\"60,233,154,203,103,187,67,143,234,148,206,147,165,54,159,8,139,12,195,204,16,121,83,204,14,164,59,94,60,214,13,140\"))]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.814ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[225,117,26,61,67,241,63,67,137,57,47,64,187,232,53,30,46,173,86,5,106,115,248,136,147,104,167,188,157,39,16,34],[73,76,216,47,57,248,70,35,172,36,228,107,7,52,115,39,70,130,107,177,232,239,187,246,200,150,13,197,18,126,152,121],[50,64,12,26,76,190,119,199,194,76,128,122,219,214,54,238,241,50,58,43,29,178,16,25,71,245,149,91,32,179,12,200],[136,33,110,207,8,109,166,142,85,52,47,77,49,0,20,118,120,4,93,154,188,81,55,85,144,11,210,180,223,241,117,146]]",
              "sol": "[bytes(abi.encode(\"225,117,26,61,67,241,63,67,137,57,47,64,187,232,53,30,46,173,86,5,106,115,248,136,147,104,167,188,157,39,16,34\")),bytes(abi.encode(\"73,76,216,47,57,248,70,35,172,36,228,107,7,52,115,39,70,130,107,177,232,239,187,246,200,150,13,197,18,126,152,121\")),bytes(abi.encode(\"50,64,12,26,76,190,119,199,194,76,128,122,219,214,54,238,241,50,58,43,29,178,16,25,71,245,149,91,32,179,12,200\")),bytes(abi.encode(\"136,33,110,207,8,109,166,142,85,52,47,77,49,0,20,118,120,4,93,154,188,81,55,85,144,11,210,180,223,241,117,146\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.814ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[166,215,134,108,252,214,76,146,82,239,4,111,197,143,111,152,71,73,167,31,88,17,204,15,189,87,201,239,51,239,97,146],[13,59,0,85,229,73,69,108,82,58,153,228,114,42,155,143,230,159,73,184,123,161,44,162,203,33,3,34,243,173,84,179],[85,27,172,153,176,157,225,147,170,204,130,69,234,112,89,229,69,159,46,144,165,158,109,184,11,114,184,63,197,80,97,23],[179,216,36,51,93,45,8,166,48,164,237,42,136,198,37,81,17,252,82,209,42,16,103,127,215,197,212,194,191,125,133,158]]",
              "sol": "[bytes(abi.encode(\"166,215,134,108,252,214,76,146,82,239,4,111,197,143,111,152,71,73,167,31,88,17,204,15,189,87,201,239,51,239,97,146\")),bytes(abi.encode(\"13,59,0,85,229,73,69,108,82,58,153,228,114,42,155,143,230,159,73,184,123,161,44,162,203,33,3,34,243,173,84,179\")),bytes(abi.encode(\"85,27,172,153,176,157,225,147,170,204,130,69,234,112,89,229,69,159,46,144,165,158,109,184,11,114,184,63,197,80,97,23\")),bytes(abi.encode(\"179,216,36,51,93,45,8,166,48,164,237,42,136,198,37,81,17,252,82,209,42,16,103,127,215,197,212,194,191,125,133,158\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.815ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"wgh89\"",
              "sol": "\"wgh89\""
            },
            {
              "js": "[[217,113,248,231,33,228,247,157,142,209,217,199,81,244,207,123,193,243,139,83,15,102,29,39,139,130,208,179,193,6,238,46],[184,211,30,134,92,121,144,216,161,193,123,210,219,32,124,177,114,145,248,38,1,90,127,80,176,58,171,135,132,177,42,14],[134,107,112,51,209,166,183,17,222,145,49,34,247,2,213,60,123,136,101,16,195,12,95,8,193,9,163,7,60,120,2,15],[124,158,131,202,36,5,228,204,122,179,90,162,16,197,132,74,227,232,109,222,147,198,34,147,250,244,49,3,186,188,215,121]]",
              "sol": "[bytes(abi.encode(\"217,113,248,231,33,228,247,157,142,209,217,199,81,244,207,123,193,243,139,83,15,102,29,39,139,130,208,179,193,6,238,46\")),bytes(abi.encode(\"184,211,30,134,92,121,144,216,161,193,123,210,219,32,124,177,114,145,248,38,1,90,127,80,176,58,171,135,132,177,42,14\")),bytes(abi.encode(\"134,107,112,51,209,166,183,17,222,145,49,34,247,2,213,60,123,136,101,16,195,12,95,8,193,9,163,7,60,120,2,15\")),bytes(abi.encode(\"124,158,131,202,36,5,228,204,122,179,90,162,16,197,132,74,227,232,109,222,147,198,34,147,250,244,49,3,186,188,215,121\"))]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.815ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[109,101,158,152,150,127,152,235,203,84,95,106,34,84,142,200,234,128,162,224,28,70,167,120,35,1,149,23,214,254,34,150],[57,225,242,213,236,211,13,126,112,129,96,248,222,128,66,209,171,53,211,205,168,252,10,254,98,157,161,115,169,79,113,9],[57,12,193,57,131,144,164,151,172,21,144,56,196,69,234,63,143,185,191,18,10,182,106,78,46,125,241,218,35,150,104,100],[111,231,199,137,74,93,2,242,8,164,164,5,87,187,238,1,153,8,43,139,86,206,238,33,17,166,59,205,185,112,223,95]]",
              "sol": "[bytes(abi.encode(\"109,101,158,152,150,127,152,235,203,84,95,106,34,84,142,200,234,128,162,224,28,70,167,120,35,1,149,23,214,254,34,150\")),bytes(abi.encode(\"57,225,242,213,236,211,13,126,112,129,96,248,222,128,66,209,171,53,211,205,168,252,10,254,98,157,161,115,169,79,113,9\")),bytes(abi.encode(\"57,12,193,57,131,144,164,151,172,21,144,56,196,69,234,63,143,185,191,18,10,182,106,78,46,125,241,218,35,150,104,100\")),bytes(abi.encode(\"111,231,199,137,74,93,2,242,8,164,164,5,87,187,238,1,153,8,43,139,86,206,238,33,17,166,59,205,185,112,223,95\"))]"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.818ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[164,62,103,17,69,96,93,63,244,86,203,45,142,118,124,93,153,196,147,203,221,227,254,129,207,82,112,9,56,34,187,227],[183,101,96,49,151,14,31,131,241,64,120,247,221,193,184,124,184,209,38,187,169,136,154,149,126,57,66,92,99,174,67,228],[231,48,217,140,168,57,45,71,54,152,219,198,77,201,141,122,43,186,84,91,73,198,62,114,131,1,132,48,252,150,194,139],[177,180,47,29,99,69,224,47,52,39,13,20,141,165,71,23,196,215,97,186,61,121,222,84,46,76,67,202,233,51,84,138],[239,209,177,226,194,100,51,110,109,107,221,216,168,169,227,125,92,227,201,229,207,13,172,192,5,158,129,38,103,4,116,132]]",
              "sol": "[bytes(abi.encode(\"164,62,103,17,69,96,93,63,244,86,203,45,142,118,124,93,153,196,147,203,221,227,254,129,207,82,112,9,56,34,187,227\")),bytes(abi.encode(\"183,101,96,49,151,14,31,131,241,64,120,247,221,193,184,124,184,209,38,187,169,136,154,149,126,57,66,92,99,174,67,228\")),bytes(abi.encode(\"231,48,217,140,168,57,45,71,54,152,219,198,77,201,141,122,43,186,84,91,73,198,62,114,131,1,132,48,252,150,194,139\")),bytes(abi.encode(\"177,180,47,29,99,69,224,47,52,39,13,20,141,165,71,23,196,215,97,186,61,121,222,84,46,76,67,202,233,51,84,138\")),bytes(abi.encode(\"239,209,177,226,194,100,51,110,109,107,221,216,168,169,227,125,92,227,201,229,207,13,172,192,5,158,129,38,103,4,116,132\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.820ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"biyuu6\"",
              "sol": "\"biyuu6\""
            },
            {
              "js": "[[199,159,201,23,123,34,1,19,96,215,13,2,169,198,132,63,199,230,138,188,232,118,143,129,107,96,136,198,138,75,125,43],[170,235,37,201,218,200,51,236,63,151,28,79,25,62,193,169,213,153,240,139,159,100,166,145,219,95,184,189,150,227,134,200],[4,93,114,219,144,203,150,77,134,50,166,116,139,126,77,91,125,255,110,74,146,102,39,81,236,25,249,231,147,139,159,248],[156,16,217,171,103,246,243,105,132,246,126,131,106,242,139,113,225,100,91,117,26,44,173,201,2,6,134,159,25,15,186,187],[218,189,215,99,249,210,63,28,97,10,116,220,93,246,47,44,77,12,208,166,170,92,197,174,7,64,56,185,63,58,248,36]]",
              "sol": "[bytes(abi.encode(\"199,159,201,23,123,34,1,19,96,215,13,2,169,198,132,63,199,230,138,188,232,118,143,129,107,96,136,198,138,75,125,43\")),bytes(abi.encode(\"170,235,37,201,218,200,51,236,63,151,28,79,25,62,193,169,213,153,240,139,159,100,166,145,219,95,184,189,150,227,134,200\")),bytes(abi.encode(\"4,93,114,219,144,203,150,77,134,50,166,116,139,126,77,91,125,255,110,74,146,102,39,81,236,25,249,231,147,139,159,248\")),bytes(abi.encode(\"156,16,217,171,103,246,243,105,132,246,126,131,106,242,139,113,225,100,91,117,26,44,173,201,2,6,134,159,25,15,186,187\")),bytes(abi.encode(\"218,189,215,99,249,210,63,28,97,10,116,220,93,246,47,44,77,12,208,166,170,92,197,174,7,64,56,185,63,58,248,36\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.821ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[37,27,143,249,12,101,255,153,33,220,20,221,89,140,60,242,87,31,201,98,203,73,79,179,148,246,194,98,100,4,14,237],[83,107,95,198,209,130,72,127,233,14,175,8,11,245,232,1,30,187,212,150,4,2,239,162,52,246,157,188,111,183,106,42],[241,61,125,21,125,7,134,42,28,32,246,89,123,235,74,105,139,51,105,42,246,164,183,193,79,191,208,203,67,244,182,148],[25,57,240,178,177,181,12,137,222,34,104,116,36,1,77,156,132,93,7,211,86,114,138,235,11,43,24,203,127,11,206,173],[50,147,133,149,173,209,16,222,9,146,1,9,84,165,203,95,190,9,50,124,51,230,172,206,6,57,54,163,15,249,207,90]]",
              "sol": "[bytes(abi.encode(\"37,27,143,249,12,101,255,153,33,220,20,221,89,140,60,242,87,31,201,98,203,73,79,179,148,246,194,98,100,4,14,237\")),bytes(abi.encode(\"83,107,95,198,209,130,72,127,233,14,175,8,11,245,232,1,30,187,212,150,4,2,239,162,52,246,157,188,111,183,106,42\")),bytes(abi.encode(\"241,61,125,21,125,7,134,42,28,32,246,89,123,235,74,105,139,51,105,42,246,164,183,193,79,191,208,203,67,244,182,148\")),bytes(abi.encode(\"25,57,240,178,177,181,12,137,222,34,104,116,36,1,77,156,132,93,7,211,86,114,138,235,11,43,24,203,127,11,206,173\")),bytes(abi.encode(\"50,147,133,149,173,209,16,222,9,146,1,9,84,165,203,95,190,9,50,124,51,230,172,206,6,57,54,163,15,249,207,90\"))]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.821ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[97,117,19,31,185,132,41,252,134,19,96,26,67,31,37,112,188,102,113,117,50,91,234,187,219,53,168,42,17,93,190,172],[78,71,140,214,241,252,245,129,42,76,39,239,128,75,246,56,124,214,137,235,231,86,98,229,61,28,189,112,139,62,255,65],[230,165,31,91,196,228,225,131,3,199,154,160,17,60,44,170,62,29,171,150,73,219,217,63,243,4,136,64,79,205,121,192],[199,148,15,36,221,233,157,251,92,27,205,2,234,43,28,132,237,249,12,49,18,104,75,161,239,22,14,223,175,6,29,71],[170,98,42,220,140,177,131,224,48,158,191,115,21,13,219,23,24,137,174,139,105,167,143,117,133,182,104,99,116,16,227,241]]",
              "sol": "[bytes(abi.encode(\"97,117,19,31,185,132,41,252,134,19,96,26,67,31,37,112,188,102,113,117,50,91,234,187,219,53,168,42,17,93,190,172\")),bytes(abi.encode(\"78,71,140,214,241,252,245,129,42,76,39,239,128,75,246,56,124,214,137,235,231,86,98,229,61,28,189,112,139,62,255,65\")),bytes(abi.encode(\"230,165,31,91,196,228,225,131,3,199,154,160,17,60,44,170,62,29,171,150,73,219,217,63,243,4,136,64,79,205,121,192\")),bytes(abi.encode(\"199,148,15,36,221,233,157,251,92,27,205,2,234,43,28,132,237,249,12,49,18,104,75,161,239,22,14,223,175,6,29,71\")),bytes(abi.encode(\"170,98,42,220,140,177,131,224,48,158,191,115,21,13,219,23,24,137,174,139,105,167,143,117,133,182,104,99,116,16,227,241\"))]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.822ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[130]",
              "sol": "bytes1(\"130\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.822ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.823ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.823ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.823ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.824ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.824ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"wgh89\"",
              "sol": "\"wgh89\""
            },
            {
              "js": "\"efn1a\"",
              "sol": "\"efn1a\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.825ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.825ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"wgh89\"",
              "sol": "\"wgh89\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.825ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.826ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"rp8bq\"",
              "sol": "\"rp8bq\""
            },
            {
              "js": "\"efn1a\"",
              "sol": "\"efn1a\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"rp8bq\"",
              "sol": "\"rp8bq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.826ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"tpmofl\"",
              "sol": "\"tpmofl\""
            },
            {
              "js": "\"ogtcur\"",
              "sol": "\"ogtcur\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"ogtcur\"",
              "sol": "\"ogtcur\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.826ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.827ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"wgh89\"",
              "sol": "\"wgh89\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.828ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"h34xi\"",
              "sol": "\"h34xi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.828ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"rp8bq\"",
              "sol": "\"rp8bq\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.829ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.830ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"IsLibrary\"]",
              "sol": "[string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.830ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[41,197,182,197,192,41,47,123,40,248,19,120,166,23,89,223,234,4,75,94,160,248,212,206,54,88,61,62,8,141,3,50],[136,226,100,231,108,255,86,35,152,228,219,176,73,57,233,112,121,28,187,245,139,191,106,40,36,2,7,230,110,146,164,251],[71,145,177,181,102,88,9,188,54,171,104,201,40,45,150,200,158,93,102,215,92,26,178,241,200,234,34,109,152,127,77,39],[132,3,1,222,163,100,174,246,126,132,156,202,2,176,87,240,49,70,52,100,118,95,140,16,159,86,62,219,67,237,127,159],[133,216,194,189,162,13,0,169,28,3,175,211,211,116,46,0,253,208,67,222,104,115,255,48,148,230,102,127,15,51,29,52],[173,50,61,165,189,58,14,206,240,171,28,162,62,125,206,70,49,174,230,89,66,141,196,124,60,119,24,117,200,151,6,177],[134,224,219,53,72,119,57,98,237,101,175,210,93,133,184,63,248,10,199,44,22,6,144,127,211,91,222,134,58,94,74,87]]",
              "sol": "[bytes(abi.encode(\"41,197,182,197,192,41,47,123,40,248,19,120,166,23,89,223,234,4,75,94,160,248,212,206,54,88,61,62,8,141,3,50\")),bytes(abi.encode(\"136,226,100,231,108,255,86,35,152,228,219,176,73,57,233,112,121,28,187,245,139,191,106,40,36,2,7,230,110,146,164,251\")),bytes(abi.encode(\"71,145,177,181,102,88,9,188,54,171,104,201,40,45,150,200,158,93,102,215,92,26,178,241,200,234,34,109,152,127,77,39\")),bytes(abi.encode(\"132,3,1,222,163,100,174,246,126,132,156,202,2,176,87,240,49,70,52,100,118,95,140,16,159,86,62,219,67,237,127,159\")),bytes(abi.encode(\"133,216,194,189,162,13,0,169,28,3,175,211,211,116,46,0,253,208,67,222,104,115,255,48,148,230,102,127,15,51,29,52\")),bytes(abi.encode(\"173,50,61,165,189,58,14,206,240,171,28,162,62,125,206,70,49,174,230,89,66,141,196,124,60,119,24,117,200,151,6,177\")),bytes(abi.encode(\"134,224,219,53,72,119,57,98,237,101,175,210,93,133,184,63,248,10,199,44,22,6,144,127,211,91,222,134,58,94,74,87\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.831ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.832ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[109,197,200,94,115,182,124,163,54,120,145,68,130,193,71,83,251,126,22,82,72,118,31,73,82,161,231,4,74,121,202,112]",
              "sol": "stringToBytes32(\"109,197,200,94,115,182,124,163,54,120,145,68,130,193,71,83,251,126,22,82,72,118,31,73,82,161,231,4,74,121,202,112\")"
            },
            {
              "js": "[182,33,57,233,154,22,160,107,56,67,225,16,252,113,122,54,86,49,68,194,46,98,144,23,134,183,207,142,105,47,159,92]",
              "sol": "stringToBytes32(\"182,33,57,233,154,22,160,107,56,67,225,16,252,113,122,54,86,49,68,194,46,98,144,23,134,183,207,142,105,47,159,92\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.833ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[153,39,11,171,236,207,36,232,146,202,20,71,104,220,93,48,59,151,134,140,215,75,165,104,156,208,198,135,201,175,147,209]",
              "sol": "stringToBytes32(\"153,39,11,171,236,207,36,232,146,202,20,71,104,220,93,48,59,151,134,140,215,75,165,104,156,208,198,135,201,175,147,209\")"
            },
            {
              "js": "[64,244,119,248,25,158,10,5,251,182,201,223,133,147,182,43,38,219,200,44,126,16,18,69,127,102,119,72,155,125,57,41]",
              "sol": "abi.encode(\"64,244,119,248,25,158,10,5,251,182,201,223,133,147,182,43,38,219,200,44,126,16,18,69,127,102,119,72,155,125,57,41\")"
            },
            {
              "js": "[162,180,194,90,224,49,226,255,249,10,213,235,31,102,182,43,37,215,213,208,33,239,140,125,32,127,176,60,109,3,122,137]",
              "sol": "abi.encode(\"162,180,194,90,224,49,226,255,249,10,213,235,31,102,182,43,37,215,213,208,33,239,140,125,32,127,176,60,109,3,122,137\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.833ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[111,236,154,226,142,99,192,138,187,157,33,96,76,135,190,152,234,182,149,22,200,109,95,159,75,174,165,206,220,113,74,9]",
              "sol": "abi.encode(\"111,236,154,226,142,99,192,138,187,157,33,96,76,135,190,152,234,182,149,22,200,109,95,159,75,174,165,206,220,113,74,9\")"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[76,43,88,248,97,8,63,124,62,167,152,241,60,155,85,160,122,200,183,93,213,37,46,114,8,88,240,19,91,176,5,113]",
              "sol": "abi.encode(\"76,43,88,248,97,8,63,124,62,167,152,241,60,155,85,160,122,200,183,93,213,37,46,114,8,88,240,19,91,176,5,113\")"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.835ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[8,117,116,181,65,189,67,120,89,65,179,163,106,201,60,3,169,224,250,16,122,148,15,221,115,250,190,66,145,222,72,187]",
              "sol": "stringToBytes32(\"8,117,116,181,65,189,67,120,89,65,179,163,106,201,60,3,169,224,250,16,122,148,15,221,115,250,190,66,145,222,72,187\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[135,30,115,239,18,140,29,128,248,139,63,135,190,219,11,63,208,23,128,136,244,89,153,210,22,60,131,101,240,38,239,165]",
              "sol": "abi.encode(\"135,30,115,239,18,140,29,128,248,139,63,135,190,219,11,63,208,23,128,136,244,89,153,210,22,60,131,101,240,38,239,165\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[187,58,82,104,59,228,220,202,99,83,67,136,212,62,180,183,254,61,40,168,232,140,7,128,20,99,108,222,175,106,101,208]",
              "sol": "stringToBytes32(\"187,58,82,104,59,228,220,202,99,83,67,136,212,62,180,183,254,61,40,168,232,140,7,128,20,99,108,222,175,106,101,208\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[89,188,7,158,157,52,247,159,23,145,31,126,138,159,127,106,254,249,5,115,215,69,212,243,118,169,48,46,41,249,247,249]",
              "sol": "abi.encode(\"89,188,7,158,157,52,247,159,23,145,31,126,138,159,127,106,254,249,5,115,215,69,212,243,118,169,48,46,41,249,247,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.836ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[130,61,106,239,184,90,246,75,232,107,247,31,57,31,140,206,221,122,87,196,93,22,128,4,201,134,65,222,97,222,210,6]",
              "sol": "stringToBytes32(\"130,61,106,239,184,90,246,75,232,107,247,31,57,31,140,206,221,122,87,196,93,22,128,4,201,134,65,222,97,222,210,6\")"
            },
            {
              "js": "[49,188,154,167,212,65,26,157,212,91,6,96,134,8,141,48,232,60,124,145,248,99,38,98,46,0,203,211,139,242,75,139]",
              "sol": "abi.encode(\"49,188,154,167,212,65,26,157,212,91,6,96,134,8,141,48,232,60,124,145,248,99,38,98,46,0,203,211,139,242,75,139\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[130,61,106,239,184,90,246,75,232,107,247,31,57,31,140,206,221,122,87,196,93,22,128,4,201,134,65,222,97,222,210,6]",
                "sol": "stringToBytes32(\"130,61,106,239,184,90,246,75,232,107,247,31,57,31,140,206,221,122,87,196,93,22,128,4,201,134,65,222,97,222,210,6\")"
              },
              {
                "js": "[144,11,224,61,197,147,6,171,32,100,82,172,111,0,191,86,108,88,93,9,226,155,180,102,127,136,31,127,191,120,27,212,108]",
                "sol": "bytes33(\"144,11,224,61,197,147,6,171,32,100,82,172,111,0,191,86,108,88,93,9,226,155,180,102,127,136,31,127,191,120,27,212,108\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.838ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[55,186,94,237,53,46,151,8,248,121,129,64,143,96,55,249,241,75,52,73,182,130,55,90,123,242,10,161,24,155,77,55]",
              "sol": "abi.encode(\"55,186,94,237,53,46,151,8,248,121,129,64,143,96,55,249,241,75,52,73,182,130,55,90,123,242,10,161,24,155,77,55\")"
            },
            {
              "js": "[190,70,75,117,60,66,223,231,229,130,205,49,177,29,127,223,67,100,123,182,235,119,250,86,134,12,249,245,186,167,113,127]",
              "sol": "stringToBytes32(\"190,70,75,117,60,66,223,231,229,130,205,49,177,29,127,223,67,100,123,182,235,119,250,86,134,12,249,245,186,167,113,127\")"
            },
            {
              "js": "[47,188,67,104,186,191,121,197,51,81,206,80,60,252,188,44,39,152,102,201,180,244,96,117,194,132,142,233,170,241,11,203]",
              "sol": "abi.encode(\"47,188,67,104,186,191,121,197,51,81,206,80,60,252,188,44,39,152,102,201,180,244,96,117,194,132,142,233,170,241,11,203\")"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[5,57,242,197,197,24,70,176,148,127,50,198,166,64,131,168,199,122,234,131,191,191,34,21,1,40,32,113,101,44,26,104]",
              "sol": "abi.encode(\"5,57,242,197,197,24,70,176,148,127,50,198,166,64,131,168,199,122,234,131,191,191,34,21,1,40,32,113,101,44,26,104\")"
            },
            {
              "js": "[136,152,192,228,228,181,110,187,132,179,216,24,63,215,6,28,63,65,129,8,192,118,3,112,225,120,236,74,96,250,92,167]",
              "sol": "stringToBytes32(\"136,152,192,228,228,181,110,187,132,179,216,24,63,215,6,28,63,65,129,8,192,118,3,112,225,120,236,74,96,250,92,167\")"
            },
            {
              "js": "[220,35,147,250,183,75,57,191,131,14,193,137,75,132,240,127,79,224,133,71,6,162,249,228,29,202,243,155,183,132,187,208]",
              "sol": "abi.encode(\"220,35,147,250,183,75,57,191,131,14,193,137,75,132,240,127,79,224,133,71,6,162,249,228,29,202,243,155,183,132,187,208\")"
            },
            {
              "js": "\"lrcdib\"",
              "sol": "\"lrcdib\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[236,85,156,109,35,11,105,245,156,183,242,133,237,55,26,110,4,65,191,17,64,177,186,110,132,188,167,121,145,17,67,121]",
              "sol": "abi.encode(\"236,85,156,109,35,11,105,245,156,183,242,133,237,55,26,110,4,65,191,17,64,177,186,110,132,188,167,121,145,17,67,121\")"
            },
            {
              "js": "[40,183,189,60,188,49,78,58,121,81,13,251,150,69,30,9,207,63,72,121,169,249,22,232,44,205,162,241,55,38,158,20]",
              "sol": "stringToBytes32(\"40,183,189,60,188,49,78,58,121,81,13,251,150,69,30,9,207,63,72,121,169,249,22,232,44,205,162,241,55,38,158,20\")"
            },
            {
              "js": "[32,47,95,212,48,89,42,46,86,181,250,3,235,129,180,131,234,213,118,2,26,22,197,255,94,204,67,98,21,13,135,39]",
              "sol": "abi.encode(\"32,47,95,212,48,89,42,46,86,181,250,3,235,129,180,131,234,213,118,2,26,22,197,255,94,204,67,98,21,13,135,39\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[126,62,98,250,13,155,45,192,113,3,167,124,172,90,184,3,18,49,25,19,224,132,148,179,210,130,36,140,232,181,197,230]",
              "sol": "abi.encode(\"126,62,98,250,13,155,45,192,113,3,167,124,172,90,184,3,18,49,25,19,224,132,148,179,210,130,36,140,232,181,197,230\")"
            },
            {
              "js": "[176,111,71,211,203,210,236,47,172,214,128,123,8,111,230,88,168,9,195,85,159,106,143,180,172,164,64,110,33,250,196,82]",
              "sol": "stringToBytes32(\"176,111,71,211,203,210,236,47,172,214,128,123,8,111,230,88,168,9,195,85,159,106,143,180,172,164,64,110,33,250,196,82\")"
            },
            {
              "js": "[27,152,107,239,16,143,183,122,183,65,114,143,128,69,186,98,9,248,202,41,206,218,21,131,44,165,145,55,25,180,150,86]",
              "sol": "abi.encode(\"27,152,107,239,16,143,183,122,183,65,114,143,128,69,186,98,9,248,202,41,206,218,21,131,44,165,145,55,25,180,150,86\")"
            },
            {
              "js": "\"rp8bq\"",
              "sol": "\"rp8bq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[225,51,219,74,80,134,235,200,118,27,115,187,255,202,132,89,207,244,200,95,87,45,85,3,169,21,35,238,238,24,61,229]",
              "sol": "abi.encode(\"225,51,219,74,80,134,235,200,118,27,115,187,255,202,132,89,207,244,200,95,87,45,85,3,169,21,35,238,238,24,61,229\")"
            },
            {
              "js": "[95,115,65,163,184,66,2,161,255,238,189,151,63,152,165,133,54,36,92,55,79,155,115,225,63,184,73,15,179,182,212,208]",
              "sol": "stringToBytes32(\"95,115,65,163,184,66,2,161,255,238,189,151,63,152,165,133,54,36,92,55,79,155,115,225,63,184,73,15,179,182,212,208\")"
            },
            {
              "js": "[41,43,130,57,140,101,89,125,220,162,216,133,237,38,154,23,109,106,194,36,72,74,32,174,178,227,99,104,140,12,208,124]",
              "sol": "abi.encode(\"41,43,130,57,140,101,89,125,220,162,216,133,237,38,154,23,109,106,194,36,72,74,32,174,178,227,99,104,140,12,208,124\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[84,251,221,156,6,193,34,136,217,207,173,212,50,27,82,126,63,117,93,150,149,203,193,14,221,92,69,237,152,143,33,131]",
              "sol": "abi.encode(\"84,251,221,156,6,193,34,136,217,207,173,212,50,27,82,126,63,117,93,150,149,203,193,14,221,92,69,237,152,143,33,131\")"
            },
            {
              "js": "[182,230,218,174,125,177,134,227,254,247,220,12,32,182,94,167,89,55,60,35,225,91,229,81,85,152,252,69,167,233,160,230]",
              "sol": "stringToBytes32(\"182,230,218,174,125,177,134,227,254,247,220,12,32,182,94,167,89,55,60,35,225,91,229,81,85,152,252,69,167,233,160,230\")"
            },
            {
              "js": "[141,55,9,53,8,58,151,250,111,44,102,37,85,149,250,160,108,122,214,236,54,161,98,164,200,217,168,250,87,78,146,107]",
              "sol": "abi.encode(\"141,55,9,53,8,58,151,250,111,44,102,37,85,149,250,160,108,122,214,236,54,161,98,164,200,217,168,250,87,78,146,107\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[27,220,148,112,18,95,16,90,5,145,253,39,50,125,45,125,13,236,156,100,124,49,211,220,46,173,136,61,187,21,111,232]",
              "sol": "abi.encode(\"27,220,148,112,18,95,16,90,5,145,253,39,50,125,45,125,13,236,156,100,124,49,211,220,46,173,136,61,187,21,111,232\")"
            },
            {
              "js": "[86,239,73,232,46,118,165,32,125,61,199,100,232,144,157,175,138,1,92,178,177,147,153,191,137,235,239,97,101,216,78,124]",
              "sol": "stringToBytes32(\"86,239,73,232,46,118,165,32,125,61,199,100,232,144,157,175,138,1,92,178,177,147,153,191,137,235,239,97,101,216,78,124\")"
            },
            {
              "js": "[209,52,219,201,14,110,102,217,170,105,241,232,78,47,248,196,249,156,254,232,183,73,170,164,26,255,53,214,54,107,56,112]",
              "sol": "abi.encode(\"209,52,219,201,14,110,102,217,170,105,241,232,78,47,248,196,249,156,254,232,183,73,170,164,26,255,53,214,54,107,56,112\")"
            },
            {
              "js": "\"tpmofl\"",
              "sol": "\"tpmofl\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[50,100,211,123,235,154,188,124,247,130,166,32,236,44,235,150,174,134,66,202,96,71,96,100,27,8,39,95,187,140,7,54]",
              "sol": "abi.encode(\"50,100,211,123,235,154,188,124,247,130,166,32,236,44,235,150,174,134,66,202,96,71,96,100,27,8,39,95,187,140,7,54\")"
            },
            {
              "js": "[166,53,247,107,235,80,222,253,0,52,40,231,208,197,94,159,43,184,2,189,55,176,228,33,149,233,0,131,61,181,148,134]",
              "sol": "stringToBytes32(\"166,53,247,107,235,80,222,253,0,52,40,231,208,197,94,159,43,184,2,189,55,176,228,33,149,233,0,131,61,181,148,134\")"
            },
            {
              "js": "[154,138,17,227,201,58,113,134,60,201,156,113,244,121,8,223,65,31,193,127,94,34,147,206,254,226,141,143,112,72,158,234]",
              "sol": "abi.encode(\"154,138,17,227,201,58,113,134,60,201,156,113,244,121,8,223,65,31,193,127,94,34,147,206,254,226,141,143,112,72,158,234\")"
            },
            {
              "js": "\"h34xi\"",
              "sol": "\"h34xi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.844ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[6,80,132,74,46,69,175,135,134,200,71,245,147,48,146,40,23,229,169,35,205,147,64,175,45,197,99,82,230,12,55,150]",
              "sol": "abi.encode(\"6,80,132,74,46,69,175,135,134,200,71,245,147,48,146,40,23,229,169,35,205,147,64,175,45,197,99,82,230,12,55,150\")"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "[15,29,94,224,72,65,105,133,103,178,8,188,78,212,244,171,181,48,102,139,208,56,202,101,146,158,48,127,211,67,195,246]",
              "sol": "abi.encode(\"15,29,94,224,72,65,105,133,103,178,8,188,78,212,244,171,181,48,102,139,208,56,202,101,146,158,48,127,211,67,195,246\")"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.845ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[112,46,167,166,71,125,203,141,250,36,168,27,107,132,235,190,229,157,47,140,218,195,80,29,218,97,54,93,252,110,231,32]",
              "sol": "stringToBytes32(\"112,46,167,166,71,125,203,141,250,36,168,27,107,132,235,190,229,157,47,140,218,195,80,29,218,97,54,93,252,110,231,32\")"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "[126,46,54,228,81,100,98,18,185,237,23,130,157,25,195,88,203,230,203,35,39,215,170,127,229,63,57,212,196,196,247,157]",
              "sol": "stringToBytes32(\"126,46,54,228,81,100,98,18,185,237,23,130,157,25,195,88,203,230,203,35,39,215,170,127,229,63,57,212,196,196,247,157\")"
            },
            {
              "js": "[225,43,35,111,142,104,83,81,96,210,63,113,124,48,18,223,132,157,236,23,201,93,89,170,219,219,238,174,241,83,28,143]",
              "sol": "stringToBytes32(\"225,43,35,111,142,104,83,81,96,210,63,113,124,48,18,223,132,157,236,23,201,93,89,170,219,219,238,174,241,83,28,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.845ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[22,48,1,44,106,182,117,232,10,60,97,114,242,23,95,206,35,12,69,40,30,5,160,179,18,242,221,141,91,212,40,248]",
              "sol": "stringToBytes32(\"22,48,1,44,106,182,117,232,10,60,97,114,242,23,95,206,35,12,69,40,30,5,160,179,18,242,221,141,91,212,40,248\")"
            },
            {
              "js": "[35,112,246,87,24,233,24,59,144,35]",
              "sol": "abi.encode(\"35,112,246,87,24,233,24,59,144,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[112,232,93,135,204,134,109,124,24,31,199,21,103,48,13,45,51,160,64,247,169,252,133,175,63,145,43,11,191,141,47,164]",
              "sol": "stringToBytes32(\"112,232,93,135,204,134,109,124,24,31,199,21,103,48,13,45,51,160,64,247,169,252,133,175,63,145,43,11,191,141,47,164\")"
            },
            {
              "js": "[66,225,40,138,253,157,119,2,247,24,157,67,85,94,28,150,114,212,255,129,11,125,15,30,90,144,157,201,175,156,44,21,158,235,85,94,94,118,108,131,109,58,102,142,60,98,52,73,16,149,33,48,221,22,249,107,117,4,75,62,166,104,184,223,193]",
              "sol": "abi.encode(\"66,225,40,138,253,157,119,2,247,24,157,67,85,94,28,150,114,212,255,129,11,125,15,30,90,144,157,201,175,156,44,21,158,235,85,94,94,118,108,131,109,58,102,142,60,98,52,73,16,149,33,48,221,22,249,107,117,4,75,62,166,104,184,223,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.846ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.847ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.848ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.848ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.848ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.848ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.849ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.849ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.849ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.849ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.850ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.850ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.851ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.852ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.852ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.855ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.858ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[59,137,134,184,108,79,140,71,180,90,175,202,216,245,48,202,112,88,153,160,58,217,118,52,84,25,175,74,192,202,110,123]",
              "sol": "stringToBytes32(\"59,137,134,184,108,79,140,71,180,90,175,202,216,245,48,202,112,88,153,160,58,217,118,52,84,25,175,74,192,202,110,123\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[151,168,109,245,23,188,125,209,103,193,69,28,10,216,91,211,253,147,223,22,218,132,33,103,50,25,8,176,42,156,114,186]",
              "sol": "abi.encode(\"151,168,109,245,23,188,125,209,103,193,69,28,10,216,91,211,253,147,223,22,218,132,33,103,50,25,8,176,42,156,114,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.859ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.860ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.862ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.863ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[124,84,210,168,105,46,49,32,0,122,71,51,77,146,187,192,170,3,105,155,3,50,152,119,214,15,54,85,130,45,61,9]",
              "sol": "abi.encode(\"124,84,210,168,105,46,49,32,0,122,71,51,77,146,187,192,170,3,105,155,3,50,152,119,214,15,54,85,130,45,61,9\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[38,166,78,46,167,83,109,229,200,76,98,36,134,88,9,188,153,245,162,31,182,212,152,100,45,100,171,241,24,134,54,231]",
              "sol": "stringToBytes32(\"38,166,78,46,167,83,109,229,200,76,98,36,134,88,9,188,153,245,162,31,182,212,152,100,45,100,171,241,24,134,54,231\")"
            },
            {
              "js": "[49,1,203,254,92,137,255,179,44,22,25,230,237,191,121,4,157,110,196,150,228,12,224,115,105,109,222,223,11,9,245,150]",
              "sol": "stringToBytes32(\"49,1,203,254,92,137,255,179,44,22,25,230,237,191,121,4,157,110,196,150,228,12,224,115,105,109,222,223,11,9,245,150\")"
            },
            {
              "js": "[117,19,187,140,24,141,38,177,146,123,130,31,196,147,177,224,102,39,61,177,10,119,165,227,186,232,203,165,89,46,127,104]",
              "sol": "stringToBytes32(\"117,19,187,140,24,141,38,177,146,123,130,31,196,147,177,224,102,39,61,177,10,119,165,227,186,232,203,165,89,46,127,104\")"
            },
            {
              "js": "[211,163,178,39,227,108,87,30,252,194,48,125,126,176,233,195,9,170,66,29,171,206,194,207,30,46,195,107,7,125,50,111]",
              "sol": "stringToBytes32(\"211,163,178,39,227,108,87,30,252,194,48,125,126,176,233,195,9,170,66,29,171,206,194,207,30,46,195,107,7,125,50,111\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.864ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.866ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.867ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.868ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.869ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.870ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.871ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "54",
                "sol": "54"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "54",
                "sol": "54"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.874ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.875ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "103",
                "sol": "103"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:44:55.878ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.879ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.879ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:44:55.881ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}