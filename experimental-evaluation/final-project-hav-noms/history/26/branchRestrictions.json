,{
  "2020-11-13T22:19:44.359ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:22:02.704ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:22:39.413ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:22:57.120ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:23:15.238ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:23:33.079ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:23:50.295ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:24:07.787ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:24:25.403ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:24:43.177ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:00.555ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.140ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.143ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [181,185,177,190,171,33,30,209,145,157,229,26,220,118,7,244,191,165,139,106,201,39,120,81,164,195,186,1,130,25,172,159],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"181,185,177,190,171,33,30,209,145,157,229,26,220,118,7,244,191,165,139,106,201,39,120,81,164,195,186,1,130,25,172,159\"),95)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.143ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [50,145,129,186,209,246,4,27,185,96,115,111,5,120,59,22,79,15,198,82,59,90,103,63,16,165,197,54,230,175,161,3],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"50,145,129,186,209,246,4,27,185,96,115,111,5,120,59,22,79,15,198,82,59,90,103,63,16,165,197,54,230,175,161,3\"),1024)"
            },
            {
              "js": "[147,233,224,198,102,206,68,34,3,87,137,88,94,11,215,246,34,59,186,92,82,57,111,205,7,114,2,89,86,178,227,94]",
              "sol": "abi.encode(\"147,233,224,198,102,206,68,34,3,87,137,88,94,11,215,246,34,59,186,92,82,57,111,205,7,114,2,89,86,178,227,94\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.144ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [224,209,60,66,208,205,61,233,113,204,162,169,137,66,65,98,172,197,236,103,52,150,183,151,194,14,38,188,151,158,159,151],\"capacity\": 1338}",
              "sol": "Buffer.buffer(abi.encode(\"224,209,60,66,208,205,61,233,113,204,162,169,137,66,65,98,172,197,236,103,52,150,183,151,194,14,38,188,151,158,159,151\"),1338)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.144ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [76,13,68,101,174,41,115,83,70,98,165,109,128,212,83,22,89,178,79,120,62,135,171,113,217,22,125,24,180,125,20,93],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"76,13,68,101,174,41,115,83,70,98,165,109,128,212,83,22,89,178,79,120,62,135,171,113,217,22,125,24,180,125,20,93\"),28)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.146ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [231,44,235,109,19,1,170,78,3,205,109,12,159,8,147,66,225,67,157,157,51,252,3,246,116,173,16,85,95,105,135,244],\"capacity\": 9999}",
              "sol": "Buffer.buffer(abi.encode(\"231,44,235,109,19,1,170,78,3,205,109,12,159,8,147,66,225,67,157,157,51,252,3,246,116,173,16,85,95,105,135,244\"),9999)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.147ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [229,13,245,171,153,235,159,154,176,143,68,223,243,172,48,87,117,226,199,213,192,249,57,11,232,13,112,95,23,236,139,46],\"capacity\": 56}",
              "sol": "Buffer.buffer(abi.encode(\"229,13,245,171,153,235,159,154,176,143,68,223,243,172,48,87,117,226,199,213,192,249,57,11,232,13,112,95,23,236,139,46\"),56)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [255,22,142,144,50,61,217,200,151,101,162,72,177,183,248,208,69,79,8,241,35,94,246,250,149,3,99,3,240,252,201,174],\"capacity\": 87}",
              "sol": "Buffer.buffer(abi.encode(\"255,22,142,144,50,61,217,200,151,101,162,72,177,183,248,208,69,79,8,241,35,94,246,250,149,3,99,3,240,252,201,174\"),87)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.148ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [123,217,80,80,167,158,47,14,94,4,86,246,186,95,121,29,247,18,157,218,96,44,45,130,70,78,40,5,74,218,98,85],\"capacity\": 103}",
              "sol": "Buffer.buffer(abi.encode(\"123,217,80,80,167,158,47,14,94,4,86,246,186,95,121,29,247,18,157,218,96,44,45,130,70,78,40,5,74,218,98,85\"),103)"
            },
            {
              "js": "[205,224,144,195,144,188,88,22,46,235,250,140,233,219,115,120,231,131,28,254,220,255,196,255,110,148,152,239,155,189,132,41]",
              "sol": "abi.encode(\"205,224,144,195,144,188,88,22,46,235,250,140,233,219,115,120,231,131,28,254,220,255,196,255,110,148,152,239,155,189,132,41\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.148ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [234,40,19,84,125,20,52,221,120,170,23,221,196,132,229,252,94,46,182,99,131,191,45,4,116,195,135,238,235,42,204,226],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"234,40,19,84,125,20,52,221,120,170,23,221,196,132,229,252,94,46,182,99,131,191,45,4,116,195,135,238,235,42,204,226\"),257)"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.149ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [94,133,12,102,162,101,34,85,36,121,101,88,234,250,241,56,29,57,190,170,21,197,100,220,232,204,162,35,81,138,10,5],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"94,133,12,102,162,101,34,85,36,121,101,88,234,250,241,56,29,57,190,170,21,197,100,220,232,204,162,35,81,138,10,5\"),7)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.149ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [234,96,74,153,9,2,242,31,222,30,247,214,51,32,32,220,101,41,244,26,19,159,132,26,240,244,42,104,71,190,180,184],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"234,96,74,153,9,2,242,31,222,30,247,214,51,32,32,220,101,41,244,26,19,159,132,26,240,244,42,104,71,190,180,184\"),160)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.150ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [43,247,189,59,188,16,11,233,64,128,203,59,144,145,90,80,71,145,139,134,26,39,1,79,215,42,145,84,106,42,72,24],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"43,247,189,59,188,16,11,233,64,128,203,59,144,145,90,80,71,145,139,134,26,39,1,79,215,42,145,84,106,42,72,24\"),160)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.152ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.153ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.153ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.154ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.155ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.156ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.157ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.157ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.159ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.159ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.160ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[56,54,156,67,14,150,154,203,217,112,216,201,249,117,60,204,251,139,115,26,244,6,165,44,133,164,224,212,54,191,188,11]",
              "sol": "stringToBytes32(\"56,54,156,67,14,150,154,203,217,112,216,201,249,117,60,204,251,139,115,26,244,6,165,44,133,164,224,212,54,191,188,11\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.161ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[223,175,15,185,164,150,227,100,177,119,223,246,217,67,230,178,78,152,1,69,104,179,139,158,44,135,160,210,56,237,229,42]",
              "sol": "stringToBytes32(\"223,175,15,185,164,150,227,100,177,119,223,246,217,67,230,178,78,152,1,69,104,179,139,158,44,135,160,210,56,237,229,42\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[208,255,209,37,111,103,84,26,210,231,202,251,223,43,184,89,178,67,3,172,142,227,248,192,84,11,154,30,90,127,240,73]",
              "sol": "abi.encode(\"208,255,209,37,111,103,84,26,210,231,202,251,223,43,184,89,178,67,3,172,142,227,248,192,84,11,154,30,90,127,240,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.197ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.198ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.198ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.200ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.200ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.201ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.202ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.202ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.203ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.204ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.204ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"69zanf\"",
              "sol": "\"69zanf\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.205ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.205ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"qo7ri\"",
              "sol": "\"qo7ri\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"69zanf\"",
              "sol": "\"69zanf\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.206ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.206ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"RevertWithReason\",\"69zanf\",\"ETH\",\"trade.totalPrice\",\"0\",\"69zanf\",\"\",\"trade.totalPrice\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"69zanf\"),string(\"ETH\"),string(\"trade.totalPrice\"),string(\"0\"),string(\"69zanf\"),string(\"\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.207ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"qo7ri\",\"RevertWithReason\",\"69zanf\",\"PayableExample\",\"Example\"]",
              "sol": "[string(\"qo7ri\"),string(\"RevertWithReason\"),string(\"69zanf\"),string(\"PayableExample\"),string(\"Example\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.207ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"RevertWithReason\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"costUSD\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"costUSD\")]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.208ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"9o0u8u\"]",
              "sol": "[string(\"9o0u8u\")]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.209ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.210ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"updateEthPrice called\"]",
              "sol": "[string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.211ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.212ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"Example\"]",
              "sol": "[string(\"Example\")]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.212ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"qo7ri\",\"call updateEthPrice\"]",
              "sol": "[string(\"qo7ri\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.213ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"9o0u8u\",\"updateEthPrice called\"]",
              "sol": "[string(\"9o0u8u\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.214ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"69zanf\",\"IsLibrary\"]",
              "sol": "[string(\"69zanf\"),string(\"IsLibrary\")]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.215ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"L\",\"PayableExample\"]",
              "sol": "[string(\"L\"),string(\"PayableExample\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.215ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Example\",\"69zanf\",\"RevertWithReason\"]",
              "sol": "[string(\"Example\"),string(\"69zanf\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.221ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"RevertWithReason\",\"0\",\"qo7ri\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"0\"),string(\"qo7ri\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.222ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"PayableExample\",\"RevertWithReason\",\"updateEthPrice called\"]",
              "sol": "[string(\"PayableExample\"),string(\"RevertWithReason\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.223ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"P\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"P\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.224ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"RevertWithReason\",\"9o0u8u\",\"qo7ri\",\"call updateEthPrice\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"9o0u8u\"),string(\"qo7ri\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.224ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"9o0u8u\",\"RevertWithReason\",\"PayableExample\",\"\"]",
              "sol": "[string(\"9o0u8u\"),string(\"RevertWithReason\"),string(\"PayableExample\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.225ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"IsLibrary\",\"L\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"trade.totalPrice\"]",
              "sol": "[string(\"IsLibrary\"),string(\"L\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.225ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"L\",\"L\",\"PayableExample\",\"UsesExample\"]",
              "sol": "[string(\"L\"),string(\"L\"),string(\"PayableExample\"),string(\"UsesExample\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.226ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"updateEthPrice called\",\"listingID arg\",\"updateEthPrice called\",\"Oraclize query was sent, standing by for the answer...\",\"RevertWithReason\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"listingID arg\"),string(\"updateEthPrice called\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.226ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"listingID arg\",\"\\x19Ethereum Signed Message:\\n32\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"PayableExample\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"listingID arg\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"PayableExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.227ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"IsLibrary\",\"call updateEthPrice\",\"RevertWithReason\",\"P\",\"RevertWithReason\"]",
              "sol": "[string(\"IsLibrary\"),string(\"call updateEthPrice\"),string(\"RevertWithReason\"),string(\"P\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.228ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"9o0u8u\",\"listingID arg\",\"ETH\",\"trade.totalPrice\",\"9o0u8u\"]",
              "sol": "[string(\"9o0u8u\"),string(\"listingID arg\"),string(\"ETH\"),string(\"trade.totalPrice\"),string(\"9o0u8u\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.228ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"69zanf\"",
              "sol": "\"69zanf\""
            },
            {
              "js": "[[77,57,13,125,99,249,82,65,141,196,106,69,187,136,253,119,80,163,153,150,130,237,157,112,39,54,207,250,231,69,46,158],[132,137,242,149,38,144,26,152,34,232,42,152,222,142,141,198,118,219,117,82,205,206,167,97,173,183,127,132,144,25,37,6],[31,6,110,251,62,22,155,19,236,2,76,6,150,40,100,79,215,204,142,95,106,36,110,191,16,113,46,185,232,220,35,177],[56,2,196,164,103,140,102,200,3,113,244,203,102,107,110,198,204,34,40,169,228,240,89,50,235,9,167,123,252,127,185,203],[128,243,98,109,242,19,93,109,31,10,71,255,170,40,152,164,99,95,22,41,20,51,169,80,165,20,63,222,5,148,128,98],[157,30,202,113,187,84,143,18,235,234,89,18,51,8,186,84,157,15,134,209,72,0,174,36,128,25,84,50,35,106,151,130],[190,74,224,137,114,159,239,37,120,63,207,21,97,124,55,165,62,103,149,166,14,200,81,43,37,55,241,68,119,100,101,37]]",
              "sol": "[bytes(abi.encode(\"77,57,13,125,99,249,82,65,141,196,106,69,187,136,253,119,80,163,153,150,130,237,157,112,39,54,207,250,231,69,46,158\")),bytes(abi.encode(\"132,137,242,149,38,144,26,152,34,232,42,152,222,142,141,198,118,219,117,82,205,206,167,97,173,183,127,132,144,25,37,6\")),bytes(abi.encode(\"31,6,110,251,62,22,155,19,236,2,76,6,150,40,100,79,215,204,142,95,106,36,110,191,16,113,46,185,232,220,35,177\")),bytes(abi.encode(\"56,2,196,164,103,140,102,200,3,113,244,203,102,107,110,198,204,34,40,169,228,240,89,50,235,9,167,123,252,127,185,203\")),bytes(abi.encode(\"128,243,98,109,242,19,93,109,31,10,71,255,170,40,152,164,99,95,22,41,20,51,169,80,165,20,63,222,5,148,128,98\")),bytes(abi.encode(\"157,30,202,113,187,84,143,18,235,234,89,18,51,8,186,84,157,15,134,209,72,0,174,36,128,25,84,50,35,106,151,130\")),bytes(abi.encode(\"190,74,224,137,114,159,239,37,120,63,207,21,97,124,55,165,62,103,149,166,14,200,81,43,37,55,241,68,119,100,101,37\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.229ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[232,227,164,3,48,4,57,113,151,174,209,184,65,95,193,17,211,199,198,126,44,93,186,82,102,226,87,167,180,236,217,192],[75,42,3,103,105,116,198,76,164,0,101,22,55,172,143,45,245,122,28,249,68,20,27,215,192,47,174,16,210,227,100,142]]",
              "sol": "[bytes(abi.encode(\"232,227,164,3,48,4,57,113,151,174,209,184,65,95,193,17,211,199,198,126,44,93,186,82,102,226,87,167,180,236,217,192\")),bytes(abi.encode(\"75,42,3,103,105,116,198,76,164,0,101,22,55,172,143,45,245,122,28,249,68,20,27,215,192,47,174,16,210,227,100,142\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.230ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[226,32,92,237,144,111,157,88,200,26,158,13,213,78,241,31,12,27,42,175,222,243,238,80,203,248,17,234,173,51,83,55],[223,204,91,63,218,37,96,170,42,221,175,0,70,145,22,197,107,38,147,23,47,68,148,4,232,82,79,239,121,49,118,183],[25,193,220,117,230,140,134,194,80,139,3,228,31,25,11,34,209,234,73,57,231,62,158,226,242,114,128,1,233,239,180,250],[5,47,31,26,47,205,23,149,61,27,242,194,171,89,231,54,41,68,49,29,19,109,195,110,98,65,205,58,28,228,82,194],[193,229,38,96,7,55,228,106,155,49,233,57,140,122,224,158,46,27,78,255,63,177,17,47,155,214,152,33,39,192,205,150],[164,255,12,51,15,165,251,218,55,230,73,70,89,68,199,178,61,69,125,64,197,110,227,77,159,175,3,245,254,28,178,72],[133,31,56,130,227,35,27,23,222,249,7,104,76,144,92,107,31,100,188,30,57,92,189,177,201,16,178,87,228,236,174,44],[183,158,145,251,12,16,94,123,11,189,44,0,18,181,92,66,85,163,193,76,15,229,18,48,9,66,87,24,98,44,150,115],[47,103,128,232,85,238,162,219,133,54,1,50,165,214,246,209,149,223,12,112,89,192,128,84,9,64,162,165,244,106,139,199]]",
              "sol": "[bytes(abi.encode(\"226,32,92,237,144,111,157,88,200,26,158,13,213,78,241,31,12,27,42,175,222,243,238,80,203,248,17,234,173,51,83,55\")),bytes(abi.encode(\"223,204,91,63,218,37,96,170,42,221,175,0,70,145,22,197,107,38,147,23,47,68,148,4,232,82,79,239,121,49,118,183\")),bytes(abi.encode(\"25,193,220,117,230,140,134,194,80,139,3,228,31,25,11,34,209,234,73,57,231,62,158,226,242,114,128,1,233,239,180,250\")),bytes(abi.encode(\"5,47,31,26,47,205,23,149,61,27,242,194,171,89,231,54,41,68,49,29,19,109,195,110,98,65,205,58,28,228,82,194\")),bytes(abi.encode(\"193,229,38,96,7,55,228,106,155,49,233,57,140,122,224,158,46,27,78,255,63,177,17,47,155,214,152,33,39,192,205,150\")),bytes(abi.encode(\"164,255,12,51,15,165,251,218,55,230,73,70,89,68,199,178,61,69,125,64,197,110,227,77,159,175,3,245,254,28,178,72\")),bytes(abi.encode(\"133,31,56,130,227,35,27,23,222,249,7,104,76,144,92,107,31,100,188,30,57,92,189,177,201,16,178,87,228,236,174,44\")),bytes(abi.encode(\"183,158,145,251,12,16,94,123,11,189,44,0,18,181,92,66,85,163,193,76,15,229,18,48,9,66,87,24,98,44,150,115\")),bytes(abi.encode(\"47,103,128,232,85,238,162,219,133,54,1,50,165,214,246,209,149,223,12,112,89,192,128,84,9,64,162,165,244,106,139,199\"))]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.231ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[177,149,226,72,158,30,145,194,18,12,84,139,0,223,139,218,155,121,61,143,89,163,180,97,86,175,80,226,170,149,41,167],[184,176,8,151,235,132,139,215,68,104,223,210,224,199,215,206,139,197,8,110,127,187,138,197,241,71,207,53,44,154,218,133],[173,220,216,218,145,166,141,86,107,141,202,18,80,244,185,47,68,217,2,193,236,228,245,208,97,221,158,55,207,230,41,120],[23,62,114,24,188,198,251,242,167,129,192,42,5,145,127,6,223,202,250,6,219,178,214,145,221,202,164,191,196,188,78,58],[204,196,62,121,26,48,169,170,191,62,142,162,199,252,125,133,196,107,103,33,187,12,57,61,104,97,4,173,138,53,112,184]]",
              "sol": "[bytes(abi.encode(\"177,149,226,72,158,30,145,194,18,12,84,139,0,223,139,218,155,121,61,143,89,163,180,97,86,175,80,226,170,149,41,167\")),bytes(abi.encode(\"184,176,8,151,235,132,139,215,68,104,223,210,224,199,215,206,139,197,8,110,127,187,138,197,241,71,207,53,44,154,218,133\")),bytes(abi.encode(\"173,220,216,218,145,166,141,86,107,141,202,18,80,244,185,47,68,217,2,193,236,228,245,208,97,221,158,55,207,230,41,120\")),bytes(abi.encode(\"23,62,114,24,188,198,251,242,167,129,192,42,5,145,127,6,223,202,250,6,219,178,214,145,221,202,164,191,196,188,78,58\")),bytes(abi.encode(\"204,196,62,121,26,48,169,170,191,62,142,162,199,252,125,133,196,107,103,33,187,12,57,61,104,97,4,173,138,53,112,184\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.231ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"qo7ri\"",
              "sol": "\"qo7ri\""
            },
            {
              "js": "[[170,137,58,35,76,76,67,164,28,73,109,45,83,141,81,86,244,53,29,131,190,3,77,191,70,245,174,173,198,188,204,7]]",
              "sol": "[bytes(abi.encode(\"170,137,58,35,76,76,67,164,28,73,109,45,83,141,81,86,244,53,29,131,190,3,77,191,70,245,174,173,198,188,204,7\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.232ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[174,238,225,5,241,42,140,0,240,133,47,112,65,172,247,116,242,194,229,209,232,100,135,68,12,213,23,252,146,59,246,216]]",
              "sol": "[bytes(abi.encode(\"174,238,225,5,241,42,140,0,240,133,47,112,65,172,247,116,242,194,229,209,232,100,135,68,12,213,23,252,146,59,246,216\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.232ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[216,98,51,202,113,181,78,179,107,205,135,117,134,205,84,242,155,153,189,179,24,107,7,195,143,57,246,223,217,81,220,111]]",
              "sol": "[bytes(abi.encode(\"216,98,51,202,113,181,78,179,107,205,135,117,134,205,84,242,155,153,189,179,24,107,7,195,143,57,246,223,217,81,220,111\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.233ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[4,130,8,111,142,184,224,225,224,155,77,48,45,171,191,83,23,198,225,226,187,140,32,131,194,169,111,165,63,189,62,9]]",
              "sol": "[bytes(abi.encode(\"4,130,8,111,142,184,224,225,224,155,77,48,45,171,191,83,23,198,225,226,187,140,32,131,194,169,111,165,63,189,62,9\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.234ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"69zanf\"",
              "sol": "\"69zanf\""
            },
            {
              "js": "[[170,153,233,203,145,104,191,34,21,187,201,61,90,56,145,228,161,86,221,160,140,230,75,118,184,42,61,74,146,164,48,135],[10,22,108,134,166,142,15,97,50,246,205,201,223,126,181,136,12,234,70,137,224,192,88,66,77,93,133,199,209,51,137,46]]",
              "sol": "[bytes(abi.encode(\"170,153,233,203,145,104,191,34,21,187,201,61,90,56,145,228,161,86,221,160,140,230,75,118,184,42,61,74,146,164,48,135\")),bytes(abi.encode(\"10,22,108,134,166,142,15,97,50,246,205,201,223,126,181,136,12,234,70,137,224,192,88,66,77,93,133,199,209,51,137,46\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.234ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[203,235,86,231,179,168,234,131,81,154,136,228,49,230,249,93,92,150,180,194,36,243,168,106,109,160,61,100,1,112,146,36],[179,188,44,50,48,18,64,8,199,59,56,84,182,104,54,11,39,127,177,105,152,28,249,44,139,126,69,105,227,129,82,147]]",
              "sol": "[bytes(abi.encode(\"203,235,86,231,179,168,234,131,81,154,136,228,49,230,249,93,92,150,180,194,36,243,168,106,109,160,61,100,1,112,146,36\")),bytes(abi.encode(\"179,188,44,50,48,18,64,8,199,59,56,84,182,104,54,11,39,127,177,105,152,28,249,44,139,126,69,105,227,129,82,147\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.235ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[2,200,246,74,88,208,212,240,27,95,156,169,85,65,103,136,136,77,179,151,216,109,77,101,97,14,170,99,71,220,114,152],[17,4,55,122,136,245,218,62,190,166,32,244,14,185,108,219,241,217,201,52,243,152,16,153,131,101,234,240,201,107,25,36]]",
              "sol": "[bytes(abi.encode(\"2,200,246,74,88,208,212,240,27,95,156,169,85,65,103,136,136,77,179,151,216,109,77,101,97,14,170,99,71,220,114,152\")),bytes(abi.encode(\"17,4,55,122,136,245,218,62,190,166,32,244,14,185,108,219,241,217,201,52,243,152,16,153,131,101,234,240,201,107,25,36\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.236ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[34,62,147,150,53,75,145,28,27,112,84,42,87,18,94,189,3,231,79,171,7,187,77,37,239,57,168,207,165,230,6,86],[206,133,234,212,37,102,245,71,18,158,175,27,169,84,99,117,177,129,174,44,42,95,154,62,84,127,24,124,105,0,190,33]]",
              "sol": "[bytes(abi.encode(\"34,62,147,150,53,75,145,28,27,112,84,42,87,18,94,189,3,231,79,171,7,187,77,37,239,57,168,207,165,230,6,86\")),bytes(abi.encode(\"206,133,234,212,37,102,245,71,18,158,175,27,169,84,99,117,177,129,174,44,42,95,154,62,84,127,24,124,105,0,190,33\"))]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.237ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"5s8phj\"",
              "sol": "\"5s8phj\""
            },
            {
              "js": "[[164,16,229,8,244,124,168,50,179,243,149,52,40,195,250,241,168,253,52,170,12,143,91,45,233,135,83,75,60,83,92,237],[9,8,207,156,64,132,204,15,53,158,91,105,193,242,82,97,8,50,147,159,177,59,65,239,35,190,54,60,3,185,7,19],[158,199,211,14,189,198,219,106,254,152,212,237,182,103,75,97,108,212,23,10,11,220,78,119,61,91,79,191,124,87,49,154]]",
              "sol": "[bytes(abi.encode(\"164,16,229,8,244,124,168,50,179,243,149,52,40,195,250,241,168,253,52,170,12,143,91,45,233,135,83,75,60,83,92,237\")),bytes(abi.encode(\"9,8,207,156,64,132,204,15,53,158,91,105,193,242,82,97,8,50,147,159,177,59,65,239,35,190,54,60,3,185,7,19\")),bytes(abi.encode(\"158,199,211,14,189,198,219,106,254,152,212,237,182,103,75,97,108,212,23,10,11,220,78,119,61,91,79,191,124,87,49,154\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.238ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[44,220,254,235,77,165,50,55,165,23,94,247,231,78,116,232,216,17,175,224,199,36,60,118,18,149,87,75,186,252,74,74],[21,64,62,192,19,210,21,18,141,20,82,67,72,157,94,163,63,108,89,225,192,65,103,246,217,25,109,109,129,126,209,191],[210,38,131,72,227,187,145,96,79,142,233,211,227,230,251,175,168,128,37,171,170,178,93,130,142,55,121,243,180,61,77,133]]",
              "sol": "[bytes(abi.encode(\"44,220,254,235,77,165,50,55,165,23,94,247,231,78,116,232,216,17,175,224,199,36,60,118,18,149,87,75,186,252,74,74\")),bytes(abi.encode(\"21,64,62,192,19,210,21,18,141,20,82,67,72,157,94,163,63,108,89,225,192,65,103,246,217,25,109,109,129,126,209,191\")),bytes(abi.encode(\"210,38,131,72,227,187,145,96,79,142,233,211,227,230,251,175,168,128,37,171,170,178,93,130,142,55,121,243,180,61,77,133\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.238ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[191,15,42,206,4,124,166,4,121,255,127,138,74,138,159,119,40,69,133,153,130,149,98,185,186,245,207,226,131,2,211,183],[82,72,255,54,175,220,135,131,77,76,150,125,26,185,247,45,192,84,236,188,38,230,131,247,35,98,161,34,209,235,87,251],[120,135,170,5,83,222,54,126,14,153,102,228,40,255,108,148,158,9,35,39,78,245,146,89,213,156,141,211,101,244,123,202]]",
              "sol": "[bytes(abi.encode(\"191,15,42,206,4,124,166,4,121,255,127,138,74,138,159,119,40,69,133,153,130,149,98,185,186,245,207,226,131,2,211,183\")),bytes(abi.encode(\"82,72,255,54,175,220,135,131,77,76,150,125,26,185,247,45,192,84,236,188,38,230,131,247,35,98,161,34,209,235,87,251\")),bytes(abi.encode(\"120,135,170,5,83,222,54,126,14,153,102,228,40,255,108,148,158,9,35,39,78,245,146,89,213,156,141,211,101,244,123,202\"))]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.239ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[44,177,110,190,224,225,201,185,199,201,182,73,103,83,29,246,227,118,232,146,101,100,45,179,236,32,80,130,17,190,89,152],[32,111,218,46,207,180,245,83,75,72,196,250,103,149,229,121,56,242,109,128,154,59,36,189,21,209,176,178,148,79,241,113],[37,148,111,68,8,197,67,1,158,172,8,56,77,69,108,251,51,223,182,39,144,29,167,110,154,51,251,127,84,58,183,199]]",
              "sol": "[bytes(abi.encode(\"44,177,110,190,224,225,201,185,199,201,182,73,103,83,29,246,227,118,232,146,101,100,45,179,236,32,80,130,17,190,89,152\")),bytes(abi.encode(\"32,111,218,46,207,180,245,83,75,72,196,250,103,149,229,121,56,242,109,128,154,59,36,189,21,209,176,178,148,79,241,113\")),bytes(abi.encode(\"37,148,111,68,8,197,67,1,158,172,8,56,77,69,108,251,51,223,182,39,144,29,167,110,154,51,251,127,84,58,183,199\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.240ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[224,40,8,126,150,141,219,246,155,104,171,68,97,177,7,24,180,176,44,89,251,21,12,205,44,239,244,52,174,235,170,52],[83,86,91,80,35,126,108,197,21,164,254,71,88,106,69,22,34,234,171,20,222,99,127,39,164,234,236,169,136,61,209,234],[70,191,54,80,189,241,240,142,89,4,255,250,234,133,254,32,209,106,199,143,88,189,82,242,8,232,185,190,145,27,60,149],[90,44,57,183,19,156,21,190,39,171,207,121,24,63,204,189,251,1,190,27,154,244,101,52,193,40,179,86,32,157,143,140]]",
              "sol": "[bytes(abi.encode(\"224,40,8,126,150,141,219,246,155,104,171,68,97,177,7,24,180,176,44,89,251,21,12,205,44,239,244,52,174,235,170,52\")),bytes(abi.encode(\"83,86,91,80,35,126,108,197,21,164,254,71,88,106,69,22,34,234,171,20,222,99,127,39,164,234,236,169,136,61,209,234\")),bytes(abi.encode(\"70,191,54,80,189,241,240,142,89,4,255,250,234,133,254,32,209,106,199,143,88,189,82,242,8,232,185,190,145,27,60,149\")),bytes(abi.encode(\"90,44,57,183,19,156,21,190,39,171,207,121,24,63,204,189,251,1,190,27,154,244,101,52,193,40,179,86,32,157,143,140\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.240ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[44,162,244,104,178,13,69,179,17,38,0,32,236,82,180,197,188,179,194,225,107,163,243,31,107,164,107,52,203,47,251,202],[214,123,35,35,201,33,128,133,122,14,196,161,225,137,57,139,110,59,210,213,121,232,110,136,148,182,209,189,218,89,52,244],[199,21,150,46,65,215,76,5,161,28,6,225,231,147,178,56,252,167,52,242,187,62,82,193,162,13,232,1,193,249,2,89],[50,254,103,210,143,134,153,95,74,42,152,253,177,146,105,131,19,238,147,186,175,188,94,165,99,179,203,14,186,119,187,126]]",
              "sol": "[bytes(abi.encode(\"44,162,244,104,178,13,69,179,17,38,0,32,236,82,180,197,188,179,194,225,107,163,243,31,107,164,107,52,203,47,251,202\")),bytes(abi.encode(\"214,123,35,35,201,33,128,133,122,14,196,161,225,137,57,139,110,59,210,213,121,232,110,136,148,182,209,189,218,89,52,244\")),bytes(abi.encode(\"199,21,150,46,65,215,76,5,161,28,6,225,231,147,178,56,252,167,52,242,187,62,82,193,162,13,232,1,193,249,2,89\")),bytes(abi.encode(\"50,254,103,210,143,134,153,95,74,42,152,253,177,146,105,131,19,238,147,186,175,188,94,165,99,179,203,14,186,119,187,126\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.241ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"qo7ri\"",
              "sol": "\"qo7ri\""
            },
            {
              "js": "[[45,187,93,194,96,109,48,73,48,158,79,19,149,103,157,242,154,220,155,5,0,70,236,221,252,244,18,37,99,120,64,110],[24,14,195,145,201,120,222,138,9,82,71,154,160,194,255,44,230,214,210,233,25,144,167,203,90,61,60,29,163,218,54,212],[82,33,37,9,197,184,162,181,240,225,196,10,233,44,103,139,192,194,113,95,116,71,126,93,165,58,123,209,95,214,13,207],[201,212,31,219,173,129,64,153,202,14,117,221,58,25,63,15,80,129,240,54,107,179,123,118,236,165,47,34,69,118,204,184]]",
              "sol": "[bytes(abi.encode(\"45,187,93,194,96,109,48,73,48,158,79,19,149,103,157,242,154,220,155,5,0,70,236,221,252,244,18,37,99,120,64,110\")),bytes(abi.encode(\"24,14,195,145,201,120,222,138,9,82,71,154,160,194,255,44,230,214,210,233,25,144,167,203,90,61,60,29,163,218,54,212\")),bytes(abi.encode(\"82,33,37,9,197,184,162,181,240,225,196,10,233,44,103,139,192,194,113,95,116,71,126,93,165,58,123,209,95,214,13,207\")),bytes(abi.encode(\"201,212,31,219,173,129,64,153,202,14,117,221,58,25,63,15,80,129,240,54,107,179,123,118,236,165,47,34,69,118,204,184\"))]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.242ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[115,40,1,36,55,97,169,159,149,124,87,30,101,147,61,72,155,101,175,114,70,141,81,53,226,43,183,1,145,167,137,74],[161,147,167,202,131,55,130,119,68,93,204,162,134,152,241,10,195,190,163,4,55,57,254,26,124,95,42,172,5,100,239,192],[156,79,221,243,15,35,112,244,1,106,81,230,65,54,212,89,82,120,254,209,4,228,203,107,48,111,225,18,238,146,171,67],[130,229,100,83,40,201,106,148,174,19,4,145,215,164,17,230,196,207,91,49,96,242,139,8,51,141,238,3,213,158,87,11]]",
              "sol": "[bytes(abi.encode(\"115,40,1,36,55,97,169,159,149,124,87,30,101,147,61,72,155,101,175,114,70,141,81,53,226,43,183,1,145,167,137,74\")),bytes(abi.encode(\"161,147,167,202,131,55,130,119,68,93,204,162,134,152,241,10,195,190,163,4,55,57,254,26,124,95,42,172,5,100,239,192\")),bytes(abi.encode(\"156,79,221,243,15,35,112,244,1,106,81,230,65,54,212,89,82,120,254,209,4,228,203,107,48,111,225,18,238,146,171,67\")),bytes(abi.encode(\"130,229,100,83,40,201,106,148,174,19,4,145,215,164,17,230,196,207,91,49,96,242,139,8,51,141,238,3,213,158,87,11\"))]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.243ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[251,78,30,248,145,88,6,225,183,133,22,82,138,145,206,89,212,104,78,169,71,18,180,112,123,213,190,130,136,16,114,53],[176,126,153,209,150,198,162,129,133,9,143,235,228,195,202,227,30,50,183,4,83,80,140,221,67,176,243,220,105,30,211,249],[252,236,96,23,12,40,60,246,10,14,62,138,73,222,218,20,110,206,178,57,150,255,235,56,94,97,200,113,11,198,239,22],[165,227,225,192,16,128,67,211,203,186,17,134,95,34,115,93,87,11,226,131,170,165,249,134,185,116,70,157,197,121,145,133],[131,67,34,80,2,153,23,194,1,240,207,152,219,223,11,151,71,164,180,27,71,113,1,39,170,247,228,112,20,235,189,224]]",
              "sol": "[bytes(abi.encode(\"251,78,30,248,145,88,6,225,183,133,22,82,138,145,206,89,212,104,78,169,71,18,180,112,123,213,190,130,136,16,114,53\")),bytes(abi.encode(\"176,126,153,209,150,198,162,129,133,9,143,235,228,195,202,227,30,50,183,4,83,80,140,221,67,176,243,220,105,30,211,249\")),bytes(abi.encode(\"252,236,96,23,12,40,60,246,10,14,62,138,73,222,218,20,110,206,178,57,150,255,235,56,94,97,200,113,11,198,239,22\")),bytes(abi.encode(\"165,227,225,192,16,128,67,211,203,186,17,134,95,34,115,93,87,11,226,131,170,165,249,134,185,116,70,157,197,121,145,133\")),bytes(abi.encode(\"131,67,34,80,2,153,23,194,1,240,207,152,219,223,11,151,71,164,180,27,71,113,1,39,170,247,228,112,20,235,189,224\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.244ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[112,10,21,12,148,205,63,105,159,129,121,215,31,11,150,216,66,36,180,193,116,6,149,9,107,207,161,203,111,16,111,97],[226,85,24,245,246,253,85,13,119,224,24,83,205,167,54,82,233,71,143,222,30,228,242,55,66,154,254,139,217,48,146,219],[97,244,143,45,113,4,74,227,240,115,21,53,76,104,125,48,99,35,243,85,4,105,215,181,86,150,103,232,119,190,76,250],[139,124,177,241,72,10,201,117,187,195,104,32,162,8,181,69,12,178,239,137,222,168,243,16,171,179,177,136,50,38,167,226],[15,220,163,49,142,156,81,187,140,13,79,191,108,187,2,55,234,173,153,35,211,142,136,178,166,31,30,215,231,101,216,179]]",
              "sol": "[bytes(abi.encode(\"112,10,21,12,148,205,63,105,159,129,121,215,31,11,150,216,66,36,180,193,116,6,149,9,107,207,161,203,111,16,111,97\")),bytes(abi.encode(\"226,85,24,245,246,253,85,13,119,224,24,83,205,167,54,82,233,71,143,222,30,228,242,55,66,154,254,139,217,48,146,219\")),bytes(abi.encode(\"97,244,143,45,113,4,74,227,240,115,21,53,76,104,125,48,99,35,243,85,4,105,215,181,86,150,103,232,119,190,76,250\")),bytes(abi.encode(\"139,124,177,241,72,10,201,117,187,195,104,32,162,8,181,69,12,178,239,137,222,168,243,16,171,179,177,136,50,38,167,226\")),bytes(abi.encode(\"15,220,163,49,142,156,81,187,140,13,79,191,108,187,2,55,234,173,153,35,211,142,136,178,166,31,30,215,231,101,216,179\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.245ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"qo7ri\"",
              "sol": "\"qo7ri\""
            },
            {
              "js": "[[36,224,205,147,80,180,68,84,157,49,223,43,136,187,14,239,17,44,58,36,0,163,104,181,13,112,243,229,23,226,253,67],[119,192,54,137,253,54,249,175,41,181,201,255,139,156,154,204,171,135,124,121,148,109,173,222,141,76,169,146,89,229,9,140],[159,108,132,225,99,202,160,128,9,19,228,195,216,22,168,246,120,154,34,75,68,48,145,133,229,217,20,225,151,216,196,89],[78,57,89,47,193,120,33,197,76,148,90,184,108,109,130,151,102,118,173,60,81,39,168,163,162,181,106,199,184,243,215,215],[130,228,157,60,79,98,74,90,223,68,10,222,91,151,148,123,218,78,11,187,243,119,141,167,15,163,44,39,69,237,14,202]]",
              "sol": "[bytes(abi.encode(\"36,224,205,147,80,180,68,84,157,49,223,43,136,187,14,239,17,44,58,36,0,163,104,181,13,112,243,229,23,226,253,67\")),bytes(abi.encode(\"119,192,54,137,253,54,249,175,41,181,201,255,139,156,154,204,171,135,124,121,148,109,173,222,141,76,169,146,89,229,9,140\")),bytes(abi.encode(\"159,108,132,225,99,202,160,128,9,19,228,195,216,22,168,246,120,154,34,75,68,48,145,133,229,217,20,225,151,216,196,89\")),bytes(abi.encode(\"78,57,89,47,193,120,33,197,76,148,90,184,108,109,130,151,102,118,173,60,81,39,168,163,162,181,106,199,184,243,215,215\")),bytes(abi.encode(\"130,228,157,60,79,98,74,90,223,68,10,222,91,151,148,123,218,78,11,187,243,119,141,167,15,163,44,39,69,237,14,202\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.245ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[121,0,164,111,218,248,59,6,10,185,73,137,138,4,21,163,110,182,110,213,215,138,146,72,210,98,228,151,68,18,172,48],[239,206,49,7,219,171,34,82,239,59,90,27,104,191,8,105,113,169,101,102,113,245,149,205,67,7,216,58,79,172,48,234],[8,14,19,171,3,237,147,230,133,57,226,159,162,237,163,88,8,236,74,221,180,232,97,150,17,114,192,217,248,254,230,136],[158,227,47,142,12,12,141,48,253,253,28,95,177,117,244,206,34,148,177,187,38,80,18,34,118,184,205,56,74,253,31,90],[242,49,132,43,92,253,143,180,217,233,245,183,159,69,55,137,48,253,6,79,125,44,166,117,166,243,92,63,37,158,6,134]]",
              "sol": "[bytes(abi.encode(\"121,0,164,111,218,248,59,6,10,185,73,137,138,4,21,163,110,182,110,213,215,138,146,72,210,98,228,151,68,18,172,48\")),bytes(abi.encode(\"239,206,49,7,219,171,34,82,239,59,90,27,104,191,8,105,113,169,101,102,113,245,149,205,67,7,216,58,79,172,48,234\")),bytes(abi.encode(\"8,14,19,171,3,237,147,230,133,57,226,159,162,237,163,88,8,236,74,221,180,232,97,150,17,114,192,217,248,254,230,136\")),bytes(abi.encode(\"158,227,47,142,12,12,141,48,253,253,28,95,177,117,244,206,34,148,177,187,38,80,18,34,118,184,205,56,74,253,31,90\")),bytes(abi.encode(\"242,49,132,43,92,253,143,180,217,233,245,183,159,69,55,137,48,253,6,79,125,44,166,117,166,243,92,63,37,158,6,134\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.246ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[217]",
              "sol": "bytes1(\"217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.249ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.250ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.250ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.251ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.251ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.252ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.252ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"5s8phj\"",
              "sol": "\"5s8phj\""
            },
            {
              "js": "\"zz8x0m\"",
              "sol": "\"zz8x0m\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.252ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.253ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.253ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"69zanf\"",
              "sol": "\"69zanf\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.254ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"qo7ri\"",
              "sol": "\"qo7ri\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.254ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.254ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.255ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.256ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.258ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.258ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"UsesExample\",\"trade.totalPrice\",\"UsesExample\",\"\",\"listingID arg\"]",
              "sol": "[string(\"UsesExample\"),string(\"trade.totalPrice\"),string(\"UsesExample\"),string(\"\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.259ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[69,242,208,220,229,252,139,211,91,150,54,107,232,192,138,218,182,244,180,236,170,109,58,242,159,51,107,99,191,90,239,18]]",
              "sol": "[bytes(abi.encode(\"69,242,208,220,229,252,139,211,91,150,54,107,232,192,138,218,182,244,180,236,170,109,58,242,159,51,107,99,191,90,239,18\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.259ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.260ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[145,232,80,83,223,104,164,139,115,238,77,206,88,182,205,234,202,226,207,27,171,151,234,42,190,130,242,195,165,98,201,208]",
              "sol": "stringToBytes32(\"145,232,80,83,223,104,164,139,115,238,77,206,88,182,205,234,202,226,207,27,171,151,234,42,190,130,242,195,165,98,201,208\")"
            },
            {
              "js": "[182,71,77,64,85,85,7,84,240,129,238,62,189,96,22,41,196,122,7,212,45,38,124,53,111,0,196,135,190,12,73,100]",
              "sol": "stringToBytes32(\"182,71,77,64,85,85,7,84,240,129,238,62,189,96,22,41,196,122,7,212,45,38,124,53,111,0,196,135,190,12,73,100\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.260ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[169,31,222,247,236,71,56,33,70,61,220,197,254,78,85,233,202,146,141,127,10,161,93,187,61,122,1,76,103,104,88,130]",
              "sol": "stringToBytes32(\"169,31,222,247,236,71,56,33,70,61,220,197,254,78,85,233,202,146,141,127,10,161,93,187,61,122,1,76,103,104,88,130\")"
            },
            {
              "js": "[74,107,0,11,135,219,127,76,247,224,188,91,187,206,210,178,157,11,63,148,12,165,95,109,157,140,156,234,93,206,81,69]",
              "sol": "abi.encode(\"74,107,0,11,135,219,127,76,247,224,188,91,187,206,210,178,157,11,63,148,12,165,95,109,157,140,156,234,93,206,81,69\")"
            },
            {
              "js": "[92,105,124,238,121,58,132,71,172,48,225,45,12,70,182,34,154,207,97,86,153,77,188,42,238,31,209,254,29,58,253,13]",
              "sol": "abi.encode(\"92,105,124,238,121,58,132,71,172,48,225,45,12,70,182,34,154,207,97,86,153,77,188,42,238,31,209,254,29,58,253,13\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.261ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[18,80,117,204,184,117,245,90,196,229,146,30,245,130,56,116,64,135,129,43,6,198,49,98,185,179,224,84,175,225,113,112]",
              "sol": "abi.encode(\"18,80,117,204,184,117,245,90,196,229,146,30,245,130,56,116,64,135,129,43,6,198,49,98,185,179,224,84,175,225,113,112\")"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[211,73,24,253,27,60,188,86,165,231,149,2,64,43,134,216,45,193,137,51,66,29,243,139,15,112,238,61,107,134,204,205]",
              "sol": "abi.encode(\"211,73,24,253,27,60,188,86,165,231,149,2,64,43,134,216,45,193,137,51,66,29,243,139,15,112,238,61,107,134,204,205\")"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.262ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[190,132,101,179,146,194,64,28,206,246,151,148,73,93,207,51,153,155,42,3,57,125,40,87,89,81,192,89,200,106,222,97]",
              "sol": "stringToBytes32(\"190,132,101,179,146,194,64,28,206,246,151,148,73,93,207,51,153,155,42,3,57,125,40,87,89,81,192,89,200,106,222,97\")"
            },
            {
              "js": "\"5s8phj\"",
              "sol": "\"5s8phj\""
            },
            {
              "js": "[98,111,28,241,190,32,146,242,87,65,187,23,180,192,208,139,160,247,202,230,157,47,188,57,163,216,223,193,81,146,115,156]",
              "sol": "abi.encode(\"98,111,28,241,190,32,146,242,87,65,187,23,180,192,208,139,160,247,202,230,157,47,188,57,163,216,223,193,81,146,115,156\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[96,34,152,21,69,11,78,57,52,217,36,43,115,96,74,39,77,46,250,91,39,13,222,89,136,115,207,126,147,125,215,96]",
              "sol": "stringToBytes32(\"96,34,152,21,69,11,78,57,52,217,36,43,115,96,74,39,77,46,250,91,39,13,222,89,136,115,207,126,147,125,215,96\")"
            },
            {
              "js": "\"blse4j\"",
              "sol": "\"blse4j\""
            },
            {
              "js": "[201,198,242,168,196,207,64,180,122,113,86,9,52,27,105,160,14,194,116,55,209,158,81,158,2,183,35,12,121,240,212,220]",
              "sol": "abi.encode(\"201,198,242,168,196,207,64,180,122,113,86,9,52,27,105,160,14,194,116,55,209,158,81,158,2,183,35,12,121,240,212,220\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.263ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[242,114,246,41,156,27,174,181,191,193,89,136,31,137,55,139,31,116,227,61,10,220,31,88,246,202,119,187,22,177,251,147]",
              "sol": "stringToBytes32(\"242,114,246,41,156,27,174,181,191,193,89,136,31,137,55,139,31,116,227,61,10,220,31,88,246,202,119,187,22,177,251,147\")"
            },
            {
              "js": "[14,252,125,160,226,130,194,125,163,214,122,204,90,111,10,253,176,89,169,116,172,243,47,87,51,95,123,87,6,203,58,163]",
              "sol": "abi.encode(\"14,252,125,160,226,130,194,125,163,214,122,204,90,111,10,253,176,89,169,116,172,243,47,87,51,95,123,87,6,203,58,163\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[242,114,246,41,156,27,174,181,191,193,89,136,31,137,55,139,31,116,227,61,10,220,31,88,246,202,119,187,22,177,251,147]",
                "sol": "stringToBytes32(\"242,114,246,41,156,27,174,181,191,193,89,136,31,137,55,139,31,116,227,61,10,220,31,88,246,202,119,187,22,177,251,147\")"
              },
              {
                "js": "[83,49,45,117,79,196,80,144,128,180,227,255,98,250,24,124,195,224,47,95,239,184,127,220,117,40,87,109,103,155,65,108,126]",
                "sol": "bytes33(\"83,49,45,117,79,196,80,144,128,180,227,255,98,250,24,124,195,224,47,95,239,184,127,220,117,40,87,109,103,155,65,108,126\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.264ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[60,51,142,139,86,77,41,54,69,228,197,225,130,223,144,204,33,13,145,56,174,1,72,31,198,184,148,156,232,221,228,14]",
              "sol": "abi.encode(\"60,51,142,139,86,77,41,54,69,228,197,225,130,223,144,204,33,13,145,56,174,1,72,31,198,184,148,156,232,221,228,14\")"
            },
            {
              "js": "[164,237,66,30,190,174,76,26,167,189,73,39,83,233,108,148,84,111,179,18,239,232,44,13,82,100,75,167,167,197,9,121]",
              "sol": "stringToBytes32(\"164,237,66,30,190,174,76,26,167,189,73,39,83,233,108,148,84,111,179,18,239,232,44,13,82,100,75,167,167,197,9,121\")"
            },
            {
              "js": "[152,87,14,157,146,80,87,122,151,118,161,108,141,128,50,125,36,161,21,228,47,73,20,0,164,184,9,112,238,16,27,39]",
              "sol": "abi.encode(\"152,87,14,157,146,80,87,122,151,118,161,108,141,128,50,125,36,161,21,228,47,73,20,0,164,184,9,112,238,16,27,39\")"
            },
            {
              "js": "\"9o0u8u\"",
              "sol": "\"9o0u8u\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[56,207,156,14,75,102,45,140,162,136,1,37,152,229,31,83,217,73,113,200,100,28,65,15,92,95,220,180,28,85,180,106]",
              "sol": "abi.encode(\"56,207,156,14,75,102,45,140,162,136,1,37,152,229,31,83,217,73,113,200,100,28,65,15,92,95,220,180,28,85,180,106\")"
            },
            {
              "js": "[211,108,127,49,74,220,115,250,202,222,208,140,56,142,159,71,211,70,207,135,55,82,8,161,86,196,139,3,204,76,170,178]",
              "sol": "stringToBytes32(\"211,108,127,49,74,220,115,250,202,222,208,140,56,142,159,71,211,70,207,135,55,82,8,161,86,196,139,3,204,76,170,178\")"
            },
            {
              "js": "[152,232,244,137,61,3,170,133,144,119,237,159,150,128,39,144,198,144,91,140,108,171,117,60,178,38,93,144,62,218,92,129]",
              "sol": "abi.encode(\"152,232,244,137,61,3,170,133,144,119,237,159,150,128,39,144,198,144,91,140,108,171,117,60,178,38,93,144,62,218,92,129\")"
            },
            {
              "js": "\"9o0u8u\"",
              "sol": "\"9o0u8u\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[157,232,130,59,106,83,115,214,60,142,52,186,54,147,15,111,185,104,182,186,211,44,225,47,38,61,226,202,183,211,216,65]",
              "sol": "abi.encode(\"157,232,130,59,106,83,115,214,60,142,52,186,54,147,15,111,185,104,182,186,211,44,225,47,38,61,226,202,183,211,216,65\")"
            },
            {
              "js": "[243,252,90,38,244,195,212,205,113,145,159,192,209,22,233,204,235,152,157,166,179,71,169,209,223,206,33,7,42,184,241,120]",
              "sol": "stringToBytes32(\"243,252,90,38,244,195,212,205,113,145,159,192,209,22,233,204,235,152,157,166,179,71,169,209,223,206,33,7,42,184,241,120\")"
            },
            {
              "js": "[143,96,119,55,98,216,251,113,146,76,91,128,66,37,119,144,117,171,101,68,165,175,187,171,238,85,139,247,55,144,53,119]",
              "sol": "abi.encode(\"143,96,119,55,98,216,251,113,146,76,91,128,66,37,119,144,117,171,101,68,165,175,187,171,238,85,139,247,55,144,53,119\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[173,118,214,119,193,85,161,101,146,152,166,19,166,197,255,161,150,107,164,117,226,78,163,25,149,45,206,224,75,181,9,166]",
              "sol": "abi.encode(\"173,118,214,119,193,85,161,101,146,152,166,19,166,197,255,161,150,107,164,117,226,78,163,25,149,45,206,224,75,181,9,166\")"
            },
            {
              "js": "[143,251,240,112,199,226,82,251,86,21,65,203,86,236,161,194,166,140,179,116,125,155,160,247,144,200,252,15,240,215,54,105]",
              "sol": "stringToBytes32(\"143,251,240,112,199,226,82,251,86,21,65,203,86,236,161,194,166,140,179,116,125,155,160,247,144,200,252,15,240,215,54,105\")"
            },
            {
              "js": "[114,90,24,64,200,130,114,109,96,254,185,29,74,161,37,119,196,55,153,149,170,38,30,228,97,69,161,5,172,33,91,110]",
              "sol": "abi.encode(\"114,90,24,64,200,130,114,109,96,254,185,29,74,161,37,119,196,55,153,149,170,38,30,228,97,69,161,5,172,33,91,110\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[253,140,114,11,180,234,178,249,209,209,195,168,83,82,243,233,137,68,167,143,159,45,182,0,248,31,15,54,192,154,130,234]",
              "sol": "abi.encode(\"253,140,114,11,180,234,178,249,209,209,195,168,83,82,243,233,137,68,167,143,159,45,182,0,248,31,15,54,192,154,130,234\")"
            },
            {
              "js": "[133,91,108,222,61,156,86,191,200,36,15,158,160,248,76,200,144,68,226,28,34,64,46,7,145,144,161,70,6,143,174,123]",
              "sol": "stringToBytes32(\"133,91,108,222,61,156,86,191,200,36,15,158,160,248,76,200,144,68,226,28,34,64,46,7,145,144,161,70,6,143,174,123\")"
            },
            {
              "js": "[238,74,116,2,3,184,136,133,32,152,134,176,201,189,121,54,250,16,99,183,118,202,91,23,155,167,210,183,255,44,51,65]",
              "sol": "abi.encode(\"238,74,116,2,3,184,136,133,32,152,134,176,201,189,121,54,250,16,99,183,118,202,91,23,155,167,210,183,255,44,51,65\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[236,36,81,27,111,193,53,77,175,89,254,15,241,117,64,42,36,191,230,252,111,71,23,183,2,207,170,60,165,89,229,155]",
              "sol": "abi.encode(\"236,36,81,27,111,193,53,77,175,89,254,15,241,117,64,42,36,191,230,252,111,71,23,183,2,207,170,60,165,89,229,155\")"
            },
            {
              "js": "[204,158,115,223,204,114,227,214,80,238,84,74,240,254,2,252,38,136,41,245,201,80,180,29,191,41,23,196,41,101,37,212]",
              "sol": "stringToBytes32(\"204,158,115,223,204,114,227,214,80,238,84,74,240,254,2,252,38,136,41,245,201,80,180,29,191,41,23,196,41,101,37,212\")"
            },
            {
              "js": "[126,85,39,110,186,249,211,151,10,110,36,213,2,207,249,221,104,106,81,53,160,220,167,120,79,190,80,69,52,9,4,189]",
              "sol": "abi.encode(\"126,85,39,110,186,249,211,151,10,110,36,213,2,207,249,221,104,106,81,53,160,220,167,120,79,190,80,69,52,9,4,189\")"
            },
            {
              "js": "\"qo7ri\"",
              "sol": "\"qo7ri\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[217,223,124,167,232,171,5,121,106,182,124,205,26,163,100,220,124,196,37,26,232,212,122,250,89,117,95,109,225,202,72,233]",
              "sol": "abi.encode(\"217,223,124,167,232,171,5,121,106,182,124,205,26,163,100,220,124,196,37,26,232,212,122,250,89,117,95,109,225,202,72,233\")"
            },
            {
              "js": "[77,224,6,172,121,113,209,38,57,58,147,166,239,228,138,233,237,104,85,195,60,118,171,199,218,176,57,63,123,230,38,85]",
              "sol": "stringToBytes32(\"77,224,6,172,121,113,209,38,57,58,147,166,239,228,138,233,237,104,85,195,60,118,171,199,218,176,57,63,123,230,38,85\")"
            },
            {
              "js": "[191,106,57,18,89,147,120,172,177,16,255,108,157,103,24,189,182,37,55,158,18,205,251,104,236,129,236,221,104,39,120,219]",
              "sol": "abi.encode(\"191,106,57,18,89,147,120,172,177,16,255,108,157,103,24,189,182,37,55,158,18,205,251,104,236,129,236,221,104,39,120,219\")"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[194,170,22,103,130,133,239,56,30,120,86,26,39,22,181,125,139,64,66,106,88,223,53,102,153,65,187,192,184,211,29,7]",
              "sol": "abi.encode(\"194,170,22,103,130,133,239,56,30,120,86,26,39,22,181,125,139,64,66,106,88,223,53,102,153,65,187,192,184,211,29,7\")"
            },
            {
              "js": "[247,111,4,247,111,153,72,3,26,2,165,180,85,46,188,65,173,98,204,51,217,102,79,129,61,99,89,57,131,28,209,96]",
              "sol": "stringToBytes32(\"247,111,4,247,111,153,72,3,26,2,165,180,85,46,188,65,173,98,204,51,217,102,79,129,61,99,89,57,131,28,209,96\")"
            },
            {
              "js": "[193,6,156,149,242,45,253,59,235,248,42,26,143,33,201,145,193,1,96,113,78,235,74,96,122,185,79,29,93,43,140,149]",
              "sol": "abi.encode(\"193,6,156,149,242,45,253,59,235,248,42,26,143,33,201,145,193,1,96,113,78,235,74,96,122,185,79,29,93,43,140,149\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.275ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[73,177,184,135,125,201,62,186,117,102,125,10,51,35,6,173,230,121,117,65,177,241,42,175,132,109,201,34,249,158,98,189]",
              "sol": "abi.encode(\"73,177,184,135,125,201,62,186,117,102,125,10,51,35,6,173,230,121,117,65,177,241,42,175,132,109,201,34,249,158,98,189\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[94,77,193,246,23,159,74,237,54,173,122,108,240,24,94,85,221,27,155,104,183,84,124,158,54,113,158,116,90,214,204,8]",
              "sol": "abi.encode(\"94,77,193,246,23,159,74,237,54,173,122,108,240,24,94,85,221,27,155,104,183,84,124,158,54,113,158,116,90,214,204,8\")"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.276ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[156,57,97,30,6,181,92,67,127,167,166,47,6,121,180,239,195,104,40,219,128,236,77,157,228,62,112,52,144,44,6,234]",
              "sol": "stringToBytes32(\"156,57,97,30,6,181,92,67,127,167,166,47,6,121,180,239,195,104,40,219,128,236,77,157,228,62,112,52,144,44,6,234\")"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[12,154,80,197,69,250,31,243,29,228,113,145,212,247,229,112,142,43,138,6,116,166,215,67,131,66,16,164,84,216,213,54]",
              "sol": "stringToBytes32(\"12,154,80,197,69,250,31,243,29,228,113,145,212,247,229,112,142,43,138,6,116,166,215,67,131,66,16,164,84,216,213,54\")"
            },
            {
              "js": "[16,218,157,58,70,4,8,132,144,122,16,106,90,217,180,191,249,242,94,77,129,86,108,22,1,170,71,251,29,0,126,114]",
              "sol": "stringToBytes32(\"16,218,157,58,70,4,8,132,144,122,16,106,90,217,180,191,249,242,94,77,129,86,108,22,1,170,71,251,29,0,126,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.276ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[250,201,8,195,0,206,27,221,2,253,26,6,45,22,140,249,148,190,240,244,62,19,211,51,54,115,55,18,235,80,49,72]",
              "sol": "stringToBytes32(\"250,201,8,195,0,206,27,221,2,253,26,6,45,22,140,249,148,190,240,244,62,19,211,51,54,115,55,18,235,80,49,72\")"
            },
            {
              "js": "[68,212,133,131,208,23,5,239,254,157,253,185,184,89,55,129,241,228,106,141,9,125,246,177,112,7,244,32,51,143,223,136,26,188,7,17,198,60,211,201,139,183,87,23,178,105]",
              "sol": "abi.encode(\"68,212,133,131,208,23,5,239,254,157,253,185,184,89,55,129,241,228,106,141,9,125,246,177,112,7,244,32,51,143,223,136,26,188,7,17,198,60,211,201,139,183,87,23,178,105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[218,74,5,201,145,247,98,249,72,35,185,164,232,138,15,150,24,142,128,243,192,253,232,45,49,142,152,133,205,184,103,159]",
              "sol": "stringToBytes32(\"218,74,5,201,145,247,98,249,72,35,185,164,232,138,15,150,24,142,128,243,192,253,232,45,49,142,152,133,205,184,103,159\")"
            },
            {
              "js": "[162,16,58,104,194,7,21,54,71,20,24,205,183,91,19,198,190,240,244,33,101,243,46,234,74,169,19,116,223,197,14,89,14,86,50,253,69,46,92,195,141,43,75,36,173,179,128,127,89,57,189,137,175,214,154,46,245,200,173,0,9,124,13,163,157]",
              "sol": "abi.encode(\"162,16,58,104,194,7,21,54,71,20,24,205,183,91,19,198,190,240,244,33,101,243,46,234,74,169,19,116,223,197,14,89,14,86,50,253,69,46,92,195,141,43,75,36,173,179,128,127,89,57,189,137,175,214,154,46,245,200,173,0,9,124,13,163,157\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.277ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.279ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.279ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.280ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.280ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.280ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.281ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.281ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.281ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.281ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.282ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.282ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.283ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.284ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.284ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.287ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.292ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[97,158,89,158,147,25,101,160,213,226,54,12,92,198,140,245,133,151,182,215,72,56,78,208,244,10,94,225,101,10,103,46]",
              "sol": "stringToBytes32(\"97,158,89,158,147,25,101,160,213,226,54,12,92,198,140,245,133,151,182,215,72,56,78,208,244,10,94,225,101,10,103,46\")"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[247,230,212,24,219,65,213,88,63,114,188,211,90,85,171,153,114,121,190,102,73,236,214,90,69,185,58,53,229,194,31,11]",
              "sol": "abi.encode(\"247,230,212,24,219,65,213,88,63,114,188,211,90,85,171,153,114,121,190,102,73,236,214,90,69,185,58,53,229,194,31,11\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.293ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.294ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.295ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxyable.address",
              "sol": "contractProxyable"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxyable.address",
                "sol": "contractProxyable"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.295ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[194,180,226,238,199,178,129,134,180,82,6,139,219,138,154,64,201,245,99,234,0,154,88,22,15,163,80,151,41,121,71,46]",
              "sol": "abi.encode(\"194,180,226,238,199,178,129,134,180,82,6,139,219,138,154,64,201,245,99,234,0,154,88,22,15,163,80,151,41,121,71,46\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[78,156,56,155,224,147,29,183,159,27,30,52,5,3,56,105,208,77,66,29,212,186,231,45,98,11,75,255,49,17,238,166]",
              "sol": "stringToBytes32(\"78,156,56,155,224,147,29,183,159,27,30,52,5,3,56,105,208,77,66,29,212,186,231,45,98,11,75,255,49,17,238,166\")"
            },
            {
              "js": "[126,158,185,84,116,224,144,122,113,12,6,86,214,233,91,124,159,66,227,130,168,127,56,116,117,116,146,150,53,229,168,213]",
              "sol": "stringToBytes32(\"126,158,185,84,116,224,144,122,113,12,6,86,214,233,91,124,159,66,227,130,168,127,56,116,117,116,146,150,53,229,168,213\")"
            },
            {
              "js": "[170,114,246,27,0,217,194,77,214,127,168,178,110,224,182,170,0,201,189,164,218,46,231,13,94,43,185,125,77,61,238,42]",
              "sol": "stringToBytes32(\"170,114,246,27,0,217,194,77,214,127,168,178,110,224,182,170,0,201,189,164,218,46,231,13,94,43,185,125,77,61,238,42\")"
            },
            {
              "js": "[214,11,123,86,156,74,12,138,121,93,1,81,230,58,55,98,85,140,45,19,232,80,233,254,130,254,115,109,93,125,241,62]",
              "sol": "stringToBytes32(\"214,11,123,86,156,74,12,138,121,93,1,81,230,58,55,98,85,140,45,19,232,80,233,254,130,254,115,109,93,125,241,62\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.296ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.296ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.297ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.298ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.299ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.299ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.300ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.302ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "200000",
                "sol": "200000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.304ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:25:18.307ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.308ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.308ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:25:18.310ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}