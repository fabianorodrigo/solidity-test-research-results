,{
  "2020-11-13T20:29:05.460ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:31:24.164ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:31:59.743ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:32:17.138ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:32:34.486ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:32:51.839ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:33:09.140ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:33:26.555ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:33:44.158ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:01.554ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:19.029ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.694ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.697ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [74,64,112,221,250,135,147,178,143,228,227,81,219,5,175,72,99,113,213,53,49,123,152,140,48,133,69,158,127,124,36,175],\"capacity\": 48}",
              "sol": "Buffer.buffer(abi.encode(\"74,64,112,221,250,135,147,178,143,228,227,81,219,5,175,72,99,113,213,53,49,123,152,140,48,133,69,158,127,124,36,175\"),48)"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.698ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [19,70,218,15,95,118,209,237,15,243,80,104,54,20,137,165,141,211,67,87,42,147,100,215,127,225,49,82,163,204,90,43],\"capacity\": 1337}",
              "sol": "Buffer.buffer(abi.encode(\"19,70,218,15,95,118,209,237,15,243,80,104,54,20,137,165,141,211,67,87,42,147,100,215,127,225,49,82,163,204,90,43\"),1337)"
            },
            {
              "js": "[190,69,106,215,208,174,177,213,217,33,167,200,18,157,212,234,80,99,191,209,50,169,66,77,199,194,224,130,194,177,250,102]",
              "sol": "abi.encode(\"190,69,106,215,208,174,177,213,217,33,167,200,18,157,212,234,80,99,191,209,50,169,66,77,199,194,224,130,194,177,250,102\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.698ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [165,217,149,16,165,242,9,123,56,193,51,122,80,35,14,153,156,132,169,234,30,13,152,149,139,166,59,8,12,45,142,214],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"165,217,149,16,165,242,9,123,56,193,51,122,80,35,14,153,156,132,169,234,30,13,152,149,139,166,59,8,12,45,142,214\"),256)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.699ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [160,65,143,77,24,228,110,20,249,208,203,205,12,46,178,135,54,42,31,82,18,195,199,67,157,190,83,43,46,198,168,25],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"160,65,143,77,24,228,110,20,249,208,203,205,12,46,178,135,54,42,31,82,18,195,199,67,157,190,83,43,46,198,168,25\"),65)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.702ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [224,42,200,156,29,60,68,46,97,146,56,59,85,115,151,220,84,200,157,183,105,62,103,203,226,246,225,59,162,248,155,199],\"capacity\": 48}",
              "sol": "Buffer.buffer(abi.encode(\"224,42,200,156,29,60,68,46,97,146,56,59,85,115,151,220,84,200,157,183,105,62,103,203,226,246,225,59,162,248,155,199\"),48)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.703ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [26,164,232,97,56,67,212,37,236,101,92,200,44,54,186,108,43,172,156,68,221,136,208,81,70,101,186,166,154,51,101,89],\"capacity\": 56}",
              "sol": "Buffer.buffer(abi.encode(\"26,164,232,97,56,67,212,37,236,101,92,200,44,54,186,108,43,172,156,68,221,136,208,81,70,101,186,166,154,51,101,89\"),56)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [204,130,167,15,122,176,157,21,35,208,69,131,26,81,46,215,157,5,232,120,43,44,217,204,46,88,18,101,169,106,129,27],\"capacity\": 103}",
              "sol": "Buffer.buffer(abi.encode(\"204,130,167,15,122,176,157,21,35,208,69,131,26,81,46,215,157,5,232,120,43,44,217,204,46,88,18,101,169,106,129,27\"),103)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.704ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [185,192,119,39,19,180,104,192,231,136,213,15,116,15,12,25,112,169,142,140,225,47,5,46,142,241,63,18,160,96,12,72],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"185,192,119,39,19,180,104,192,231,136,213,15,116,15,12,25,112,169,142,140,225,47,5,46,142,241,63,18,160,96,12,72\"),61)"
            },
            {
              "js": "[115,207,228,140,93,114,138,241,194,205,170,184,123,56,30,25,156,10,143,226,116,135,132,125,39,55,252,193,139,170,247,199]",
              "sol": "abi.encode(\"115,207,228,140,93,114,138,241,194,205,170,184,123,56,30,25,156,10,143,226,116,135,132,125,39,55,252,193,139,170,247,199\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.705ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [170,15,240,81,92,24,122,211,132,152,140,198,83,229,83,214,196,230,136,65,141,181,106,140,244,184,198,47,170,164,67,45],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"170,15,240,81,92,24,122,211,132,152,140,198,83,229,83,214,196,230,136,65,141,181,106,140,244,184,198,47,170,164,67,45\"),256)"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.705ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [50,71,99,25,43,140,240,179,10,126,5,176,233,113,60,134,124,55,214,5,62,43,172,14,30,190,47,24,200,97,135,91],\"capacity\": 2014223715}",
              "sol": "Buffer.buffer(abi.encode(\"50,71,99,25,43,140,240,179,10,126,5,176,233,113,60,134,124,55,214,5,62,43,172,14,30,190,47,24,200,97,135,91\"),2014223715)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.706ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [246,94,164,127,232,44,16,35,79,96,25,15,41,56,64,86,157,97,78,135,35,19,212,200,165,47,40,54,2,31,78,178],\"capacity\": 127}",
              "sol": "Buffer.buffer(abi.encode(\"246,94,164,127,232,44,16,35,79,96,25,15,41,56,64,86,157,97,78,135,35,19,212,200,165,47,40,54,2,31,78,178\"),127)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.707ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [38,102,163,38,133,76,184,252,163,92,169,159,107,78,176,37,180,202,168,89,206,131,82,97,226,156,117,44,167,41,25,188],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"38,102,163,38,133,76,184,252,163,92,169,159,107,78,176,37,180,202,168,89,206,131,82,97,226,156,117,44,167,41,25,188\"),55)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.711ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.711ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.711ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.712ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.713ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.714ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.715ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.716ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.717ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.717ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.718ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[18,254,57,88,116,182,188,153,140,177,98,15,196,95,159,243,252,6,100,200,252,155,8,187,153,19,149,221,74,205,41,143]",
              "sol": "stringToBytes32(\"18,254,57,88,116,182,188,153,140,177,98,15,196,95,159,243,252,6,100,200,252,155,8,187,153,19,149,221,74,205,41,143\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.719ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[188,130,250,121,134,186,226,211,4,42,54,71,138,36,51,24,223,191,148,94,6,81,97,194,178,6,36,234,225,205,232,80]",
              "sol": "stringToBytes32(\"188,130,250,121,134,186,226,211,4,42,54,71,138,36,51,24,223,191,148,94,6,81,97,194,178,6,36,234,225,205,232,80\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[236,217,195,229,96,85,102,233,223,132,105,3,66,15,218,245,206,212,203,124,116,75,66,179,71,149,31,129,108,10,246,35]",
              "sol": "abi.encode(\"236,217,195,229,96,85,102,233,223,132,105,3,66,15,218,245,206,212,203,124,116,75,66,179,71,149,31,129,108,10,246,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.764ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.765ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.765ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.766ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.766ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.766ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.767ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.769ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.769ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.770ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.770ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.770ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.771ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.771ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.772ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"PayableExample\",\"0\"]",
              "sol": "[string(\"PayableExample\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.772ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"Example\",\"PayableExample\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"\"]",
              "sol": "[string(\"Example\"),string(\"PayableExample\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.773ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"n7ugkh\"",
              "sol": "\"n7ugkh\""
            },
            {
              "js": "[\"hdfxgb\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"PayableExample\",\"IsLibrary\",\"UsesExample\"]",
              "sol": "[string(\"hdfxgb\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"PayableExample\"),string(\"IsLibrary\"),string(\"UsesExample\")]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.773ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"\",\"UsesExample\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"\",\"\\x19Ethereum Signed Message:\\n32\",\"hdfxgb\",\"hdfxgb\",\"\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\"),string(\"UsesExample\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"hdfxgb\"),string(\"hdfxgb\"),string(\"\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.774ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"call updateEthPrice\"]",
              "sol": "[string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.774ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.776ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"Example\"]",
              "sol": "[string(\"Example\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.777ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"PayableExample\"]",
              "sol": "[string(\"PayableExample\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.777ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"ETH\",\"L\"]",
              "sol": "[string(\"ETH\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.777ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"PayableExample\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"PayableExample\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.778ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.779ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"hdfxgb\",\"PayableExample\"]",
              "sol": "[string(\"hdfxgb\"),string(\"PayableExample\")]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.779ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"hdfxgb\"",
              "sol": "\"hdfxgb\""
            },
            {
              "js": "[\"UsesExample\",\"P\",\"0\"]",
              "sol": "[string(\"UsesExample\"),string(\"P\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.780ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"ETH\",\"PayableExample\",\"costUSD\"]",
              "sol": "[string(\"ETH\"),string(\"PayableExample\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.780ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"costUSD\",\"L\",\"IsLibrary\"]",
              "sol": "[string(\"costUSD\"),string(\"L\"),string(\"IsLibrary\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.781ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"PayableExample\",\"ETH\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"PayableExample\"),string(\"ETH\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.781ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"uk2h94\",\"call updateEthPrice\",\"UsesExample\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"uk2h94\"),string(\"call updateEthPrice\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.782ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"P\",\"Example\",\"sexr7i\",\"listingID arg\"]",
              "sol": "[string(\"P\"),string(\"Example\"),string(\"sexr7i\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.782ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Example\",\"costUSD\",\"listingID arg\",\"sexr7i\"]",
              "sol": "[string(\"Example\"),string(\"costUSD\"),string(\"listingID arg\"),string(\"sexr7i\")]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.783ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"ETH\",\"hdfxgb\",\"Oraclize query was sent, standing by for the answer...\",\"ETH\"]",
              "sol": "[string(\"ETH\"),string(\"hdfxgb\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"ETH\")]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.783ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"call updateEthPrice\",\"PayableExample\",\"ETH\",\"UsesExample\",\"hdfxgb\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"PayableExample\"),string(\"ETH\"),string(\"UsesExample\"),string(\"hdfxgb\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.784ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"sexr7i\"",
              "sol": "\"sexr7i\""
            },
            {
              "js": "[\"0\",\"PayableExample\",\"uk2h94\",\"ETH\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"0\"),string(\"PayableExample\"),string(\"uk2h94\"),string(\"ETH\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.784ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"updateEthPrice called\",\"ETH\",\"L\",\"call updateEthPrice\",\"uk2h94\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"ETH\"),string(\"L\"),string(\"call updateEthPrice\"),string(\"uk2h94\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.786ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"costUSD\",\"8dnq8j\",\"uk2h94\",\"uk2h94\",\"UsesExample\"]",
              "sol": "[string(\"costUSD\"),string(\"8dnq8j\"),string(\"uk2h94\"),string(\"uk2h94\"),string(\"UsesExample\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.787ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"sexr7i\"",
              "sol": "\"sexr7i\""
            },
            {
              "js": "[[17,15,111,56,122,188,14,108,189,156,190,87,62,209,93,14,153,173,76,45,40,219,133,143,251,30,71,225,137,194,120,106],[252,195,84,113,63,111,153,179,80,77,10,30,97,174,179,199,168,2,119,170,42,89,42,68,85,73,32,243,243,82,248,255],[86,141,153,1,50,207,163,99,138,75,169,107,84,233,171,202,150,216,218,121,193,106,251,16,134,144,24,165,254,62,110,237],[194,130,17,127,199,192,57,215,123,139,123,164,186,219,37,153,125,24,214,27,102,157,194,199,232,30,159,188,206,156,180,209],[74,137,251,121,21,197,126,102,243,5,53,72,210,162,46,68,90,48,38,160,81,50,27,147,159,174,54,23,52,79,26,232],[227,68,155,37,192,73,187,242,192,84,246,189,49,211,215,201,24,31,200,10,140,133,4,176,104,218,60,107,125,234,247,141],[142,212,76,15,73,247,155,169,100,100,69,35,124,156,141,147,215,38,55,21,224,76,105,140,236,222,188,100,219,52,89,62]]",
              "sol": "[bytes(abi.encode(\"17,15,111,56,122,188,14,108,189,156,190,87,62,209,93,14,153,173,76,45,40,219,133,143,251,30,71,225,137,194,120,106\")),bytes(abi.encode(\"252,195,84,113,63,111,153,179,80,77,10,30,97,174,179,199,168,2,119,170,42,89,42,68,85,73,32,243,243,82,248,255\")),bytes(abi.encode(\"86,141,153,1,50,207,163,99,138,75,169,107,84,233,171,202,150,216,218,121,193,106,251,16,134,144,24,165,254,62,110,237\")),bytes(abi.encode(\"194,130,17,127,199,192,57,215,123,139,123,164,186,219,37,153,125,24,214,27,102,157,194,199,232,30,159,188,206,156,180,209\")),bytes(abi.encode(\"74,137,251,121,21,197,126,102,243,5,53,72,210,162,46,68,90,48,38,160,81,50,27,147,159,174,54,23,52,79,26,232\")),bytes(abi.encode(\"227,68,155,37,192,73,187,242,192,84,246,189,49,211,215,201,24,31,200,10,140,133,4,176,104,218,60,107,125,234,247,141\")),bytes(abi.encode(\"142,212,76,15,73,247,155,169,100,100,69,35,124,156,141,147,215,38,55,21,224,76,105,140,236,222,188,100,219,52,89,62\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.787ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"n7ugkh\"",
              "sol": "\"n7ugkh\""
            },
            {
              "js": "[[177,86,16,31,5,116,9,213,36,57,48,182,198,215,138,160,102,251,35,144,138,190,139,36,56,152,29,3,22,117,171,72],[175,190,130,79,174,29,31,160,70,2,118,76,171,151,200,167,251,154,164,199,118,25,242,126,217,59,86,134,29,107,170,172],[32,238,166,73,69,78,209,193,113,131,252,235,213,120,50,57,225,135,161,86,37,80,104,168,121,168,215,214,233,22,46,93],[6,255,191,56,120,73,252,41,42,219,160,49,60,18,180,191,160,76,30,41,237,19,218,137,252,62,40,212,128,88,36,56],[28,243,110,181,196,243,115,214,171,157,246,160,145,114,203,99,107,24,46,252,73,122,206,230,3,41,82,42,95,246,193,192]]",
              "sol": "[bytes(abi.encode(\"177,86,16,31,5,116,9,213,36,57,48,182,198,215,138,160,102,251,35,144,138,190,139,36,56,152,29,3,22,117,171,72\")),bytes(abi.encode(\"175,190,130,79,174,29,31,160,70,2,118,76,171,151,200,167,251,154,164,199,118,25,242,126,217,59,86,134,29,107,170,172\")),bytes(abi.encode(\"32,238,166,73,69,78,209,193,113,131,252,235,213,120,50,57,225,135,161,86,37,80,104,168,121,168,215,214,233,22,46,93\")),bytes(abi.encode(\"6,255,191,56,120,73,252,41,42,219,160,49,60,18,180,191,160,76,30,41,237,19,218,137,252,62,40,212,128,88,36,56\")),bytes(abi.encode(\"28,243,110,181,196,243,115,214,171,157,246,160,145,114,203,99,107,24,46,252,73,122,206,230,3,41,82,42,95,246,193,192\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.788ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"fzz64\"",
              "sol": "\"fzz64\""
            },
            {
              "js": "[[173,69,134,30,205,190,171,245,151,13,200,169,240,156,63,191,46,4,238,149,186,10,102,156,171,76,18,10,38,95,238,182],[68,132,166,202,61,82,35,35,97,74,100,97,26,125,10,192,247,161,245,148,218,114,22,250,189,119,196,103,181,156,126,181],[237,178,104,167,67,165,95,1,87,179,221,40,232,184,149,40,175,21,139,115,77,237,127,196,187,221,40,174,51,215,69,204],[138,191,112,131,203,209,59,147,11,35,67,99,176,250,207,224,205,12,147,90,53,212,95,214,151,91,214,85,136,7,191,163],[137,218,127,116,113,212,192,12,44,143,77,253,86,246,135,157,200,211,183,25,78,118,232,148,43,91,70,28,70,60,197,241],[96,120,251,133,62,28,53,187,108,187,5,165,36,187,254,98,154,39,250,50,206,217,36,188,237,38,199,105,139,136,149,180]]",
              "sol": "[bytes(abi.encode(\"173,69,134,30,205,190,171,245,151,13,200,169,240,156,63,191,46,4,238,149,186,10,102,156,171,76,18,10,38,95,238,182\")),bytes(abi.encode(\"68,132,166,202,61,82,35,35,97,74,100,97,26,125,10,192,247,161,245,148,218,114,22,250,189,119,196,103,181,156,126,181\")),bytes(abi.encode(\"237,178,104,167,67,165,95,1,87,179,221,40,232,184,149,40,175,21,139,115,77,237,127,196,187,221,40,174,51,215,69,204\")),bytes(abi.encode(\"138,191,112,131,203,209,59,147,11,35,67,99,176,250,207,224,205,12,147,90,53,212,95,214,151,91,214,85,136,7,191,163\")),bytes(abi.encode(\"137,218,127,116,113,212,192,12,44,143,77,253,86,246,135,157,200,211,183,25,78,118,232,148,43,91,70,28,70,60,197,241\")),bytes(abi.encode(\"96,120,251,133,62,28,53,187,108,187,5,165,36,187,254,98,154,39,250,50,206,217,36,188,237,38,199,105,139,136,149,180\"))]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.789ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"8dnq8j\"",
              "sol": "\"8dnq8j\""
            },
            {
              "js": "[[93,29,0,166,196,172,207,68,15,176,63,80,6,233,229,134,119,83,86,182,78,13,47,141,174,227,126,109,69,135,32,211],[99,149,95,145,128,136,99,12,43,157,164,230,87,38,128,147,241,2,125,250,162,164,22,17,219,148,68,31,88,32,45,73],[132,55,250,206,26,76,74,151,200,65,67,51,174,44,174,193,124,54,120,216,156,235,98,204,88,93,203,251,35,183,183,154],[147,188,12,185,56,146,112,149,2,22,228,255,2,193,207,4,118,147,252,100,24,3,133,254,132,61,96,17,174,27,111,214]]",
              "sol": "[bytes(abi.encode(\"93,29,0,166,196,172,207,68,15,176,63,80,6,233,229,134,119,83,86,182,78,13,47,141,174,227,126,109,69,135,32,211\")),bytes(abi.encode(\"99,149,95,145,128,136,99,12,43,157,164,230,87,38,128,147,241,2,125,250,162,164,22,17,219,148,68,31,88,32,45,73\")),bytes(abi.encode(\"132,55,250,206,26,76,74,151,200,65,67,51,174,44,174,193,124,54,120,216,156,235,98,204,88,93,203,251,35,183,183,154\")),bytes(abi.encode(\"147,188,12,185,56,146,112,149,2,22,228,255,2,193,207,4,118,147,252,100,24,3,133,254,132,61,96,17,174,27,111,214\"))]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.790ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[57,62,5,237,164,173,232,61,248,109,95,220,144,235,241,220,79,143,201,144,119,61,17,158,76,181,51,61,173,246,170,182]]",
              "sol": "[bytes(abi.encode(\"57,62,5,237,164,173,232,61,248,109,95,220,144,235,241,220,79,143,201,144,119,61,17,158,76,181,51,61,173,246,170,182\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.791ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"fzz64\"",
              "sol": "\"fzz64\""
            },
            {
              "js": "[[230,36,190,49,200,68,11,33,61,101,233,171,192,211,149,202,81,204,172,83,136,30,118,19,166,62,19,146,141,168,225,223]]",
              "sol": "[bytes(abi.encode(\"230,36,190,49,200,68,11,33,61,101,233,171,192,211,149,202,81,204,172,83,136,30,118,19,166,62,19,146,141,168,225,223\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.792ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[211,38,108,125,118,138,163,35,21,11,16,9,34,195,167,209,176,128,113,34,192,82,129,2,217,3,184,109,81,240,0,123]]",
              "sol": "[bytes(abi.encode(\"211,38,108,125,118,138,163,35,21,11,16,9,34,195,167,209,176,128,113,34,192,82,129,2,217,3,184,109,81,240,0,123\"))]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.793ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[9,58,95,179,129,20,20,239,152,255,20,109,136,48,7,94,63,151,85,62,184,112,94,135,107,254,159,8,208,202,132,92]]",
              "sol": "[bytes(abi.encode(\"9,58,95,179,129,20,20,239,152,255,20,109,136,48,7,94,63,151,85,62,184,112,94,135,107,254,159,8,208,202,132,92\"))]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.794ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[18,24,210,53,88,114,20,32,172,162,16,94,110,21,135,48,173,210,228,144,198,0,234,106,247,35,37,159,40,219,232,12],[10,84,31,172,129,245,106,14,222,215,164,206,240,178,177,159,57,201,239,12,6,176,33,230,147,145,178,232,134,212,150,19]]",
              "sol": "[bytes(abi.encode(\"18,24,210,53,88,114,20,32,172,162,16,94,110,21,135,48,173,210,228,144,198,0,234,106,247,35,37,159,40,219,232,12\")),bytes(abi.encode(\"10,84,31,172,129,245,106,14,222,215,164,206,240,178,177,159,57,201,239,12,6,176,33,230,147,145,178,232,134,212,150,19\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.795ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[61,171,183,67,180,84,12,40,74,189,99,71,195,236,190,234,100,106,134,179,51,82,255,157,78,87,203,58,14,248,209,67],[172,2,86,32,51,154,197,152,70,39,189,104,136,46,38,143,183,148,13,246,204,114,19,92,220,46,226,234,13,132,118,32]]",
              "sol": "[bytes(abi.encode(\"61,171,183,67,180,84,12,40,74,189,99,71,195,236,190,234,100,106,134,179,51,82,255,157,78,87,203,58,14,248,209,67\")),bytes(abi.encode(\"172,2,86,32,51,154,197,152,70,39,189,104,136,46,38,143,183,148,13,246,204,114,19,92,220,46,226,234,13,132,118,32\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.796ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"hdfxgb\"",
              "sol": "\"hdfxgb\""
            },
            {
              "js": "[[241,232,201,113,55,84,87,255,250,102,131,203,58,108,190,4,174,118,110,106,252,225,146,207,200,241,208,0,103,129,35,142],[29,0,77,218,227,118,47,22,252,223,222,245,212,152,132,103,40,32,164,178,149,169,239,149,101,114,96,146,8,38,46,153]]",
              "sol": "[bytes(abi.encode(\"241,232,201,113,55,84,87,255,250,102,131,203,58,108,190,4,174,118,110,106,252,225,146,207,200,241,208,0,103,129,35,142\")),bytes(abi.encode(\"29,0,77,218,227,118,47,22,252,223,222,245,212,152,132,103,40,32,164,178,149,169,239,149,101,114,96,146,8,38,46,153\"))]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.797ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[79,17,165,183,84,83,212,143,164,21,173,214,134,27,174,196,97,8,152,115,138,255,219,215,242,65,8,102,100,234,206,171],[165,166,135,48,133,80,76,105,242,48,223,158,127,182,154,12,5,242,31,138,234,164,142,98,98,155,201,70,149,86,133,51]]",
              "sol": "[bytes(abi.encode(\"79,17,165,183,84,83,212,143,164,21,173,214,134,27,174,196,97,8,152,115,138,255,219,215,242,65,8,102,100,234,206,171\")),bytes(abi.encode(\"165,166,135,48,133,80,76,105,242,48,223,158,127,182,154,12,5,242,31,138,234,164,142,98,98,155,201,70,149,86,133,51\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.799ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"uk2h94\"",
              "sol": "\"uk2h94\""
            },
            {
              "js": "[[118,227,82,236,205,53,38,99,178,238,155,218,123,98,10,216,133,42,121,40,186,253,22,124,213,52,16,12,127,194,224,233],[50,40,136,133,133,193,63,45,115,122,169,124,49,27,84,157,119,8,38,233,141,116,212,226,77,124,74,97,221,163,44,102],[57,63,164,227,115,244,67,161,2,58,158,19,90,223,142,28,187,97,77,10,60,145,113,26,37,201,195,200,116,122,34,168]]",
              "sol": "[bytes(abi.encode(\"118,227,82,236,205,53,38,99,178,238,155,218,123,98,10,216,133,42,121,40,186,253,22,124,213,52,16,12,127,194,224,233\")),bytes(abi.encode(\"50,40,136,133,133,193,63,45,115,122,169,124,49,27,84,157,119,8,38,233,141,116,212,226,77,124,74,97,221,163,44,102\")),bytes(abi.encode(\"57,63,164,227,115,244,67,161,2,58,158,19,90,223,142,28,187,97,77,10,60,145,113,26,37,201,195,200,116,122,34,168\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.799ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"fzz64\"",
              "sol": "\"fzz64\""
            },
            {
              "js": "[[16,137,237,129,170,237,10,67,95,219,118,212,80,125,238,165,165,100,35,138,107,116,236,117,70,120,47,139,235,67,172,114],[152,17,210,59,153,47,12,214,42,138,67,64,145,253,6,52,18,149,64,147,163,195,112,157,59,251,144,16,68,137,118,75],[249,243,248,158,173,231,217,229,31,102,107,42,1,34,208,57,202,148,100,72,187,19,188,228,236,11,176,174,186,167,15,94]]",
              "sol": "[bytes(abi.encode(\"16,137,237,129,170,237,10,67,95,219,118,212,80,125,238,165,165,100,35,138,107,116,236,117,70,120,47,139,235,67,172,114\")),bytes(abi.encode(\"152,17,210,59,153,47,12,214,42,138,67,64,145,253,6,52,18,149,64,147,163,195,112,157,59,251,144,16,68,137,118,75\")),bytes(abi.encode(\"249,243,248,158,173,231,217,229,31,102,107,42,1,34,208,57,202,148,100,72,187,19,188,228,236,11,176,174,186,167,15,94\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.800ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[155,208,238,117,253,91,239,194,19,213,209,26,37,98,56,115,2,143,23,88,25,125,234,23,141,167,246,237,51,49,137,247],[192,72,146,215,245,16,1,69,185,110,142,104,245,143,213,210,98,61,213,144,0,16,200,29,216,204,26,233,211,78,219,244],[88,32,255,24,100,211,44,114,14,20,69,38,90,60,60,6,49,237,228,142,41,86,136,218,40,253,136,191,157,32,165,217]]",
              "sol": "[bytes(abi.encode(\"155,208,238,117,253,91,239,194,19,213,209,26,37,98,56,115,2,143,23,88,25,125,234,23,141,167,246,237,51,49,137,247\")),bytes(abi.encode(\"192,72,146,215,245,16,1,69,185,110,142,104,245,143,213,210,98,61,213,144,0,16,200,29,216,204,26,233,211,78,219,244\")),bytes(abi.encode(\"88,32,255,24,100,211,44,114,14,20,69,38,90,60,60,6,49,237,228,142,41,86,136,218,40,253,136,191,157,32,165,217\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.801ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[164,158,151,205,240,196,118,75,143,42,139,17,90,75,100,69,93,220,46,82,150,123,233,92,215,228,141,11,3,20,53,227],[76,62,218,28,57,196,196,71,174,210,41,148,223,212,224,99,58,192,91,48,193,28,150,160,21,241,56,9,196,97,13,194],[212,215,83,231,180,67,227,146,213,111,19,56,38,20,161,226,87,87,133,221,44,21,48,128,97,157,208,197,36,202,208,62]]",
              "sol": "[bytes(abi.encode(\"164,158,151,205,240,196,118,75,143,42,139,17,90,75,100,69,93,220,46,82,150,123,233,92,215,228,141,11,3,20,53,227\")),bytes(abi.encode(\"76,62,218,28,57,196,196,71,174,210,41,148,223,212,224,99,58,192,91,48,193,28,150,160,21,241,56,9,196,97,13,194\")),bytes(abi.encode(\"212,215,83,231,180,67,227,146,213,111,19,56,38,20,161,226,87,87,133,221,44,21,48,128,97,157,208,197,36,202,208,62\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.801ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[187,60,170,251,71,50,198,64,181,118,91,189,216,213,25,22,37,185,107,239,3,88,191,21,253,10,28,96,247,204,68,148],[191,53,143,11,56,101,82,196,125,120,191,193,194,164,46,49,185,155,67,250,55,241,117,172,198,224,241,32,191,243,164,253],[255,17,138,82,4,127,78,11,139,114,102,221,229,184,38,33,26,236,11,137,33,179,185,83,95,169,147,3,221,189,182,226],[240,119,186,61,209,7,177,11,222,212,133,81,156,221,72,162,138,69,138,101,29,79,164,94,217,120,172,24,51,201,46,91]]",
              "sol": "[bytes(abi.encode(\"187,60,170,251,71,50,198,64,181,118,91,189,216,213,25,22,37,185,107,239,3,88,191,21,253,10,28,96,247,204,68,148\")),bytes(abi.encode(\"191,53,143,11,56,101,82,196,125,120,191,193,194,164,46,49,185,155,67,250,55,241,117,172,198,224,241,32,191,243,164,253\")),bytes(abi.encode(\"255,17,138,82,4,127,78,11,139,114,102,221,229,184,38,33,26,236,11,137,33,179,185,83,95,169,147,3,221,189,182,226\")),bytes(abi.encode(\"240,119,186,61,209,7,177,11,222,212,133,81,156,221,72,162,138,69,138,101,29,79,164,94,217,120,172,24,51,201,46,91\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.802ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[65,16,166,61,138,165,10,208,141,207,31,206,218,197,212,18,141,41,205,201,32,118,113,47,155,51,186,198,154,240,219,45],[233,175,165,160,240,131,18,195,212,125,86,219,91,171,8,236,34,124,45,79,138,17,6,188,115,186,13,201,230,86,169,253],[126,194,14,97,161,134,167,133,202,41,93,216,79,147,122,21,161,27,126,122,169,88,230,163,148,157,34,40,17,120,216,224],[180,201,176,125,59,215,175,181,47,70,50,135,73,9,199,93,203,44,46,248,16,35,168,20,107,34,152,81,7,70,252,210]]",
              "sol": "[bytes(abi.encode(\"65,16,166,61,138,165,10,208,141,207,31,206,218,197,212,18,141,41,205,201,32,118,113,47,155,51,186,198,154,240,219,45\")),bytes(abi.encode(\"233,175,165,160,240,131,18,195,212,125,86,219,91,171,8,236,34,124,45,79,138,17,6,188,115,186,13,201,230,86,169,253\")),bytes(abi.encode(\"126,194,14,97,161,134,167,133,202,41,93,216,79,147,122,21,161,27,126,122,169,88,230,163,148,157,34,40,17,120,216,224\")),bytes(abi.encode(\"180,201,176,125,59,215,175,181,47,70,50,135,73,9,199,93,203,44,46,248,16,35,168,20,107,34,152,81,7,70,252,210\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.803ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"fzz64\"",
              "sol": "\"fzz64\""
            },
            {
              "js": "[[141,255,198,250,175,201,132,34,223,146,74,60,48,91,110,106,227,147,62,204,200,55,88,86,164,93,166,190,9,126,6,72],[229,245,12,175,147,94,60,74,123,103,117,122,32,205,88,92,217,37,176,33,225,60,53,227,130,171,190,76,5,235,221,48],[111,56,127,193,42,76,140,31,189,140,82,180,27,163,129,147,243,127,35,58,162,199,153,117,15,156,23,246,22,39,252,206],[223,174,105,110,201,52,99,137,4,100,252,23,113,71,146,149,227,216,250,52,25,8,148,164,119,32,133,16,121,116,179,140]]",
              "sol": "[bytes(abi.encode(\"141,255,198,250,175,201,132,34,223,146,74,60,48,91,110,106,227,147,62,204,200,55,88,86,164,93,166,190,9,126,6,72\")),bytes(abi.encode(\"229,245,12,175,147,94,60,74,123,103,117,122,32,205,88,92,217,37,176,33,225,60,53,227,130,171,190,76,5,235,221,48\")),bytes(abi.encode(\"111,56,127,193,42,76,140,31,189,140,82,180,27,163,129,147,243,127,35,58,162,199,153,117,15,156,23,246,22,39,252,206\")),bytes(abi.encode(\"223,174,105,110,201,52,99,137,4,100,252,23,113,71,146,149,227,216,250,52,25,8,148,164,119,32,133,16,121,116,179,140\"))]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.803ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[237,51,211,250,73,12,177,13,10,28,181,192,61,10,151,133,82,128,118,184,194,136,79,84,209,102,208,208,13,123,229,7],[117,116,7,250,222,93,115,198,20,39,113,213,108,40,252,37,226,171,161,184,95,92,218,201,251,143,222,194,94,249,212,253],[140,253,51,244,173,110,19,66,8,26,63,38,57,243,62,156,1,235,233,124,96,31,123,209,36,94,227,152,139,2,146,55],[11,133,65,78,102,22,29,17,222,194,253,77,206,94,234,178,64,203,140,20,59,241,146,124,146,154,195,194,67,34,101,168]]",
              "sol": "[bytes(abi.encode(\"237,51,211,250,73,12,177,13,10,28,181,192,61,10,151,133,82,128,118,184,194,136,79,84,209,102,208,208,13,123,229,7\")),bytes(abi.encode(\"117,116,7,250,222,93,115,198,20,39,113,213,108,40,252,37,226,171,161,184,95,92,218,201,251,143,222,194,94,249,212,253\")),bytes(abi.encode(\"140,253,51,244,173,110,19,66,8,26,63,38,57,243,62,156,1,235,233,124,96,31,123,209,36,94,227,152,139,2,146,55\")),bytes(abi.encode(\"11,133,65,78,102,22,29,17,222,194,253,77,206,94,234,178,64,203,140,20,59,241,146,124,146,154,195,194,67,34,101,168\"))]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.804ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[142,141,115,129,243,139,191,107,101,59,166,249,118,157,215,168,27,24,55,14,10,155,30,251,42,50,107,197,115,233,198,31],[31,128,101,164,235,200,115,27,69,222,32,222,129,39,186,102,196,138,217,95,11,2,115,217,83,202,138,7,24,139,28,48],[193,209,73,162,245,1,39,166,16,187,31,12,141,175,193,244,28,167,114,35,68,72,102,11,59,253,200,182,10,83,243,39],[152,202,52,210,218,44,4,39,60,153,167,132,2,54,34,25,25,202,108,47,213,148,140,152,86,142,216,239,221,101,138,91],[214,2,123,75,130,149,43,204,194,224,186,197,200,158,38,196,63,126,3,18,154,164,153,18,105,85,219,180,109,189,67,69]]",
              "sol": "[bytes(abi.encode(\"142,141,115,129,243,139,191,107,101,59,166,249,118,157,215,168,27,24,55,14,10,155,30,251,42,50,107,197,115,233,198,31\")),bytes(abi.encode(\"31,128,101,164,235,200,115,27,69,222,32,222,129,39,186,102,196,138,217,95,11,2,115,217,83,202,138,7,24,139,28,48\")),bytes(abi.encode(\"193,209,73,162,245,1,39,166,16,187,31,12,141,175,193,244,28,167,114,35,68,72,102,11,59,253,200,182,10,83,243,39\")),bytes(abi.encode(\"152,202,52,210,218,44,4,39,60,153,167,132,2,54,34,25,25,202,108,47,213,148,140,152,86,142,216,239,221,101,138,91\")),bytes(abi.encode(\"214,2,123,75,130,149,43,204,194,224,186,197,200,158,38,196,63,126,3,18,154,164,153,18,105,85,219,180,109,189,67,69\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.805ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[124,70,134,160,13,56,243,209,35,175,58,11,4,165,221,7,232,224,231,228,24,208,39,96,254,163,109,21,30,18,228,7],[240,228,185,31,0,84,177,71,193,193,232,247,229,65,216,180,101,105,170,88,66,142,201,201,250,179,205,185,56,162,158,144],[53,109,22,60,94,44,142,99,216,58,206,7,242,58,152,179,71,226,94,204,248,212,220,211,192,100,35,57,195,89,152,20],[218,117,99,194,114,145,98,243,232,32,249,138,85,53,254,95,32,150,237,91,8,25,134,108,10,162,15,148,82,185,152,49],[228,58,112,117,136,96,233,9,113,27,93,190,148,71,86,74,181,180,51,88,206,174,18,40,113,210,190,221,141,20,230,39]]",
              "sol": "[bytes(abi.encode(\"124,70,134,160,13,56,243,209,35,175,58,11,4,165,221,7,232,224,231,228,24,208,39,96,254,163,109,21,30,18,228,7\")),bytes(abi.encode(\"240,228,185,31,0,84,177,71,193,193,232,247,229,65,216,180,101,105,170,88,66,142,201,201,250,179,205,185,56,162,158,144\")),bytes(abi.encode(\"53,109,22,60,94,44,142,99,216,58,206,7,242,58,152,179,71,226,94,204,248,212,220,211,192,100,35,57,195,89,152,20\")),bytes(abi.encode(\"218,117,99,194,114,145,98,243,232,32,249,138,85,53,254,95,32,150,237,91,8,25,134,108,10,162,15,148,82,185,152,49\")),bytes(abi.encode(\"228,58,112,117,136,96,233,9,113,27,93,190,148,71,86,74,181,180,51,88,206,174,18,40,113,210,190,221,141,20,230,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.805ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"sexr7i\"",
              "sol": "\"sexr7i\""
            },
            {
              "js": "[[74,236,69,184,237,93,27,175,51,139,183,50,84,140,117,251,59,178,60,134,75,92,143,102,116,67,45,89,174,68,34,83],[155,157,131,30,76,17,182,68,8,160,199,220,197,233,134,175,25,6,105,132,192,0,203,139,30,71,21,80,243,86,14,206],[101,133,40,116,203,186,185,187,47,93,233,56,42,191,12,171,210,146,16,58,192,185,132,16,82,18,97,130,39,220,164,47],[82,110,87,246,248,206,175,69,176,251,119,111,124,190,77,56,176,47,218,79,203,214,177,89,180,91,239,29,93,244,67,150],[47,183,136,170,220,42,250,0,248,165,27,93,183,65,243,224,145,24,226,54,204,39,126,243,156,170,253,130,87,228,134,96]]",
              "sol": "[bytes(abi.encode(\"74,236,69,184,237,93,27,175,51,139,183,50,84,140,117,251,59,178,60,134,75,92,143,102,116,67,45,89,174,68,34,83\")),bytes(abi.encode(\"155,157,131,30,76,17,182,68,8,160,199,220,197,233,134,175,25,6,105,132,192,0,203,139,30,71,21,80,243,86,14,206\")),bytes(abi.encode(\"101,133,40,116,203,186,185,187,47,93,233,56,42,191,12,171,210,146,16,58,192,185,132,16,82,18,97,130,39,220,164,47\")),bytes(abi.encode(\"82,110,87,246,248,206,175,69,176,251,119,111,124,190,77,56,176,47,218,79,203,214,177,89,180,91,239,29,93,244,67,150\")),bytes(abi.encode(\"47,183,136,170,220,42,250,0,248,165,27,93,183,65,243,224,145,24,226,54,204,39,126,243,156,170,253,130,87,228,134,96\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.807ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[92,162,157,58,42,177,58,11,114,100,46,99,70,48,126,133,172,165,16,195,169,80,89,37,48,136,171,136,8,122,213,9],[222,246,149,215,6,45,211,224,97,58,66,0,198,64,232,203,123,215,152,98,67,186,137,51,197,156,78,226,197,57,36,165],[130,12,194,36,8,14,109,217,76,185,176,244,76,202,125,39,17,213,48,1,82,88,56,209,91,177,73,246,123,51,31,245],[10,122,16,119,246,101,93,95,216,19,97,179,238,222,94,115,91,92,192,106,213,219,0,222,119,23,91,237,234,78,189,145],[143,120,122,165,182,107,159,76,102,94,93,16,99,76,97,55,241,235,183,96,119,75,61,40,179,202,26,135,23,84,174,110]]",
              "sol": "[bytes(abi.encode(\"92,162,157,58,42,177,58,11,114,100,46,99,70,48,126,133,172,165,16,195,169,80,89,37,48,136,171,136,8,122,213,9\")),bytes(abi.encode(\"222,246,149,215,6,45,211,224,97,58,66,0,198,64,232,203,123,215,152,98,67,186,137,51,197,156,78,226,197,57,36,165\")),bytes(abi.encode(\"130,12,194,36,8,14,109,217,76,185,176,244,76,202,125,39,17,213,48,1,82,88,56,209,91,177,73,246,123,51,31,245\")),bytes(abi.encode(\"10,122,16,119,246,101,93,95,216,19,97,179,238,222,94,115,91,92,192,106,213,219,0,222,119,23,91,237,234,78,189,145\")),bytes(abi.encode(\"143,120,122,165,182,107,159,76,102,94,93,16,99,76,97,55,241,235,183,96,119,75,61,40,179,202,26,135,23,84,174,110\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.808ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[253]",
              "sol": "bytes1(\"253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.808ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.809ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.809ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.809ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.810ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.810ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.810ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.811ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"8dnq8j\"",
              "sol": "\"8dnq8j\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.811ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.811ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.812ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"lgdafg\"",
              "sol": "\"lgdafg\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.812ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"uk2h94\"",
              "sol": "\"uk2h94\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.813ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"hdfxgb\"",
              "sol": "\"hdfxgb\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.814ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.814ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.815ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.816ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"fzz64\",\"IsLibrary\",\"zgwgsk\",\"\",\"call updateEthPrice\",\"uk2h94\",\"sexr7i\",\"ETH\",\"\",\"fzz64\"]",
              "sol": "[string(\"fzz64\"),string(\"IsLibrary\"),string(\"zgwgsk\"),string(\"\"),string(\"call updateEthPrice\"),string(\"uk2h94\"),string(\"sexr7i\"),string(\"ETH\"),string(\"\"),string(\"fzz64\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.817ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[62,205,59,232,97,67,107,226,213,32,192,121,30,15,120,124,179,109,110,103,130,183,36,34,52,150,248,185,215,57,120,145],[237,232,24,251,115,51,67,105,96,102,98,155,213,219,20,172,242,157,84,176,245,241,11,38,22,121,81,182,73,201,46,134],[18,152,68,99,82,135,151,153,163,169,149,86,22,55,193,23,192,194,75,78,205,20,186,145,102,39,144,60,214,89,131,155],[37,206,115,165,65,68,245,247,168,84,9,40,249,127,205,10,245,97,30,23,254,244,115,59,235,157,138,167,246,229,135,140],[155,139,231,167,32,131,160,99,94,126,122,238,179,232,223,61,109,178,197,17,223,240,243,68,214,79,68,204,21,143,3,149],[152,121,198,55,27,212,125,80,226,162,233,70,122,253,138,66,218,201,225,123,229,149,108,89,89,203,90,0,110,68,36,14],[167,197,247,72,23,250,148,96,64,114,168,139,235,139,94,0,106,212,26,245,198,152,157,110,54,138,9,38,167,148,17,32],[131,84,122,158,196,39,142,32,228,29,65,11,246,68,247,203,243,238,252,254,172,131,64,183,90,114,148,198,203,112,93,38],[38,62,196,155,149,226,102,62,131,216,37,175,238,172,194,170,42,95,132,155,203,60,101,29,177,107,22,78,92,86,45,114],[188,111,241,19,67,200,203,139,129,175,6,106,26,199,23,11,115,160,61,110,32,9,243,95,196,139,209,120,244,117,121,127]]",
              "sol": "[bytes(abi.encode(\"62,205,59,232,97,67,107,226,213,32,192,121,30,15,120,124,179,109,110,103,130,183,36,34,52,150,248,185,215,57,120,145\")),bytes(abi.encode(\"237,232,24,251,115,51,67,105,96,102,98,155,213,219,20,172,242,157,84,176,245,241,11,38,22,121,81,182,73,201,46,134\")),bytes(abi.encode(\"18,152,68,99,82,135,151,153,163,169,149,86,22,55,193,23,192,194,75,78,205,20,186,145,102,39,144,60,214,89,131,155\")),bytes(abi.encode(\"37,206,115,165,65,68,245,247,168,84,9,40,249,127,205,10,245,97,30,23,254,244,115,59,235,157,138,167,246,229,135,140\")),bytes(abi.encode(\"155,139,231,167,32,131,160,99,94,126,122,238,179,232,223,61,109,178,197,17,223,240,243,68,214,79,68,204,21,143,3,149\")),bytes(abi.encode(\"152,121,198,55,27,212,125,80,226,162,233,70,122,253,138,66,218,201,225,123,229,149,108,89,89,203,90,0,110,68,36,14\")),bytes(abi.encode(\"167,197,247,72,23,250,148,96,64,114,168,139,235,139,94,0,106,212,26,245,198,152,157,110,54,138,9,38,167,148,17,32\")),bytes(abi.encode(\"131,84,122,158,196,39,142,32,228,29,65,11,246,68,247,203,243,238,252,254,172,131,64,183,90,114,148,198,203,112,93,38\")),bytes(abi.encode(\"38,62,196,155,149,226,102,62,131,216,37,175,238,172,194,170,42,95,132,155,203,60,101,29,177,107,22,78,92,86,45,114\")),bytes(abi.encode(\"188,111,241,19,67,200,203,139,129,175,6,106,26,199,23,11,115,160,61,110,32,9,243,95,196,139,209,120,244,117,121,127\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.818ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.818ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[228,253,8,133,63,134,107,176,180,110,28,117,224,195,96,125,3,212,168,15,97,100,158,76,130,181,198,27,72,88,118,207]",
              "sol": "stringToBytes32(\"228,253,8,133,63,134,107,176,180,110,28,117,224,195,96,125,3,212,168,15,97,100,158,76,130,181,198,27,72,88,118,207\")"
            },
            {
              "js": "[90,41,7,204,56,213,246,227,147,240,108,211,178,163,198,80,216,149,204,195,115,223,224,230,253,56,195,7,205,72,128,217]",
              "sol": "stringToBytes32(\"90,41,7,204,56,213,246,227,147,240,108,211,178,163,198,80,216,149,204,195,115,223,224,230,253,56,195,7,205,72,128,217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.819ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[117,16,89,12,13,113,213,198,107,127,186,33,122,189,202,226,24,120,117,167,2,56,141,156,96,201,127,44,246,249,157,4]",
              "sol": "stringToBytes32(\"117,16,89,12,13,113,213,198,107,127,186,33,122,189,202,226,24,120,117,167,2,56,141,156,96,201,127,44,246,249,157,4\")"
            },
            {
              "js": "[235,106,209,172,0,54,223,115,134,79,109,235,194,220,226,76,176,86,46,204,7,187,183,230,148,218,71,48,252,141,136,98]",
              "sol": "abi.encode(\"235,106,209,172,0,54,223,115,134,79,109,235,194,220,226,76,176,86,46,204,7,187,183,230,148,218,71,48,252,141,136,98\")"
            },
            {
              "js": "[62,219,42,134,127,178,2,85,18,92,194,6,114,218,119,97,158,68,81,98,230,165,211,25,10,244,169,56,50,48,165,254]",
              "sol": "abi.encode(\"62,219,42,134,127,178,2,85,18,92,194,6,114,218,119,97,158,68,81,98,230,165,211,25,10,244,169,56,50,48,165,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.819ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[149,54,155,69,60,169,31,69,12,52,191,1,142,200,53,61,176,243,245,196,55,120,130,224,43,186,37,21,198,252,195,96]",
              "sol": "abi.encode(\"149,54,155,69,60,169,31,69,12,52,191,1,142,200,53,61,176,243,245,196,55,120,130,224,43,186,37,21,198,252,195,96\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[56,230,253,116,109,179,251,5,191,179,197,204,255,124,151,137,68,90,49,196,27,61,161,103,200,31,195,139,250,185,42,160]",
              "sol": "abi.encode(\"56,230,253,116,109,179,251,5,191,179,197,204,255,124,151,137,68,90,49,196,27,61,161,103,200,31,195,139,250,185,42,160\")"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.821ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[108,35,216,174,122,36,176,235,143,59,173,231,114,180,178,30,199,3,148,120,176,61,120,19,172,71,88,83,241,165,80,160]",
              "sol": "stringToBytes32(\"108,35,216,174,122,36,176,235,143,59,173,231,114,180,178,30,199,3,148,120,176,61,120,19,172,71,88,83,241,165,80,160\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[172,144,40,107,213,166,172,81,5,67,95,101,155,2,243,196,101,143,168,211,100,229,145,50,120,182,240,131,74,216,222,20]",
              "sol": "abi.encode(\"172,144,40,107,213,166,172,81,5,67,95,101,155,2,243,196,101,143,168,211,100,229,145,50,120,182,240,131,74,216,222,20\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[17,114,164,203,118,60,84,94,103,227,0,115,56,26,233,127,10,63,91,59,126,194,4,193,149,227,170,106,149,196,108,248]",
              "sol": "stringToBytes32(\"17,114,164,203,118,60,84,94,103,227,0,115,56,26,233,127,10,63,91,59,126,194,4,193,149,227,170,106,149,196,108,248\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[148,114,60,110,216,138,82,142,145,246,206,110,189,93,197,114,160,192,75,157,25,38,187,180,186,156,6,167,172,171,199,245]",
              "sol": "abi.encode(\"148,114,60,110,216,138,82,142,145,246,206,110,189,93,197,114,160,192,75,157,25,38,187,180,186,156,6,167,172,171,199,245\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.821ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[222,167,86,168,245,156,202,1,101,221,49,246,51,104,62,200,243,99,219,213,109,83,248,232,51,103,34,143,77,253,246,99]",
              "sol": "stringToBytes32(\"222,167,86,168,245,156,202,1,101,221,49,246,51,104,62,200,243,99,219,213,109,83,248,232,51,103,34,143,77,253,246,99\")"
            },
            {
              "js": "[188,168,83,126,160,196,220,137,194,21,60,163,227,243,172,220,133,170,77,77,175,50,144,106,243,19,28,247,151,202,230,45]",
              "sol": "abi.encode(\"188,168,83,126,160,196,220,137,194,21,60,163,227,243,172,220,133,170,77,77,175,50,144,106,243,19,28,247,151,202,230,45\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[222,167,86,168,245,156,202,1,101,221,49,246,51,104,62,200,243,99,219,213,109,83,248,232,51,103,34,143,77,253,246,99]",
                "sol": "stringToBytes32(\"222,167,86,168,245,156,202,1,101,221,49,246,51,104,62,200,243,99,219,213,109,83,248,232,51,103,34,143,77,253,246,99\")"
              },
              {
                "js": "[26,178,16,38,243,164,200,84,217,237,49,36,125,227,145,12,52,79,97,32,101,162,49,198,121,129,4,235,81,153,135,231,240]",
                "sol": "bytes33(\"26,178,16,38,243,164,200,84,217,237,49,36,125,227,145,12,52,79,97,32,101,162,49,198,121,129,4,235,81,153,135,231,240\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.822ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[177,124,37,72,96,99,116,212,104,86,191,39,140,91,238,251,233,50,160,246,178,34,156,161,58,203,199,163,2,142,72,222]",
              "sol": "abi.encode(\"177,124,37,72,96,99,116,212,104,86,191,39,140,91,238,251,233,50,160,246,178,34,156,161,58,203,199,163,2,142,72,222\")"
            },
            {
              "js": "[209,65,36,118,229,150,19,242,88,230,81,155,66,203,103,103,7,107,63,197,17,141,74,22,58,186,167,181,227,138,181,182]",
              "sol": "stringToBytes32(\"209,65,36,118,229,150,19,242,88,230,81,155,66,203,103,103,7,107,63,197,17,141,74,22,58,186,167,181,227,138,181,182\")"
            },
            {
              "js": "[221,75,51,214,68,249,140,203,227,179,36,118,234,9,201,5,45,61,84,34,222,68,128,207,93,255,147,199,127,191,72,5]",
              "sol": "abi.encode(\"221,75,51,214,68,249,140,203,227,179,36,118,234,9,201,5,45,61,84,34,222,68,128,207,93,255,147,199,127,191,72,5\")"
            },
            {
              "js": "\"fzz64\"",
              "sol": "\"fzz64\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[156,161,67,246,17,38,3,242,242,64,231,209,203,196,254,239,131,33,37,108,67,174,82,190,86,224,19,153,246,79,228,64]",
              "sol": "abi.encode(\"156,161,67,246,17,38,3,242,242,64,231,209,203,196,254,239,131,33,37,108,67,174,82,190,86,224,19,153,246,79,228,64\")"
            },
            {
              "js": "[76,41,225,11,53,171,75,183,249,168,60,169,37,236,224,222,63,84,38,202,160,38,250,7,50,139,204,46,237,225,218,120]",
              "sol": "stringToBytes32(\"76,41,225,11,53,171,75,183,249,168,60,169,37,236,224,222,63,84,38,202,160,38,250,7,50,139,204,46,237,225,218,120\")"
            },
            {
              "js": "[204,237,155,72,236,241,8,76,130,209,190,193,204,68,98,211,181,245,235,9,31,194,103,230,132,16,202,116,110,132,115,175]",
              "sol": "abi.encode(\"204,237,155,72,236,241,8,76,130,209,190,193,204,68,98,211,181,245,235,9,31,194,103,230,132,16,202,116,110,132,115,175\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[114,94,24,228,230,73,154,249,97,150,54,223,107,251,20,248,54,130,19,235,73,210,64,85,88,206,34,14,190,164,122,135]",
              "sol": "abi.encode(\"114,94,24,228,230,73,154,249,97,150,54,223,107,251,20,248,54,130,19,235,73,210,64,85,88,206,34,14,190,164,122,135\")"
            },
            {
              "js": "[54,168,64,103,241,65,8,220,100,181,49,33,30,5,2,126,12,2,180,38,205,118,90,224,5,154,28,244,49,186,207,50]",
              "sol": "stringToBytes32(\"54,168,64,103,241,65,8,220,100,181,49,33,30,5,2,126,12,2,180,38,205,118,90,224,5,154,28,244,49,186,207,50\")"
            },
            {
              "js": "[178,118,177,32,91,93,229,135,75,175,161,218,251,225,17,95,108,233,180,248,111,244,208,99,6,57,251,10,107,37,211,77]",
              "sol": "abi.encode(\"178,118,177,32,91,93,229,135,75,175,161,218,251,225,17,95,108,233,180,248,111,244,208,99,6,57,251,10,107,37,211,77\")"
            },
            {
              "js": "\"lgdafg\"",
              "sol": "\"lgdafg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[143,194,29,122,6,230,24,3,116,123,215,148,99,3,247,149,228,44,105,226,152,103,26,246,244,40,132,193,198,159,150,172]",
              "sol": "abi.encode(\"143,194,29,122,6,230,24,3,116,123,215,148,99,3,247,149,228,44,105,226,152,103,26,246,244,40,132,193,198,159,150,172\")"
            },
            {
              "js": "[7,159,79,65,116,109,119,182,201,147,90,95,225,174,227,150,133,152,193,233,120,67,121,33,88,65,199,33,220,145,154,197]",
              "sol": "stringToBytes32(\"7,159,79,65,116,109,119,182,201,147,90,95,225,174,227,150,133,152,193,233,120,67,121,33,88,65,199,33,220,145,154,197\")"
            },
            {
              "js": "[236,113,250,107,122,16,139,145,157,129,221,132,21,12,234,193,198,193,241,67,17,93,90,98,144,226,53,196,219,53,37,138]",
              "sol": "abi.encode(\"236,113,250,107,122,16,139,145,157,129,221,132,21,12,234,193,198,193,241,67,17,93,90,98,144,226,53,196,219,53,37,138\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[115,227,55,79,234,247,253,212,198,139,151,36,39,129,214,247,89,45,142,129,83,76,204,227,220,78,130,36,231,230,211,134]",
              "sol": "abi.encode(\"115,227,55,79,234,247,253,212,198,139,151,36,39,129,214,247,89,45,142,129,83,76,204,227,220,78,130,36,231,230,211,134\")"
            },
            {
              "js": "[173,234,27,78,253,69,251,103,213,153,10,199,189,2,75,152,45,65,131,135,189,188,5,17,110,126,76,23,66,96,249,184]",
              "sol": "stringToBytes32(\"173,234,27,78,253,69,251,103,213,153,10,199,189,2,75,152,45,65,131,135,189,188,5,17,110,126,76,23,66,96,249,184\")"
            },
            {
              "js": "[191,79,24,100,148,136,136,50,190,135,118,239,248,161,110,217,87,177,0,54,192,69,230,207,150,95,244,16,148,231,61,146]",
              "sol": "abi.encode(\"191,79,24,100,148,136,136,50,190,135,118,239,248,161,110,217,87,177,0,54,192,69,230,207,150,95,244,16,148,231,61,146\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[61,211,202,243,122,233,209,11,83,76,142,255,227,136,41,252,130,41,17,238,194,61,124,248,103,134,34,47,84,168,88,220]",
              "sol": "abi.encode(\"61,211,202,243,122,233,209,11,83,76,142,255,227,136,41,252,130,41,17,238,194,61,124,248,103,134,34,47,84,168,88,220\")"
            },
            {
              "js": "[161,76,214,175,168,53,112,253,153,153,225,97,190,92,251,200,107,208,203,204,135,237,84,214,118,203,48,164,114,71,149,213]",
              "sol": "stringToBytes32(\"161,76,214,175,168,53,112,253,153,153,225,97,190,92,251,200,107,208,203,204,135,237,84,214,118,203,48,164,114,71,149,213\")"
            },
            {
              "js": "[18,97,179,87,180,84,12,148,223,133,152,155,102,181,110,244,223,48,174,14,94,182,39,81,242,129,149,249,85,138,112,180]",
              "sol": "abi.encode(\"18,97,179,87,180,84,12,148,223,133,152,155,102,181,110,244,223,48,174,14,94,182,39,81,242,129,149,249,85,138,112,180\")"
            },
            {
              "js": "\"lgdafg\"",
              "sol": "\"lgdafg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[2,176,15,218,40,81,59,190,230,88,80,174,102,128,227,230,17,179,130,15,193,83,178,139,177,113,70,64,255,39,52,135]",
              "sol": "abi.encode(\"2,176,15,218,40,81,59,190,230,88,80,174,102,128,227,230,17,179,130,15,193,83,178,139,177,113,70,64,255,39,52,135\")"
            },
            {
              "js": "[41,0,172,204,178,164,178,61,97,243,51,201,185,114,164,233,5,83,66,84,73,11,170,216,131,46,7,171,180,56,89,131]",
              "sol": "stringToBytes32(\"41,0,172,204,178,164,178,61,97,243,51,201,185,114,164,233,5,83,66,84,73,11,170,216,131,46,7,171,180,56,89,131\")"
            },
            {
              "js": "[189,15,119,133,27,124,44,217,80,107,73,255,238,0,146,46,7,20,224,107,119,137,1,74,51,113,100,170,121,74,233,71]",
              "sol": "abi.encode(\"189,15,119,133,27,124,44,217,80,107,73,255,238,0,146,46,7,20,224,107,119,137,1,74,51,113,100,170,121,74,233,71\")"
            },
            {
              "js": "\"fzz64\"",
              "sol": "\"fzz64\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[186,124,38,97,225,105,228,183,76,105,147,122,231,235,183,22,48,246,192,3,209,152,115,55,66,9,151,97,121,200,27,126]",
              "sol": "abi.encode(\"186,124,38,97,225,105,228,183,76,105,147,122,231,235,183,22,48,246,192,3,209,152,115,55,66,9,151,97,121,200,27,126\")"
            },
            {
              "js": "[240,154,148,86,64,85,13,231,239,246,180,79,212,173,109,141,237,118,106,55,151,234,232,89,157,56,43,113,246,232,43,180]",
              "sol": "stringToBytes32(\"240,154,148,86,64,85,13,231,239,246,180,79,212,173,109,141,237,118,106,55,151,234,232,89,157,56,43,113,246,232,43,180\")"
            },
            {
              "js": "[72,226,195,20,53,226,208,105,103,231,244,233,99,131,213,106,150,232,198,198,39,205,166,245,216,90,169,52,134,50,37,90]",
              "sol": "abi.encode(\"72,226,195,20,53,226,208,105,103,231,244,233,99,131,213,106,150,232,198,198,39,205,166,245,216,90,169,52,134,50,37,90\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.828ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[185,214,61,251,116,134,44,232,160,135,125,170,2,97,90,254,124,16,15,156,165,53,59,38,199,80,205,173,254,68,85,5]",
              "sol": "abi.encode(\"185,214,61,251,116,134,44,232,160,135,125,170,2,97,90,254,124,16,15,156,165,53,59,38,199,80,205,173,254,68,85,5\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "[75,38,90,185,24,168,201,239,149,107,196,181,187,142,120,197,60,26,29,95,244,135,203,61,44,211,13,204,152,34,187,237]",
              "sol": "abi.encode(\"75,38,90,185,24,168,201,239,149,107,196,181,187,142,120,197,60,26,29,95,244,135,203,61,44,211,13,204,152,34,187,237\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.829ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[179,51,10,200,71,154,81,217,140,124,224,199,35,255,185,142,12,119,43,172,202,76,176,94,167,176,173,236,62,204,211,191]",
              "sol": "stringToBytes32(\"179,51,10,200,71,154,81,217,140,124,224,199,35,255,185,142,12,119,43,172,202,76,176,94,167,176,173,236,62,204,211,191\")"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "[11,24,74,187,252,28,148,243,45,191,211,128,10,127,206,166,128,137,42,168,245,218,10,225,227,239,197,92,31,118,205,168]",
              "sol": "stringToBytes32(\"11,24,74,187,252,28,148,243,45,191,211,128,10,127,206,166,128,137,42,168,245,218,10,225,227,239,197,92,31,118,205,168\")"
            },
            {
              "js": "[110,54,97,192,19,180,69,20,13,64,215,114,218,12,63,240,42,121,40,48,238,105,177,62,81,160,77,21,55,247,197,27]",
              "sol": "stringToBytes32(\"110,54,97,192,19,180,69,20,13,64,215,114,218,12,63,240,42,121,40,48,238,105,177,62,81,160,77,21,55,247,197,27\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.830ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[49,127,171,222,223,244,167,49,111,118,102,94,43,230,193,76,40,107,46,7,208,41,246,94,201,249,7,2,158,156,116,197]",
              "sol": "stringToBytes32(\"49,127,171,222,223,244,167,49,111,118,102,94,43,230,193,76,40,107,46,7,208,41,246,94,201,249,7,2,158,156,116,197\")"
            },
            {
              "js": "[124,169,99,56,127,34,73,123,123,39,91,108,89,211,117,251,204,131,111,53,10,117,69,174,190,162,122,159,104,31,61,143,153,127,216,254,220,76,21,47,45,68,115,227,190,61,2,184,219,175,167,122,106,237,6,163,145,24,166,97,195,102,16,87,102,178,121,7,79,123,208,144,174,111,50,170,88,18,81,0,185,78,91,76,178,131,128,29,225,159,118,40,218,34,244]",
              "sol": "abi.encode(\"124,169,99,56,127,34,73,123,123,39,91,108,89,211,117,251,204,131,111,53,10,117,69,174,190,162,122,159,104,31,61,143,153,127,216,254,220,76,21,47,45,68,115,227,190,61,2,184,219,175,167,122,106,237,6,163,145,24,166,97,195,102,16,87,102,178,121,7,79,123,208,144,174,111,50,170,88,18,81,0,185,78,91,76,178,131,128,29,225,159,118,40,218,34,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[165,125,205,44,246,13,166,106,179,163,157,140,33,18,118,105,214,0,238,252,13,180,86,245,21,128,96,69,146,7,132,147]",
              "sol": "stringToBytes32(\"165,125,205,44,246,13,166,106,179,163,157,140,33,18,118,105,214,0,238,252,13,180,86,245,21,128,96,69,146,7,132,147\")"
            },
            {
              "js": "[115,145,214,147,31,207,17,7,184,4,47,146,30,101,117,125,187,160,31,128,45,30,66,15,93,177,72,69,145,167,7,239,222,15,20,233,141,243,153,92,136,209,255,103,4,157,171,213,159,108,216,123,1,38,174,105,42,63,119,179,106,214,217,152,1]",
              "sol": "abi.encode(\"115,145,214,147,31,207,17,7,184,4,47,146,30,101,117,125,187,160,31,128,45,30,66,15,93,177,72,69,145,167,7,239,222,15,20,233,141,243,153,92,136,209,255,103,4,157,171,213,159,108,216,123,1,38,174,105,42,63,119,179,106,214,217,152,1\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.831ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.833ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.833ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.834ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.834ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.834ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.835ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.835ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.835ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.835ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.836ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.837ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.837ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.838ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.838ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.841ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.844ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[71,204,48,100,68,194,127,250,240,31,47,76,47,204,201,217,127,4,212,171,19,191,255,212,20,20,90,255,33,95,54,100]",
              "sol": "stringToBytes32(\"71,204,48,100,68,194,127,250,240,31,47,76,47,204,201,217,127,4,212,171,19,191,255,212,20,20,90,255,33,95,54,100\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[228,255,88,163,130,165,54,243,125,124,121,223,3,126,38,19,200,228,224,240,154,241,101,35,247,179,51,75,138,35,141,196]",
              "sol": "abi.encode(\"228,255,88,163,130,165,54,243,125,124,121,223,3,126,38,19,200,228,224,240,154,241,101,35,247,179,51,75,138,35,141,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.844ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.845ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.847ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.848ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[126,208,120,11,140,217,137,207,149,247,66,143,237,194,93,148,28,244,97,98,84,125,0,122,140,122,212,155,186,194,180,159]",
              "sol": "abi.encode(\"126,208,120,11,140,217,137,207,149,247,66,143,237,194,93,148,28,244,97,98,84,125,0,122,140,122,212,155,186,194,180,159\")"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "[171,27,138,139,204,133,134,161,165,59,134,172,93,84,164,225,109,217,109,203,19,234,149,140,23,15,159,138,195,228,86,34]",
              "sol": "stringToBytes32(\"171,27,138,139,204,133,134,161,165,59,134,172,93,84,164,225,109,217,109,203,19,234,149,140,23,15,159,138,195,228,86,34\")"
            },
            {
              "js": "[218,60,213,160,7,44,225,246,240,31,129,192,189,30,8,31,35,121,169,77,197,246,127,134,69,13,7,224,242,159,202,150]",
              "sol": "stringToBytes32(\"218,60,213,160,7,44,225,246,240,31,129,192,189,30,8,31,35,121,169,77,197,246,127,134,69,13,7,224,242,159,202,150\")"
            },
            {
              "js": "[216,166,98,92,98,97,159,18,218,212,185,124,221,30,16,64,2,21,67,237,47,43,247,172,140,176,26,254,227,75,73,46]",
              "sol": "stringToBytes32(\"216,166,98,92,98,97,159,18,218,212,185,124,221,30,16,64,2,21,67,237,47,43,247,172,140,176,26,254,227,75,73,46\")"
            },
            {
              "js": "[152,75,92,186,134,71,99,79,40,151,104,178,124,73,206,31,24,232,251,71,175,197,88,157,89,169,232,67,163,211,121,37]",
              "sol": "stringToBytes32(\"152,75,92,186,134,71,99,79,40,151,104,178,124,73,206,31,24,232,251,71,175,197,88,157,89,169,232,67,163,211,121,37\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.848ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.849ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.850ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.850ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.851ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.852ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.853ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.855ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1025",
                "sol": "1025"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.857ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:34:36.859ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.860ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.860ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:34:36.862ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}