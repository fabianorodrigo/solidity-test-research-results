{"code":"  let trace = false;\n  let contractSafeMath = null;\n  let contractERC20 = null;\n  let contractERC20Detailed = null;\n  let contractAddress = null;\n  let contractBuffer = null;\n  let contractCBOR = null;\n  let contractSafeDecimalMath = null;\n  let contractPublicSafeDecimalMath = null;\n  let contractusingOraclize = null;\n  let contractEternalStorage = null;\n  let contractPausable = null;\n  let contractShartCoin = null;\n  let contractState = null;\n  let contractProxy = null;\n  let contractETHPriceTicker = null;\n  let contractTokenExchangeState = null;\n  let contractMortal = null;\n  let contractProxyable = null;\n  let contractTokenExchange = null;\n  beforeEach(async () => {\n    contractSafeMath = await SafeMath.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');\n    ERC20.link(\"SafeMath\",contractSafeMath.address);\n    contractERC20 = await ERC20.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');\n    contractAddress = await Address.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Address.new({from: accounts[0]}');\n    contractBuffer = await Buffer.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Buffer.new({from: accounts[0]}');\n    contractCBOR = await CBOR.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: CBOR.new({from: accounts[0]}');\n    contractSafeDecimalMath = await SafeDecimalMath.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: SafeDecimalMath.new({from: accounts[0]}');\n    PublicSafeDecimalMath.link(\"SafeDecimalMath\",contractSafeDecimalMath.address);\n    contractPublicSafeDecimalMath = await PublicSafeDecimalMath.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: PublicSafeDecimalMath.new({from: accounts[0]}');\n    contractusingOraclize = await usingOraclize.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: usingOraclize.new({from: accounts[0]}');\n    contractPausable = await Pausable.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: Pausable.new({from:accounts[0]}');\n    contractShartCoin = await ShartCoin.new({from:accounts[2]});\n    if(trace) console.log('SUCESSO: ShartCoin.new({from:accounts[2]}');\n    contractState = await State.new(accounts[3],{from:accounts[0]});\n    if(trace) console.log('SUCESSO: State.new(accounts[3],{from:accounts[0]}');\n    contractProxy = await Proxy.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: Proxy.new({from:accounts[0]}');\n    ETHPriceTicker.link(\"Buffer\",contractBuffer.address);\n     ETHPriceTicker.link(\"CBOR\",contractCBOR.address);\n    contractETHPriceTicker = await ETHPriceTicker.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: ETHPriceTicker.new({from:accounts[0]}');\n    contractTokenExchangeState = await TokenExchangeState.new(accounts[2],{from:accounts[0]});\n    if(trace) console.log('SUCESSO: TokenExchangeState.new(accounts[2],{from:accounts[0]}');\n    contractMortal = await Mortal.new(accounts[3],{from:accounts[0]});\n    if(trace) console.log('SUCESSO: Mortal.new(accounts[3],{from:accounts[0]}');\n    contractProxyable = await Proxyable.new(contractProxy.address,{from:accounts[0]});\n    if(trace) console.log('SUCESSO: Proxyable.new(contractProxy.address,{from:accounts[0]}');\n    TokenExchange.link(\"SafeMath\",contractSafeMath.address);\n     TokenExchange.link(\"SafeDecimalMath\",contractSafeDecimalMath.address);\n     TokenExchange.link(\"Address\",contractAddress.address);\n    contractTokenExchange = await TokenExchange.new(accounts[8],contractProxy.address,contractTokenExchangeState.address,\"0\",{from:accounts[0]});\n    if(trace) console.log('SUCESSO: TokenExchange.new(accounts[8],contractProxy.address,contractTokenExchangeState.address,\"0\",{from:accounts[0]}');\n  });\n","contractsDeployed":[{"contractName":"SafeMath","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"ERC20","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Address","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Buffer","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"CBOR","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"SafeDecimalMath","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"PublicSafeDecimalMath","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"usingOraclize","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Pausable","stringfieldParams":["{from:accounts[0]}"]},{"contractName":"ShartCoin","stringfieldParams":["{from:accounts[2]}"]},{"contractName":"State","stringfieldParams":["accounts[3]","{from:accounts[0]}"]},{"contractName":"Proxy","stringfieldParams":["{from:accounts[0]}"]},{"contractName":"ETHPriceTicker","stringfieldParams":["{from:accounts[0]}"]},{"contractName":"TokenExchangeState","stringfieldParams":["accounts[2]","{from:accounts[0]}"]},{"contractName":"Mortal","stringfieldParams":["accounts[3]","{from:accounts[0]}"]},{"contractName":"Proxyable","stringfieldParams":["contractProxy.address","{from:accounts[0]}"]},{"contractName":"TokenExchange","stringfieldParams":["accounts[8]","contractProxy.address","contractTokenExchangeState.address","\"0\"","{from:accounts[0]}"]}]}