,{
  "2020-11-10T09:20:19.874ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:22:37.827ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:23:13.727ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:23:31.001ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:23:48.119ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:24:05.401ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:24:22.951ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:24:40.587ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:24:58.099ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:16.019ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:33.534ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.155ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.159ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [255,106,135,31,146,103,144,111,12,196,219,133,109,203,242,237,181,84,190,26,120,226,49,194,62,73,44,49,178,56,85,11],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"255,106,135,31,146,103,144,111,12,196,219,133,109,203,242,237,181,84,190,26,120,226,49,194,62,73,44,49,178,56,85,11\"),95)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.159ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [23,121,108,86,253,75,163,167,10,191,237,235,241,73,187,93,206,205,162,128,131,22,11,50,176,249,96,40,98,236,106,74],\"capacity\": 10001}",
              "sol": "Buffer.buffer(abi.encode(\"23,121,108,86,253,75,163,167,10,191,237,235,241,73,187,93,206,205,162,128,131,22,11,50,176,249,96,40,98,236,106,74\"),10001)"
            },
            {
              "js": "[212,35,166,232,13,252,60,88,133,184,111,132,178,4,211,118,246,144,221,101,70,76,71,231,162,190,77,47,178,233,205,243]",
              "sol": "abi.encode(\"212,35,166,232,13,252,60,88,133,184,111,132,178,4,211,118,246,144,221,101,70,76,71,231,162,190,77,47,178,233,205,243\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.160ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [186,21,129,14,35,147,136,63,99,240,165,220,68,46,250,238,209,150,170,23,239,10,241,94,208,146,111,130,246,187,88,20],\"capacity\": 2014223714}",
              "sol": "Buffer.buffer(abi.encode(\"186,21,129,14,35,147,136,63,99,240,165,220,68,46,250,238,209,150,170,23,239,10,241,94,208,146,111,130,246,187,88,20\"),2014223714)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.161ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [111,35,10,248,157,126,214,8,10,93,138,85,216,123,35,244,34,222,180,120,1,24,243,132,215,238,99,27,130,24,17,189],\"capacity\": 1337}",
              "sol": "Buffer.buffer(abi.encode(\"111,35,10,248,157,126,214,8,10,93,138,85,216,123,35,244,34,222,180,120,1,24,243,132,215,238,99,27,130,24,17,189\"),1337)"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.163ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [128,21,236,94,255,136,68,241,25,41,57,136,87,197,217,109,246,20,176,117,115,135,242,47,183,54,58,170,215,36,42,12],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"128,21,236,94,255,136,68,241,25,41,57,136,87,197,217,109,246,20,176,117,115,135,242,47,183,54,58,170,215,36,42,12\"),95)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.164ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [149,223,222,216,134,190,188,162,162,142,74,166,251,137,178,66,141,139,105,186,52,130,143,162,5,99,142,199,221,204,120,192],\"capacity\": 63}",
              "sol": "Buffer.buffer(abi.encode(\"149,223,222,216,134,190,188,162,162,142,74,166,251,137,178,66,141,139,105,186,52,130,143,162,5,99,142,199,221,204,120,192\"),63)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [69,119,105,33,32,185,153,89,174,135,125,213,239,144,65,128,152,3,39,200,3,224,63,245,161,184,103,21,54,128,238,90],\"capacity\": 8}",
              "sol": "Buffer.buffer(abi.encode(\"69,119,105,33,32,185,153,89,174,135,125,213,239,144,65,128,152,3,39,200,3,224,63,245,161,184,103,21,54,128,238,90\"),8)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.165ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [223,21,239,116,232,105,62,197,105,18,159,18,12,120,101,234,228,188,87,233,167,19,60,154,148,18,176,200,189,107,220,218],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"223,21,239,116,232,105,62,197,105,18,159,18,12,120,101,234,228,188,87,233,167,19,60,154,148,18,176,200,189,107,220,218\"),23)"
            },
            {
              "js": "[231,216,167,144,217,66,120,86,35,77,132,90,128,106,138,164,41,52,87,139,37,56,247,209,124,239,196,207,44,101,202,225]",
              "sol": "abi.encode(\"231,216,167,144,217,66,120,86,35,77,132,90,128,106,138,164,41,52,87,139,37,56,247,209,124,239,196,207,44,101,202,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.166ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [103,49,92,54,78,207,182,141,145,74,2,82,8,207,44,243,124,167,80,26,33,209,221,114,125,183,97,118,113,120,3,183],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"103,49,92,54,78,207,182,141,145,74,2,82,8,207,44,243,124,167,80,26,33,209,221,114,125,183,97,118,113,120,3,183\"),257)"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.167ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [159,244,208,243,39,171,39,227,238,0,87,22,31,192,25,112,51,134,173,95,217,55,104,232,121,167,167,240,108,8,86,118],\"capacity\": 199999}",
              "sol": "Buffer.buffer(abi.encode(\"159,244,208,243,39,171,39,227,238,0,87,22,31,192,25,112,51,134,173,95,217,55,104,232,121,167,167,240,108,8,86,118\"),199999)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.168ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [128,79,182,175,47,132,239,172,46,54,160,195,71,207,61,112,77,69,75,181,70,184,30,134,101,67,82,45,217,1,213,220],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"128,79,182,175,47,132,239,172,46,54,160,195,71,207,61,112,77,69,75,181,70,184,30,134,101,67,82,45,217,1,213,220\"),160)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.169ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [225,93,224,1,75,133,131,229,96,170,46,172,84,192,51,19,40,248,80,94,171,60,186,150,40,5,254,123,9,224,75,51],\"capacity\": 9999}",
              "sol": "Buffer.buffer(abi.encode(\"225,93,224,1,75,133,131,229,96,170,46,172,84,192,51,19,40,248,80,94,171,60,186,150,40,5,254,123,9,224,75,51\"),9999)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.172ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.172ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.172ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.173ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.174ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.174ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.175ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.175ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.176ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.176ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.178ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[54,111,232,234,100,154,8,227,201,123,71,66,3,198,0,93,68,121,88,70,171,236,115,203,6,27,55,44,245,89,235,185]",
              "sol": "stringToBytes32(\"54,111,232,234,100,154,8,227,201,123,71,66,3,198,0,93,68,121,88,70,171,236,115,203,6,27,55,44,245,89,235,185\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.179ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[10,183,169,207,99,225,56,109,233,205,218,62,167,225,81,181,150,124,154,240,19,15,251,33,231,203,240,154,212,27,120,189]",
              "sol": "stringToBytes32(\"10,183,169,207,99,225,56,109,233,205,218,62,167,225,81,181,150,124,154,240,19,15,251,33,231,203,240,154,212,27,120,189\")"
            },
            {
              "js": "\"daedk\"",
              "sol": "\"daedk\""
            },
            {
              "js": "[201,132,21,144,14,124,174,147,33,214,217,1,126,75,41,108,139,118,140,163,206,185,59,254,142,83,216,164,51,35,87,136]",
              "sol": "abi.encode(\"201,132,21,144,14,124,174,147,33,214,217,1,126,75,41,108,139,118,140,163,206,185,59,254,142,83,216,164,51,35,87,136\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.229ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.229ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.230ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.230ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.231ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.231ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.231ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.232ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.232ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"6cd6bc\"",
              "sol": "\"6cd6bc\""
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.233ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.233ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"r5pix\"",
              "sol": "\"r5pix\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.234ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.234ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.235ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.235ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"updateEthPrice called\",\"costUSD\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"costUSD\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.236ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"listingID arg\",\"trade.totalPrice\"]",
              "sol": "[string(\"listingID arg\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.238ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"costUSD\",\"RevertWithReason\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"costUSD\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.238ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"P\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"P\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.239ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"UsesExample\"]",
              "sol": "[string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.239ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"Example\"]",
              "sol": "[string(\"Example\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.240ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"daedk\"",
              "sol": "\"daedk\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.240ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"6cd6bc\"]",
              "sol": "[string(\"6cd6bc\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.241ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"2v7ge\",\"PayableExample\"]",
              "sol": "[string(\"2v7ge\"),string(\"PayableExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.241ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"UsesExample\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.242ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"r5pix\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"r5pix\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.242ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"2v7ge\"",
              "sol": "\"2v7ge\""
            },
            {
              "js": "[\"2v7ge\",\"updateEthPrice called\"]",
              "sol": "[string(\"2v7ge\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.243ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0\",\"0\",\"L\"]",
              "sol": "[string(\"0\"),string(\"0\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.244ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"PayableExample\",\"listingID arg\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"PayableExample\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.244ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"PayableExample\",\"\\x19Ethereum Signed Message:\\n32\",\"UsesExample\"]",
              "sol": "[string(\"PayableExample\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"UsesExample\")]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.245ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"ETH\",\"P\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ETH\"),string(\"P\")]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.245ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"call updateEthPrice\",\"costUSD\",\"RevertWithReason\",\"listingID arg\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"costUSD\"),string(\"RevertWithReason\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.246ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"UsesExample\",\"call updateEthPrice\",\"P\",\"Example\"]",
              "sol": "[string(\"UsesExample\"),string(\"call updateEthPrice\"),string(\"P\"),string(\"Example\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.246ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"UsesExample\",\"\",\"\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"UsesExample\"),string(\"\"),string(\"\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.248ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"call updateEthPrice\",\"IsLibrary\",\"0\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"call updateEthPrice\"),string(\"IsLibrary\"),string(\"0\")]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.249ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"call updateEthPrice\",\"IsLibrary\",\"listingID arg\",\"2v7ge\",\"r5pix\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"IsLibrary\"),string(\"listingID arg\"),string(\"2v7ge\"),string(\"r5pix\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.249ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"6cd6bc\",\"Example\",\"costUSD\",\"0\",\"trade.totalPrice\"]",
              "sol": "[string(\"6cd6bc\"),string(\"Example\"),string(\"costUSD\"),string(\"0\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.250ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"L\",\"6cd6bc\",\"2v7ge\",\"Oraclize query was sent, standing by for the answer...\",\"ETH\"]",
              "sol": "[string(\"L\"),string(\"6cd6bc\"),string(\"2v7ge\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"ETH\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.250ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"L\",\"call updateEthPrice\",\"2v7ge\",\"updateEthPrice called\",\"daedk\"]",
              "sol": "[string(\"L\"),string(\"call updateEthPrice\"),string(\"2v7ge\"),string(\"updateEthPrice called\"),string(\"daedk\")]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.251ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[142,73,162,110,175,159,115,249,139,124,255,158,71,176,194,201,199,235,175,50,10,231,136,83,62,71,29,221,196,148,229,164],[28,51,87,183,13,76,5,10,160,3,29,49,76,141,234,1,163,38,74,141,253,26,102,8,222,151,171,201,213,241,254,205],[100,98,156,247,202,52,93,41,26,220,42,33,34,91,131,135,253,119,149,20,187,208,223,136,73,189,107,57,247,153,203,224]]",
              "sol": "[bytes(abi.encode(\"142,73,162,110,175,159,115,249,139,124,255,158,71,176,194,201,199,235,175,50,10,231,136,83,62,71,29,221,196,148,229,164\")),bytes(abi.encode(\"28,51,87,183,13,76,5,10,160,3,29,49,76,141,234,1,163,38,74,141,253,26,102,8,222,151,171,201,213,241,254,205\")),bytes(abi.encode(\"100,98,156,247,202,52,93,41,26,220,42,33,34,91,131,135,253,119,149,20,187,208,223,136,73,189,107,57,247,153,203,224\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.252ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[211,216,91,227,201,77,40,103,9,55,133,19,197,120,176,79,23,194,109,58,240,130,244,83,185,237,158,207,115,29,1,141],[252,254,130,107,58,224,249,228,88,8,106,120,177,59,209,162,51,96,141,2,175,4,252,159,18,216,103,191,211,233,117,119],[158,198,215,73,52,196,217,91,137,43,164,43,112,224,154,247,28,111,36,68,97,17,250,194,35,18,130,28,142,93,156,11],[83,134,39,124,250,71,206,68,159,139,85,166,156,41,55,24,122,56,57,143,14,191,188,95,107,163,188,215,254,153,164,8],[61,177,60,250,51,163,172,14,35,58,171,48,80,34,101,213,165,156,216,0,39,247,159,222,89,18,72,61,143,40,7,113],[158,174,199,36,65,34,19,90,55,232,99,227,106,217,227,97,109,155,201,201,118,230,144,215,63,78,92,251,218,59,83,73],[127,171,152,192,128,200,70,51,138,241,137,54,130,58,180,63,122,116,205,34,13,90,97,99,20,69,248,191,198,59,159,52],[241,205,109,70,131,223,152,85,133,16,133,133,26,79,156,30,156,61,187,151,27,117,59,172,191,207,241,225,209,221,142,122],[132,102,159,234,241,184,131,106,183,222,43,49,29,22,108,87,177,85,13,253,50,102,102,1,165,203,138,4,14,222,78,146],[20,187,154,239,42,29,168,64,56,144,86,105,110,179,0,107,42,234,57,163,155,2,126,166,191,1,112,103,6,234,185,167]]",
              "sol": "[bytes(abi.encode(\"211,216,91,227,201,77,40,103,9,55,133,19,197,120,176,79,23,194,109,58,240,130,244,83,185,237,158,207,115,29,1,141\")),bytes(abi.encode(\"252,254,130,107,58,224,249,228,88,8,106,120,177,59,209,162,51,96,141,2,175,4,252,159,18,216,103,191,211,233,117,119\")),bytes(abi.encode(\"158,198,215,73,52,196,217,91,137,43,164,43,112,224,154,247,28,111,36,68,97,17,250,194,35,18,130,28,142,93,156,11\")),bytes(abi.encode(\"83,134,39,124,250,71,206,68,159,139,85,166,156,41,55,24,122,56,57,143,14,191,188,95,107,163,188,215,254,153,164,8\")),bytes(abi.encode(\"61,177,60,250,51,163,172,14,35,58,171,48,80,34,101,213,165,156,216,0,39,247,159,222,89,18,72,61,143,40,7,113\")),bytes(abi.encode(\"158,174,199,36,65,34,19,90,55,232,99,227,106,217,227,97,109,155,201,201,118,230,144,215,63,78,92,251,218,59,83,73\")),bytes(abi.encode(\"127,171,152,192,128,200,70,51,138,241,137,54,130,58,180,63,122,116,205,34,13,90,97,99,20,69,248,191,198,59,159,52\")),bytes(abi.encode(\"241,205,109,70,131,223,152,85,133,16,133,133,26,79,156,30,156,61,187,151,27,117,59,172,191,207,241,225,209,221,142,122\")),bytes(abi.encode(\"132,102,159,234,241,184,131,106,183,222,43,49,29,22,108,87,177,85,13,253,50,102,102,1,165,203,138,4,14,222,78,146\")),bytes(abi.encode(\"20,187,154,239,42,29,168,64,56,144,86,105,110,179,0,107,42,234,57,163,155,2,126,166,191,1,112,103,6,234,185,167\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.252ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"daedk\"",
              "sol": "\"daedk\""
            },
            {
              "js": "[[104,253,163,152,45,152,30,103,148,55,19,205,23,88,64,50,249,245,91,116,213,64,9,136,38,228,28,203,32,225,243,116],[70,88,27,121,245,235,19,119,245,254,87,100,25,124,246,126,222,120,183,185,18,67,81,76,110,85,168,44,252,87,250,122],[107,27,9,63,215,51,147,104,14,251,16,95,100,195,118,220,130,189,76,220,165,25,24,194,235,91,57,71,213,152,176,93],[101,86,165,41,6,57,141,218,51,67,133,45,52,44,60,246,243,60,202,7,237,114,36,234,199,249,138,181,218,216,69,159],[118,79,122,121,136,14,182,9,56,132,90,188,33,66,66,160,172,86,77,52,170,88,233,200,115,101,224,198,33,60,136,89],[46,178,69,111,104,61,44,81,8,7,232,146,139,240,205,156,246,187,248,202,163,237,39,25,61,37,44,180,154,102,67,90],[88,115,245,219,52,103,60,199,100,86,20,1,35,201,31,194,144,104,64,216,134,186,57,151,5,115,31,153,104,64,182,233]]",
              "sol": "[bytes(abi.encode(\"104,253,163,152,45,152,30,103,148,55,19,205,23,88,64,50,249,245,91,116,213,64,9,136,38,228,28,203,32,225,243,116\")),bytes(abi.encode(\"70,88,27,121,245,235,19,119,245,254,87,100,25,124,246,126,222,120,183,185,18,67,81,76,110,85,168,44,252,87,250,122\")),bytes(abi.encode(\"107,27,9,63,215,51,147,104,14,251,16,95,100,195,118,220,130,189,76,220,165,25,24,194,235,91,57,71,213,152,176,93\")),bytes(abi.encode(\"101,86,165,41,6,57,141,218,51,67,133,45,52,44,60,246,243,60,202,7,237,114,36,234,199,249,138,181,218,216,69,159\")),bytes(abi.encode(\"118,79,122,121,136,14,182,9,56,132,90,188,33,66,66,160,172,86,77,52,170,88,233,200,115,101,224,198,33,60,136,89\")),bytes(abi.encode(\"46,178,69,111,104,61,44,81,8,7,232,146,139,240,205,156,246,187,248,202,163,237,39,25,61,37,44,180,154,102,67,90\")),bytes(abi.encode(\"88,115,245,219,52,103,60,199,100,86,20,1,35,201,31,194,144,104,64,216,134,186,57,151,5,115,31,153,104,64,182,233\"))]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.253ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[132,169,143,48,22,68,148,160,159,248,24,39,160,246,8,229,254,164,7,242,123,216,23,72,49,164,107,32,157,153,242,208],[30,199,191,247,42,57,225,223,160,54,188,25,132,249,18,146,208,20,170,2,227,46,207,30,89,55,242,244,225,58,78,142],[18,235,71,233,97,88,166,8,235,251,219,161,18,136,100,77,247,132,58,214,10,199,161,234,120,14,88,208,125,27,249,149],[6,67,157,231,214,210,116,140,249,26,133,127,64,117,75,58,20,91,225,9,158,35,27,90,146,173,230,203,201,233,181,128],[35,142,167,126,237,205,6,105,208,16,169,126,227,138,27,115,146,168,65,29,11,230,40,164,196,8,94,88,222,243,56,233]]",
              "sol": "[bytes(abi.encode(\"132,169,143,48,22,68,148,160,159,248,24,39,160,246,8,229,254,164,7,242,123,216,23,72,49,164,107,32,157,153,242,208\")),bytes(abi.encode(\"30,199,191,247,42,57,225,223,160,54,188,25,132,249,18,146,208,20,170,2,227,46,207,30,89,55,242,244,225,58,78,142\")),bytes(abi.encode(\"18,235,71,233,97,88,166,8,235,251,219,161,18,136,100,77,247,132,58,214,10,199,161,234,120,14,88,208,125,27,249,149\")),bytes(abi.encode(\"6,67,157,231,214,210,116,140,249,26,133,127,64,117,75,58,20,91,225,9,158,35,27,90,146,173,230,203,201,233,181,128\")),bytes(abi.encode(\"35,142,167,126,237,205,6,105,208,16,169,126,227,138,27,115,146,168,65,29,11,230,40,164,196,8,94,88,222,243,56,233\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.254ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[23,234,13,59,119,116,27,16,36,195,44,66,204,72,99,201,182,200,191,41,226,180,212,53,97,137,226,118,85,213,49,69]]",
              "sol": "[bytes(abi.encode(\"23,234,13,59,119,116,27,16,36,195,44,66,204,72,99,201,182,200,191,41,226,180,212,53,97,137,226,118,85,213,49,69\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.254ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[186,120,36,204,143,130,15,77,76,92,148,147,176,241,250,198,125,255,92,172,39,136,70,139,105,58,172,113,19,77,110,21]]",
              "sol": "[bytes(abi.encode(\"186,120,36,204,143,130,15,77,76,92,148,147,176,241,250,198,125,255,92,172,39,136,70,139,105,58,172,113,19,77,110,21\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.255ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[47,56,116,140,177,187,209,172,214,214,162,248,134,137,203,118,249,144,32,116,229,40,239,246,81,162,91,56,67,9,194,54]]",
              "sol": "[bytes(abi.encode(\"47,56,116,140,177,187,209,172,214,214,162,248,134,137,203,118,249,144,32,116,229,40,239,246,81,162,91,56,67,9,194,54\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.255ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"r5pix\"",
              "sol": "\"r5pix\""
            },
            {
              "js": "[[91,246,19,1,250,26,250,0,46,112,117,27,27,69,200,49,173,248,102,107,71,175,95,0,128,144,4,252,242,144,54,55]]",
              "sol": "[bytes(abi.encode(\"91,246,19,1,250,26,250,0,46,112,117,27,27,69,200,49,173,248,102,107,71,175,95,0,128,144,4,252,242,144,54,55\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.257ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[48,74,109,110,146,47,13,226,202,228,25,208,83,144,179,232,138,243,246,105,184,123,143,243,232,80,243,219,227,67,216,229],[53,147,4,23,71,65,201,102,144,153,78,214,115,198,243,56,130,17,56,142,160,70,251,82,186,42,166,61,207,204,120,31]]",
              "sol": "[bytes(abi.encode(\"48,74,109,110,146,47,13,226,202,228,25,208,83,144,179,232,138,243,246,105,184,123,143,243,232,80,243,219,227,67,216,229\")),bytes(abi.encode(\"53,147,4,23,71,65,201,102,144,153,78,214,115,198,243,56,130,17,56,142,160,70,251,82,186,42,166,61,207,204,120,31\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.257ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"2o2luj\"",
              "sol": "\"2o2luj\""
            },
            {
              "js": "[[5,19,69,36,106,9,172,179,19,234,230,232,31,75,139,23,66,33,243,147,231,61,236,153,248,87,71,111,229,61,15,142],[118,136,215,218,20,173,254,51,130,78,62,237,63,36,78,93,155,183,10,102,139,165,151,142,60,112,44,114,250,98,140,146]]",
              "sol": "[bytes(abi.encode(\"5,19,69,36,106,9,172,179,19,234,230,232,31,75,139,23,66,33,243,147,231,61,236,153,248,87,71,111,229,61,15,142\")),bytes(abi.encode(\"118,136,215,218,20,173,254,51,130,78,62,237,63,36,78,93,155,183,10,102,139,165,151,142,60,112,44,114,250,98,140,146\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.258ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"2o2luj\"",
              "sol": "\"2o2luj\""
            },
            {
              "js": "[[49,159,126,118,7,193,50,1,13,188,190,56,239,102,7,142,136,77,191,210,76,195,122,245,110,231,17,66,155,91,36,210],[204,226,153,77,14,37,9,233,108,116,250,63,184,187,56,57,41,1,95,219,9,164,239,74,88,131,113,140,12,4,243,130]]",
              "sol": "[bytes(abi.encode(\"49,159,126,118,7,193,50,1,13,188,190,56,239,102,7,142,136,77,191,210,76,195,122,245,110,231,17,66,155,91,36,210\")),bytes(abi.encode(\"204,226,153,77,14,37,9,233,108,116,250,63,184,187,56,57,41,1,95,219,9,164,239,74,88,131,113,140,12,4,243,130\"))]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.259ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"2v7ge\"",
              "sol": "\"2v7ge\""
            },
            {
              "js": "[[180,57,154,254,237,122,185,83,206,180,244,189,133,146,211,167,130,146,50,13,35,163,102,17,221,65,137,18,245,214,218,54],[95,254,66,47,7,5,185,227,167,214,205,241,131,108,96,149,0,191,47,148,72,23,244,213,246,8,207,231,145,164,237,213]]",
              "sol": "[bytes(abi.encode(\"180,57,154,254,237,122,185,83,206,180,244,189,133,146,211,167,130,146,50,13,35,163,102,17,221,65,137,18,245,214,218,54\")),bytes(abi.encode(\"95,254,66,47,7,5,185,227,167,214,205,241,131,108,96,149,0,191,47,148,72,23,244,213,246,8,207,231,145,164,237,213\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.259ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[85,238,217,193,61,158,232,169,33,112,43,53,14,33,147,133,201,127,201,68,192,166,74,12,198,148,23,24,17,93,116,8],[204,210,124,44,249,179,84,192,84,42,225,214,134,27,73,193,88,20,173,135,3,231,50,96,201,223,86,49,42,27,39,88],[228,240,247,171,241,9,246,1,215,185,125,153,249,239,24,41,243,105,22,237,177,133,214,65,146,223,228,98,177,59,139,156]]",
              "sol": "[bytes(abi.encode(\"85,238,217,193,61,158,232,169,33,112,43,53,14,33,147,133,201,127,201,68,192,166,74,12,198,148,23,24,17,93,116,8\")),bytes(abi.encode(\"204,210,124,44,249,179,84,192,84,42,225,214,134,27,73,193,88,20,173,135,3,231,50,96,201,223,86,49,42,27,39,88\")),bytes(abi.encode(\"228,240,247,171,241,9,246,1,215,185,125,153,249,239,24,41,243,105,22,237,177,133,214,65,146,223,228,98,177,59,139,156\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.260ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[89,245,5,49,135,217,130,19,74,234,116,216,171,211,89,177,82,116,120,98,178,134,22,7,170,209,96,89,249,193,31,5],[238,212,189,250,80,94,80,52,65,199,147,152,144,100,3,213,200,167,77,57,255,237,132,99,172,72,60,130,140,173,170,2],[242,45,189,46,72,174,238,216,109,142,60,87,67,66,26,188,129,53,240,136,249,146,4,153,46,79,205,122,189,239,197,14]]",
              "sol": "[bytes(abi.encode(\"89,245,5,49,135,217,130,19,74,234,116,216,171,211,89,177,82,116,120,98,178,134,22,7,170,209,96,89,249,193,31,5\")),bytes(abi.encode(\"238,212,189,250,80,94,80,52,65,199,147,152,144,100,3,213,200,167,77,57,255,237,132,99,172,72,60,130,140,173,170,2\")),bytes(abi.encode(\"242,45,189,46,72,174,238,216,109,142,60,87,67,66,26,188,129,53,240,136,249,146,4,153,46,79,205,122,189,239,197,14\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.261ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"2v7ge\"",
              "sol": "\"2v7ge\""
            },
            {
              "js": "[[95,94,39,143,88,23,153,42,241,62,100,40,1,45,153,188,192,248,33,18,23,238,209,10,154,231,86,194,99,34,126,230],[194,61,152,132,113,230,176,71,244,34,110,246,240,253,208,134,61,79,198,1,212,97,184,146,150,163,45,223,115,156,121,174],[250,227,38,63,126,238,251,126,98,251,113,201,97,2,28,16,185,24,5,2,57,84,160,92,201,80,194,255,185,106,212,253]]",
              "sol": "[bytes(abi.encode(\"95,94,39,143,88,23,153,42,241,62,100,40,1,45,153,188,192,248,33,18,23,238,209,10,154,231,86,194,99,34,126,230\")),bytes(abi.encode(\"194,61,152,132,113,230,176,71,244,34,110,246,240,253,208,134,61,79,198,1,212,97,184,146,150,163,45,223,115,156,121,174\")),bytes(abi.encode(\"250,227,38,63,126,238,251,126,98,251,113,201,97,2,28,16,185,24,5,2,57,84,160,92,201,80,194,255,185,106,212,253\"))]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.261ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"2o2luj\"",
              "sol": "\"2o2luj\""
            },
            {
              "js": "[[86,2,145,54,220,129,118,248,165,117,38,133,40,173,238,145,22,252,121,72,121,124,131,219,184,218,232,39,216,30,159,204],[121,104,231,18,118,233,23,174,132,159,20,11,185,136,28,125,99,28,11,192,153,250,154,164,152,38,77,246,13,250,211,26],[246,144,33,35,37,131,19,62,72,75,155,148,40,119,233,27,142,77,20,10,151,119,209,143,6,214,246,181,250,40,125,182]]",
              "sol": "[bytes(abi.encode(\"86,2,145,54,220,129,118,248,165,117,38,133,40,173,238,145,22,252,121,72,121,124,131,219,184,218,232,39,216,30,159,204\")),bytes(abi.encode(\"121,104,231,18,118,233,23,174,132,159,20,11,185,136,28,125,99,28,11,192,153,250,154,164,152,38,77,246,13,250,211,26\")),bytes(abi.encode(\"246,144,33,35,37,131,19,62,72,75,155,148,40,119,233,27,142,77,20,10,151,119,209,143,6,214,246,181,250,40,125,182\"))]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.262ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[39,165,98,115,89,216,91,19,144,125,158,135,9,68,101,246,20,89,84,195,92,54,94,194,194,146,3,54,62,83,106,255],[207,81,221,128,88,6,44,26,111,197,178,187,240,184,236,32,240,58,116,136,231,79,234,27,183,106,65,38,14,172,173,209],[217,92,144,195,129,111,187,162,227,85,176,213,156,114,32,182,91,92,156,35,35,160,249,189,179,242,52,170,36,53,107,6],[211,237,250,4,93,132,106,42,191,135,112,81,67,71,201,118,51,125,15,51,149,223,168,220,38,28,244,158,38,125,21,72]]",
              "sol": "[bytes(abi.encode(\"39,165,98,115,89,216,91,19,144,125,158,135,9,68,101,246,20,89,84,195,92,54,94,194,194,146,3,54,62,83,106,255\")),bytes(abi.encode(\"207,81,221,128,88,6,44,26,111,197,178,187,240,184,236,32,240,58,116,136,231,79,234,27,183,106,65,38,14,172,173,209\")),bytes(abi.encode(\"217,92,144,195,129,111,187,162,227,85,176,213,156,114,32,182,91,92,156,35,35,160,249,189,179,242,52,170,36,53,107,6\")),bytes(abi.encode(\"211,237,250,4,93,132,106,42,191,135,112,81,67,71,201,118,51,125,15,51,149,223,168,220,38,28,244,158,38,125,21,72\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.262ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[4,157,67,71,82,208,80,145,51,244,47,48,62,228,183,2,26,33,1,119,9,232,247,102,138,96,53,118,251,96,10,144],[175,234,40,54,134,164,198,230,170,219,236,248,104,219,180,84,133,157,207,43,225,81,84,115,214,253,172,41,190,249,91,28],[7,134,125,40,242,43,202,253,154,27,16,16,20,188,45,207,14,123,57,231,174,190,125,9,89,194,209,203,62,214,159,211],[255,21,229,202,159,88,193,37,75,113,158,109,233,61,175,122,52,85,210,76,231,120,28,209,179,191,42,253,222,162,153,120]]",
              "sol": "[bytes(abi.encode(\"4,157,67,71,82,208,80,145,51,244,47,48,62,228,183,2,26,33,1,119,9,232,247,102,138,96,53,118,251,96,10,144\")),bytes(abi.encode(\"175,234,40,54,134,164,198,230,170,219,236,248,104,219,180,84,133,157,207,43,225,81,84,115,214,253,172,41,190,249,91,28\")),bytes(abi.encode(\"7,134,125,40,242,43,202,253,154,27,16,16,20,188,45,207,14,123,57,231,174,190,125,9,89,194,209,203,62,214,159,211\")),bytes(abi.encode(\"255,21,229,202,159,88,193,37,75,113,158,109,233,61,175,122,52,85,210,76,231,120,28,209,179,191,42,253,222,162,153,120\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.263ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[231,98,250,66,35,122,36,205,75,137,195,179,26,65,98,238,243,201,80,164,48,139,215,8,216,217,73,61,92,156,177,123],[158,177,40,9,144,146,37,50,174,177,26,154,119,152,168,54,103,77,219,191,125,193,154,56,173,205,177,5,176,52,238,87],[98,48,180,161,188,89,45,240,157,228,75,122,3,142,131,90,97,16,164,202,163,31,84,90,168,52,173,148,215,82,240,177],[159,11,9,177,38,220,124,63,143,178,9,31,174,46,23,112,8,95,219,154,142,44,32,29,17,61,234,232,0,204,164,58]]",
              "sol": "[bytes(abi.encode(\"231,98,250,66,35,122,36,205,75,137,195,179,26,65,98,238,243,201,80,164,48,139,215,8,216,217,73,61,92,156,177,123\")),bytes(abi.encode(\"158,177,40,9,144,146,37,50,174,177,26,154,119,152,168,54,103,77,219,191,125,193,154,56,173,205,177,5,176,52,238,87\")),bytes(abi.encode(\"98,48,180,161,188,89,45,240,157,228,75,122,3,142,131,90,97,16,164,202,163,31,84,90,168,52,173,148,215,82,240,177\")),bytes(abi.encode(\"159,11,9,177,38,220,124,63,143,178,9,31,174,46,23,112,8,95,219,154,142,44,32,29,17,61,234,232,0,204,164,58\"))]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.264ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[240,207,136,215,112,196,58,172,20,203,187,194,220,218,236,171,203,74,27,145,26,50,177,223,51,84,85,234,83,142,6,225],[46,59,123,122,49,187,231,173,245,95,146,125,2,0,222,214,155,3,69,52,253,195,13,5,134,120,133,197,208,223,94,105],[222,248,148,20,236,221,104,143,209,235,200,122,173,16,31,219,24,37,169,148,2,40,167,16,184,246,39,240,40,228,99,165],[153,36,35,142,145,255,138,86,142,27,28,0,207,71,89,90,221,5,223,76,13,121,219,152,55,124,117,54,240,26,104,145]]",
              "sol": "[bytes(abi.encode(\"240,207,136,215,112,196,58,172,20,203,187,194,220,218,236,171,203,74,27,145,26,50,177,223,51,84,85,234,83,142,6,225\")),bytes(abi.encode(\"46,59,123,122,49,187,231,173,245,95,146,125,2,0,222,214,155,3,69,52,253,195,13,5,134,120,133,197,208,223,94,105\")),bytes(abi.encode(\"222,248,148,20,236,221,104,143,209,235,200,122,173,16,31,219,24,37,169,148,2,40,167,16,184,246,39,240,40,228,99,165\")),bytes(abi.encode(\"153,36,35,142,145,255,138,86,142,27,28,0,207,71,89,90,221,5,223,76,13,121,219,152,55,124,117,54,240,26,104,145\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.264ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"2v7ge\"",
              "sol": "\"2v7ge\""
            },
            {
              "js": "[[1,73,91,22,211,29,110,16,171,54,137,28,246,249,197,44,208,126,3,43,124,251,184,248,196,118,41,6,21,42,128,10],[86,207,198,123,209,14,219,63,237,31,0,100,11,85,18,14,32,114,171,166,1,153,214,236,109,41,89,46,54,133,180,114],[98,7,7,189,169,35,58,152,49,39,197,163,36,95,14,120,154,211,253,183,206,61,63,167,59,252,198,83,160,136,180,10],[209,78,110,123,65,231,216,97,39,33,150,222,205,64,84,134,98,181,21,252,159,85,175,106,2,79,54,61,71,174,112,25],[16,61,176,225,150,192,62,90,109,192,52,36,84,209,155,151,106,29,108,159,168,14,61,225,191,238,232,216,4,98,148,206]]",
              "sol": "[bytes(abi.encode(\"1,73,91,22,211,29,110,16,171,54,137,28,246,249,197,44,208,126,3,43,124,251,184,248,196,118,41,6,21,42,128,10\")),bytes(abi.encode(\"86,207,198,123,209,14,219,63,237,31,0,100,11,85,18,14,32,114,171,166,1,153,214,236,109,41,89,46,54,133,180,114\")),bytes(abi.encode(\"98,7,7,189,169,35,58,152,49,39,197,163,36,95,14,120,154,211,253,183,206,61,63,167,59,252,198,83,160,136,180,10\")),bytes(abi.encode(\"209,78,110,123,65,231,216,97,39,33,150,222,205,64,84,134,98,181,21,252,159,85,175,106,2,79,54,61,71,174,112,25\")),bytes(abi.encode(\"16,61,176,225,150,192,62,90,109,192,52,36,84,209,155,151,106,29,108,159,168,14,61,225,191,238,232,216,4,98,148,206\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.265ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[16,22,74,183,14,45,39,63,119,185,182,148,218,153,61,229,148,111,140,68,127,111,46,24,240,31,114,2,190,182,219,228],[75,196,162,139,212,122,221,177,160,215,172,23,120,53,56,27,226,234,4,186,52,126,133,18,24,157,100,217,81,7,75,217],[19,195,13,187,25,164,149,65,134,41,103,36,140,176,6,25,127,104,108,130,221,211,144,146,90,180,136,183,67,65,1,202],[154,24,159,84,35,167,120,188,240,231,24,18,211,192,243,230,251,146,246,70,245,48,199,30,201,155,137,76,136,50,118,134],[27,81,17,191,105,118,84,119,104,56,140,12,247,184,44,55,146,129,25,160,71,237,251,212,122,119,162,150,28,153,184,4]]",
              "sol": "[bytes(abi.encode(\"16,22,74,183,14,45,39,63,119,185,182,148,218,153,61,229,148,111,140,68,127,111,46,24,240,31,114,2,190,182,219,228\")),bytes(abi.encode(\"75,196,162,139,212,122,221,177,160,215,172,23,120,53,56,27,226,234,4,186,52,126,133,18,24,157,100,217,81,7,75,217\")),bytes(abi.encode(\"19,195,13,187,25,164,149,65,134,41,103,36,140,176,6,25,127,104,108,130,221,211,144,146,90,180,136,183,67,65,1,202\")),bytes(abi.encode(\"154,24,159,84,35,167,120,188,240,231,24,18,211,192,243,230,251,146,246,70,245,48,199,30,201,155,137,76,136,50,118,134\")),bytes(abi.encode(\"27,81,17,191,105,118,84,119,104,56,140,12,247,184,44,55,146,129,25,160,71,237,251,212,122,119,162,150,28,153,184,4\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.266ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[182,210,181,14,130,116,200,26,122,214,81,82,190,154,121,128,153,42,221,46,78,137,167,191,180,15,50,27,181,33,242,75],[242,4,236,80,185,158,101,71,235,72,76,209,49,20,137,252,155,112,16,4,45,225,119,200,239,55,112,79,237,106,148,220],[5,129,125,173,157,153,213,86,112,26,162,104,0,138,255,191,123,135,114,217,237,115,244,202,149,179,153,45,163,141,32,30],[133,24,52,36,28,218,175,212,177,21,56,249,121,217,69,246,49,87,51,75,93,149,185,215,215,191,233,154,107,100,214,159],[36,241,111,254,214,229,102,29,230,125,139,74,207,191,193,215,212,158,146,78,135,23,193,125,187,112,83,161,86,106,219,144]]",
              "sol": "[bytes(abi.encode(\"182,210,181,14,130,116,200,26,122,214,81,82,190,154,121,128,153,42,221,46,78,137,167,191,180,15,50,27,181,33,242,75\")),bytes(abi.encode(\"242,4,236,80,185,158,101,71,235,72,76,209,49,20,137,252,155,112,16,4,45,225,119,200,239,55,112,79,237,106,148,220\")),bytes(abi.encode(\"5,129,125,173,157,153,213,86,112,26,162,104,0,138,255,191,123,135,114,217,237,115,244,202,149,179,153,45,163,141,32,30\")),bytes(abi.encode(\"133,24,52,36,28,218,175,212,177,21,56,249,121,217,69,246,49,87,51,75,93,149,185,215,215,191,233,154,107,100,214,159\")),bytes(abi.encode(\"36,241,111,254,214,229,102,29,230,125,139,74,207,191,193,215,212,158,146,78,135,23,193,125,187,112,83,161,86,106,219,144\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.267ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[102,214,159,93,113,128,52,143,231,93,12,195,95,218,192,154,71,225,96,87,86,11,178,196,197,41,192,88,67,199,122,104],[131,252,94,190,5,58,141,64,97,184,141,227,182,47,70,194,143,209,161,104,171,32,245,121,240,239,92,250,82,166,0,26],[29,7,100,138,14,29,187,62,80,58,210,151,108,13,74,165,183,151,172,200,244,210,251,17,80,214,231,63,87,124,237,44],[155,39,173,247,246,123,57,117,23,211,72,74,30,3,237,208,172,39,112,56,78,251,212,255,64,121,250,240,200,174,220,247],[190,211,27,218,170,110,207,122,115,69,221,114,125,147,75,79,50,147,225,29,200,225,86,153,29,21,109,58,215,225,72,171]]",
              "sol": "[bytes(abi.encode(\"102,214,159,93,113,128,52,143,231,93,12,195,95,218,192,154,71,225,96,87,86,11,178,196,197,41,192,88,67,199,122,104\")),bytes(abi.encode(\"131,252,94,190,5,58,141,64,97,184,141,227,182,47,70,194,143,209,161,104,171,32,245,121,240,239,92,250,82,166,0,26\")),bytes(abi.encode(\"29,7,100,138,14,29,187,62,80,58,210,151,108,13,74,165,183,151,172,200,244,210,251,17,80,214,231,63,87,124,237,44\")),bytes(abi.encode(\"155,39,173,247,246,123,57,117,23,211,72,74,30,3,237,208,172,39,112,56,78,251,212,255,64,121,250,240,200,174,220,247\")),bytes(abi.encode(\"190,211,27,218,170,110,207,122,115,69,221,114,125,147,75,79,50,147,225,29,200,225,86,153,29,21,109,58,215,225,72,171\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.268ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[182]",
              "sol": "bytes1(\"182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.268ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.269ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.269ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.269ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.270ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.270ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.270ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"pltpke\"",
              "sol": "\"pltpke\""
            },
            {
              "js": "\"r5pix\"",
              "sol": "\"r5pix\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.271ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"r5pix\"",
              "sol": "\"r5pix\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.271ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.271ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"dv2zo\"",
              "sol": "\"dv2zo\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"daedk\"",
              "sol": "\"daedk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.272ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"r5pix\"",
              "sol": "\"r5pix\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.272ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.272ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"pltpke\"",
              "sol": "\"pltpke\""
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"e30gm5\"",
              "sol": "\"e30gm5\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.274ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.274ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"r5pix\"",
              "sol": "\"r5pix\""
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.275ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.276ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"6cd6bc\",\"\",\"listingID arg\",\"RevertWithReason\",\"RevertWithReason\",\"r5pix\",\"IsLibrary\",\"\",\"Example\"]",
              "sol": "[string(\"6cd6bc\"),string(\"\"),string(\"listingID arg\"),string(\"RevertWithReason\"),string(\"RevertWithReason\"),string(\"r5pix\"),string(\"IsLibrary\"),string(\"\"),string(\"Example\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.276ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[46,60,204,8,137,149,189,220,234,220,246,33,136,141,150,203,177,63,165,41,165,159,202,13,172,242,160,91,15,168,243,171],[144,170,45,128,161,123,190,107,3,133,159,32,166,76,160,6,101,126,52,56,239,39,117,153,184,178,205,71,244,72,30,179],[221,49,230,57,189,236,0,57,60,57,26,130,209,7,12,117,28,98,90,110,172,226,193,138,27,103,138,174,170,141,63,79],[118,129,98,59,92,224,121,12,253,149,238,10,78,147,29,180,109,145,112,180,237,182,94,182,0,100,185,112,225,46,64,19],[137,193,38,248,159,83,23,3,33,161,221,68,34,157,1,205,112,40,11,0,181,61,179,65,238,11,170,27,139,232,148,231],[249,73,185,97,85,214,186,224,131,100,140,29,253,107,234,54,191,1,237,49,131,235,212,166,1,50,126,255,170,241,192,77],[30,54,244,128,65,35,32,210,23,161,32,244,120,117,141,161,31,157,41,27,198,39,174,75,208,87,99,139,124,218,241,11],[70,164,44,79,142,38,240,241,250,112,10,153,130,173,51,218,28,207,22,24,3,121,14,235,239,66,184,231,216,185,77,22],[99,64,18,208,222,9,11,247,128,215,9,172,67,84,226,255,94,113,204,161,115,88,46,138,45,197,23,145,134,66,97,199],[170,212,151,48,27,140,108,76,162,130,146,12,59,146,84,101,207,179,140,217,197,96,209,14,14,97,186,97,0,38,68,115]]",
              "sol": "[bytes(abi.encode(\"46,60,204,8,137,149,189,220,234,220,246,33,136,141,150,203,177,63,165,41,165,159,202,13,172,242,160,91,15,168,243,171\")),bytes(abi.encode(\"144,170,45,128,161,123,190,107,3,133,159,32,166,76,160,6,101,126,52,56,239,39,117,153,184,178,205,71,244,72,30,179\")),bytes(abi.encode(\"221,49,230,57,189,236,0,57,60,57,26,130,209,7,12,117,28,98,90,110,172,226,193,138,27,103,138,174,170,141,63,79\")),bytes(abi.encode(\"118,129,98,59,92,224,121,12,253,149,238,10,78,147,29,180,109,145,112,180,237,182,94,182,0,100,185,112,225,46,64,19\")),bytes(abi.encode(\"137,193,38,248,159,83,23,3,33,161,221,68,34,157,1,205,112,40,11,0,181,61,179,65,238,11,170,27,139,232,148,231\")),bytes(abi.encode(\"249,73,185,97,85,214,186,224,131,100,140,29,253,107,234,54,191,1,237,49,131,235,212,166,1,50,126,255,170,241,192,77\")),bytes(abi.encode(\"30,54,244,128,65,35,32,210,23,161,32,244,120,117,141,161,31,157,41,27,198,39,174,75,208,87,99,139,124,218,241,11\")),bytes(abi.encode(\"70,164,44,79,142,38,240,241,250,112,10,153,130,173,51,218,28,207,22,24,3,121,14,235,239,66,184,231,216,185,77,22\")),bytes(abi.encode(\"99,64,18,208,222,9,11,247,128,215,9,172,67,84,226,255,94,113,204,161,115,88,46,138,45,197,23,145,134,66,97,199\")),bytes(abi.encode(\"170,212,151,48,27,140,108,76,162,130,146,12,59,146,84,101,207,179,140,217,197,96,209,14,14,97,186,97,0,38,68,115\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.281ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.282ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[15,226,26,6,101,5,106,111,144,19,6,199,100,79,131,21,231,205,40,71,162,100,129,228,189,30,181,93,22,114,139,20]",
              "sol": "stringToBytes32(\"15,226,26,6,101,5,106,111,144,19,6,199,100,79,131,21,231,205,40,71,162,100,129,228,189,30,181,93,22,114,139,20\")"
            },
            {
              "js": "[248,3,103,253,0,7,121,208,141,236,223,155,216,126,39,188,168,180,232,53,160,129,3,52,24,4,41,119,175,193,40,65]",
              "sol": "stringToBytes32(\"248,3,103,253,0,7,121,208,141,236,223,155,216,126,39,188,168,180,232,53,160,129,3,52,24,4,41,119,175,193,40,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.283ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[75,243,56,16,22,39,246,147,128,166,5,97,165,190,89,120,240,162,84,0,117,120,147,16,80,223,65,100,12,245,44,70]",
              "sol": "stringToBytes32(\"75,243,56,16,22,39,246,147,128,166,5,97,165,190,89,120,240,162,84,0,117,120,147,16,80,223,65,100,12,245,44,70\")"
            },
            {
              "js": "[28,36,86,241,115,139,101,148,122,143,135,41,73,36,112,71,92,195,160,30,8,21,87,140,142,183,194,213,70,63,182,236]",
              "sol": "abi.encode(\"28,36,86,241,115,139,101,148,122,143,135,41,73,36,112,71,92,195,160,30,8,21,87,140,142,183,194,213,70,63,182,236\")"
            },
            {
              "js": "[55,194,26,225,59,150,151,234,167,93,251,134,20,163,241,173,113,210,74,9,21,144,207,82,53,66,94,87,46,11,66,205]",
              "sol": "abi.encode(\"55,194,26,225,59,150,151,234,167,93,251,134,20,163,241,173,113,210,74,9,21,144,207,82,53,66,94,87,46,11,66,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.283ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[10,219,130,105,158,41,127,190,203,202,164,214,157,225,81,158,24,242,240,49,59,116,150,173,73,222,148,11,153,60,151,165]",
              "sol": "abi.encode(\"10,219,130,105,158,41,127,190,203,202,164,214,157,225,81,158,24,242,240,49,59,116,150,173,73,222,148,11,153,60,151,165\")"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[12,95,169,172,168,93,8,157,167,0,129,199,133,49,146,212,83,73,225,218,176,55,26,194,54,242,107,88,225,113,118,17]",
              "sol": "abi.encode(\"12,95,169,172,168,93,8,157,167,0,129,199,133,49,146,212,83,73,225,218,176,55,26,194,54,242,107,88,225,113,118,17\")"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.286ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[251,120,39,164,16,132,34,24,226,48,118,59,109,177,112,235,184,134,63,106,137,6,101,141,173,124,45,68,144,253,97,184]",
              "sol": "stringToBytes32(\"251,120,39,164,16,132,34,24,226,48,118,59,109,177,112,235,184,134,63,106,137,6,101,141,173,124,45,68,144,253,97,184\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[235,109,5,76,36,109,181,247,93,219,119,171,21,207,87,91,163,184,134,42,25,77,234,244,174,86,116,93,22,203,252,182]",
              "sol": "abi.encode(\"235,109,5,76,36,109,181,247,93,219,119,171,21,207,87,91,163,184,134,42,25,77,234,244,174,86,116,93,22,203,252,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[14,168,57,210,253,169,82,0,86,49,206,141,174,26,53,71,193,190,98,137,195,76,27,187,97,82,251,17,173,234,32,106]",
              "sol": "stringToBytes32(\"14,168,57,210,253,169,82,0,86,49,206,141,174,26,53,71,193,190,98,137,195,76,27,187,97,82,251,17,173,234,32,106\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[216,220,109,223,245,46,193,29,30,14,143,242,162,141,163,30,232,72,10,175,53,211,14,217,228,97,170,206,250,53,40,60]",
              "sol": "abi.encode(\"216,220,109,223,245,46,193,29,30,14,143,242,162,141,163,30,232,72,10,175,53,211,14,217,228,97,170,206,250,53,40,60\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.287ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[100,173,186,168,190,162,94,50,17,108,231,243,174,131,190,237,97,58,170,57,45,181,226,250,142,110,221,56,205,130,161,81]",
              "sol": "stringToBytes32(\"100,173,186,168,190,162,94,50,17,108,231,243,174,131,190,237,97,58,170,57,45,181,226,250,142,110,221,56,205,130,161,81\")"
            },
            {
              "js": "[205,84,165,175,205,172,24,56,143,59,90,202,66,254,170,113,122,97,130,242,247,167,127,35,75,102,68,221,124,149,54,130]",
              "sol": "abi.encode(\"205,84,165,175,205,172,24,56,143,59,90,202,66,254,170,113,122,97,130,242,247,167,127,35,75,102,68,221,124,149,54,130\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[100,173,186,168,190,162,94,50,17,108,231,243,174,131,190,237,97,58,170,57,45,181,226,250,142,110,221,56,205,130,161,81]",
                "sol": "stringToBytes32(\"100,173,186,168,190,162,94,50,17,108,231,243,174,131,190,237,97,58,170,57,45,181,226,250,142,110,221,56,205,130,161,81\")"
              },
              {
                "js": "[38,91,156,146,172,243,115,173,126,239,150,219,132,102,228,241,133,107,113,77,98,220,218,127,244,25,84,251,205,238,182,124,14]",
                "sol": "bytes33(\"38,91,156,146,172,243,115,173,126,239,150,219,132,102,228,241,133,107,113,77,98,220,218,127,244,25,84,251,205,238,182,124,14\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.289ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[231,134,154,255,10,81,54,219,122,127,91,114,51,90,85,120,155,210,113,204,194,179,113,29,71,210,199,236,202,73,234,228]",
              "sol": "abi.encode(\"231,134,154,255,10,81,54,219,122,127,91,114,51,90,85,120,155,210,113,204,194,179,113,29,71,210,199,236,202,73,234,228\")"
            },
            {
              "js": "[182,151,83,2,6,62,108,42,69,138,93,255,87,196,135,3,56,175,40,16,169,28,38,197,98,159,0,133,110,36,74,185]",
              "sol": "stringToBytes32(\"182,151,83,2,6,62,108,42,69,138,93,255,87,196,135,3,56,175,40,16,169,28,38,197,98,159,0,133,110,36,74,185\")"
            },
            {
              "js": "[235,14,67,129,64,53,201,207,39,50,138,18,20,234,72,22,152,243,127,131,41,128,224,251,219,164,68,15,185,238,68,232]",
              "sol": "abi.encode(\"235,14,67,129,64,53,201,207,39,50,138,18,20,234,72,22,152,243,127,131,41,128,224,251,219,164,68,15,185,238,68,232\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[20,97,90,157,32,191,136,58,85,231,43,238,19,13,147,166,180,97,183,81,51,82,104,20,194,1,216,19,110,171,97,155]",
              "sol": "abi.encode(\"20,97,90,157,32,191,136,58,85,231,43,238,19,13,147,166,180,97,183,81,51,82,104,20,194,1,216,19,110,171,97,155\")"
            },
            {
              "js": "[220,201,130,186,213,230,112,22,217,23,56,168,38,69,216,157,137,11,224,214,160,35,66,96,117,85,88,24,118,86,143,140]",
              "sol": "stringToBytes32(\"220,201,130,186,213,230,112,22,217,23,56,168,38,69,216,157,137,11,224,214,160,35,66,96,117,85,88,24,118,86,143,140\")"
            },
            {
              "js": "[90,8,110,201,134,50,165,179,214,60,243,40,85,238,124,29,247,130,200,19,81,17,64,33,184,75,72,185,230,95,41,199]",
              "sol": "abi.encode(\"90,8,110,201,134,50,165,179,214,60,243,40,85,238,124,29,247,130,200,19,81,17,64,33,184,75,72,185,230,95,41,199\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[241,125,9,222,221,7,199,32,239,226,242,235,119,42,50,200,99,147,208,96,189,161,88,213,20,231,160,125,142,156,200,217]",
              "sol": "abi.encode(\"241,125,9,222,221,7,199,32,239,226,242,235,119,42,50,200,99,147,208,96,189,161,88,213,20,231,160,125,142,156,200,217\")"
            },
            {
              "js": "[102,193,140,247,226,81,215,10,187,107,206,164,10,15,101,20,58,65,72,141,151,164,166,5,52,103,213,121,74,212,45,29]",
              "sol": "stringToBytes32(\"102,193,140,247,226,81,215,10,187,107,206,164,10,15,101,20,58,65,72,141,151,164,166,5,52,103,213,121,74,212,45,29\")"
            },
            {
              "js": "[39,143,105,17,193,55,78,233,170,141,179,152,124,36,93,99,120,250,206,179,185,36,224,170,88,216,74,77,212,72,87,241]",
              "sol": "abi.encode(\"39,143,105,17,193,55,78,233,170,141,179,152,124,36,93,99,120,250,206,179,185,36,224,170,88,216,74,77,212,72,87,241\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[165,157,0,169,221,150,184,176,176,27,185,209,233,233,233,238,48,153,225,246,254,231,180,182,61,170,69,4,253,121,56,151]",
              "sol": "abi.encode(\"165,157,0,169,221,150,184,176,176,27,185,209,233,233,233,238,48,153,225,246,254,231,180,182,61,170,69,4,253,121,56,151\")"
            },
            {
              "js": "[112,241,39,98,51,230,5,189,77,35,246,47,205,231,49,42,82,21,103,199,38,226,86,72,118,251,101,254,174,173,244,122]",
              "sol": "stringToBytes32(\"112,241,39,98,51,230,5,189,77,35,246,47,205,231,49,42,82,21,103,199,38,226,86,72,118,251,101,254,174,173,244,122\")"
            },
            {
              "js": "[70,161,87,200,249,105,124,140,132,98,212,83,183,233,113,45,37,54,141,2,155,123,149,203,32,197,167,227,131,143,95,164]",
              "sol": "abi.encode(\"70,161,87,200,249,105,124,140,132,98,212,83,183,233,113,45,37,54,141,2,155,123,149,203,32,197,167,227,131,143,95,164\")"
            },
            {
              "js": "\"6cd6bc\"",
              "sol": "\"6cd6bc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[159,145,247,123,77,183,22,237,121,12,8,162,197,129,221,213,194,144,120,182,183,237,90,109,129,194,181,65,236,52,147,93]",
              "sol": "abi.encode(\"159,145,247,123,77,183,22,237,121,12,8,162,197,129,221,213,194,144,120,182,183,237,90,109,129,194,181,65,236,52,147,93\")"
            },
            {
              "js": "[233,240,49,49,145,112,119,116,147,228,90,228,65,207,101,57,140,174,94,108,165,228,57,254,208,112,145,51,227,81,147,183]",
              "sol": "stringToBytes32(\"233,240,49,49,145,112,119,116,147,228,90,228,65,207,101,57,140,174,94,108,165,228,57,254,208,112,145,51,227,81,147,183\")"
            },
            {
              "js": "[152,243,58,43,128,145,125,125,63,33,229,120,130,131,32,177,75,242,96,189,63,99,233,119,127,89,215,57,86,142,156,15]",
              "sol": "abi.encode(\"152,243,58,43,128,145,125,125,63,33,229,120,130,131,32,177,75,242,96,189,63,99,233,119,127,89,215,57,86,142,156,15\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[203,9,249,63,139,45,78,144,176,221,116,74,193,213,33,146,139,62,223,156,237,128,61,16,16,142,215,230,206,183,80,134]",
              "sol": "abi.encode(\"203,9,249,63,139,45,78,144,176,221,116,74,193,213,33,146,139,62,223,156,237,128,61,16,16,142,215,230,206,183,80,134\")"
            },
            {
              "js": "[7,160,108,191,134,129,135,114,182,114,255,249,139,74,122,192,49,221,5,173,248,200,231,235,201,240,82,59,14,136,242,210]",
              "sol": "stringToBytes32(\"7,160,108,191,134,129,135,114,182,114,255,249,139,74,122,192,49,221,5,173,248,200,231,235,201,240,82,59,14,136,242,210\")"
            },
            {
              "js": "[221,47,181,42,192,249,176,191,185,193,242,67,144,98,121,155,148,98,185,122,94,163,122,40,33,179,7,203,224,116,72,105]",
              "sol": "abi.encode(\"221,47,181,42,192,249,176,191,185,193,242,67,144,98,121,155,148,98,185,122,94,163,122,40,33,179,7,203,224,116,72,105\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[230,178,89,234,61,18,2,149,88,97,148,38,79,85,214,34,37,60,103,33,143,82,19,29,112,140,69,152,65,88,155,104]",
              "sol": "abi.encode(\"230,178,89,234,61,18,2,149,88,97,148,38,79,85,214,34,37,60,103,33,143,82,19,29,112,140,69,152,65,88,155,104\")"
            },
            {
              "js": "[14,186,50,45,28,164,44,83,159,138,92,125,191,149,187,220,89,214,163,64,208,206,130,78,195,199,98,34,40,161,242,47]",
              "sol": "stringToBytes32(\"14,186,50,45,28,164,44,83,159,138,92,125,191,149,187,220,89,214,163,64,208,206,130,78,195,199,98,34,40,161,242,47\")"
            },
            {
              "js": "[253,13,112,83,81,164,148,233,96,45,239,27,27,248,10,141,221,142,204,32,64,169,231,251,143,197,232,253,160,167,85,166]",
              "sol": "abi.encode(\"253,13,112,83,81,164,148,233,96,45,239,27,27,248,10,141,221,142,204,32,64,169,231,251,143,197,232,253,160,167,85,166\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[25,231,28,160,81,98,171,164,91,152,0,184,203,222,216,74,82,208,249,104,61,176,179,213,76,106,144,64,77,244,129,208]",
              "sol": "abi.encode(\"25,231,28,160,81,98,171,164,91,152,0,184,203,222,216,74,82,208,249,104,61,176,179,213,76,106,144,64,77,244,129,208\")"
            },
            {
              "js": "[109,93,206,118,60,144,188,118,127,125,107,138,106,93,12,27,94,51,212,187,19,178,97,180,103,16,208,35,122,71,185,76]",
              "sol": "stringToBytes32(\"109,93,206,118,60,144,188,118,127,125,107,138,106,93,12,27,94,51,212,187,19,178,97,180,103,16,208,35,122,71,185,76\")"
            },
            {
              "js": "[98,43,141,77,82,190,81,117,63,158,45,225,11,88,252,228,152,198,91,68,36,125,189,65,94,253,196,128,86,66,109,108]",
              "sol": "abi.encode(\"98,43,141,77,82,190,81,117,63,158,45,225,11,88,252,228,152,198,91,68,36,125,189,65,94,253,196,128,86,66,109,108\")"
            },
            {
              "js": "\"rs4sug\"",
              "sol": "\"rs4sug\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.295ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[51,85,210,243,135,71,71,30,35,173,3,178,50,31,241,122,3,254,11,127,107,47,111,31,0,233,252,28,249,198,68,176]",
              "sol": "abi.encode(\"51,85,210,243,135,71,71,30,35,173,3,178,50,31,241,122,3,254,11,127,107,47,111,31,0,233,252,28,249,198,68,176\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "[211,254,32,6,114,158,214,22,34,197,212,142,37,110,196,51,71,53,198,176,54,129,79,3,156,242,225,68,93,215,95,64]",
              "sol": "abi.encode(\"211,254,32,6,114,158,214,22,34,197,212,142,37,110,196,51,71,53,198,176,54,129,79,3,156,242,225,68,93,215,95,64\")"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.296ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[230,142,191,137,88,214,105,49,32,26,237,103,59,48,198,18,248,159,228,17,175,238,44,255,192,95,99,186,159,235,166,154]",
              "sol": "stringToBytes32(\"230,142,191,137,88,214,105,49,32,26,237,103,59,48,198,18,248,159,228,17,175,238,44,255,192,95,99,186,159,235,166,154\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[82,114,172,33,185,107,42,36,95,236,253,15,54,226,201,86,146,235,25,37,127,0,197,138,60,24,177,164,122,164,36,19]",
              "sol": "stringToBytes32(\"82,114,172,33,185,107,42,36,95,236,253,15,54,226,201,86,146,235,25,37,127,0,197,138,60,24,177,164,122,164,36,19\")"
            },
            {
              "js": "[30,237,201,203,253,64,17,35,77,115,117,179,251,136,39,190,247,186,238,3,208,244,240,103,14,164,12,9,214,111,179,120]",
              "sol": "stringToBytes32(\"30,237,201,203,253,64,17,35,77,115,117,179,251,136,39,190,247,186,238,3,208,244,240,103,14,164,12,9,214,111,179,120\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.297ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[252,97,169,112,50,239,41,216,252,143,250,88,214,181,142,215,244,177,95,19,28,181,119,184,8,252,126,124,157,248,229,81]",
              "sol": "stringToBytes32(\"252,97,169,112,50,239,41,216,252,143,250,88,214,181,142,215,244,177,95,19,28,181,119,184,8,252,126,124,157,248,229,81\")"
            },
            {
              "js": "[246,26,159,209,144,255,149,234,98,77,214,109,91,135,136,135,165,119,82,200,224,150,213,129,224,144,69,29,142,226,233,236,191,206,215,115,227,211,24,56,133,192,244,76,52,155,105,140,110,225,8,0,169,61,184,170,156,61,240,136,46,101,89,230,140,108,67,52,77,2,10,21,229,110,154,109,167,105,191,236,6,231,94,190,0,4,95]",
              "sol": "abi.encode(\"246,26,159,209,144,255,149,234,98,77,214,109,91,135,136,135,165,119,82,200,224,150,213,129,224,144,69,29,142,226,233,236,191,206,215,115,227,211,24,56,133,192,244,76,52,155,105,140,110,225,8,0,169,61,184,170,156,61,240,136,46,101,89,230,140,108,67,52,77,2,10,21,229,110,154,109,167,105,191,236,6,231,94,190,0,4,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[255,129,127,114,179,33,134,35,232,193,19,214,150,59,116,248,194,62,121,217,44,94,85,95,115,170,96,202,213,222,55,205]",
              "sol": "stringToBytes32(\"255,129,127,114,179,33,134,35,232,193,19,214,150,59,116,248,194,62,121,217,44,94,85,95,115,170,96,202,213,222,55,205\")"
            },
            {
              "js": "[1,243,167,167,249,166,217,28,190,229,209,206,89,148,198,4,95,143,30,67,234,190,34,89,226,107,121,103,118,39,2,56,1,68,239,220,124,9,73,21,25,213,76,82,187,212,134,47,67,114,183,77,6,171,194,195,253,167,189,49,95,145,116,8,4]",
              "sol": "abi.encode(\"1,243,167,167,249,166,217,28,190,229,209,206,89,148,198,4,95,143,30,67,234,190,34,89,226,107,121,103,118,39,2,56,1,68,239,220,124,9,73,21,25,213,76,82,187,212,134,47,67,114,183,77,6,171,194,195,253,167,189,49,95,145,116,8,4\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.298ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.300ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.300ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.300ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.300ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.301ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.301ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.301ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.302ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.302ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.302ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.303ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.304ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.304ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.305ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.310ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.313ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[42,221,62,25,179,119,76,201,88,56,240,241,165,188,151,74,55,193,93,0,249,58,153,147,243,48,14,70,199,168,141,20]",
              "sol": "stringToBytes32(\"42,221,62,25,179,119,76,201,88,56,240,241,165,188,151,74,55,193,93,0,249,58,153,147,243,48,14,70,199,168,141,20\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[245,138,11,226,125,145,1,12,140,107,157,220,179,253,196,251,212,92,32,99,255,107,12,239,234,157,133,201,245,4,41,191]",
              "sol": "abi.encode(\"245,138,11,226,125,145,1,12,140,107,157,220,179,253,196,251,212,92,32,99,255,107,12,239,234,157,133,201,245,4,41,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.314ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.315ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.316ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxyable.address",
              "sol": "contractProxyable"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxyable.address",
                "sol": "contractProxyable"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.317ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[81,171,205,201,123,230,144,84,83,130,197,29,196,31,159,192,187,114,251,190,44,22,211,193,164,237,216,3,33,176,2,63]",
              "sol": "abi.encode(\"81,171,205,201,123,230,144,84,83,130,197,29,196,31,159,192,187,114,251,190,44,22,211,193,164,237,216,3,33,176,2,63\")"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "[206,105,181,13,26,213,227,51,112,154,185,220,196,133,180,192,57,167,239,114,147,127,15,252,244,234,24,249,101,158,14,149]",
              "sol": "stringToBytes32(\"206,105,181,13,26,213,227,51,112,154,185,220,196,133,180,192,57,167,239,114,147,127,15,252,244,234,24,249,101,158,14,149\")"
            },
            {
              "js": "[110,158,126,63,161,120,78,64,224,119,93,224,211,250,140,30,239,194,200,0,152,96,76,221,82,64,102,219,0,116,195,223]",
              "sol": "stringToBytes32(\"110,158,126,63,161,120,78,64,224,119,93,224,211,250,140,30,239,194,200,0,152,96,76,221,82,64,102,219,0,116,195,223\")"
            },
            {
              "js": "[201,58,248,80,35,196,79,146,247,12,168,24,98,187,138,228,55,31,132,156,139,235,232,240,191,115,103,145,51,39,52,19]",
              "sol": "stringToBytes32(\"201,58,248,80,35,196,79,146,247,12,168,24,98,187,138,228,55,31,132,156,139,235,232,240,191,115,103,145,51,39,52,19\")"
            },
            {
              "js": "[151,194,164,58,223,181,152,174,221,120,83,53,42,236,245,190,41,2,14,158,159,10,18,89,255,130,122,121,62,49,28,140]",
              "sol": "stringToBytes32(\"151,194,164,58,223,181,152,174,221,120,83,53,42,236,245,190,41,2,14,158,159,10,18,89,255,130,122,121,62,49,28,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.318ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.319ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.320ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.321ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.321ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.321ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.322ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "59",
                "sol": "59"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "59",
                "sol": "59"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.325ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.326ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "33",
                "sol": "33"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:25:51.329ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.330ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.330ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:25:51.332ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}