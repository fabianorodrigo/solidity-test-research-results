const truffleAssert = require('truffle-assertions');
const Address = artifacts.require("Address");
const EternalStorage = artifacts.require("EternalStorage");
const ETHPriceTicker = artifacts.require("ETHPriceTicker");
const Mortal = artifacts.require("Mortal");
const Buffer = artifacts.require("Buffer");
const CBOR = artifacts.require("CBOR");
const usingOraclize = artifacts.require("usingOraclize");
const Pausable = artifacts.require("Pausable");
const Proxy = artifacts.require("Proxy");
const Proxyable = artifacts.require("Proxyable");
const SafeDecimalMath = artifacts.require("SafeDecimalMath");
const ShartCoin = artifacts.require("ShartCoin");
const State = artifacts.require("State");
const PublicSafeDecimalMath = artifacts.require("PublicSafeDecimalMath");
const TokenExchange = artifacts.require("TokenExchange");
const TokenExchangeState = artifacts.require("TokenExchangeState");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");
const ERC20Detailed = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol");
const ProxyAddress = artifacts.require("ProxyAddress");
const ProxyBuffer = artifacts.require("ProxyBuffer");

contract("contractProxyBuffer",(accounts)=>{
    let contractProxyBuffer = null;
  let trace = false;
  let contractSafeMath = null;
  let contractERC20 = null;
  let contractERC20Detailed = null;
  let contractAddress = null;
  let contractBuffer = null;
  let contractCBOR = null;
  let contractSafeDecimalMath = null;
  let contractPublicSafeDecimalMath = null;
  let contractusingOraclize = null;
  let contractEternalStorage = null;
  let contractPausable = null;
  let contractShartCoin = null;
  let contractState = null;
  let contractProxy = null;
  let contractETHPriceTicker = null;
  let contractTokenExchangeState = null;
  let contractMortal = null;
  let contractProxyable = null;
  let contractTokenExchange = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    contractAddress = await Address.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Address.new({from: accounts[0]}');
    contractBuffer = await Buffer.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Buffer.new({from: accounts[0]}');
    contractCBOR = await CBOR.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: CBOR.new({from: accounts[0]}');
    contractSafeDecimalMath = await SafeDecimalMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeDecimalMath.new({from: accounts[0]}');
    PublicSafeDecimalMath.link("SafeDecimalMath",contractSafeDecimalMath.address);
    contractPublicSafeDecimalMath = await PublicSafeDecimalMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: PublicSafeDecimalMath.new({from: accounts[0]}');
    contractusingOraclize = await usingOraclize.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: usingOraclize.new({from: accounts[0]}');
    contractPausable = await Pausable.new({from:accounts[0]});
    if(trace) console.log('SUCESSO: Pausable.new({from:accounts[0]}');
    contractShartCoin = await ShartCoin.new({from:accounts[8]});
    if(trace) console.log('SUCESSO: ShartCoin.new({from:accounts[8]}');
    contractState = await State.new(accounts[3],{from:accounts[0]});
    if(trace) console.log('SUCESSO: State.new(accounts[3],{from:accounts[0]}');
    contractProxy = await Proxy.new({from:accounts[0]});
    if(trace) console.log('SUCESSO: Proxy.new({from:accounts[0]}');
    ETHPriceTicker.link("Buffer",contractBuffer.address);
     ETHPriceTicker.link("CBOR",contractCBOR.address);
    contractETHPriceTicker = await ETHPriceTicker.new({from:accounts[0]});
    if(trace) console.log('SUCESSO: ETHPriceTicker.new({from:accounts[0]}');
    contractTokenExchangeState = await TokenExchangeState.new(accounts[7],{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenExchangeState.new(accounts[7],{from:accounts[0]}');
    contractMortal = await Mortal.new(accounts[0],{from:accounts[0]});
    if(trace) console.log('SUCESSO: Mortal.new(accounts[0],{from:accounts[0]}');
    contractProxyable = await Proxyable.new(contractProxy.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: Proxyable.new(contractProxy.address,{from:accounts[0]}');
    TokenExchange.link("SafeMath",contractSafeMath.address);
     TokenExchange.link("SafeDecimalMath",contractSafeDecimalMath.address);
     TokenExchange.link("Address",contractAddress.address);
    contractTokenExchange = await TokenExchange.new(accounts[0],contractProxy.address,contractTokenExchangeState.address,"RevertWithReason",{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenExchange.new(accounts[0],contractProxy.address,contractTokenExchangeState.address,"RevertWithReason",{from:accounts[0]}');
      ProxyBuffer.link('Buffer', contractBuffer.address);
    contractProxyBuffer = await ProxyBuffer.new({ from: accounts[0] });
});
  
  it('Should execute testinit(Buffer.buffer,uint)', async () => {
    let result = await contractProxyBuffer.testinit({"buf": [184,182,171,189,104,241,80,252,161,122,253,20,132,81,23,71,153,17,110,201,122,151,49,11,52,126,183,69,142,155,230,158],"capacity": 199999}, 66,{from: accounts[0]});
  });
  it('Should execute testappend0(Buffer.buffer,bytes)', async () => {
    let result = await contractProxyBuffer.testappend0({"buf": [236,38,232,3,147,189,92,240,50,242,165,78,132,107,40,241,101,206,194,179,181,159,235,253,76,218,199,69,235,179,120,78],"capacity": 31}, [111,145,200,174,194,97,105,72,177,207,240,135,130,6,204,127,224,242,194,81,92,129,176,161,50,70,138,117,3,68,56,103],{from: accounts[0]});
  });
  it('Should execute testappend1(Buffer.buffer,uint8)', async () => {
    let result = await contractProxyBuffer.testappend1({"buf": [172,130,104,170,191,121,223,168,213,243,163,123,54,160,254,19,7,23,252,171,178,158,125,109,75,117,59,245,153,155,18,187],"capacity": 0}, 47,{from: accounts[0]});
  });
  it('Should execute testappendInt(Buffer.buffer,uint,uint)', async () => {
    let result = await contractProxyBuffer.testappendInt({"buf": [151,0,64,36,36,7,101,206,81,1,237,165,10,150,253,215,90,222,209,50,212,106,230,117,63,90,102,212,231,239,174,71],"capacity": 7}, 103, 1532892064,{from: accounts[0]});
  });
});
