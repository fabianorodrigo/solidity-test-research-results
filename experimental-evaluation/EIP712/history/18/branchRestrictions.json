,{
  "2020-11-11T21:39:55.740ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[244,178,146,217,131,152,211,23,9,196,68,157,229,83,2,48,120,161,226,102,253,141,47,238,100,211,236,189,158,85,47,230]",
              "sol": "stringToBytes32(\"244,178,146,217,131,152,211,23,9,196,68,157,229,83,2,48,120,161,226,102,253,141,47,238,100,211,236,189,158,85,47,230\")"
            },
            {
              "js": "[54,5,43,141,89,9,214,210,151,199,206,6,131,211,133,212,250,137,121,23,104,104,60,58,150,51]",
              "sol": "abi.encode(\"54,5,43,141,89,9,214,210,151,199,206,6,131,211,133,212,250,137,121,23,104,104,60,58,150,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[44,239,95,55,104,78,117,72,84,154,101,185,223,150,179,171,111,25,55,74,41,212,228,220,170,13,238,118,173,249,244,76]",
              "sol": "stringToBytes32(\"44,239,95,55,104,78,117,72,84,154,101,185,223,150,179,171,111,25,55,74,41,212,228,220,170,13,238,118,173,249,244,76\")"
            },
            {
              "js": "[110,192,87,158,227,54,193,0,253,249,154,4,113,170,79,251,173,242,96,8,49,81,254,196,245,121,210,16,29,77,101,82,153,46,215,166,199,188,180,227,190,239,203,220,75,49,111,35,84,219,239,52,89,35,97,140,16,23,25,231,227,186,139,141,151]",
              "sol": "abi.encode(\"110,192,87,158,227,54,193,0,253,249,154,4,113,170,79,251,173,242,96,8,49,81,254,196,245,121,210,16,29,77,101,82,153,46,215,166,199,188,180,227,190,239,203,220,75,49,111,35,84,219,239,52,89,35,97,140,16,23,25,231,227,186,139,141,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T21:39:55.741ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[143,195,243,175,251,21,221,235,89,218,100,41,255,229,2,226,244,94,131,76,44,211,17,144,239,193,172,215,81,198,241,214]",
              "sol": "stringToBytes32(\"143,195,243,175,251,21,221,235,89,218,100,41,255,229,2,226,244,94,131,76,44,211,17,144,239,193,172,215,81,198,241,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T21:39:55.742ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[45,116,216,26,247,77,149,80,198,76,7,167,14,241,113,195,117,212,23,185,88,238,160,203,11,165,109,128,186,131,237,121]",
              "sol": "stringToBytes32(\"45,116,216,26,247,77,149,80,198,76,7,167,14,241,113,195,117,212,23,185,88,238,160,203,11,165,109,128,186,131,237,121\")"
            },
            {
              "js": "[189,253,112,251,221,225,47,48,187,58,116,114,149,3,185,101,170,62,156,38,52,3,30,29,207,62,95,22,142,181,220,208]",
              "sol": "abi.encode(\"189,253,112,251,221,225,47,48,187,58,116,114,149,3,185,101,170,62,156,38,52,3,30,29,207,62,95,22,142,181,220,208\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T21:39:55.742ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 100,\"bidder\": {\"userId\": 322,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(100,SignatureVerifier.Identity(322,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T21:39:55.743ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T21:39:55.743ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 27,\"bidder\": {\"userId\": 324,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(27,SignatureVerifier.Identity(324,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[191,62,0,150,15,35,169,194,92,172,221,91,103,145,193,236,96,72,237,98,213,222,163,218,226,121,78,82,113,80,147,171]",
              "sol": "abi.encode(\"191,62,0,150,15,35,169,194,92,172,221,91,103,145,193,236,96,72,237,98,213,222,163,218,226,121,78,82,113,80,147,171\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T21:39:55.744ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 0,\"bidder\": {\"userId\": 66,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(0,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[233,243,190,104,104,219,160,179,127,60,223,81,140,120,70,105,221,222,196,108,194,60,240,80,38,97,204,92,189,14,248,253]",
              "sol": "abi.encode(\"233,243,190,104,104,219,160,179,127,60,223,81,140,120,70,105,221,222,196,108,194,60,240,80,38,97,204,92,189,14,248,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}