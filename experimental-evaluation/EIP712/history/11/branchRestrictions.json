,{
  "2020-11-11T02:40:28.878ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[237,231,127,142,107,43,131,148,69,225,40,4,178,85,5,160,12,14,90,224,21,82,190,135,201,215,144,65,252,244,122,161]",
              "sol": "stringToBytes32(\"237,231,127,142,107,43,131,148,69,225,40,4,178,85,5,160,12,14,90,224,21,82,190,135,201,215,144,65,252,244,122,161\")"
            },
            {
              "js": "[111,22,120,81,252,169,35,24,251,103,19,102,187,244,80,137,115,41,115,227,142,29,55,119,151,209,134,206,27,208,136,148,46,99,147,77,168,24,221,179,100,218,52,111,197,242,116,251,7,128,114,3,191,29,222,119,93,113,161,158,50,70,164,200]",
              "sol": "abi.encode(\"111,22,120,81,252,169,35,24,251,103,19,102,187,244,80,137,115,41,115,227,142,29,55,119,151,209,134,206,27,208,136,148,46,99,147,77,168,24,221,179,100,218,52,111,197,242,116,251,7,128,114,3,191,29,222,119,93,113,161,158,50,70,164,200\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[170,231,27,4,143,166,161,227,94,37,46,191,22,207,100,233,212,10,120,111,213,207,55,145,142,159,238,134,207,38,241,121]",
              "sol": "stringToBytes32(\"170,231,27,4,143,166,161,227,94,37,46,191,22,207,100,233,212,10,120,111,213,207,55,145,142,159,238,134,207,38,241,121\")"
            },
            {
              "js": "[230,114,105,167,135,124,107,234,104,3,167,138,215,144,118,69,134,32,114,26,63,237,64,254,216,227,193,103,43,75,244,173,181,128,139,24,194,235,212,249,212,137,195,132,53,16,153,71,17,70,174,96,62,100,168,187,136,125,206,206,46,160,69,144,242]",
              "sol": "abi.encode(\"230,114,105,167,135,124,107,234,104,3,167,138,215,144,118,69,134,32,114,26,63,237,64,254,216,227,193,103,43,75,244,173,181,128,139,24,194,235,212,249,212,137,195,132,53,16,153,71,17,70,174,96,62,100,168,187,136,125,206,206,46,160,69,144,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:40:28.879ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[128,221,40,22,75,80,48,210,42,40,204,36,79,1,220,38,119,100,207,200,100,243,251,30,66,127,204,118,213,92,87,110]",
              "sol": "stringToBytes32(\"128,221,40,22,75,80,48,210,42,40,204,36,79,1,220,38,119,100,207,200,100,243,251,30,66,127,204,118,213,92,87,110\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:40:28.879ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[96,34,244,112,86,184,73,210,220,243,194,127,149,241,82,155,158,229,163,9,55,204,241,174,184,29,6,239,194,88,189,23]",
              "sol": "stringToBytes32(\"96,34,244,112,86,184,73,210,220,243,194,127,149,241,82,155,158,229,163,9,55,204,241,174,184,29,6,239,194,88,189,23\")"
            },
            {
              "js": "[89,138,11,152,192,144,240,160,243,16,194,102,166,22,233,103,9,150,160,42,129,137,172,191,34,114,150,132,4,10,7,54]",
              "sol": "abi.encode(\"89,138,11,152,192,144,240,160,243,16,194,102,166,22,233,103,9,150,160,42,129,137,172,191,34,114,150,132,4,10,7,54\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:40:28.880ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 322,\"bidder\": {\"userId\": 27,\"wallet\": accounts[0]}}",
              "sol": "SignatureVerifier.Bid(322,SignatureVerifier.Identity(27,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:40:28.881ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:40:28.881ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 0,\"bidder\": {\"userId\": 322,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(0,SignatureVerifier.Identity(322,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[179,239,14,87,151,56,67,45,168,117,149,221,170,6,125,47,32,98,74,168,57,53,170,114,77,223,123,73,75,83,165,93]",
              "sol": "abi.encode(\"179,239,14,87,151,56,67,45,168,117,149,221,170,6,125,47,32,98,74,168,57,53,170,114,77,223,123,73,75,83,165,93\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:40:28.882ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 66,\"bidder\": {\"userId\": 64,\"wallet\": accounts[7]}}",
              "sol": "SignatureVerifier.Bid(66,SignatureVerifier.Identity(64,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[182,139,117,103,67,228,28,91,233,168,195,181,190,126,100,73,74,86,119,29,68,77,21,90,251,145,21,71,117,32,12,169]",
              "sol": "abi.encode(\"182,139,117,103,67,228,28,91,233,168,195,181,190,126,100,73,74,86,119,29,68,77,21,90,251,145,21,71,117,32,12,169\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}