,{
  "2020-11-10T21:56:19.392ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[191,130,233,92,165,213,63,170,32,249,166,147,223,95,30,6,101,61,73,188,184,253,121,165,83,10,0,32,182,110,246,69]",
              "sol": "stringToBytes32(\"191,130,233,92,165,213,63,170,32,249,166,147,223,95,30,6,101,61,73,188,184,253,121,165,83,10,0,32,182,110,246,69\")"
            },
            {
              "js": "[39,189,191,52,246,233,124,186,129,246,172,55,38,247,203,230,55,19,178,100,216,57,33,65,146,229,121,106,102,194,225,140,27,138,169,196,28,233,115,123,243,216,36,194,145,188,198,225,232,76,65,214,181,122,82,62,239,155,129,167,221,124,155,98,232,222]",
              "sol": "abi.encode(\"39,189,191,52,246,233,124,186,129,246,172,55,38,247,203,230,55,19,178,100,216,57,33,65,146,229,121,106,102,194,225,140,27,138,169,196,28,233,115,123,243,216,36,194,145,188,198,225,232,76,65,214,181,122,82,62,239,155,129,167,221,124,155,98,232,222\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[69,77,163,108,112,201,165,148,199,237,64,117,9,169,182,47,62,90,44,97,232,45,248,61,99,55,201,120,245,225,238,123]",
              "sol": "stringToBytes32(\"69,77,163,108,112,201,165,148,199,237,64,117,9,169,182,47,62,90,44,97,232,45,248,61,99,55,201,120,245,225,238,123\")"
            },
            {
              "js": "[117,236,138,84,209,250,40,197,162,91,14,99,192,27,50,250,61,74,233,199,199,231,191,240,25,157,11,92,184,157,209,101,169,23,17,43,31,109,221,84,46,6,10,91,96,220,185,134,129,44,54,78,58,251,183,122,23,115,198,138,51,75,130,58,249]",
              "sol": "abi.encode(\"117,236,138,84,209,250,40,197,162,91,14,99,192,27,50,250,61,74,233,199,199,231,191,240,25,157,11,92,184,157,209,101,169,23,17,43,31,109,221,84,46,6,10,91,96,220,185,134,129,44,54,78,58,251,183,122,23,115,198,138,51,75,130,58,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:56:19.393ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[74,128,252,118,209,162,230,63,244,244,104,59,231,138,41,97,13,92,64,143,59,254,129,150,68,230,143,93,43,181,155,2]",
              "sol": "stringToBytes32(\"74,128,252,118,209,162,230,63,244,244,104,59,231,138,41,97,13,92,64,143,59,254,129,150,68,230,143,93,43,181,155,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:56:19.393ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[39,198,191,158,207,165,244,19,3,120,139,40,33,91,170,229,72,43,186,117,0,52,126,0,232,109,252,231,97,76,14,111]",
              "sol": "stringToBytes32(\"39,198,191,158,207,165,244,19,3,120,139,40,33,91,170,229,72,43,186,117,0,52,126,0,232,109,252,231,97,76,14,111\")"
            },
            {
              "js": "[171,2,26,173,118,12,38,158,199,122,145,28,138,194,62,225,134,212,142,63,34,132,153,7,236,247,115,117,94,138,90,171]",
              "sol": "abi.encode(\"171,2,26,173,118,12,38,158,199,122,145,28,138,194,62,225,134,212,142,63,34,132,153,7,236,247,115,117,94,138,90,171\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:56:19.394ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 100,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(100,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:56:19.395ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:56:19.395ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 1,\"bidder\": {\"userId\": 65,\"wallet\": accounts[6]}}",
              "sol": "SignatureVerifier.Bid(1,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[136,0,11,33,222,254,82,93,132,54,15,59,217,114,30,233,149,44,248,152,95,108,240,229,203,188,67,156,220,81,92,86]",
              "sol": "abi.encode(\"136,0,11,33,222,254,82,93,132,54,15,59,217,114,30,233,149,44,248,152,95,108,240,229,203,188,67,156,220,81,92,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:56:19.395ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 29,\"bidder\": {\"userId\": 2,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(29,SignatureVerifier.Identity(2,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[133,89,229,149,173,229,29,112,190,80,229,1,23,139,227,80,54,199,171,157,115,132,224,146,239,120,112,52,137,222,251,124]",
              "sol": "abi.encode(\"133,89,229,149,173,229,29,112,190,80,229,1,23,139,227,80,54,199,171,157,115,132,224,146,239,120,112,52,137,222,251,124\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}