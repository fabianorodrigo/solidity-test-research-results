,{
  "2020-11-12T23:18:40.974ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[39,135,11,111,136,82,198,110,205,231,153,193,174,131,94,23,248,36,196,241,129,71,11,1,3,190,114,29,15,194,211,144]",
              "sol": "stringToBytes32(\"39,135,11,111,136,82,198,110,205,231,153,193,174,131,94,23,248,36,196,241,129,71,11,1,3,190,114,29,15,194,211,144\")"
            },
            {
              "js": "[241,93,73,89,209,63,141,200,61,157,197,133,207,93,209,162,233,99,237,96,151,104,132,51,190,83,121,14,222,237,145,151,170,109,16,202,224,181,21,131,130,154,201,23,5,114,78,142,206,191,30,4,84,190,66,191,159,87,48,171,3,73,52,150,72,242,243,46,199,139,143,167,253,54,164,228,96,106,204,110,51,194,209,243,93,142,175,60,128,11,163,139,244,100,210,58,95,144,140,236,89]",
              "sol": "abi.encode(\"241,93,73,89,209,63,141,200,61,157,197,133,207,93,209,162,233,99,237,96,151,104,132,51,190,83,121,14,222,237,145,151,170,109,16,202,224,181,21,131,130,154,201,23,5,114,78,142,206,191,30,4,84,190,66,191,159,87,48,171,3,73,52,150,72,242,243,46,199,139,143,167,253,54,164,228,96,106,204,110,51,194,209,243,93,142,175,60,128,11,163,139,244,100,210,58,95,144,140,236,89\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[146,202,42,202,234,192,30,125,190,17,223,5,211,130,26,211,191,196,72,233,141,203,159,175,141,97,197,128,187,38,220,86]",
              "sol": "stringToBytes32(\"146,202,42,202,234,192,30,125,190,17,223,5,211,130,26,211,191,196,72,233,141,203,159,175,141,97,197,128,187,38,220,86\")"
            },
            {
              "js": "[86,89,25,49,184,69,220,64,137,138,183,20,56,56,102,188,198,21,152,118,41,212,214,185,32,202,209,16,9,228,73,148,134,236,41,145,174,232,179,54,237,22,235,235,61,17,203,134,67,254,122,159,48,81,227,14,82,38,182,23,75,17,13,210,67]",
              "sol": "abi.encode(\"86,89,25,49,184,69,220,64,137,138,183,20,56,56,102,188,198,21,152,118,41,212,214,185,32,202,209,16,9,228,73,148,134,236,41,145,174,232,179,54,237,22,235,235,61,17,203,134,67,254,122,159,48,81,227,14,82,38,182,23,75,17,13,210,67\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:18:40.977ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[158,73,171,119,101,208,53,130,120,84,20,57,75,106,11,121,51,30,28,38,180,211,98,0,39,228,1,217,191,121,164,57]",
              "sol": "stringToBytes32(\"158,73,171,119,101,208,53,130,120,84,20,57,75,106,11,121,51,30,28,38,180,211,98,0,39,228,1,217,191,121,164,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:18:40.978ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[195,155,88,0,226,85,134,117,27,61,237,181,106,246,21,183,52,140,236,133,94,229,47,53,166,168,9,76,179,116,71,62]",
              "sol": "stringToBytes32(\"195,155,88,0,226,85,134,117,27,61,237,181,106,246,21,183,52,140,236,133,94,229,47,53,166,168,9,76,179,116,71,62\")"
            },
            {
              "js": "[165,137,215,181,132,185,80,213,53,43,145,192,167,12,185,60,194,67,100,4,12,92,96,34,72,217,175,65,100,14,204,76]",
              "sol": "abi.encode(\"165,137,215,181,132,185,80,213,53,43,145,192,167,12,185,60,194,67,100,4,12,92,96,34,72,217,175,65,100,14,204,76\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:18:40.979ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 322,\"bidder\": {\"userId\": 26,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(322,SignatureVerifier.Identity(26,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:18:40.979ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:18:40.979ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 28,\"bidder\": {\"userId\": 66,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(28,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[97,244,100,64,113,57,232,243,225,60,60,122,226,46,6,227,180,171,92,158,218,188,184,108,135,252,156,41,185,172,127,189]",
              "sol": "abi.encode(\"97,244,100,64,113,57,232,243,225,60,60,122,226,46,6,227,180,171,92,158,218,188,184,108,135,252,156,41,185,172,127,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:18:40.980ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 65,\"wallet\": accounts[7]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[223,190,47,95,41,182,59,186,96,144,168,220,88,122,55,234,149,218,238,234,13,116,0,83,118,229,3,157,229,9,54,0]",
              "sol": "abi.encode(\"223,190,47,95,41,182,59,186,96,144,168,220,88,122,55,234,149,218,238,234,13,116,0,83,118,229,3,157,229,9,54,0\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}