,{
  "2020-11-11T00:18:37.569ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[81,83,52,217,101,115,253,150,175,47,56,83,237,188,40,189,87,29,143,190,202,36,221,2,171,107,175,246,136,14,32,181]",
              "sol": "stringToBytes32(\"81,83,52,217,101,115,253,150,175,47,56,83,237,188,40,189,87,29,143,190,202,36,221,2,171,107,175,246,136,14,32,181\")"
            },
            {
              "js": "[94,27,144,40,141,200,116,176,181,169,41,233,244,133,113,237,172,54,20,0,24,33,113,118,252,194,241,30,138]",
              "sol": "abi.encode(\"94,27,144,40,141,200,116,176,181,169,41,233,244,133,113,237,172,54,20,0,24,33,113,118,252,194,241,30,138\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[137,62,106,101,75,150,199,98,168,136,126,176,64,109,245,193,190,2,149,1,251,128,47,211,3,22,206,131,142,42,113,80]",
              "sol": "stringToBytes32(\"137,62,106,101,75,150,199,98,168,136,126,176,64,109,245,193,190,2,149,1,251,128,47,211,3,22,206,131,142,42,113,80\")"
            },
            {
              "js": "[208,122,8,108,11,214,110,69,149,85,252,69,27,72,228,22,116,132,78,211,251,189,90,77,166,179,245,221,219,29,200,94,24,10,159,71,36,236,248,10,227,126,144,37,30,97,109,233,33,174,47,69,32,3,32,198,195,223,69,132,145,1,150,62,10]",
              "sol": "abi.encode(\"208,122,8,108,11,214,110,69,149,85,252,69,27,72,228,22,116,132,78,211,251,189,90,77,166,179,245,221,219,29,200,94,24,10,159,71,36,236,248,10,227,126,144,37,30,97,109,233,33,174,47,69,32,3,32,198,195,223,69,132,145,1,150,62,10\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:18:37.570ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[27,103,208,21,140,150,63,122,217,241,134,31,80,170,115,143,159,147,245,240,141,195,254,20,77,102,31,205,83,215,40,239]",
              "sol": "stringToBytes32(\"27,103,208,21,140,150,63,122,217,241,134,31,80,170,115,143,159,147,245,240,141,195,254,20,77,102,31,205,83,215,40,239\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:18:37.571ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[253,213,100,110,88,168,108,169,234,112,241,178,250,225,27,182,130,144,228,64,23,234,198,115,196,125,38,103,188,16,233,54]",
              "sol": "stringToBytes32(\"253,213,100,110,88,168,108,169,234,112,241,178,250,225,27,182,130,144,228,64,23,234,198,115,196,125,38,103,188,16,233,54\")"
            },
            {
              "js": "[198,56,242,247,98,34,3,112,125,42,30,73,86,247,48,126,55,118,236,7,105,15,173,138,171,70,149,139,104,50,33,159]",
              "sol": "abi.encode(\"198,56,242,247,98,34,3,112,125,42,30,73,86,247,48,126,55,118,236,7,105,15,173,138,171,70,149,139,104,50,33,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:18:37.572ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 26,\"bidder\": {\"userId\": 65,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(26,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:18:37.572ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:18:37.572ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 28,\"bidder\": {\"userId\": 26,\"wallet\": accounts[4]}}",
              "sol": "SignatureVerifier.Bid(28,SignatureVerifier.Identity(26,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[36,26,16,44,227,100,49,42,183,221,34,209,24,16,119,239,187,182,107,46,152,88,251,99,221,201,253,209,48,149,113,8]",
              "sol": "abi.encode(\"36,26,16,44,227,100,49,42,183,221,34,209,24,16,119,239,187,182,107,46,152,88,251,99,221,201,253,209,48,149,113,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:18:37.573ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 66,\"bidder\": {\"userId\": 99,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(66,SignatureVerifier.Identity(99,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[106,166,62,229,189,164,191,186,120,47,238,131,124,80,37,142,103,142,32,120,53,117,86,236,238,122,128,208,121,82,18,152]",
              "sol": "abi.encode(\"106,166,62,229,189,164,191,186,120,47,238,131,124,80,37,142,103,142,32,120,53,117,86,236,238,122,128,208,121,82,18,152\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}