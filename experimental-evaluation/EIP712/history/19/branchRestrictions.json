,{
  "2020-11-12T00:08:39.472ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[40,6,61,115,134,251,119,89,190,250,185,136,122,4,38,236,126,186,214,199,123,243,16,255,171,72,76,39,111,176,67,213]",
              "sol": "stringToBytes32(\"40,6,61,115,134,251,119,89,190,250,185,136,122,4,38,236,126,186,214,199,123,243,16,255,171,72,76,39,111,176,67,213\")"
            },
            {
              "js": "[253,156,136,15,176,179,22,146,19,179,38,217,131,130,239,223,204,218,157,32,124,21,27,231,150,230,20]",
              "sol": "abi.encode(\"253,156,136,15,176,179,22,146,19,179,38,217,131,130,239,223,204,218,157,32,124,21,27,231,150,230,20\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[16,235,3,198,211,96,183,176,201,204,152,223,192,248,193,180,40,179,152,184,17,220,100,123,89,104,199,108,3,109,165,111]",
              "sol": "stringToBytes32(\"16,235,3,198,211,96,183,176,201,204,152,223,192,248,193,180,40,179,152,184,17,220,100,123,89,104,199,108,3,109,165,111\")"
            },
            {
              "js": "[226,150,247,202,197,89,242,19,219,19,127,194,174,165,78,209,213,180,74,169,18,127,151,54,173,175,127,240,100,17,9,180,47,14,254,101,66,216,155,23,86,157,108,121,63,236,202,194,105,187,134,207,182,178,56,119,81,244,147,121,170,1,29,161,61]",
              "sol": "abi.encode(\"226,150,247,202,197,89,242,19,219,19,127,194,174,165,78,209,213,180,74,169,18,127,151,54,173,175,127,240,100,17,9,180,47,14,254,101,66,216,155,23,86,157,108,121,63,236,202,194,105,187,134,207,182,178,56,119,81,244,147,121,170,1,29,161,61\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:08:39.474ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[73,73,20,250,146,206,201,197,138,176,152,78,69,72,59,183,215,96,27,184,27,45,121,122,236,225,215,138,70,127,180,185]",
              "sol": "stringToBytes32(\"73,73,20,250,146,206,201,197,138,176,152,78,69,72,59,183,215,96,27,184,27,45,121,122,236,225,215,138,70,127,180,185\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:08:39.475ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[32,186,151,174,164,124,65,61,111,19,198,193,224,214,207,56,249,183,196,153,108,197,164,5,245,160,162,188,193,129,60,108]",
              "sol": "stringToBytes32(\"32,186,151,174,164,124,65,61,111,19,198,193,224,214,207,56,249,183,196,153,108,197,164,5,245,160,162,188,193,129,60,108\")"
            },
            {
              "js": "[171,144,72,253,219,45,249,115,126,211,110,116,143,51,95,156,153,110,124,147,80,66,250,139,87,186,47,126,140,96,206,160]",
              "sol": "abi.encode(\"171,144,72,253,219,45,249,115,126,211,110,116,143,51,95,156,153,110,124,147,80,66,250,139,87,186,47,126,140,96,206,160\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:08:39.476ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 26,\"wallet\": accounts[6]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(26,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:08:39.477ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:08:39.477ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 323,\"bidder\": {\"userId\": 64,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(323,SignatureVerifier.Identity(64,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[81,83,115,32,160,193,30,38,227,189,84,110,72,59,46,190,192,25,141,236,249,135,49,27,38,190,211,226,234,138,110,253]",
              "sol": "abi.encode(\"81,83,115,32,160,193,30,38,227,189,84,110,72,59,46,190,192,25,141,236,249,135,49,27,38,190,211,226,234,138,110,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:08:39.478ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 1,\"bidder\": {\"userId\": 1,\"wallet\": accounts[2]}}",
              "sol": "SignatureVerifier.Bid(1,SignatureVerifier.Identity(1,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[255,180,233,217,213,127,29,14,105,221,213,34,240,26,25,1,244,9,100,208,65,38,157,115,81,245,46,222,48,176,253,231]",
              "sol": "abi.encode(\"255,180,233,217,213,127,29,14,105,221,213,34,240,26,25,1,244,9,100,208,65,38,157,115,81,245,46,222,48,176,253,231\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}