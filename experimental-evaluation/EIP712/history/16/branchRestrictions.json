,{
  "2020-11-11T17:37:52.038ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[104,47,60,19,158,25,173,147,139,123,60,7,23,91,194,209,77,181,7,135,102,5,157,112,14,166,178,159,41,226,215,215]",
              "sol": "stringToBytes32(\"104,47,60,19,158,25,173,147,139,123,60,7,23,91,194,209,77,181,7,135,102,5,157,112,14,166,178,159,41,226,215,215\")"
            },
            {
              "js": "[87,228,70,100,158,211,5,246,160,124,179,131,58,48,233,45,12,134,129,17,251,238,135,164,23,244,110,81,235,98,88,209,90,221,27,254,169,206,174,61,25,202,43,242,241,194,182,250,114,181,180,128,221,66,221,33,166,134,82,119,165,141,120,38,135,67,3,55,243,45,60,58,148,5,152,218,65,154,2,41,133,175,95,30,154,116,12,18,42,33,198,213,0,227,187,116,4,65,230,48]",
              "sol": "abi.encode(\"87,228,70,100,158,211,5,246,160,124,179,131,58,48,233,45,12,134,129,17,251,238,135,164,23,244,110,81,235,98,88,209,90,221,27,254,169,206,174,61,25,202,43,242,241,194,182,250,114,181,180,128,221,66,221,33,166,134,82,119,165,141,120,38,135,67,3,55,243,45,60,58,148,5,152,218,65,154,2,41,133,175,95,30,154,116,12,18,42,33,198,213,0,227,187,116,4,65,230,48\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[186,254,232,131,109,53,154,36,185,23,157,158,249,234,45,235,19,254,96,111,151,33,153,234,218,145,159,212,83,59,91,65]",
              "sol": "stringToBytes32(\"186,254,232,131,109,53,154,36,185,23,157,158,249,234,45,235,19,254,96,111,151,33,153,234,218,145,159,212,83,59,91,65\")"
            },
            {
              "js": "[131,28,204,185,17,236,179,248,136,235,215,194,170,193,226,241,248,203,250,18,253,76,94,118,149,58,2,253,154,51,97,175,212,208,48,7,14,121,69,37,239,197,248,128,11,13,91,27,196,247,137,42,126,60,221,249,85,207,192,79,1,193,7,234,224]",
              "sol": "abi.encode(\"131,28,204,185,17,236,179,248,136,235,215,194,170,193,226,241,248,203,250,18,253,76,94,118,149,58,2,253,154,51,97,175,212,208,48,7,14,121,69,37,239,197,248,128,11,13,91,27,196,247,137,42,126,60,221,249,85,207,192,79,1,193,7,234,224\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:37:52.040ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[145,128,118,45,167,202,92,138,141,172,13,16,147,70,225,140,2,13,104,200,208,186,198,136,104,206,117,64,109,192,90,128]",
              "sol": "stringToBytes32(\"145,128,118,45,167,202,92,138,141,172,13,16,147,70,225,140,2,13,104,200,208,186,198,136,104,206,117,64,109,192,90,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:37:52.040ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[248,43,204,1,63,244,108,232,204,80,41,43,224,156,243,127,121,53,165,106,245,236,215,115,101,9,21,103,166,249,172,255]",
              "sol": "stringToBytes32(\"248,43,204,1,63,244,108,232,204,80,41,43,224,156,243,127,121,53,165,106,245,236,215,115,101,9,21,103,166,249,172,255\")"
            },
            {
              "js": "[140,230,140,10,174,116,76,2,65,69,12,224,1,182,61,34,147,158,175,186,170,112,231,223,2,170,58,111,209,158,131,199]",
              "sol": "abi.encode(\"140,230,140,10,174,116,76,2,65,69,12,224,1,182,61,34,147,158,175,186,170,112,231,223,2,170,58,111,209,158,131,199\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:37:52.041ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 66,\"bidder\": {\"userId\": 324,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(66,SignatureVerifier.Identity(324,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:37:52.041ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:37:52.042ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 322,\"bidder\": {\"userId\": 323,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(322,SignatureVerifier.Identity(323,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[71,16,159,109,197,7,132,149,121,240,253,72,204,138,197,86,43,131,180,34,238,40,64,96,128,184,245,34,160,58,186,200]",
              "sol": "abi.encode(\"71,16,159,109,197,7,132,149,121,240,253,72,204,138,197,86,43,131,180,34,238,40,64,96,128,184,245,34,160,58,186,200\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:37:52.042ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 100,\"bidder\": {\"userId\": 29,\"wallet\": accounts[2]}}",
              "sol": "SignatureVerifier.Bid(100,SignatureVerifier.Identity(29,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[39,190,13,81,76,176,111,158,171,65,132,199,57,103,156,184,80,60,251,87,136,39,86,143,236,212,76,121,68,63,73,91]",
              "sol": "abi.encode(\"39,190,13,81,76,176,111,158,171,65,132,199,57,103,156,184,80,60,251,87,136,39,86,143,236,212,76,121,68,63,73,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}