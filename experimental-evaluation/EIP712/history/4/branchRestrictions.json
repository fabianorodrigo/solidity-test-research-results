,{
  "2020-11-10T11:08:38.567ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[28,93,167,104,113,91,164,1,21,143,11,139,183,45,199,250,228,212,210,151,21,72,233,102,152,94,19,123,87,196,23,101]",
              "sol": "stringToBytes32(\"28,93,167,104,113,91,164,1,21,143,11,139,183,45,199,250,228,212,210,151,21,72,233,102,152,94,19,123,87,196,23,101\")"
            },
            {
              "js": "[135,110,131,112,19,244,117,151,160,114,138,166,236,253,133,112,112,160,213,213,193,188,226,245,59,245,164]",
              "sol": "abi.encode(\"135,110,131,112,19,244,117,151,160,114,138,166,236,253,133,112,112,160,213,213,193,188,226,245,59,245,164\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[30,187,247,157,127,9,2,123,119,249,53,183,211,209,46,230,241,175,212,99,65,152,6,128,38,31,49,192,224,25,117,53]",
              "sol": "stringToBytes32(\"30,187,247,157,127,9,2,123,119,249,53,183,211,209,46,230,241,175,212,99,65,152,6,128,38,31,49,192,224,25,117,53\")"
            },
            {
              "js": "[0,206,114,65,220,43,25,190,126,181,209,153,55,174,10,220,98,208,232,95,242,117,137,239,53,162,34,221,149,9,209,124,137,18,191,236,235,164,250,102,164,23,118,80,93,237,119,149,164,246,209,215,97,140,44,105,83,45,142,118,99,241,128,66,145]",
              "sol": "abi.encode(\"0,206,114,65,220,43,25,190,126,181,209,153,55,174,10,220,98,208,232,95,242,117,137,239,53,162,34,221,149,9,209,124,137,18,191,236,235,164,250,102,164,23,118,80,93,237,119,149,164,246,209,215,97,140,44,105,83,45,142,118,99,241,128,66,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:08:38.568ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[226,78,80,210,140,250,54,152,209,124,173,99,243,209,82,160,41,83,225,181,170,116,224,69,64,15,79,135,237,105,65,106]",
              "sol": "stringToBytes32(\"226,78,80,210,140,250,54,152,209,124,173,99,243,209,82,160,41,83,225,181,170,116,224,69,64,15,79,135,237,105,65,106\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:08:38.568ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[44,47,1,146,213,182,120,178,43,169,151,110,241,7,173,91,36,67,26,247,134,142,205,138,38,202,248,233,146,87,78,200]",
              "sol": "stringToBytes32(\"44,47,1,146,213,182,120,178,43,169,151,110,241,7,173,91,36,67,26,247,134,142,205,138,38,202,248,233,146,87,78,200\")"
            },
            {
              "js": "[129,35,23,174,39,254,126,145,106,1,223,161,237,240,206,11,41,116,162,95,236,106,199,9,192,191,199,51,153,94,202,86]",
              "sol": "abi.encode(\"129,35,23,174,39,254,126,145,106,1,223,161,237,240,206,11,41,116,162,95,236,106,199,9,192,191,199,51,153,94,202,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:08:38.569ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 65,\"bidder\": {\"userId\": 322,\"wallet\": accounts[1]}}",
              "sol": "SignatureVerifier.Bid(65,SignatureVerifier.Identity(322,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:08:38.569ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:08:38.570ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 66,\"bidder\": {\"userId\": 26,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(66,SignatureVerifier.Identity(26,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[103,216,228,180,244,160,71,167,31,41,138,235,14,213,34,163,117,97,124,53,149,71,201,41,150,99,157,81,108,159,238,188]",
              "sol": "abi.encode(\"103,216,228,180,244,160,71,167,31,41,138,235,14,213,34,163,117,97,124,53,149,71,201,41,150,99,157,81,108,159,238,188\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:08:38.570ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 99,\"bidder\": {\"userId\": 323,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(99,SignatureVerifier.Identity(323,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[74,147,247,249,228,197,88,211,244,211,84,201,227,193,126,121,198,116,26,93,23,19,42,106,87,78,124,228,109,171,25,127]",
              "sol": "abi.encode(\"74,147,247,249,228,197,88,211,244,211,84,201,227,193,126,121,198,116,26,93,23,19,42,106,87,78,124,228,109,171,25,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}