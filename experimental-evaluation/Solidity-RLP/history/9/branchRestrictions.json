,{
  "2020-11-10T22:02:05.931ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[219,132,250,151,229,231,79,154,20,97,188,252,144,206,229,19,21,83,93,110,69,230,81,80,72,66,253,238,195,127,57,196]",
              "sol": "abi.encode(\"219,132,250,151,229,231,79,154,20,97,188,252,144,206,229,19,21,83,93,110,69,230,81,80,72,66,253,238,195,127,57,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.932ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(31,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.932ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(0,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.933ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(0,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.933ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(0,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(34,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.934ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(34,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.934ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 33}",
              "sol": "RLPReader.RLPItem(1,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 33}",
                "sol": "RLPReader.RLPItem(2,33)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:02:05.935ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(21,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 0}",
                "sol": "RLPReader.RLPItem(22,0)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:02:05.935ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(21,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 21}",
                "sol": "RLPReader.RLPItem(0,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 21}",
                "sol": "RLPReader.RLPItem(34,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:02:05.936ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(33,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 20}",
                "sol": "RLPReader.RLPItem(34,20)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:02:05.937ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 2,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(2,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 256}",
                "sol": "RLPReader.RLPItem(0,256)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:02:05.937ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[61,190,109,187,71,6,82,76,233,180,193,158,65,208,22,192,5,176,241,128,21,13,228,162,163,255,72,123,68,236,110,204]",
              "sol": "abi.encode(\"61,190,109,187,71,6,82,76,233,180,193,158,65,208,22,192,5,176,241,128,21,13,228,162,163,255,72,123,68,236,110,204\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.938ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[168,105,204,119,46,136,230,248,115,215,156,200,118,29,214,143,91,84,38,236,37,9,64,61,199,160,219,40,116,105,248,132]",
              "sol": "abi.encode(\"168,105,204,119,46,136,230,248,115,215,156,200,118,29,214,143,91,84,38,236,37,9,64,61,199,160,219,40,116,105,248,132\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.938ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[46,210,251,165,106,211,102,246,54,159,98,197,61,59,51,14,220,33,130,52,35,51,185,6,8,227,171,106,129,12,213,145]",
              "sol": "abi.encode(\"46,210,251,165,106,211,102,246,54,159,98,197,61,59,51,14,220,33,130,52,35,51,185,6,8,227,171,106,129,12,213,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.938ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[174,67,91,173,3,33,19,27,163,71,235,248,16,28,233,217,124,193,133,58,133,10,176,137,218,94,171,52,243,56,78,22]",
              "sol": "abi.encode(\"174,67,91,173,3,33,19,27,163,71,235,248,16,28,233,217,124,193,133,58,133,10,176,137,218,94,171,52,243,56,78,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.939ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[183,125,31,88,210,217,188,232,220,132,165,238,229,37,40,56,25,223,211,213,198,185,74,41,19,216,114,235,133,87,64,209]",
              "sol": "abi.encode(\"183,125,31,88,210,217,188,232,220,132,165,238,229,37,40,56,25,223,211,213,198,185,74,41,19,216,114,235,133,87,64,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.939ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[38,14,34,213,169,111,108,58,116,23,53,146,73,18,81,73,122,177,206,63,202,66,87,108,239,22,217,171,186,146,140,249]",
              "sol": "abi.encode(\"38,14,34,213,169,111,108,58,116,23,53,146,73,18,81,73,122,177,206,63,202,66,87,108,239,22,217,171,186,146,140,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.939ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[250,38,1,30,94,176,28,179,115,35,104,223,217,162,28,234,234,68,64,184,222,135,67,34,122,42,42,236,202,159,139,253]",
              "sol": "abi.encode(\"250,38,1,30,94,176,28,179,115,35,104,223,217,162,28,234,234,68,64,184,222,135,67,34,122,42,42,236,202,159,139,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.939ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[227,114,0,55,151,20,168,93,211,193,111,89,5,70,5,211,211,229,74,6,84,89,7,195,92,71,207,225,139,129,169,225]",
              "sol": "abi.encode(\"227,114,0,55,151,20,168,93,211,193,111,89,5,70,5,211,211,229,74,6,84,89,7,195,92,71,207,225,139,129,169,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.940ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[235,251,124,224,146,24,111,94,166,158,254,23,14,223,3,248,94,80,43,152,53,191,56,149,108,169,192,239,255,109,148,242]",
              "sol": "abi.encode(\"235,251,124,224,146,24,111,94,166,158,254,23,14,223,3,248,94,80,43,152,53,191,56,149,108,169,192,239,255,109,148,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.940ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[207,138,38,86,229,225,0,36,219,253,236,169,218,54,245,32,114,87,57,176,211,25,35,20,4,13,0,140,80,195,69,55]",
              "sol": "abi.encode(\"207,138,38,86,229,225,0,36,219,253,236,169,218,54,245,32,114,87,57,176,211,25,35,20,4,13,0,140,80,195,69,55\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.940ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[106,87,228,122,106,45,126,61,219,185,119,107,211,240,238,135,5,16,192,213,174,175,56,95,48,222,230,246,82,77,245,142]",
              "sol": "abi.encode(\"106,87,228,122,106,45,126,61,219,185,119,107,211,240,238,135,5,16,192,213,174,175,56,95,48,222,230,246,82,77,245,142\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.941ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[198,162,123,189,226,29,166,199,112,160,123,152,236,74,50,81,116,0,101,179,6,206,218,44,206,143,47,63,79,27,183,17]",
              "sol": "abi.encode(\"198,162,123,189,226,29,166,199,112,160,123,152,236,74,50,81,116,0,101,179,6,206,218,44,206,143,47,63,79,27,183,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.941ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[12,25,84,52,29,68,224,32,112,20,153,193,7,58,252,58,208,86,202,27,29,4,173,255,144,212,104,175,210,123,123,174]",
              "sol": "abi.encode(\"12,25,84,52,29,68,224,32,112,20,153,193,7,58,252,58,208,86,202,27,29,4,173,255,144,212,104,175,210,123,123,174\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.941ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[154,151,233,154,14,226,237,79,55,176,95,124,118,76,150,226,175,255,55,135,74,214,136,200,253,114,194,202,91,16,91,202]",
              "sol": "abi.encode(\"154,151,233,154,14,226,237,79,55,176,95,124,118,76,150,226,175,255,55,135,74,214,136,200,253,114,194,202,91,16,91,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:02:05.942ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[121,170,172,87,123,185,105,113,119,206,173,104,121,56,107,52,229,34,40,86,107,64,185,75,57,82,131,232,198,173,109,18]",
              "sol": "abi.encode(\"121,170,172,87,123,185,105,113,119,206,173,104,121,56,107,52,229,34,40,86,107,64,185,75,57,82,131,232,198,173,109,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}