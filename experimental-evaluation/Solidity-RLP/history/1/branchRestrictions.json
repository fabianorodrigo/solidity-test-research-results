,{
  "2020-11-10T04:22:55.955ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[119,195,202,50,19,66,53,20,174,228,130,18,59,13,189,16,139,123,23,107,140,161,230,81,38,244,116,148,166,20,114,40]",
              "sol": "abi.encode(\"119,195,202,50,19,66,53,20,174,228,130,18,59,13,189,16,139,123,23,107,140,161,230,81,38,244,116,148,166,20,114,40\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.955ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(32,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.956ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(22,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.956ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(20,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.957ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(0,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(33,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.957ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(0,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.958ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(1,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 22}",
                "sol": "RLPReader.RLPItem(2,22)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:22:55.958ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(21,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 2}",
                "sol": "RLPReader.RLPItem(22,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:22:55.959ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(31,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 21}",
                "sol": "RLPReader.RLPItem(0,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 21}",
                "sol": "RLPReader.RLPItem(34,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:22:55.959ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(33,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 255}",
                "sol": "RLPReader.RLPItem(34,255)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:22:55.960ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 256,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(256,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 0}",
                "sol": "RLPReader.RLPItem(0,0)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:22:55.961ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[217,203,134,232,147,94,119,212,94,250,181,200,163,59,64,100,214,215,236,121,13,2,64,58,122,183,154,170,136,204,197,0]",
              "sol": "abi.encode(\"217,203,134,232,147,94,119,212,94,250,181,200,163,59,64,100,214,215,236,121,13,2,64,58,122,183,154,170,136,204,197,0\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.961ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[187,137,83,49,102,62,119,250,68,214,17,34,83,110,212,247,8,97,216,192,40,181,82,85,159,9,241,254,80,74,83,140]",
              "sol": "abi.encode(\"187,137,83,49,102,62,119,250,68,214,17,34,83,110,212,247,8,97,216,192,40,181,82,85,159,9,241,254,80,74,83,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.962ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[162,157,155,169,36,206,160,240,6,168,151,230,140,241,228,178,109,14,211,251,85,187,70,227,223,199,169,72,244,71,133,143]",
              "sol": "abi.encode(\"162,157,155,169,36,206,160,240,6,168,151,230,140,241,228,178,109,14,211,251,85,187,70,227,223,199,169,72,244,71,133,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.962ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[96,40,127,105,16,174,145,238,93,28,56,167,78,2,14,73,249,107,172,222,253,136,7,26,197,133,150,8,73,172,244,199]",
              "sol": "abi.encode(\"96,40,127,105,16,174,145,238,93,28,56,167,78,2,14,73,249,107,172,222,253,136,7,26,197,133,150,8,73,172,244,199\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.962ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[38,41,16,27,10,63,196,42,168,102,183,4,124,226,104,132,205,1,228,123,65,86,142,150,72,178,41,171,177,166,205,119]",
              "sol": "abi.encode(\"38,41,16,27,10,63,196,42,168,102,183,4,124,226,104,132,205,1,228,123,65,86,142,150,72,178,41,171,177,166,205,119\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.963ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[43,236,36,9,248,87,151,180,178,82,94,3,21,69,21,216,36,176,158,139,121,227,89,113,203,242,9,198,82,124,95,128]",
              "sol": "abi.encode(\"43,236,36,9,248,87,151,180,178,82,94,3,21,69,21,216,36,176,158,139,121,227,89,113,203,242,9,198,82,124,95,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.963ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[180,245,54,118,143,38,101,98,205,42,213,4,45,179,197,27,27,68,169,62,107,97,168,223,198,114,174,5,130,197,89,33]",
              "sol": "abi.encode(\"180,245,54,118,143,38,101,98,205,42,213,4,45,179,197,27,27,68,169,62,107,97,168,223,198,114,174,5,130,197,89,33\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.963ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[69,14,148,136,142,219,35,39,181,82,229,40,248,94,187,40,113,18,241,67,34,165,108,107,118,90,167,168,113,58,123,76]",
              "sol": "abi.encode(\"69,14,148,136,142,219,35,39,181,82,229,40,248,94,187,40,113,18,241,67,34,165,108,107,118,90,167,168,113,58,123,76\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.964ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[180,182,77,34,50,69,118,135,53,169,58,201,65,56,238,6,84,55,29,19,17,40,111,49,235,6,177,167,239,174,108,6]",
              "sol": "abi.encode(\"180,182,77,34,50,69,118,135,53,169,58,201,65,56,238,6,84,55,29,19,17,40,111,49,235,6,177,167,239,174,108,6\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.964ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[201,190,132,249,138,7,111,179,31,225,222,60,23,30,127,139,251,139,144,143,125,115,12,164,90,221,228,109,71,68,70,66]",
              "sol": "abi.encode(\"201,190,132,249,138,7,111,179,31,225,222,60,23,30,127,139,251,139,144,143,125,115,12,164,90,221,228,109,71,68,70,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.964ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[57,191,231,25,71,217,156,87,143,205,100,114,21,86,86,160,124,25,16,24,100,253,94,106,117,112,41,26,103,149,59,181]",
              "sol": "abi.encode(\"57,191,231,25,71,217,156,87,143,205,100,114,21,86,86,160,124,25,16,24,100,253,94,106,117,112,41,26,103,149,59,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.965ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[138,209,44,222,216,195,159,159,133,70,113,203,23,180,102,159,167,134,4,112,127,126,157,111,7,179,222,207,205,94,243,130]",
              "sol": "abi.encode(\"138,209,44,222,216,195,159,159,133,70,113,203,23,180,102,159,167,134,4,112,127,126,157,111,7,179,222,207,205,94,243,130\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.965ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[215,45,101,151,205,52,83,121,143,44,123,61,88,223,138,165,75,49,71,155,153,110,102,93,214,0,117,183,37,37,156,215]",
              "sol": "abi.encode(\"215,45,101,151,205,52,83,121,143,44,123,61,88,223,138,165,75,49,71,155,153,110,102,93,214,0,117,183,37,37,156,215\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.965ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[33,95,200,139,86,194,114,137,39,218,60,218,213,68,207,148,200,191,146,138,138,152,64,78,92,161,179,161,42,200,44,182]",
              "sol": "abi.encode(\"33,95,200,139,86,194,114,137,39,218,60,218,213,68,207,148,200,191,146,138,138,152,64,78,92,161,179,161,42,200,44,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:22:55.965ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[54,219,94,143,93,32,92,208,226,138,230,171,251,162,115,147,136,197,22,73,212,73,30,178,198,188,159,100,104,146,252,148]",
              "sol": "abi.encode(\"54,219,94,143,93,32,92,208,226,138,230,171,251,162,115,147,136,197,22,73,212,73,30,178,198,188,159,100,104,146,252,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}