,{
  "2020-11-12T13:36:09.427ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[11,87,137,170,70,178,37,223,153,174,112,168,201,221,194,96,101,139,41,188,166,96,127,248,133,15,100,111,250,141,167,125]",
              "sol": "abi.encode(\"11,87,137,170,70,178,37,223,153,174,112,168,201,221,194,96,101,139,41,188,166,96,127,248,133,15,100,111,250,141,167,125\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.428ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(20,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.428ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(22,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.428ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(22,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.429ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(0,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(34,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.430ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 34}",
              "sol": "RLPReader.RLPItem(1,34)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.430ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 33}",
              "sol": "RLPReader.RLPItem(1,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 33}",
                "sol": "RLPReader.RLPItem(2,33)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T13:36:09.431ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(21,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 20}",
                "sol": "RLPReader.RLPItem(22,20)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T13:36:09.431ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(22,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 2}",
                "sol": "RLPReader.RLPItem(0,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 2}",
                "sol": "RLPReader.RLPItem(34,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T13:36:09.432ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 1}",
              "sol": "RLPReader.RLPItem(33,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 1}",
                "sol": "RLPReader.RLPItem(34,1)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T13:36:09.432ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(22,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 32}",
                "sol": "RLPReader.RLPItem(0,32)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T13:36:09.433ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[178,98,17,241,4,214,49,229,177,203,241,4,123,229,162,89,41,143,26,32,182,227,231,148,237,80,4,12,65,91,38,158]",
              "sol": "abi.encode(\"178,98,17,241,4,214,49,229,177,203,241,4,123,229,162,89,41,143,26,32,182,227,231,148,237,80,4,12,65,91,38,158\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.433ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[131,11,252,190,109,52,179,30,255,224,47,109,140,250,101,11,45,130,214,82,178,30,37,174,109,248,62,156,193,34,113,148]",
              "sol": "abi.encode(\"131,11,252,190,109,52,179,30,255,224,47,109,140,250,101,11,45,130,214,82,178,30,37,174,109,248,62,156,193,34,113,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.434ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[22,198,35,219,41,192,73,146,205,40,113,112,5,187,202,60,241,133,255,142,166,152,191,66,151,55,147,83,78,190,11,14]",
              "sol": "abi.encode(\"22,198,35,219,41,192,73,146,205,40,113,112,5,187,202,60,241,133,255,142,166,152,191,66,151,55,147,83,78,190,11,14\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.434ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[230,241,109,132,122,133,79,118,35,241,124,216,48,219,141,199,103,67,147,138,111,85,95,128,87,193,20,9,143,215,50,47]",
              "sol": "abi.encode(\"230,241,109,132,122,133,79,118,35,241,124,216,48,219,141,199,103,67,147,138,111,85,95,128,87,193,20,9,143,215,50,47\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.434ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[186,149,115,34,90,136,230,70,211,65,43,194,58,90,76,196,18,41,120,101,12,196,166,141,89,33,141,54,214,243,35,221]",
              "sol": "abi.encode(\"186,149,115,34,90,136,230,70,211,65,43,194,58,90,76,196,18,41,120,101,12,196,166,141,89,33,141,54,214,243,35,221\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.435ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[122,204,0,123,133,62,44,242,156,248,15,50,95,60,129,57,248,12,45,231,6,162,178,167,66,182,40,182,97,197,68,250]",
              "sol": "abi.encode(\"122,204,0,123,133,62,44,242,156,248,15,50,95,60,129,57,248,12,45,231,6,162,178,167,66,182,40,182,97,197,68,250\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.435ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[95,27,229,147,37,13,55,166,203,213,187,169,228,208,175,226,2,62,63,12,142,24,171,169,221,192,26,117,228,157,44,218]",
              "sol": "abi.encode(\"95,27,229,147,37,13,55,166,203,213,187,169,228,208,175,226,2,62,63,12,142,24,171,169,221,192,26,117,228,157,44,218\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.435ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[184,69,225,244,225,124,169,61,208,221,138,130,9,156,121,224,196,30,51,12,180,81,47,155,33,55,102,16,221,82,29,36]",
              "sol": "abi.encode(\"184,69,225,244,225,124,169,61,208,221,138,130,9,156,121,224,196,30,51,12,180,81,47,155,33,55,102,16,221,82,29,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.435ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[215,48,42,150,102,153,77,229,143,215,52,62,192,159,95,167,126,10,86,205,180,226,232,194,218,251,111,44,82,29,32,19]",
              "sol": "abi.encode(\"215,48,42,150,102,153,77,229,143,215,52,62,192,159,95,167,126,10,86,205,180,226,232,194,218,251,111,44,82,29,32,19\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.436ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[53,15,44,141,53,100,14,92,74,199,176,35,171,125,34,14,34,41,46,18,66,155,7,250,196,229,3,168,166,65,27,3]",
              "sol": "abi.encode(\"53,15,44,141,53,100,14,92,74,199,176,35,171,125,34,14,34,41,46,18,66,155,7,250,196,229,3,168,166,65,27,3\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.436ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[115,193,84,29,174,154,28,53,236,163,55,128,143,35,251,236,186,97,16,114,147,91,218,116,225,16,39,20,218,252,20,35]",
              "sol": "abi.encode(\"115,193,84,29,174,154,28,53,236,163,55,128,143,35,251,236,186,97,16,114,147,91,218,116,225,16,39,20,218,252,20,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.436ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[21,213,152,214,240,188,156,147,195,143,167,13,180,240,130,99,213,37,223,225,173,91,214,199,128,71,29,239,247,245,219,127]",
              "sol": "abi.encode(\"21,213,152,214,240,188,156,147,195,143,167,13,180,240,130,99,213,37,223,225,173,91,214,199,128,71,29,239,247,245,219,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.436ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[5,191,108,164,208,234,115,109,192,127,219,156,116,195,133,81,196,6,252,95,163,87,84,33,179,81,78,8,51,170,237,163]",
              "sol": "abi.encode(\"5,191,108,164,208,234,115,109,192,127,219,156,116,195,133,81,196,6,252,95,163,87,84,33,179,81,78,8,51,170,237,163\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.437ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[90,184,110,216,172,238,134,80,218,186,64,252,97,202,250,23,157,31,149,148,134,158,134,246,7,163,160,121,50,90,222,121]",
              "sol": "abi.encode(\"90,184,110,216,172,238,134,80,218,186,64,252,97,202,250,23,157,31,149,148,134,158,134,246,7,163,160,121,50,90,222,121\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T13:36:09.437ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[57,139,120,188,85,178,32,234,216,246,208,178,102,114,88,209,243,143,45,9,220,34,188,33,135,194,188,226,192,123,103,204]",
              "sol": "abi.encode(\"57,139,120,188,85,178,32,234,216,246,208,178,102,114,88,209,243,143,45,9,220,34,188,33,135,194,188,226,192,123,103,204\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}