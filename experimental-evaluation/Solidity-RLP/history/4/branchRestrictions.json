,{
  "2020-11-10T11:14:04.005ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[37,181,160,181,149,88,146,102,25,125,180,62,172,86,48,205,10,232,8,32,167,202,66,146,198,170,128,197,124,120,185,161]",
              "sol": "abi.encode(\"37,181,160,181,149,88,146,102,25,125,180,62,172,86,48,205,10,232,8,32,167,202,66,146,198,170,128,197,124,120,185,161\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.006ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(32,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.006ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(21,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.006ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(33,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.007ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(0,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(31,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.007ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 255,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(255,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.008ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 257}",
              "sol": "RLPReader.RLPItem(1,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 257}",
                "sol": "RLPReader.RLPItem(2,257)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:14:04.008ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(21,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 0}",
                "sol": "RLPReader.RLPItem(22,0)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:14:04.009ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(20,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 2}",
                "sol": "RLPReader.RLPItem(0,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 2}",
                "sol": "RLPReader.RLPItem(34,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:14:04.009ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 1}",
              "sol": "RLPReader.RLPItem(33,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 1}",
                "sol": "RLPReader.RLPItem(34,1)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:14:04.010ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(3,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 2}",
                "sol": "RLPReader.RLPItem(0,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:14:04.011ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[165,145,226,77,69,36,175,56,171,158,236,77,27,82,58,23,50,158,240,25,79,41,140,158,209,227,81,197,45,0,211,129]",
              "sol": "abi.encode(\"165,145,226,77,69,36,175,56,171,158,236,77,27,82,58,23,50,158,240,25,79,41,140,158,209,227,81,197,45,0,211,129\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.011ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[35,188,116,139,250,240,24,168,246,135,91,127,139,114,201,189,192,149,44,223,134,211,32,79,224,103,9,94,114,112,163,186]",
              "sol": "abi.encode(\"35,188,116,139,250,240,24,168,246,135,91,127,139,114,201,189,192,149,44,223,134,211,32,79,224,103,9,94,114,112,163,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.011ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[99,179,233,249,92,134,170,218,236,192,245,225,106,1,213,156,233,213,88,222,180,156,180,95,121,127,104,105,164,88,244,88]",
              "sol": "abi.encode(\"99,179,233,249,92,134,170,218,236,192,245,225,106,1,213,156,233,213,88,222,180,156,180,95,121,127,104,105,164,88,244,88\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.012ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[243,255,252,109,187,97,172,162,178,105,204,154,125,234,133,117,195,164,165,104,2,140,121,154,236,241,224,251,207,189,131,150]",
              "sol": "abi.encode(\"243,255,252,109,187,97,172,162,178,105,204,154,125,234,133,117,195,164,165,104,2,140,121,154,236,241,224,251,207,189,131,150\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.012ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[157,49,90,178,156,244,56,51,51,204,237,173,106,40,103,76,4,165,171,182,152,195,189,80,17,41,162,120,156,221,189,25]",
              "sol": "abi.encode(\"157,49,90,178,156,244,56,51,51,204,237,173,106,40,103,76,4,165,171,182,152,195,189,80,17,41,162,120,156,221,189,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.012ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[80,106,1,125,88,21,48,110,21,194,149,201,62,124,50,196,166,169,161,241,109,71,235,137,79,41,170,61,69,67,125,108]",
              "sol": "abi.encode(\"80,106,1,125,88,21,48,110,21,194,149,201,62,124,50,196,166,169,161,241,109,71,235,137,79,41,170,61,69,67,125,108\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.012ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[140,230,86,82,101,220,121,35,5,139,222,74,15,18,8,218,53,196,204,26,0,178,59,59,110,29,149,22,160,110,231,214]",
              "sol": "abi.encode(\"140,230,86,82,101,220,121,35,5,139,222,74,15,18,8,218,53,196,204,26,0,178,59,59,110,29,149,22,160,110,231,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.013ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[153,34,70,237,227,92,81,100,166,213,98,104,63,238,83,99,224,121,47,36,120,222,164,146,16,90,96,211,134,229,116,139]",
              "sol": "abi.encode(\"153,34,70,237,227,92,81,100,166,213,98,104,63,238,83,99,224,121,47,36,120,222,164,146,16,90,96,211,134,229,116,139\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.013ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[252,230,207,189,180,247,29,40,83,53,236,251,106,147,26,40,96,194,209,24,251,51,115,82,131,128,103,95,80,222,56,125]",
              "sol": "abi.encode(\"252,230,207,189,180,247,29,40,83,53,236,251,106,147,26,40,96,194,209,24,251,51,115,82,131,128,103,95,80,222,56,125\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.013ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[113,51,197,61,219,111,75,185,173,201,147,101,239,55,138,210,240,84,196,165,19,232,102,163,211,206,220,182,166,70,187,58]",
              "sol": "abi.encode(\"113,51,197,61,219,111,75,185,173,201,147,101,239,55,138,210,240,84,196,165,19,232,102,163,211,206,220,182,166,70,187,58\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.015ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[71,125,200,50,172,89,73,226,16,238,238,13,43,221,209,45,46,57,190,136,28,20,248,243,106,83,145,94,199,181,216,230]",
              "sol": "abi.encode(\"71,125,200,50,172,89,73,226,16,238,238,13,43,221,209,45,46,57,190,136,28,20,248,243,106,83,145,94,199,181,216,230\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.016ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[23,185,8,178,103,135,226,196,154,210,152,66,191,115,117,2,189,118,126,192,119,153,29,25,35,77,60,84,237,22,159,131]",
              "sol": "abi.encode(\"23,185,8,178,103,135,226,196,154,210,152,66,191,115,117,2,189,118,126,192,119,153,29,25,35,77,60,84,237,22,159,131\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.016ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[156,47,127,90,199,140,3,24,243,119,154,248,2,189,86,195,126,200,35,104,196,138,141,155,96,106,58,82,249,11,220,14]",
              "sol": "abi.encode(\"156,47,127,90,199,140,3,24,243,119,154,248,2,189,86,195,126,200,35,104,196,138,141,155,96,106,58,82,249,11,220,14\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.017ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[217,135,135,245,210,40,210,63,223,186,86,161,145,40,100,148,205,245,226,181,80,207,56,21,185,117,178,149,96,74,122,35]",
              "sol": "abi.encode(\"217,135,135,245,210,40,210,63,223,186,86,161,145,40,100,148,205,245,226,181,80,207,56,21,185,117,178,149,96,74,122,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:14:04.017ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[226,57,210,243,71,182,226,32,74,243,141,221,201,102,250,221,186,192,23,74,217,221,91,124,190,212,174,24,207,169,211,36]",
              "sol": "abi.encode(\"226,57,210,243,71,182,226,32,74,243,141,221,201,102,250,221,186,192,23,74,217,221,91,124,190,212,174,24,207,169,211,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}