,{
  "2020-11-10T06:39:34.564ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[41,159,119,147,146,55,12,152,100,182,30,68,216,112,101,32,71,39,50,10,4,83,29,255,55,176,216,39,27,71,14,127]",
              "sol": "abi.encode(\"41,159,119,147,146,55,12,152,100,182,30,68,216,112,101,32,71,39,50,10,4,83,29,255,55,176,216,39,27,71,14,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.565ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 2,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(2,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.565ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 33}",
              "sol": "RLPReader.RLPItem(31,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.565ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 255,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(255,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.566ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(0,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(32,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.567ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.567ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(1,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 255}",
                "sol": "RLPReader.RLPItem(2,255)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:39:34.568ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(21,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 21}",
                "sol": "RLPReader.RLPItem(22,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:39:34.568ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 2,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(2,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 2}",
                "sol": "RLPReader.RLPItem(0,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 2}",
                "sol": "RLPReader.RLPItem(34,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:39:34.569ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(33,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 20}",
                "sol": "RLPReader.RLPItem(34,20)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:39:34.569ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(22,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 22}",
                "sol": "RLPReader.RLPItem(0,22)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:39:34.570ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[143,90,160,25,16,26,174,27,110,94,223,65,235,87,28,205,159,7,220,213,41,75,245,34,10,159,68,40,224,243,222,176]",
              "sol": "abi.encode(\"143,90,160,25,16,26,174,27,110,94,223,65,235,87,28,205,159,7,220,213,41,75,245,34,10,159,68,40,224,243,222,176\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.571ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[7,12,124,84,250,233,25,151,159,62,70,196,185,137,9,5,235,93,251,108,100,134,115,106,132,41,79,159,46,208,213,105]",
              "sol": "abi.encode(\"7,12,124,84,250,233,25,151,159,62,70,196,185,137,9,5,235,93,251,108,100,134,115,106,132,41,79,159,46,208,213,105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.572ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[148,208,68,218,190,147,61,6,236,113,145,70,9,12,7,171,154,199,237,224,58,31,222,164,13,43,39,61,126,70,195,250]",
              "sol": "abi.encode(\"148,208,68,218,190,147,61,6,236,113,145,70,9,12,7,171,154,199,237,224,58,31,222,164,13,43,39,61,126,70,195,250\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.572ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[183,96,118,28,125,110,181,115,163,65,160,227,151,164,170,187,208,61,255,10,246,240,251,141,199,191,149,11,105,144,6,62]",
              "sol": "abi.encode(\"183,96,118,28,125,110,181,115,163,65,160,227,151,164,170,187,208,61,255,10,246,240,251,141,199,191,149,11,105,144,6,62\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.573ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[191,180,196,238,204,14,175,5,58,111,50,49,248,126,250,41,253,146,33,12,164,131,90,41,112,75,121,136,204,151,26,36]",
              "sol": "abi.encode(\"191,180,196,238,204,14,175,5,58,111,50,49,248,126,250,41,253,146,33,12,164,131,90,41,112,75,121,136,204,151,26,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.573ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[110,47,251,23,154,89,21,137,203,226,78,131,161,32,2,201,86,246,146,76,182,134,71,79,52,193,21,121,207,180,54,20]",
              "sol": "abi.encode(\"110,47,251,23,154,89,21,137,203,226,78,131,161,32,2,201,86,246,146,76,182,134,71,79,52,193,21,121,207,180,54,20\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.574ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[165,26,69,220,208,196,123,106,209,98,106,135,66,58,134,134,47,160,134,84,219,91,21,252,125,237,253,249,228,16,134,41]",
              "sol": "abi.encode(\"165,26,69,220,208,196,123,106,209,98,106,135,66,58,134,134,47,160,134,84,219,91,21,252,125,237,253,249,228,16,134,41\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.574ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[248,52,72,182,199,192,240,133,59,224,82,33,90,246,18,165,95,87,5,36,111,224,250,28,173,114,141,13,1,122,143,81]",
              "sol": "abi.encode(\"248,52,72,182,199,192,240,133,59,224,82,33,90,246,18,165,95,87,5,36,111,224,250,28,173,114,141,13,1,122,143,81\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.575ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[242,209,142,235,201,176,80,160,181,204,47,81,234,100,1,240,149,97,219,34,1,161,41,24,124,81,153,55,187,30,243,240]",
              "sol": "abi.encode(\"242,209,142,235,201,176,80,160,181,204,47,81,234,100,1,240,149,97,219,34,1,161,41,24,124,81,153,55,187,30,243,240\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.575ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[121,207,199,171,200,178,54,121,140,161,131,157,140,64,123,48,28,80,246,75,250,150,74,25,6,119,128,34,94,141,28,201]",
              "sol": "abi.encode(\"121,207,199,171,200,178,54,121,140,161,131,157,140,64,123,48,28,80,246,75,250,150,74,25,6,119,128,34,94,141,28,201\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.576ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[20,194,13,248,26,166,160,204,216,74,98,167,38,53,28,1,146,135,102,220,53,65,199,18,232,6,242,222,115,180,249,72]",
              "sol": "abi.encode(\"20,194,13,248,26,166,160,204,216,74,98,167,38,53,28,1,146,135,102,220,53,65,199,18,232,6,242,222,115,180,249,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.576ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[129,161,10,127,116,159,191,46,176,106,18,145,216,107,76,218,147,127,90,173,235,225,169,253,80,142,129,7,65,170,58,9]",
              "sol": "abi.encode(\"129,161,10,127,116,159,191,46,176,106,18,145,216,107,76,218,147,127,90,173,235,225,169,253,80,142,129,7,65,170,58,9\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.577ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[230,127,186,52,212,142,201,8,176,139,246,223,52,30,74,232,175,14,214,152,213,25,101,105,123,228,236,132,98,35,85,139]",
              "sol": "abi.encode(\"230,127,186,52,212,142,201,8,176,139,246,223,52,30,74,232,175,14,214,152,213,25,101,105,123,228,236,132,98,35,85,139\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.577ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[147,75,89,16,150,196,7,113,207,150,212,22,131,226,75,171,150,252,195,66,3,170,156,10,109,197,242,34,191,89,194,18]",
              "sol": "abi.encode(\"147,75,89,16,150,196,7,113,207,150,212,22,131,226,75,171,150,252,195,66,3,170,156,10,109,197,242,34,191,89,194,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:39:34.577ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[80,190,121,123,240,191,206,92,156,152,42,171,162,27,182,7,94,208,197,225,218,106,13,40,241,222,250,38,142,97,210,73]",
              "sol": "abi.encode(\"80,190,121,123,240,191,206,92,156,152,42,171,162,27,182,7,94,208,197,225,218,106,13,40,241,222,250,38,142,97,210,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}