,{
  "2020-11-11T15:46:45.835ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[150,160,88,62,233,206,250,199,27,69,164,10,240,101,166,89,110,176,185,218,172,31,146,108,177,48,28,102,247,137,250,226]",
              "sol": "abi.encode(\"150,160,88,62,233,206,250,199,27,69,164,10,240,101,166,89,110,176,185,218,172,31,146,108,177,48,28,102,247,137,250,226\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.836ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(32,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.837ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(31,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.837ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 255,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(255,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.837ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(0,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 257,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(257,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.838ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 256,\"memPtr\": 33}",
              "sol": "RLPReader.RLPItem(256,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.839ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(1,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 0}",
                "sol": "RLPReader.RLPItem(2,0)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:46:45.839ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 257}",
              "sol": "RLPReader.RLPItem(21,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 257}",
                "sol": "RLPReader.RLPItem(22,257)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:46:45.840ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(32,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 3}",
                "sol": "RLPReader.RLPItem(0,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 3}",
                "sol": "RLPReader.RLPItem(34,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:46:45.840ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(33,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 21}",
                "sol": "RLPReader.RLPItem(34,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:46:45.841ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 255,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(255,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 31}",
                "sol": "RLPReader.RLPItem(0,31)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:46:45.842ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[137,123,137,182,239,234,161,146,62,149,248,97,4,92,201,66,54,177,230,157,175,0,127,106,62,5,155,246,144,0,171,205]",
              "sol": "abi.encode(\"137,123,137,182,239,234,161,146,62,149,248,97,4,92,201,66,54,177,230,157,175,0,127,106,62,5,155,246,144,0,171,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.842ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[104,81,60,189,177,53,26,128,159,56,118,205,185,73,81,35,88,155,45,236,149,210,28,239,99,130,122,136,212,78,21,215]",
              "sol": "abi.encode(\"104,81,60,189,177,53,26,128,159,56,118,205,185,73,81,35,88,155,45,236,149,210,28,239,99,130,122,136,212,78,21,215\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.842ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[180,52,61,166,14,225,46,173,39,155,17,97,189,252,47,4,58,246,51,185,157,233,98,87,205,5,183,193,117,3,146,167]",
              "sol": "abi.encode(\"180,52,61,166,14,225,46,173,39,155,17,97,189,252,47,4,58,246,51,185,157,233,98,87,205,5,183,193,117,3,146,167\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.843ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[61,171,22,222,213,234,70,51,201,119,164,36,158,83,183,6,124,204,186,137,201,18,141,95,237,217,205,66,42,248,162,135]",
              "sol": "abi.encode(\"61,171,22,222,213,234,70,51,201,119,164,36,158,83,183,6,124,204,186,137,201,18,141,95,237,217,205,66,42,248,162,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.843ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[203,119,189,13,76,222,80,220,99,41,231,26,252,136,204,100,109,142,25,8,49,146,234,74,29,74,48,209,243,150,167,27]",
              "sol": "abi.encode(\"203,119,189,13,76,222,80,220,99,41,231,26,252,136,204,100,109,142,25,8,49,146,234,74,29,74,48,209,243,150,167,27\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.843ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[114,162,211,23,232,224,197,179,185,140,131,157,53,110,195,49,211,15,75,113,117,68,55,62,78,61,211,115,236,118,165,219]",
              "sol": "abi.encode(\"114,162,211,23,232,224,197,179,185,140,131,157,53,110,195,49,211,15,75,113,117,68,55,62,78,61,211,115,236,118,165,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.844ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[242,214,7,11,135,84,134,133,141,136,201,103,109,66,246,169,95,13,193,222,142,134,224,210,143,240,209,92,226,52,87,127]",
              "sol": "abi.encode(\"242,214,7,11,135,84,134,133,141,136,201,103,109,66,246,169,95,13,193,222,142,134,224,210,143,240,209,92,226,52,87,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.844ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[250,187,12,103,211,9,73,133,55,169,137,126,71,68,8,218,32,111,68,187,180,91,227,64,7,174,106,246,70,42,29,123]",
              "sol": "abi.encode(\"250,187,12,103,211,9,73,133,55,169,137,126,71,68,8,218,32,111,68,187,180,91,227,64,7,174,106,246,70,42,29,123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.844ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[185,68,68,120,140,224,105,162,247,42,71,127,170,131,86,20,105,105,83,165,84,88,199,155,73,253,41,242,160,80,171,206]",
              "sol": "abi.encode(\"185,68,68,120,140,224,105,162,247,42,71,127,170,131,86,20,105,105,83,165,84,88,199,155,73,253,41,242,160,80,171,206\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.845ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[30,69,125,93,106,174,89,219,119,49,168,134,169,232,88,126,14,70,98,248,208,255,159,65,65,46,247,61,5,35,33,22]",
              "sol": "abi.encode(\"30,69,125,93,106,174,89,219,119,49,168,134,169,232,88,126,14,70,98,248,208,255,159,65,65,46,247,61,5,35,33,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.845ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[36,222,197,106,144,191,68,130,186,182,176,63,199,14,255,209,138,9,213,203,181,253,133,199,109,110,156,203,93,1,144,134]",
              "sol": "abi.encode(\"36,222,197,106,144,191,68,130,186,182,176,63,199,14,255,209,138,9,213,203,181,253,133,199,109,110,156,203,93,1,144,134\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.845ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[241,206,152,200,196,85,102,126,238,133,61,95,250,11,112,49,213,230,138,52,134,216,97,17,135,0,237,52,38,130,104,80]",
              "sol": "abi.encode(\"241,206,152,200,196,85,102,126,238,133,61,95,250,11,112,49,213,230,138,52,134,216,97,17,135,0,237,52,38,130,104,80\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.846ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[223,203,75,84,128,254,163,255,200,153,27,9,76,141,158,28,233,3,24,147,240,159,96,181,38,139,243,178,217,61,246,59]",
              "sol": "abi.encode(\"223,203,75,84,128,254,163,255,200,153,27,9,76,141,158,28,233,3,24,147,240,159,96,181,38,139,243,178,217,61,246,59\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.846ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[231,86,126,16,46,91,86,64,252,173,232,81,17,145,106,97,235,186,8,73,56,99,72,165,28,53,166,209,252,137,194,101]",
              "sol": "abi.encode(\"231,86,126,16,46,91,86,64,252,173,232,81,17,145,106,97,235,186,8,73,56,99,72,165,28,53,166,209,252,137,194,101\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:46:45.846ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[75,178,208,221,0,177,129,72,196,27,78,99,113,182,59,85,63,117,130,138,252,182,8,53,187,243,248,151,232,160,236,80]",
              "sol": "abi.encode(\"75,178,208,221,0,177,129,72,196,27,78,99,113,182,59,85,63,117,130,138,252,182,8,53,187,243,248,151,232,160,236,80\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}