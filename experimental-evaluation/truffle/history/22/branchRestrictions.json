,{
  "2020-11-12T10:37:42.347ZMerkleShip.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.831ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "15-17",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "181",
              "sol": "181"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.832ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256) WHEN b>0",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiv(uint256,uint256) when NOT comply with: b > 0",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.832ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "180",
              "sol": "180"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "180",
                "sol": "180"
              },
              {
                "js": 181,
                "sol": 181
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.833ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.833ZProxySafeMath.testmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmod(uint256,uint256) WHEN b!=0",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmod(uint256,uint256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "48",
                "sol": "48"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.834ZMerkleShip.emergencyStop": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute emergencyStop(string) WHEN msg.sender==admin,isStopped==false",
          "parameters": [
            {
              "js": "\"verified victory by hit count\"",
              "sol": "\"verified victory by hit count\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail emergencyStop(string) when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "\"verified victory by hit count\"",
                "sol": "\"verified victory by hit count\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.835ZMerkleShip.proposeGame": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute proposeGame(uint96,bytes32) WHEN isStopped==false,msg.value==_wager",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[42,221,226,189,126,100,186,24,203,185,110,155,191,104,248,222,104,2,31,73,220,190,20,96,197,28,212,65,233,233,179,176]",
              "sol": "stringToBytes32(\"42,221,226,189,126,100,186,24,203,185,110,155,191,104,248,222,104,2,31,73,220,190,20,96,197,28,212,65,233,233,179,176\")"
            },
            {
              "js": "{from:accounts[0],value:11}",
              "sol": "{\"from\":\"0x0\",\"value\":\"11\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail proposeGame(uint96,bytes32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[42,221,226,189,126,100,186,24,203,185,110,155,191,104,248,222,104,2,31,73,220,190,20,96,197,28,212,65,233,233,179,176]",
                "sol": "stringToBytes32(\"42,221,226,189,126,100,186,24,203,185,110,155,191,104,248,222,104,2,31,73,220,190,20,96,197,28,212,65,233,233,179,176\")"
              },
              {
                "js": "{from:accounts[0],value:11}",
                "sol": "{\"from\":\"0x0\",\"value\":\"11\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail proposeGame(uint96,bytes32) when NOT comply with: msg.value == _wager",
            "parameters": [
              {
                "js": 12,
                "sol": 12
              },
              {
                "js": "[42,221,226,189,126,100,186,24,203,185,110,155,191,104,248,222,104,2,31,73,220,190,20,96,197,28,212,65,233,233,179,176]",
                "sol": "stringToBytes32(\"42,221,226,189,126,100,186,24,203,185,110,155,191,104,248,222,104,2,31,73,220,190,20,96,197,28,212,65,233,233,179,176\")"
              },
              {
                "js": "{from:accounts[0],value:11}",
                "sol": "{\"from\":\"0x0\",\"value\":\"11\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.837ZMerkleShip.acceptGame": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute acceptGame(uint32,bytes32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "179",
              "sol": "179"
            },
            {
              "js": "[185,116,1,27,55,115,12,55,242,202,165,205,33,189,162,162,191,79,224,64,124,182,207,67,103,57,138,98,0,219,136,25]",
              "sol": "stringToBytes32(\"185,116,1,27,55,115,12,55,242,202,165,205,33,189,162,162,191,79,224,64,124,182,207,67,103,57,138,98,0,219,136,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail acceptGame(uint32,bytes32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "179",
                "sol": "179"
              },
              {
                "js": "[185,116,1,27,55,115,12,55,242,202,165,205,33,189,162,162,191,79,224,64,124,182,207,67,103,57,138,98,0,219,136,25]",
                "sol": "stringToBytes32(\"185,116,1,27,55,115,12,55,242,202,165,205,33,189,162,162,191,79,224,64,124,182,207,67,103,57,138,98,0,219,136,25\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.838ZMerkleShip.cancelProposedGame": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute cancelProposedGame(uint32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail cancelProposedGame(uint32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.839ZMerkleShip.guessAndReveal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute guessAndReveal(uint32,uint8[2],bytes32[6],string,string) WHEN isStopped==false",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[4,3]",
              "sol": "[uint8(4),uint8(3)]"
            },
            {
              "js": "[[216,131,56,96,167,123,75,137,175,56,26,140,162,253,65,141,223,70,145,223,228,165,255,189,6,73,214,88,136,120,64,135],[32,35,88,104,239,239,101,76,202,140,192,96,47,78,67,200,255,68,195,94,234,106,206,118,166,54,108,191,199,4,163,81],[198,126,231,83,217,33,128,231,15,118,56,131,100,89,178,116,224,165,183,85,27,18,173,136,177,169,35,10,0,134,2,146],[195,219,191,155,235,103,224,35,13,15,44,245,192,163,89,119,1,240,79,30,67,82,230,131,83,241,201,209,220,95,139,30],[191,186,115,227,124,213,169,115,104,103,94,171,33,190,187,28,140,122,151,180,81,82,119,62,58,183,254,199,47,37,183,102],[88,14,166,229,173,71,94,39,133,151,112,94,184,55,62,65,140,19,253,87,215,194,198,130,214,105,124,126,39,220,96,221]]",
              "sol": "[bytes32(stringToBytes32(\"216,131,56,96,167,123,75,137,175,56,26,140,162,253,65,141,223,70,145,223,228,165,255,189,6,73,214,88,136,120,64,135\")),bytes32(stringToBytes32(\"32,35,88,104,239,239,101,76,202,140,192,96,47,78,67,200,255,68,195,94,234,106,206,118,166,54,108,191,199,4,163,81\")),bytes32(stringToBytes32(\"198,126,231,83,217,33,128,231,15,118,56,131,100,89,178,116,224,165,183,85,27,18,173,136,177,169,35,10,0,134,2,146\")),bytes32(stringToBytes32(\"195,219,191,155,235,103,224,35,13,15,44,245,192,163,89,119,1,240,79,30,67,82,230,131,83,241,201,209,220,95,139,30\")),bytes32(stringToBytes32(\"191,186,115,227,124,213,169,115,104,103,94,171,33,190,187,28,140,122,151,180,81,82,119,62,58,183,254,199,47,37,183,102\")),bytes32(stringToBytes32(\"88,14,166,229,173,71,94,39,133,151,112,94,184,55,62,65,140,19,253,87,215,194,198,130,214,105,124,126,39,220,96,221\"))]"
            },
            {
              "js": "\"khx3pi\"",
              "sol": "\"khx3pi\""
            },
            {
              "js": "\"victory by unanswered challenge\"",
              "sol": "\"victory by unanswered challenge\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail guessAndReveal(uint32,uint8[2],bytes32[6],string,string) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[4,3]",
                "sol": "[uint8(4),uint8(3)]"
              },
              {
                "js": "[[216,131,56,96,167,123,75,137,175,56,26,140,162,253,65,141,223,70,145,223,228,165,255,189,6,73,214,88,136,120,64,135],[32,35,88,104,239,239,101,76,202,140,192,96,47,78,67,200,255,68,195,94,234,106,206,118,166,54,108,191,199,4,163,81],[198,126,231,83,217,33,128,231,15,118,56,131,100,89,178,116,224,165,183,85,27,18,173,136,177,169,35,10,0,134,2,146],[195,219,191,155,235,103,224,35,13,15,44,245,192,163,89,119,1,240,79,30,67,82,230,131,83,241,201,209,220,95,139,30],[191,186,115,227,124,213,169,115,104,103,94,171,33,190,187,28,140,122,151,180,81,82,119,62,58,183,254,199,47,37,183,102],[88,14,166,229,173,71,94,39,133,151,112,94,184,55,62,65,140,19,253,87,215,194,198,130,214,105,124,126,39,220,96,221]]",
                "sol": "[bytes32(stringToBytes32(\"216,131,56,96,167,123,75,137,175,56,26,140,162,253,65,141,223,70,145,223,228,165,255,189,6,73,214,88,136,120,64,135\")),bytes32(stringToBytes32(\"32,35,88,104,239,239,101,76,202,140,192,96,47,78,67,200,255,68,195,94,234,106,206,118,166,54,108,191,199,4,163,81\")),bytes32(stringToBytes32(\"198,126,231,83,217,33,128,231,15,118,56,131,100,89,178,116,224,165,183,85,27,18,173,136,177,169,35,10,0,134,2,146\")),bytes32(stringToBytes32(\"195,219,191,155,235,103,224,35,13,15,44,245,192,163,89,119,1,240,79,30,67,82,230,131,83,241,201,209,220,95,139,30\")),bytes32(stringToBytes32(\"191,186,115,227,124,213,169,115,104,103,94,171,33,190,187,28,140,122,151,180,81,82,119,62,58,183,254,199,47,37,183,102\")),bytes32(stringToBytes32(\"88,14,166,229,173,71,94,39,133,151,112,94,184,55,62,65,140,19,253,87,215,194,198,130,214,105,124,126,39,220,96,221\"))]"
              },
              {
                "js": "\"khx3pi\"",
                "sol": "\"khx3pi\""
              },
              {
                "js": "\"victory by unanswered challenge\"",
                "sol": "\"victory by unanswered challenge\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.841ZMerkleShip.resolveAbandonedGame": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveAbandonedGame(uint32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "179",
              "sol": "179"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveAbandonedGame(uint32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "179",
                "sol": "179"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.842ZMerkleShip.concedeGame": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute concedeGame(uint32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail concedeGame(uint32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "39",
                "sol": "39"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.843ZMerkleShip.challengeVictory": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengeVictory(uint32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail challengeVictory(uint32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.844ZMerkleShip.answerChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute answerChallenge(uint32,string[64]) WHEN isStopped==false",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "[\"game resolved in an emergency\",\"verified victory by hit count\",\"game resolved in an emergency\",\"victory by unchallenged hit count\",\"3gxus9\",\"game resolved in an emergency\",\"verified victory by hit count\",\"victory by concession\",\"khx3pi\",\"verified victory by hit count\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"verified victory by hit count\",\"verified victory by hit count\",\"victory by concession\",\"rry5wn\",\"2iw1c8\",\"2iw1c8\",\"game resolved in an emergency\",\"victory by abandonment\",\"victory by concession\",\"khx3pi\",\"victory by unanswered challenge\",\"2iw1c8\",\"2iw1c8\",\"victory by concession\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"game resolved in an emergency\",\"g7fui\",\"khx3pi\",\"3gxus9\",\"verified victory by hit count\",\"verified victory by hit count\",\"khx3pi\",\"victory by unanswered challenge\",\"g7fui\",\"24dru\",\"3eyi3\",\"3eyi3\",\"24dru\",\"3eyi3\",\"verified victory by hit count\",\"victory by abandonment\",\"3gxus9\",\"game resolved in an emergency\",\"khx3pi\",\"victory by concession\",\"victory by concession\",\"24dru\",\"3gxus9\",\"3eyi3\",\"victory by unanswered challenge\",\"verified victory by hit count\",\"2iw1c8\",\"victory by concession\",\"3eyi3\",\"3gxus9\",\"24dru\",\"victory by unanswered challenge\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"victory by concession\",\"victory by unanswered challenge\"]",
              "sol": "[string(\"game resolved in an emergency\"),string(\"verified victory by hit count\"),string(\"game resolved in an emergency\"),string(\"victory by unchallenged hit count\"),string(\"3gxus9\"),string(\"game resolved in an emergency\"),string(\"verified victory by hit count\"),string(\"victory by concession\"),string(\"khx3pi\"),string(\"verified victory by hit count\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"verified victory by hit count\"),string(\"verified victory by hit count\"),string(\"victory by concession\"),string(\"rry5wn\"),string(\"2iw1c8\"),string(\"2iw1c8\"),string(\"game resolved in an emergency\"),string(\"victory by abandonment\"),string(\"victory by concession\"),string(\"khx3pi\"),string(\"victory by unanswered challenge\"),string(\"2iw1c8\"),string(\"2iw1c8\"),string(\"victory by concession\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"game resolved in an emergency\"),string(\"g7fui\"),string(\"khx3pi\"),string(\"3gxus9\"),string(\"verified victory by hit count\"),string(\"verified victory by hit count\"),string(\"khx3pi\"),string(\"victory by unanswered challenge\"),string(\"g7fui\"),string(\"24dru\"),string(\"3eyi3\"),string(\"3eyi3\"),string(\"24dru\"),string(\"3eyi3\"),string(\"verified victory by hit count\"),string(\"victory by abandonment\"),string(\"3gxus9\"),string(\"game resolved in an emergency\"),string(\"khx3pi\"),string(\"victory by concession\"),string(\"victory by concession\"),string(\"24dru\"),string(\"3gxus9\"),string(\"3eyi3\"),string(\"victory by unanswered challenge\"),string(\"verified victory by hit count\"),string(\"2iw1c8\"),string(\"victory by concession\"),string(\"3eyi3\"),string(\"3gxus9\"),string(\"24dru\"),string(\"victory by unanswered challenge\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"victory by concession\"),string(\"victory by unanswered challenge\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail answerChallenge(uint32,string[64]) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "12",
                "sol": "12"
              },
              {
                "js": "[\"game resolved in an emergency\",\"verified victory by hit count\",\"game resolved in an emergency\",\"victory by unchallenged hit count\",\"3gxus9\",\"game resolved in an emergency\",\"verified victory by hit count\",\"victory by concession\",\"khx3pi\",\"verified victory by hit count\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"verified victory by hit count\",\"verified victory by hit count\",\"victory by concession\",\"rry5wn\",\"2iw1c8\",\"2iw1c8\",\"game resolved in an emergency\",\"victory by abandonment\",\"victory by concession\",\"khx3pi\",\"victory by unanswered challenge\",\"2iw1c8\",\"2iw1c8\",\"victory by concession\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"game resolved in an emergency\",\"g7fui\",\"khx3pi\",\"3gxus9\",\"verified victory by hit count\",\"verified victory by hit count\",\"khx3pi\",\"victory by unanswered challenge\",\"g7fui\",\"24dru\",\"3eyi3\",\"3eyi3\",\"24dru\",\"3eyi3\",\"verified victory by hit count\",\"victory by abandonment\",\"3gxus9\",\"game resolved in an emergency\",\"khx3pi\",\"victory by concession\",\"victory by concession\",\"24dru\",\"3gxus9\",\"3eyi3\",\"victory by unanswered challenge\",\"verified victory by hit count\",\"2iw1c8\",\"victory by concession\",\"3eyi3\",\"3gxus9\",\"24dru\",\"victory by unanswered challenge\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"victory by concession\",\"victory by unanswered challenge\"]",
                "sol": "[string(\"game resolved in an emergency\"),string(\"verified victory by hit count\"),string(\"game resolved in an emergency\"),string(\"victory by unchallenged hit count\"),string(\"3gxus9\"),string(\"game resolved in an emergency\"),string(\"verified victory by hit count\"),string(\"victory by concession\"),string(\"khx3pi\"),string(\"verified victory by hit count\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"verified victory by hit count\"),string(\"verified victory by hit count\"),string(\"victory by concession\"),string(\"rry5wn\"),string(\"2iw1c8\"),string(\"2iw1c8\"),string(\"game resolved in an emergency\"),string(\"victory by abandonment\"),string(\"victory by concession\"),string(\"khx3pi\"),string(\"victory by unanswered challenge\"),string(\"2iw1c8\"),string(\"2iw1c8\"),string(\"victory by concession\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"game resolved in an emergency\"),string(\"g7fui\"),string(\"khx3pi\"),string(\"3gxus9\"),string(\"verified victory by hit count\"),string(\"verified victory by hit count\"),string(\"khx3pi\"),string(\"victory by unanswered challenge\"),string(\"g7fui\"),string(\"24dru\"),string(\"3eyi3\"),string(\"3eyi3\"),string(\"24dru\"),string(\"3eyi3\"),string(\"verified victory by hit count\"),string(\"victory by abandonment\"),string(\"3gxus9\"),string(\"game resolved in an emergency\"),string(\"khx3pi\"),string(\"victory by concession\"),string(\"victory by concession\"),string(\"24dru\"),string(\"3gxus9\"),string(\"3eyi3\"),string(\"victory by unanswered challenge\"),string(\"verified victory by hit count\"),string(\"2iw1c8\"),string(\"victory by concession\"),string(\"3eyi3\"),string(\"3gxus9\"),string(\"24dru\"),string(\"victory by unanswered challenge\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"victory by concession\"),string(\"victory by unanswered challenge\")]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.846ZMerkleShip.resolveUnclaimedVictory": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveUnclaimedVictory(uint32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "181",
              "sol": "181"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveUnclaimedVictory(uint32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "181",
                "sol": "181"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.847ZMerkleShip.resolveUnansweredChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveUnansweredChallenge(uint32) WHEN isStopped==false",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveUnansweredChallenge(uint32) when NOT comply with: isStopped == false",
            "parameters": [
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.848ZMerkleShip.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN userBalance>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.848ZMerkleShip.emergencyResolve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute emergencyResolve(uint32) WHEN isStopped==true",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail emergencyResolve(uint32) when NOT comply with: isStopped == true",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:37:46.850ZMerkleShip.getBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.855ZProxyMerkleShip.test_reveal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_reveal(uint32,bytes32[6],string)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "[[15,229,7,202,115,153,34,192,12,45,171,254,167,185,209,22,6,89,61,138,191,83,219,103,21,67,4,181,179,161,102,13],[245,50,183,243,141,230,171,118,224,123,188,17,102,101,92,49,46,231,82,96,125,102,33,209,203,235,204,36,239,230,139,48],[138,116,210,86,169,91,237,26,198,114,107,16,53,65,35,40,231,165,239,161,33,64,229,63,154,130,13,139,151,122,41,96],[103,134,68,164,127,48,236,39,121,176,91,49,184,106,85,13,28,70,162,245,134,6,236,17,117,96,121,20,85,176,174,91],[220,252,31,216,112,107,28,237,32,108,58,220,95,4,120,40,160,185,24,249,22,102,35,113,218,227,187,104,244,132,37,134],[50,143,35,105,38,213,14,57,52,139,83,236,156,79,88,203,42,158,107,129,191,70,89,106,51,116,76,174,11,136,252,82]]",
              "sol": "[bytes32(stringToBytes32(\"15,229,7,202,115,153,34,192,12,45,171,254,167,185,209,22,6,89,61,138,191,83,219,103,21,67,4,181,179,161,102,13\")),bytes32(stringToBytes32(\"245,50,183,243,141,230,171,118,224,123,188,17,102,101,92,49,46,231,82,96,125,102,33,209,203,235,204,36,239,230,139,48\")),bytes32(stringToBytes32(\"138,116,210,86,169,91,237,26,198,114,107,16,53,65,35,40,231,165,239,161,33,64,229,63,154,130,13,139,151,122,41,96\")),bytes32(stringToBytes32(\"103,134,68,164,127,48,236,39,121,176,91,49,184,106,85,13,28,70,162,245,134,6,236,17,117,96,121,20,85,176,174,91\")),bytes32(stringToBytes32(\"220,252,31,216,112,107,28,237,32,108,58,220,95,4,120,40,160,185,24,249,22,102,35,113,218,227,187,104,244,132,37,134\")),bytes32(stringToBytes32(\"50,143,35,105,38,213,14,57,52,139,83,236,156,79,88,203,42,158,107,129,191,70,89,106,51,116,76,174,11,136,252,82\"))]"
            },
            {
              "js": "\"khx3pi\"",
              "sol": "\"khx3pi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.856ZProxyMerkleShip.test_checkForVictoryByHit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkForVictoryByHit(uint32)",
          "parameters": [
            {
              "js": "181",
              "sol": "181"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.856ZProxyMerkleShip.test_zeroOutStorage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_zeroOutStorage(uint32)",
          "parameters": [
            {
              "js": "179",
              "sol": "179"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.857ZProxyMerkleShip.test_checkShipCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkShipCount(string[64])",
          "parameters": [
            {
              "js": "[\"khx3pi\",\"g7fui\",\"khx3pi\",\"2iw1c8\",\"victory by abandonment\",\"24dru\",\"3eyi3\",\"g7fui\",\"verified victory by hit count\",\"4ui3wr\",\"3gxus9\",\"victory by concession\",\"verified victory by hit count\",\"victory by unchallenged hit count\",\"khx3pi\",\"3gxus9\",\"game resolved in an emergency\",\"victory by concession\",\"verified victory by hit count\",\"verified victory by hit count\",\"game resolved in an emergency\",\"victory by abandonment\",\"khx3pi\",\"victory by unchallenged hit count\",\"4ui3wr\",\"victory by unanswered challenge\",\"victory by unchallenged hit count\",\"victory by abandonment\",\"g7fui\",\"3eyi3\",\"victory by unchallenged hit count\",\"jia4nr\",\"uhxi7\",\"rjeuhyf\",\"2iw1c8\",\"game resolved in an emergency\",\"2iw1c8\",\"khx3pi\",\"rjeuhyf\",\"jia4nr\",\"uhxi7\",\"victory by unchallenged hit count\",\"khx3pi\",\"game resolved in an emergency\",\"g7fui\",\"jia4nr\",\"2iw1c8\",\"g7fui\",\"khx3pi\",\"game resolved in an emergency\",\"24dru\",\"4ui3wr\",\"g7fui\",\"game resolved in an emergency\",\"jia4nr\",\"3gxus9\",\"24dru\",\"rry5wn\",\"victory by unanswered challenge\",\"game resolved in an emergency\",\"khx3pi\",\"jia4nr\",\"3eyi3\",\"verified victory by hit count\"]",
              "sol": "[string(\"khx3pi\"),string(\"g7fui\"),string(\"khx3pi\"),string(\"2iw1c8\"),string(\"victory by abandonment\"),string(\"24dru\"),string(\"3eyi3\"),string(\"g7fui\"),string(\"verified victory by hit count\"),string(\"4ui3wr\"),string(\"3gxus9\"),string(\"victory by concession\"),string(\"verified victory by hit count\"),string(\"victory by unchallenged hit count\"),string(\"khx3pi\"),string(\"3gxus9\"),string(\"game resolved in an emergency\"),string(\"victory by concession\"),string(\"verified victory by hit count\"),string(\"verified victory by hit count\"),string(\"game resolved in an emergency\"),string(\"victory by abandonment\"),string(\"khx3pi\"),string(\"victory by unchallenged hit count\"),string(\"4ui3wr\"),string(\"victory by unanswered challenge\"),string(\"victory by unchallenged hit count\"),string(\"victory by abandonment\"),string(\"g7fui\"),string(\"3eyi3\"),string(\"victory by unchallenged hit count\"),string(\"jia4nr\"),string(\"uhxi7\"),string(\"rjeuhyf\"),string(\"2iw1c8\"),string(\"game resolved in an emergency\"),string(\"2iw1c8\"),string(\"khx3pi\"),string(\"rjeuhyf\"),string(\"jia4nr\"),string(\"uhxi7\"),string(\"victory by unchallenged hit count\"),string(\"khx3pi\"),string(\"game resolved in an emergency\"),string(\"g7fui\"),string(\"jia4nr\"),string(\"2iw1c8\"),string(\"g7fui\"),string(\"khx3pi\"),string(\"game resolved in an emergency\"),string(\"24dru\"),string(\"4ui3wr\"),string(\"g7fui\"),string(\"game resolved in an emergency\"),string(\"jia4nr\"),string(\"3gxus9\"),string(\"24dru\"),string(\"rry5wn\"),string(\"victory by unanswered challenge\"),string(\"game resolved in an emergency\"),string(\"khx3pi\"),string(\"jia4nr\"),string(\"3eyi3\"),string(\"verified victory by hit count\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.857ZProxyMerkleShip.test_checkShipLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkShipLength(string[64])",
          "parameters": [
            {
              "js": "[\"uhxi7\",\"khx3pi\",\"khx3pi\",\"g7fui\",\"3eyi3\",\"4ui3wr\",\"verified victory by hit count\",\"2iw1c8\",\"4ui3wr\",\"wgclnw\",\"victory by unchallenged hit count\",\"khx3pi\",\"4ui3wr\",\"3gxus9\",\"game resolved in an emergency\",\"24dru\",\"khx3pi\",\"victory by unanswered challenge\",\"rry5wn\",\"24dru\",\"victory by concession\",\"verified victory by hit count\",\"3gxus9\",\"rjeuhyf\",\"victory by unanswered challenge\",\"g7fui\",\"4ui3wr\",\"3eyi3\",\"2iw1c8\",\"victory by unanswered challenge\",\"victory by unanswered challenge\",\"2iw1c8\",\"2iw1c8\",\"wgclnw\",\"victory by concession\",\"khx3pi\",\"g7fui\",\"3eyi3\",\"2iw1c8\",\"rry5wn\",\"victory by concession\",\"wgclnw\",\"victory by abandonment\",\"wgclnw\",\"3gxus9\",\"victory by abandonment\",\"2iw1c8\",\"3gxus9\",\"uhxi7\",\"khx3pi\",\"uhxi7\",\"3eyi3\",\"3eyi3\",\"rjeuhyf\",\"vg8jz\",\"4ui3wr\",\"24dru\",\"4ui3wr\",\"victory by unchallenged hit count\",\"game resolved in an emergency\",\"r9dw5q\",\"victory by abandonment\",\"khx3pi\",\"rry5wn\"]",
              "sol": "[string(\"uhxi7\"),string(\"khx3pi\"),string(\"khx3pi\"),string(\"g7fui\"),string(\"3eyi3\"),string(\"4ui3wr\"),string(\"verified victory by hit count\"),string(\"2iw1c8\"),string(\"4ui3wr\"),string(\"wgclnw\"),string(\"victory by unchallenged hit count\"),string(\"khx3pi\"),string(\"4ui3wr\"),string(\"3gxus9\"),string(\"game resolved in an emergency\"),string(\"24dru\"),string(\"khx3pi\"),string(\"victory by unanswered challenge\"),string(\"rry5wn\"),string(\"24dru\"),string(\"victory by concession\"),string(\"verified victory by hit count\"),string(\"3gxus9\"),string(\"rjeuhyf\"),string(\"victory by unanswered challenge\"),string(\"g7fui\"),string(\"4ui3wr\"),string(\"3eyi3\"),string(\"2iw1c8\"),string(\"victory by unanswered challenge\"),string(\"victory by unanswered challenge\"),string(\"2iw1c8\"),string(\"2iw1c8\"),string(\"wgclnw\"),string(\"victory by concession\"),string(\"khx3pi\"),string(\"g7fui\"),string(\"3eyi3\"),string(\"2iw1c8\"),string(\"rry5wn\"),string(\"victory by concession\"),string(\"wgclnw\"),string(\"victory by abandonment\"),string(\"wgclnw\"),string(\"3gxus9\"),string(\"victory by abandonment\"),string(\"2iw1c8\"),string(\"3gxus9\"),string(\"uhxi7\"),string(\"khx3pi\"),string(\"uhxi7\"),string(\"3eyi3\"),string(\"3eyi3\"),string(\"rjeuhyf\"),string(\"vg8jz\"),string(\"4ui3wr\"),string(\"24dru\"),string(\"4ui3wr\"),string(\"victory by unchallenged hit count\"),string(\"game resolved in an emergency\"),string(\"r9dw5q\"),string(\"victory by abandonment\"),string(\"khx3pi\"),string(\"rry5wn\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.863ZProxyMerkleShip.test_hashEach": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_hashEach(string[64])",
          "parameters": [
            {
              "js": "[\"wgclnw\",\"jia4nr\",\"rry5wn\",\"rry5wn\",\"victory by unchallenged hit count\",\"victory by unanswered challenge\",\"jia4nr\",\"2iw1c8\",\"verified victory by hit count\",\"vg8jz\",\"r9dw5q\",\"victory by abandonment\",\"3gxus9\",\"verified victory by hit count\",\"3eyi3\",\"2iw1c8\",\"24dru\",\"victory by abandonment\",\"rjeuhyf\",\"khx3pi\",\"wgclnw\",\"khx3pi\",\"victory by concession\",\"game resolved in an emergency\",\"l563bl\",\"r9dw5q\",\"khx3pi\",\"3eyi3\",\"24dru\",\"khx3pi\",\"r9dw5q\",\"vg8jz\",\"g7fui\",\"l563bl\",\"victory by concession\",\"game resolved in an emergency\",\"qkq2k\",\"3gxus9\",\"vg8jz\",\"rjeuhyf\",\"victory by concession\",\"victory by unanswered challenge\",\"khx3pi\",\"l563bl\",\"2iw1c8\",\"uhxi7\",\"victory by abandonment\",\"h0ogfi\",\"victory by unchallenged hit count\",\"rry5wn\",\"rjeuhyf\",\"qkq2k\",\"wgclnw\",\"3eyi3\",\"rry5wn\",\"victory by unchallenged hit count\",\"uhxi7\",\"2iw1c8\",\"h0ogfi\",\"victory by concession\",\"game resolved in an emergency\",\"victory by unanswered challenge\",\"qkq2k\",\"3eyi3\"]",
              "sol": "[string(\"wgclnw\"),string(\"jia4nr\"),string(\"rry5wn\"),string(\"rry5wn\"),string(\"victory by unchallenged hit count\"),string(\"victory by unanswered challenge\"),string(\"jia4nr\"),string(\"2iw1c8\"),string(\"verified victory by hit count\"),string(\"vg8jz\"),string(\"r9dw5q\"),string(\"victory by abandonment\"),string(\"3gxus9\"),string(\"verified victory by hit count\"),string(\"3eyi3\"),string(\"2iw1c8\"),string(\"24dru\"),string(\"victory by abandonment\"),string(\"rjeuhyf\"),string(\"khx3pi\"),string(\"wgclnw\"),string(\"khx3pi\"),string(\"victory by concession\"),string(\"game resolved in an emergency\"),string(\"l563bl\"),string(\"r9dw5q\"),string(\"khx3pi\"),string(\"3eyi3\"),string(\"24dru\"),string(\"khx3pi\"),string(\"r9dw5q\"),string(\"vg8jz\"),string(\"g7fui\"),string(\"l563bl\"),string(\"victory by concession\"),string(\"game resolved in an emergency\"),string(\"qkq2k\"),string(\"3gxus9\"),string(\"vg8jz\"),string(\"rjeuhyf\"),string(\"victory by concession\"),string(\"victory by unanswered challenge\"),string(\"khx3pi\"),string(\"l563bl\"),string(\"2iw1c8\"),string(\"uhxi7\"),string(\"victory by abandonment\"),string(\"h0ogfi\"),string(\"victory by unchallenged hit count\"),string(\"rry5wn\"),string(\"rjeuhyf\"),string(\"qkq2k\"),string(\"wgclnw\"),string(\"3eyi3\"),string(\"rry5wn\"),string(\"victory by unchallenged hit count\"),string(\"uhxi7\"),string(\"2iw1c8\"),string(\"h0ogfi\"),string(\"victory by concession\"),string(\"game resolved in an emergency\"),string(\"victory by unanswered challenge\"),string(\"qkq2k\"),string(\"3eyi3\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.864ZProxyMerkleShip.test_sortArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_sortArray(bytes32[])",
          "parameters": [
            {
              "js": "[[36,218,0,238,141,168,155,76,148,64,4,222,91,144,188,161,149,104,223,99,127,150,221,53,80,174,30,212,129,1,254,244],[146,117,101,38,200,107,220,241,234,229,214,147,251,96,101,195,33,134,133,123,4,97,187,94,180,251,153,173,63,131,149,203],[221,163,225,1,231,73,9,222,9,98,240,18,244,253,148,24,122,35,91,111,6,55,151,85,29,176,75,180,108,151,129,134],[55,102,94,123,74,27,89,5,54,123,4,244,87,88,169,199,34,241,80,161,144,188,185,121,40,159,225,167,133,2,203,151],[126,171,165,179,21,255,107,218,105,184,15,207,13,189,163,214,219,75,131,186,81,24,222,72,76,137,193,27,28,39,38,247],[180,253,92,93,213,113,203,232,215,29,222,246,15,163,131,195,70,219,155,192,192,212,127,211,18,32,20,45,45,239,75,140],[119,202,61,44,55,26,26,94,82,115,32,88,10,2,44,169,143,213,48,127,172,226,100,8,148,237,131,56,110,136,64,205]]",
              "sol": "[bytes32(stringToBytes32(\"36,218,0,238,141,168,155,76,148,64,4,222,91,144,188,161,149,104,223,99,127,150,221,53,80,174,30,212,129,1,254,244\")),bytes32(stringToBytes32(\"146,117,101,38,200,107,220,241,234,229,214,147,251,96,101,195,33,134,133,123,4,97,187,94,180,251,153,173,63,131,149,203\")),bytes32(stringToBytes32(\"221,163,225,1,231,73,9,222,9,98,240,18,244,253,148,24,122,35,91,111,6,55,151,85,29,176,75,180,108,151,129,134\")),bytes32(stringToBytes32(\"55,102,94,123,74,27,89,5,54,123,4,244,87,88,169,199,34,241,80,161,144,188,185,121,40,159,225,167,133,2,203,151\")),bytes32(stringToBytes32(\"126,171,165,179,21,255,107,218,105,184,15,207,13,189,163,214,219,75,131,186,81,24,222,72,76,137,193,27,28,39,38,247\")),bytes32(stringToBytes32(\"180,253,92,93,213,113,203,232,215,29,222,246,15,163,131,195,70,219,155,192,192,212,127,211,18,32,20,45,45,239,75,140\")),bytes32(stringToBytes32(\"119,202,61,44,55,26,26,94,82,115,32,88,10,2,44,169,143,213,48,127,172,226,100,8,148,237,131,56,110,136,64,205\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.865ZProxyMerkleShip.test_quickSort": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_quickSort(bytes32[],int,int)",
          "parameters": [
            {
              "js": "[[113,96,36,112,137,61,244,156,25,8,252,89,246,123,158,245,175,145,57,14,130,101,80,206,61,34,229,176,180,98,2,117],[228,176,143,241,131,94,209,87,252,27,225,111,135,66,252,169,80,232,231,29,232,250,50,84,96,48,52,134,228,19,186,233],[96,97,164,35,127,90,95,195,71,99,90,211,148,149,9,32,45,180,58,119,92,47,90,171,69,119,33,63,38,154,17,0],[58,186,196,91,68,195,168,172,53,102,131,201,178,244,30,103,37,169,2,13,127,16,199,1,247,160,90,119,124,160,206,101],[182,49,84,178,207,145,42,52,67,63,213,219,113,233,103,251,228,232,102,178,5,220,5,126,247,58,201,15,193,178,210,226],[167,52,216,34,231,11,235,170,150,119,191,9,65,93,206,7,33,145,120,15,230,20,147,213,232,150,165,109,245,115,167,71],[143,89,98,124,152,193,129,8,143,155,250,205,120,248,23,68,33,220,128,95,199,93,26,54,2,180,107,59,89,83,199,172]]",
              "sol": "[bytes32(stringToBytes32(\"113,96,36,112,137,61,244,156,25,8,252,89,246,123,158,245,175,145,57,14,130,101,80,206,61,34,229,176,180,98,2,117\")),bytes32(stringToBytes32(\"228,176,143,241,131,94,209,87,252,27,225,111,135,66,252,169,80,232,231,29,232,250,50,84,96,48,52,134,228,19,186,233\")),bytes32(stringToBytes32(\"96,97,164,35,127,90,95,195,71,99,90,211,148,149,9,32,45,180,58,119,92,47,90,171,69,119,33,63,38,154,17,0\")),bytes32(stringToBytes32(\"58,186,196,91,68,195,168,172,53,102,131,201,178,244,30,103,37,169,2,13,127,16,199,1,247,160,90,119,124,160,206,101\")),bytes32(stringToBytes32(\"182,49,84,178,207,145,42,52,67,63,213,219,113,233,103,251,228,232,102,178,5,220,5,126,247,58,201,15,193,178,210,226\")),bytes32(stringToBytes32(\"167,52,216,34,231,11,235,170,150,119,191,9,65,93,206,7,33,145,120,15,230,20,147,213,232,150,165,109,245,115,167,71\")),bytes32(stringToBytes32(\"143,89,98,124,152,193,129,8,143,155,250,205,120,248,23,68,33,220,128,95,199,93,26,54,2,180,107,59,89,83,199,172\"))]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.866ZProxyMerkleShip.test_computeMerkleTree": {
    "branches": {
      "0": {
        "branch": {
          "loc": "948-964",
          "restrictions": [
            "_data.length >= 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_computeMerkleTree(bytes32[]) WHEN _data.length>=2",
          "parameters": [
            {
              "js": "[[99,6,53,208,152,102,214,54,225,61,177,238,40,127,100,44,48,219,136,99,106,243,27,137,191,243,31,158,159,68,92,135],[111,24,81,4,241,242,51,58,65,27,234,236,98,87,233,133,73,221,140,219,76,106,84,87,155,244,192,170,161,215,205,207],[210,5,134,186,43,140,59,100,138,191,238,56,219,44,158,70,253,90,112,152,213,52,49,48,4,130,69,6,255,207,84,106],[68,44,3,61,145,84,249,40,149,27,203,39,16,18,216,92,132,215,75,170,243,95,182,46,54,69,217,107,50,132,65,11],[176,125,160,75,198,191,232,117,249,244,97,86,92,250,60,210,79,62,254,103,164,68,170,106,102,57,46,84,115,54,221,180],[237,227,237,217,6,183,227,5,83,21,103,247,41,229,109,138,103,180,181,58,187,44,107,61,203,106,105,200,186,182,2,131],[152,106,31,6,58,127,120,150,98,224,172,12,78,137,30,39,152,175,194,41,253,34,140,107,22,120,101,34,176,145,201,6],[106,38,176,183,175,141,114,129,73,39,2,7,122,236,24,45,196,228,91,138,93,20,35,202,226,105,175,251,175,167,128,23],[25,139,86,189,6,30,85,98,203,190,238,185,39,226,190,37,17,89,15,114,13,223,77,174,227,123,58,108,249,240,5,252],[165,144,112,37,164,215,43,138,117,75,175,19,127,77,127,56,65,170,60,57,46,247,65,108,122,142,111,45,219,102,156,215],[100,171,223,92,211,37,164,94,173,144,70,34,25,27,85,185,185,20,196,228,67,217,138,45,67,205,215,120,203,69,48,178],[231,113,169,35,227,198,146,159,210,149,124,217,246,175,187,139,140,35,127,166,159,157,81,60,72,7,2,223,27,135,74,149],[196,155,205,112,11,156,121,182,121,85,124,211,189,158,34,191,250,137,129,165,213,36,210,62,239,142,144,242,218,29,210,187]]",
              "sol": "[bytes32(stringToBytes32(\"99,6,53,208,152,102,214,54,225,61,177,238,40,127,100,44,48,219,136,99,106,243,27,137,191,243,31,158,159,68,92,135\")),bytes32(stringToBytes32(\"111,24,81,4,241,242,51,58,65,27,234,236,98,87,233,133,73,221,140,219,76,106,84,87,155,244,192,170,161,215,205,207\")),bytes32(stringToBytes32(\"210,5,134,186,43,140,59,100,138,191,238,56,219,44,158,70,253,90,112,152,213,52,49,48,4,130,69,6,255,207,84,106\")),bytes32(stringToBytes32(\"68,44,3,61,145,84,249,40,149,27,203,39,16,18,216,92,132,215,75,170,243,95,182,46,54,69,217,107,50,132,65,11\")),bytes32(stringToBytes32(\"176,125,160,75,198,191,232,117,249,244,97,86,92,250,60,210,79,62,254,103,164,68,170,106,102,57,46,84,115,54,221,180\")),bytes32(stringToBytes32(\"237,227,237,217,6,183,227,5,83,21,103,247,41,229,109,138,103,180,181,58,187,44,107,61,203,106,105,200,186,182,2,131\")),bytes32(stringToBytes32(\"152,106,31,6,58,127,120,150,98,224,172,12,78,137,30,39,152,175,194,41,253,34,140,107,22,120,101,34,176,145,201,6\")),bytes32(stringToBytes32(\"106,38,176,183,175,141,114,129,73,39,2,7,122,236,24,45,196,228,91,138,93,20,35,202,226,105,175,251,175,167,128,23\")),bytes32(stringToBytes32(\"25,139,86,189,6,30,85,98,203,190,238,185,39,226,190,37,17,89,15,114,13,223,77,174,227,123,58,108,249,240,5,252\")),bytes32(stringToBytes32(\"165,144,112,37,164,215,43,138,117,75,175,19,127,77,127,56,65,170,60,57,46,247,65,108,122,142,111,45,219,102,156,215\")),bytes32(stringToBytes32(\"100,171,223,92,211,37,164,94,173,144,70,34,25,27,85,185,185,20,196,228,67,217,138,45,67,205,215,120,203,69,48,178\")),bytes32(stringToBytes32(\"231,113,169,35,227,198,146,159,210,149,124,217,246,175,187,139,140,35,127,166,159,157,81,60,72,7,2,223,27,135,74,149\")),bytes32(stringToBytes32(\"196,155,205,112,11,156,121,182,121,85,124,211,189,158,34,191,250,137,129,165,213,36,210,62,239,142,144,242,218,29,210,187\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "962-964",
          "restrictions": [
            "_data.length == 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_computeMerkleTree(bytes32[]) WHEN _data.length==2",
          "parameters": [
            {
              "js": "[[19,160,51,156,165,227,83,218,157,237,128,181,114,199,9,215,184,136,58,189,58,74,159,117,13,202,246,253,105,2,4,26],[221,104,4,194,71,133,117,215,90,99,225,8,104,169,173,113,141,182,83,210,46,210,64,19,54,165,114,47,255,242,236,144]]",
              "sol": "[bytes32(stringToBytes32(\"19,160,51,156,165,227,83,218,157,237,128,181,114,199,9,215,184,136,58,189,58,74,159,117,13,202,246,253,105,2,4,26\")),bytes32(stringToBytes32(\"221,104,4,194,71,133,117,215,90,99,225,8,104,169,173,113,141,182,83,210,46,210,64,19,54,165,114,47,255,242,236,144\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_computeMerkleTree(bytes32[]) WHEN _data.length!=2",
          "parameters": [
            {
              "js": "[[91,148,129,32,88,81,209,185,62,29,222,63,96,1,38,0,191,157,211,106,143,193,13,100,125,8,195,13,74,182,236,109],[210,184,50,63,149,148,216,119,80,6,80,157,70,63,75,65,131,198,5,250,154,142,19,249,143,95,211,99,0,144,232,117],[81,222,236,72,171,199,77,114,174,35,57,14,120,54,98,103,14,35,26,72,27,216,6,6,79,82,249,106,206,185,133,179],[182,127,105,113,115,206,40,80,215,179,61,210,15,205,137,57,203,141,89,224,250,122,120,207,205,50,177,17,233,10,172,231],[131,165,40,165,249,132,102,253,115,82,203,176,58,35,8,232,59,133,179,156,249,34,7,112,207,177,255,135,175,101,96,195],[196,94,41,163,15,219,159,143,106,245,79,180,242,61,144,103,93,11,174,142,233,97,235,111,88,119,98,249,12,117,222,123],[140,217,52,146,26,161,138,141,42,139,13,188,136,168,98,65,213,205,106,151,216,135,28,93,233,90,87,185,45,34,83,207]]",
              "sol": "[bytes32(stringToBytes32(\"91,148,129,32,88,81,209,185,62,29,222,63,96,1,38,0,191,157,211,106,143,193,13,100,125,8,195,13,74,182,236,109\")),bytes32(stringToBytes32(\"210,184,50,63,149,148,216,119,80,6,80,157,70,63,75,65,131,198,5,250,154,142,19,249,143,95,211,99,0,144,232,117\")),bytes32(stringToBytes32(\"81,222,236,72,171,199,77,114,174,35,57,14,120,54,98,103,14,35,26,72,27,216,6,6,79,82,249,106,206,185,133,179\")),bytes32(stringToBytes32(\"182,127,105,113,115,206,40,80,215,179,61,210,15,205,137,57,203,141,89,224,250,122,120,207,205,50,177,17,233,10,172,231\")),bytes32(stringToBytes32(\"131,165,40,165,249,132,102,253,115,82,203,176,58,35,8,232,59,133,179,156,249,34,7,112,207,177,255,135,175,101,96,195\")),bytes32(stringToBytes32(\"196,94,41,163,15,219,159,143,106,245,79,180,242,61,144,103,93,11,174,142,233,97,235,111,88,119,98,249,12,117,222,123\")),bytes32(stringToBytes32(\"140,217,52,146,26,161,138,141,42,139,13,188,136,168,98,65,213,205,106,151,216,135,28,93,233,90,87,185,45,34,83,207\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.868ZProxyMerkleShip.test_verifyMerkleProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_verifyMerkleProof(bytes32[6],bytes32,string)",
          "parameters": [
            {
              "js": "[[148,45,71,72,148,43,8,145,101,49,186,113,104,46,240,207,201,208,222,215,0,54,129,251,147,205,123,170,141,124,194,161],[64,178,48,58,206,254,164,143,138,11,211,167,234,207,197,186,247,94,217,218,162,6,186,164,18,225,150,88,230,185,127,8],[147,138,35,143,249,149,107,42,28,145,98,82,49,48,194,224,205,236,231,250,119,27,205,27,226,81,199,150,132,41,155,200],[236,194,225,50,167,208,182,234,111,230,118,183,4,83,192,177,190,190,34,225,168,250,28,106,123,1,178,207,107,162,219,89],[100,97,244,222,180,147,161,65,71,18,50,36,87,93,175,49,176,218,25,60,236,252,48,120,246,242,134,9,189,211,100,139],[136,163,214,180,123,4,23,210,18,64,114,21,138,86,175,35,60,145,31,62,225,8,179,115,11,77,14,145,236,166,71,101]]",
              "sol": "[bytes32(stringToBytes32(\"148,45,71,72,148,43,8,145,101,49,186,113,104,46,240,207,201,208,222,215,0,54,129,251,147,205,123,170,141,124,194,161\")),bytes32(stringToBytes32(\"64,178,48,58,206,254,164,143,138,11,211,167,234,207,197,186,247,94,217,218,162,6,186,164,18,225,150,88,230,185,127,8\")),bytes32(stringToBytes32(\"147,138,35,143,249,149,107,42,28,145,98,82,49,48,194,224,205,236,231,250,119,27,205,27,226,81,199,150,132,41,155,200\")),bytes32(stringToBytes32(\"236,194,225,50,167,208,182,234,111,230,118,183,4,83,192,177,190,190,34,225,168,250,28,106,123,1,178,207,107,162,219,89\")),bytes32(stringToBytes32(\"100,97,244,222,180,147,161,65,71,18,50,36,87,93,175,49,176,218,25,60,236,252,48,120,246,242,134,9,189,211,100,139\")),bytes32(stringToBytes32(\"136,163,214,180,123,4,23,210,18,64,114,21,138,86,175,35,60,145,31,62,225,8,179,115,11,77,14,145,236,166,71,101\"))]"
            },
            {
              "js": "[74,19,103,216,149,82,217,35,175,221,242,165,8,199,107,3,178,175,103,127,117,162,157,49,15,68,128,133,54,189,210,176]",
              "sol": "stringToBytes32(\"74,19,103,216,149,82,217,35,175,221,242,165,8,199,107,3,178,175,103,127,117,162,157,49,15,68,128,133,54,189,210,176\")"
            },
            {
              "js": "\"victory by abandonment\"",
              "sol": "\"victory by abandonment\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.869ZProxyMerkleShip.test_isCoordinateValid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isCoordinateValid(uint8,uint8)",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.869ZProxyMerkleShip.test_coordinateToIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_coordinateToIndex(uint8,uint8)",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.870ZProxyMerkleShip.test_subString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_subString(string,uint256)",
          "parameters": [
            {
              "js": "\"uhxi7\"",
              "sol": "\"uhxi7\""
            },
            {
              "js": "180",
              "sol": "180"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:37:46.870ZProxyMerkleShip.test_isStringValid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isStringValid(string)",
          "parameters": [
            {
              "js": "\"4ui3wr\"",
              "sol": "\"4ui3wr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}