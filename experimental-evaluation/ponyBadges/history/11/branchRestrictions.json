,{
  "2020-11-11T03:37:50.858ZTESTBUXX.TESTBUXX": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute TESTBUXX(uint256,string,uint8,string)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"bwnvle\"",
              "sol": "\"bwnvle\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"t7k7ik\"",
              "sol": "\"t7k7ik\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:37:57.932ZPony.Pony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute Pony(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.062ZTESTBUXX.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.063ZTESTBUXX.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "759",
                "sol": "759"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.064ZTESTBUXX.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.064ZTESTBUXX.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.065ZTESTBUXX.safeApprove": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeApprove(address,uint256,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.065ZTESTBUXX.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.066ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "758",
                "sol": "758"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.067ZTESTBUXX.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "758",
                "sol": "758"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.068ZTESTBUXX.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-141",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "[152,104,74,167,32,155,118,184,159,97,197,178,54,188,155,242,73,194,233,159,173,184,194,44,80,142,87,56,222,219,48,152]",
              "sol": "abi.encode(\"152,104,74,167,32,155,118,184,159,97,197,178,54,188,155,242,73,194,233,159,173,184,194,44,80,142,87,56,222,219,48,152\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "[3,41,113,31,124,118,139,169,95,111,153,151,162,189,31,126,47,48,151,137,243,37,153,197,230,231,87,147,116,19,211,149]",
              "sol": "abi.encode(\"3,41,113,31,124,118,139,169,95,111,153,151,162,189,31,126,47,48,151,137,243,37,153,197,230,231,87,147,116,19,211,149\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.069ZTESTBUXX.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.070ZTESTBUXX.burnFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burnFrom(address,uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T03:38:05.070ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "180-187",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "[156,40,98,131,220,227,95,63,27,97,191,82,1,144,43,13,242,100,220,126,53,191,137,176,242,205,221,41,40,150,66,166]",
              "sol": "abi.encode(\"156,40,98,131,220,227,95,63,27,97,191,82,1,144,43,13,242,100,220,126,53,191,137,176,242,205,221,41,40,150,66,166\")"
            },
            {
              "js": "\"t7k7ik\"",
              "sol": "\"t7k7ik\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "758",
                "sol": "758"
              },
              {
                "js": "[156,40,98,131,220,227,95,63,27,97,191,82,1,144,43,13,242,100,220,126,53,191,137,176,242,205,221,41,40,150,66,166]",
                "sol": "abi.encode(\"156,40,98,131,220,227,95,63,27,97,191,82,1,144,43,13,242,100,220,126,53,191,137,176,242,205,221,41,40,150,66,166\")"
              },
              {
                "js": "\"t7k7ik\"",
                "sol": "\"t7k7ik\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[164,134,241,231,76,196,246,168,107,97,170,208,184,21,81,150,166,185,242,19,33,84,221,242,187,200,121,72,179,197,61,144]",
              "sol": "abi.encode(\"164,134,241,231,76,196,246,168,107,97,170,208,184,21,81,150,166,185,242,19,33,84,221,242,187,200,121,72,179,197,61,144\")"
            },
            {
              "js": "\"bwnvle\"",
              "sol": "\"bwnvle\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[164,134,241,231,76,196,246,168,107,97,170,208,184,21,81,150,166,185,242,19,33,84,221,242,187,200,121,72,179,197,61,144]",
                "sol": "abi.encode(\"164,134,241,231,76,196,246,168,107,97,170,208,184,21,81,150,166,185,242,19,33,84,221,242,187,200,121,72,179,197,61,144\")"
              },
              {
                "js": "\"bwnvle\"",
                "sol": "\"bwnvle\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.073ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "196-198",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[62,244,76,106,64,246,83,181,184,29,160,79,175,44,192,155,171,175,243,83,82,254,85,168,214,84,6,142,75,169,201,196]",
              "sol": "abi.encode(\"62,244,76,106,64,246,83,181,184,29,160,79,175,44,192,155,171,175,243,83,82,254,85,168,214,84,6,142,75,169,201,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[62,244,76,106,64,246,83,181,184,29,160,79,175,44,192,155,171,175,243,83,82,254,85,168,214,84,6,142,75,169,201,196]",
                "sol": "abi.encode(\"62,244,76,106,64,246,83,181,184,29,160,79,175,44,192,155,171,175,243,83,82,254,85,168,214,84,6,142,75,169,201,196\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[14,135,21,67,190,229,115,198,137,195,133,229,176,225,126,86,242,29,247,31,154,42,174,2,99,60,127,63,45,61,167,199]",
              "sol": "abi.encode(\"14,135,21,67,190,229,115,198,137,195,133,229,176,225,126,86,242,29,247,31,154,42,174,2,99,60,127,63,45,61,167,199\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[14,135,21,67,190,229,115,198,137,195,133,229,176,225,126,86,242,29,247,31,154,42,174,2,99,60,127,63,45,61,167,199]",
                "sol": "abi.encode(\"14,135,21,67,190,229,115,198,137,195,133,229,176,225,126,86,242,29,247,31,154,42,174,2,99,60,127,63,45,61,167,199\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.077ZProxyTESTBUXX.test_transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transfer(address,address,uint,bytes) WHEN to!=0x0,balances_>=value",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[141,107,173,205,164,33,157,71,156,87,143,75,206,31,73,204,210,164,118,116,195,24,247,23,33,124,205,58,240,127,48,63]",
              "sol": "abi.encode(\"141,107,173,205,164,33,157,71,156,87,143,75,206,31,73,204,210,164,118,116,195,24,247,23,33,124,205,58,240,127,48,63\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transfer(address,address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[141,107,173,205,164,33,157,71,156,87,143,75,206,31,73,204,210,164,118,116,195,24,247,23,33,124,205,58,240,127,48,63]",
                "sol": "abi.encode(\"141,107,173,205,164,33,157,71,156,87,143,75,206,31,73,204,210,164,118,116,195,24,247,23,33,124,205,58,240,127,48,63\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.079ZPony.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint256,bytes) WHEN value>=PLAY_COST",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "[137,208,149,240,17,207,148,114,110,29,155,249,165,33,216,37,208,129,41,69,178,183,193,226,203,227,7,189,194,26,150,238]",
              "sol": "abi.encode(\"137,208,149,240,17,207,148,114,110,29,155,249,165,33,216,37,208,129,41,69,178,183,193,226,203,227,7,189,194,26,150,238\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail tokenFallback(address,uint256,bytes) when NOT comply with: value >= PLAY_COST",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 757,
                "sol": 757
              },
              {
                "js": "[137,208,149,240,17,207,148,114,110,29,155,249,165,33,216,37,208,129,41,69,178,183,193,226,203,227,7,189,194,26,150,238]",
                "sol": "abi.encode(\"137,208,149,240,17,207,148,114,110,29,155,249,165,33,216,37,208,129,41,69,178,183,193,226,203,227,7,189,194,26,150,238\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.080ZPony.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T03:38:05.080ZPony.getPony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getPony(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}