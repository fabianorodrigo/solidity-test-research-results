,{
  "2020-11-10T07:31:10.018ZTESTBUXX.TESTBUXX": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute TESTBUXX(uint256,string,uint8,string)",
          "parameters": [
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "\"wai9rk\"",
              "sol": "\"wai9rk\""
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"o117fw\"",
              "sol": "\"o117fw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:16.956ZPony.Pony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute Pony(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.017ZTESTBUXX.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.018ZTESTBUXX.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "759",
                "sol": "759"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.019ZTESTBUXX.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.019ZTESTBUXX.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.020ZTESTBUXX.safeApprove": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeApprove(address,uint256,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.020ZTESTBUXX.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.021ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.022ZTESTBUXX.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.023ZTESTBUXX.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-141",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[191,115,88,177,51,69,33,108,238,224,56,52,227,255,24,7,188,173,126,0,212,58,213,119,3,151,5,107,72,65,204,117]",
              "sol": "abi.encode(\"191,115,88,177,51,69,33,108,238,224,56,52,227,255,24,7,188,173,126,0,212,58,213,119,3,151,5,107,72,65,204,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[199,228,154,188,52,228,229,30,187,142,174,34,60,66,146,109,219,193,238,159,178,174,165,5,16,43,17,21,98,170,115,19]",
              "sol": "abi.encode(\"199,228,154,188,52,228,229,30,187,142,174,34,60,66,146,109,219,193,238,159,178,174,165,5,16,43,17,21,98,170,115,19\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.024ZTESTBUXX.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.025ZTESTBUXX.burnFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burnFrom(address,uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:31:24.025ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "180-187",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "[148,92,4,164,68,224,52,235,251,159,14,248,246,105,70,54,40,73,178,179,55,173,135,145,73,241,170,153,238,174,143,239]",
              "sol": "abi.encode(\"148,92,4,164,68,224,52,235,251,159,14,248,246,105,70,54,40,73,178,179,55,173,135,145,73,241,170,153,238,174,143,239\")"
            },
            {
              "js": "\"k9a0sf\"",
              "sol": "\"k9a0sf\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "[148,92,4,164,68,224,52,235,251,159,14,248,246,105,70,54,40,73,178,179,55,173,135,145,73,241,170,153,238,174,143,239]",
                "sol": "abi.encode(\"148,92,4,164,68,224,52,235,251,159,14,248,246,105,70,54,40,73,178,179,55,173,135,145,73,241,170,153,238,174,143,239\")"
              },
              {
                "js": "\"k9a0sf\"",
                "sol": "\"k9a0sf\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[144,94,29,6,0,144,139,211,166,9,87,211,43,255,136,233,197,251,204,140,234,200,143,50,219,243,41,170,66,65,102,85]",
              "sol": "abi.encode(\"144,94,29,6,0,144,139,211,166,9,87,211,43,255,136,233,197,251,204,140,234,200,143,50,219,243,41,170,66,65,102,85\")"
            },
            {
              "js": "\"c3w4oq\"",
              "sol": "\"c3w4oq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[144,94,29,6,0,144,139,211,166,9,87,211,43,255,136,233,197,251,204,140,234,200,143,50,219,243,41,170,66,65,102,85]",
                "sol": "abi.encode(\"144,94,29,6,0,144,139,211,166,9,87,211,43,255,136,233,197,251,204,140,234,200,143,50,219,243,41,170,66,65,102,85\")"
              },
              {
                "js": "\"c3w4oq\"",
                "sol": "\"c3w4oq\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.028ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "196-198",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "[45,24,118,217,106,72,169,237,220,255,22,164,153,38,66,225,100,9,250,173,57,163,14,154,64,73,72,188,50,174,238,52]",
              "sol": "abi.encode(\"45,24,118,217,106,72,169,237,220,255,22,164,153,38,66,225,100,9,250,173,57,163,14,154,64,73,72,188,50,174,238,52\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "759",
                "sol": "759"
              },
              {
                "js": "[45,24,118,217,106,72,169,237,220,255,22,164,153,38,66,225,100,9,250,173,57,163,14,154,64,73,72,188,50,174,238,52]",
                "sol": "abi.encode(\"45,24,118,217,106,72,169,237,220,255,22,164,153,38,66,225,100,9,250,173,57,163,14,154,64,73,72,188,50,174,238,52\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[220,207,194,144,137,6,2,92,118,34,202,73,104,141,3,247,97,219,6,227,181,48,175,191,70,144,223,38,124,184,204,132]",
              "sol": "abi.encode(\"220,207,194,144,137,6,2,92,118,34,202,73,104,141,3,247,97,219,6,227,181,48,175,191,70,144,223,38,124,184,204,132\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[220,207,194,144,137,6,2,92,118,34,202,73,104,141,3,247,97,219,6,227,181,48,175,191,70,144,223,38,124,184,204,132]",
                "sol": "abi.encode(\"220,207,194,144,137,6,2,92,118,34,202,73,104,141,3,247,97,219,6,227,181,48,175,191,70,144,223,38,124,184,204,132\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.031ZProxyTESTBUXX.test_transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transfer(address,address,uint,bytes) WHEN to!=0x0,balances_>=value",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[100,139,11,119,19,245,207,254,198,216,56,186,90,209,188,5,82,173,43,133,218,167,148,229,146,179,136,92,206,227,241,68]",
              "sol": "abi.encode(\"100,139,11,119,19,245,207,254,198,216,56,186,90,209,188,5,82,173,43,133,218,167,148,229,146,179,136,92,206,227,241,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transfer(address,address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[100,139,11,119,19,245,207,254,198,216,56,186,90,209,188,5,82,173,43,133,218,167,148,229,146,179,136,92,206,227,241,68]",
                "sol": "abi.encode(\"100,139,11,119,19,245,207,254,198,216,56,186,90,209,188,5,82,173,43,133,218,167,148,229,146,179,136,92,206,227,241,68\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.033ZPony.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint256,bytes) WHEN value>=PLAY_COST",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "[76,145,226,79,209,60,169,49,238,157,109,34,178,178,74,12,154,62,210,55,235,109,175,124,126,76,146,130,135,141,245,66]",
              "sol": "abi.encode(\"76,145,226,79,209,60,169,49,238,157,109,34,178,178,74,12,154,62,210,55,235,109,175,124,126,76,146,130,135,141,245,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail tokenFallback(address,uint256,bytes) when NOT comply with: value >= PLAY_COST",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 757,
                "sol": 757
              },
              {
                "js": "[76,145,226,79,209,60,169,49,238,157,109,34,178,178,74,12,154,62,210,55,235,109,175,124,126,76,146,130,135,141,245,66]",
                "sol": "abi.encode(\"76,145,226,79,209,60,169,49,238,157,109,34,178,178,74,12,154,62,210,55,235,109,175,124,126,76,146,130,135,141,245,66\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.033ZPony.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:31:24.034ZPony.getPony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getPony(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}