,{
  "2020-11-11T05:49:50.438ZTESTBUXX.TESTBUXX": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute TESTBUXX(uint256,string,uint8,string)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"cgnar8\"",
              "sol": "\"cgnar8\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"cgnar8\"",
              "sol": "\"cgnar8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:49:57.669ZPony.Pony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute Pony(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.812ZTESTBUXX.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.812ZTESTBUXX.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.813ZTESTBUXX.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.814ZTESTBUXX.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.814ZTESTBUXX.safeApprove": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeApprove(address,uint256,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.814ZTESTBUXX.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.815ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.816ZTESTBUXX.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.817ZTESTBUXX.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-141",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[69,255,58,150,219,26,124,221,143,155,93,108,199,25,150,229,92,67,51,215,23,47,183,19,103,122,187,167,143,5,20,190]",
              "sol": "abi.encode(\"69,255,58,150,219,26,124,221,143,155,93,108,199,25,150,229,92,67,51,215,23,47,183,19,103,122,187,167,143,5,20,190\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[251,237,26,240,26,248,131,57,62,126,42,175,72,235,231,195,6,184,25,204,21,147,110,10,112,96,186,84,168,77,129,136]",
              "sol": "abi.encode(\"251,237,26,240,26,248,131,57,62,126,42,175,72,235,231,195,6,184,25,204,21,147,110,10,112,96,186,84,168,77,129,136\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.818ZTESTBUXX.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.818ZTESTBUXX.burnFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burnFrom(address,uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:50:04.819ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "180-187",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[46,17,101,170,85,196,95,242,99,122,80,213,207,28,52,0,215,187,82,77,136,151,66,134,109,207,222,20,223,24,73,7]",
              "sol": "abi.encode(\"46,17,101,170,85,196,95,242,99,122,80,213,207,28,52,0,215,187,82,77,136,151,66,134,109,207,222,20,223,24,73,7\")"
            },
            {
              "js": "\"cgnar8\"",
              "sol": "\"cgnar8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[46,17,101,170,85,196,95,242,99,122,80,213,207,28,52,0,215,187,82,77,136,151,66,134,109,207,222,20,223,24,73,7]",
                "sol": "abi.encode(\"46,17,101,170,85,196,95,242,99,122,80,213,207,28,52,0,215,187,82,77,136,151,66,134,109,207,222,20,223,24,73,7\")"
              },
              {
                "js": "\"cgnar8\"",
                "sol": "\"cgnar8\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "[235,180,41,190,163,240,6,82,90,235,24,108,53,61,47,212,9,28,70,201,5,246,36,169,108,171,84,245,36,206,91,90]",
              "sol": "abi.encode(\"235,180,41,190,163,240,6,82,90,235,24,108,53,61,47,212,9,28,70,201,5,246,36,169,108,171,84,245,36,206,91,90\")"
            },
            {
              "js": "\"cgnar8\"",
              "sol": "\"cgnar8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "[235,180,41,190,163,240,6,82,90,235,24,108,53,61,47,212,9,28,70,201,5,246,36,169,108,171,84,245,36,206,91,90]",
                "sol": "abi.encode(\"235,180,41,190,163,240,6,82,90,235,24,108,53,61,47,212,9,28,70,201,5,246,36,169,108,171,84,245,36,206,91,90\")"
              },
              {
                "js": "\"cgnar8\"",
                "sol": "\"cgnar8\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.821ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "196-198",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[110,87,194,56,111,35,95,211,236,252,183,172,197,124,22,178,171,35,13,140,8,19,56,235,86,33,231,36,176,64,207,24]",
              "sol": "abi.encode(\"110,87,194,56,111,35,95,211,236,252,183,172,197,124,22,178,171,35,13,140,8,19,56,235,86,33,231,36,176,64,207,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[110,87,194,56,111,35,95,211,236,252,183,172,197,124,22,178,171,35,13,140,8,19,56,235,86,33,231,36,176,64,207,24]",
                "sol": "abi.encode(\"110,87,194,56,111,35,95,211,236,252,183,172,197,124,22,178,171,35,13,140,8,19,56,235,86,33,231,36,176,64,207,24\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[25,147,85,8,113,78,35,143,209,60,240,245,147,112,70,193,114,98,7,141,54,0,86,118,250,12,191,47,174,165,63,26]",
              "sol": "abi.encode(\"25,147,85,8,113,78,35,143,209,60,240,245,147,112,70,193,114,98,7,141,54,0,86,118,250,12,191,47,174,165,63,26\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[25,147,85,8,113,78,35,143,209,60,240,245,147,112,70,193,114,98,7,141,54,0,86,118,250,12,191,47,174,165,63,26]",
                "sol": "abi.encode(\"25,147,85,8,113,78,35,143,209,60,240,245,147,112,70,193,114,98,7,141,54,0,86,118,250,12,191,47,174,165,63,26\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.825ZProxyTESTBUXX.test_transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transfer(address,address,uint,bytes) WHEN to!=0x0,balances_>=value",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[37,149,126,44,249,93,36,143,172,184,186,202,142,169,240,34,154,229,163,74,154,22,20,206,176,147,160,125,243,25,172,213]",
              "sol": "abi.encode(\"37,149,126,44,249,93,36,143,172,184,186,202,142,169,240,34,154,229,163,74,154,22,20,206,176,147,160,125,243,25,172,213\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transfer(address,address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[37,149,126,44,249,93,36,143,172,184,186,202,142,169,240,34,154,229,163,74,154,22,20,206,176,147,160,125,243,25,172,213]",
                "sol": "abi.encode(\"37,149,126,44,249,93,36,143,172,184,186,202,142,169,240,34,154,229,163,74,154,22,20,206,176,147,160,125,243,25,172,213\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.827ZPony.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint256,bytes) WHEN value>=PLAY_COST",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "[154,57,238,114,122,101,243,249,9,176,117,64,216,221,3,116,31,166,49,170,61,111,5,36,17,123,203,183,130,34,109,65]",
              "sol": "abi.encode(\"154,57,238,114,122,101,243,249,9,176,117,64,216,221,3,116,31,166,49,170,61,111,5,36,17,123,203,183,130,34,109,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail tokenFallback(address,uint256,bytes) when NOT comply with: value >= PLAY_COST",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 757,
                "sol": 757
              },
              {
                "js": "[154,57,238,114,122,101,243,249,9,176,117,64,216,221,3,116,31,166,49,170,61,111,5,36,17,123,203,183,130,34,109,65]",
                "sol": "abi.encode(\"154,57,238,114,122,101,243,249,9,176,117,64,216,221,3,116,31,166,49,170,61,111,5,36,17,123,203,183,130,34,109,65\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.828ZPony.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:50:04.828ZPony.getPony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getPony(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}