{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle',
  contracts:
   { MerkleShip:
      { projectGraph: [Circular],
        name: 'MerkleShip',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           emergencyStop:
            [ { name: 'emergencyStop',
                signature: 'emergencyStop(string)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           proposeGame:
            [ { name: 'proposeGame',
                signature: 'proposeGame(uint96,bytes32)',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           acceptGame:
            [ { name: 'acceptGame',
                signature: 'acceptGame(uint32,bytes32)',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           cancelProposedGame:
            [ { name: 'cancelProposedGame',
                signature: 'cancelProposedGame(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           guessAndReveal:
            [ { name: 'guessAndReveal',
                signature: 'guessAndReveal(uint32,uint8[2],bytes32[6],string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           _reveal:
            [ { name: '_reveal',
                signature: '_reveal(uint32,bytes32[6],string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _checkForVictoryByHit:
            [ { name: '_checkForVictoryByHit',
                signature: '_checkForVictoryByHit(uint32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           resolveAbandonedGame:
            [ { name: 'resolveAbandonedGame',
                signature: 'resolveAbandonedGame(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           concedeGame:
            [ { name: 'concedeGame',
                signature: 'concedeGame(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           challengeVictory:
            [ { name: 'challengeVictory',
                signature: 'challengeVictory(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           answerChallenge:
            [ { name: 'answerChallenge',
                signature: 'answerChallenge(uint32,string[64])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _zeroOutStorage:
            [ { name: '_zeroOutStorage',
                signature: '_zeroOutStorage(uint32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           resolveUnclaimedVictory:
            [ { name: 'resolveUnclaimedVictory',
                signature: 'resolveUnclaimedVictory(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           resolveUnansweredChallenge:
            [ { name: 'resolveUnansweredChallenge',
                signature: 'resolveUnansweredChallenge(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           emergencyResolve:
            [ { name: 'emergencyResolve',
                signature: 'emergencyResolve(uint32)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _checkShipCount:
            [ { name: '_checkShipCount',
                signature: '_checkShipCount(string[64])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _checkShipLength:
            [ { name: '_checkShipLength',
                signature: '_checkShipLength(string[64])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _hashEach:
            [ { name: '_hashEach',
                signature: '_hashEach(string[64])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _sortArray:
            [ { name: '_sortArray',
                signature: '_sortArray(bytes32[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _quickSort:
            [ { name: '_quickSort',
                signature: '_quickSort(bytes32[],int,int)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _computeMerkleTree:
            [ { name: '_computeMerkleTree',
                signature: '_computeMerkleTree(bytes32[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           getBalance:
            [ { name: 'getBalance',
                signature: 'getBalance()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _verifyMerkleProof:
            [ { name: '_verifyMerkleProof',
                signature: '_verifyMerkleProof(bytes32[6],bytes32,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isCoordinateValid:
            [ { name: '_isCoordinateValid',
                signature: '_isCoordinateValid(uint8,uint8)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _coordinateToIndex:
            [ { name: '_coordinateToIndex',
                signature: '_coordinateToIndex(uint8,uint8)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _subString:
            [ { name: '_subString',
                signature: '_subString(string,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isStringValid:
            [ { name: '_isStringValid',
                signature: '_isStringValid(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { turnControl:
            { name: 'turnControl',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'turnControl',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           isActive:
            { name: 'isActive',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isActive',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           isReady:
            { name: 'isReady',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isReady',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           isPlayer:
            { name: 'isPlayer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPlayer',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           notEmergency:
            { name: 'notEmergency',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'notEmergency',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyEmergency:
            { name: 'onlyEmergency',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyEmergency',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyAdmin:
            { name: 'onlyAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { isStopped:
            { functionsWrite: { emergencyStop: [Array] },
              contract: [Circular],
              name: 'isStopped',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           admin:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'admin',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           gameCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'gameCount',
              isArray: false,
              initialValue: 0,
              type: 'uint32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           abandonThreshold:
            { functionsWrite: {},
              contract: [Circular],
              name: 'abandonThreshold',
              isArray: false,
              initialValue: 48,
              type: 'uint32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rows:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rows',
              isArray: false,
              initialValue: 8,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           columns:
            { functionsWrite: {},
              contract: [Circular],
              name: 'columns',
              isArray: false,
              initialValue: 8,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           hitThreshold:
            { functionsWrite: {},
              contract: [Circular],
              name: 'hitThreshold',
              isArray: false,
              initialValue: 12,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           games:
            { functionsWrite: {},
              contract: [Circular],
              name: 'games',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint32=>MerkleShip.Game)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           userBalance:
            { functionsWrite: {},
              contract: [Circular],
              name: 'userBalance',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           claimTimer:
            { functionsWrite: {},
              contract: [Circular],
              name: 'claimTimer',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint32=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
        inheritsFrom: {},
        structs:
         { Game:
            { name: 'Game',
              contract: [Circular],
              parameters:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ] } },
        enums:
         { GameState:
            { name: 'GameState',
              contract: [Circular],
              members:
               [ 'Ready',
                 'Cancelled',
                 'Active',
                 'Abandoned',
                 'VictoryPending',
                 'VictoryChallenged',
                 'Complete',
                 'Zeroed' ] },
           Turn:
            { name: 'Turn',
              contract: [Circular],
              members: [ 'Inactive', 'PlayerA', 'PlayerB' ] },
           GuessState:
            { name: 'GuessState',
              contract: [Circular],
              members: [ 'Unknown', 'Pending', 'Hit', 'Miss' ] } },
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MerkleShip',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: null,
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'GameState',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'Turn',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'GuessState',
                members: [Array],
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Game',
                members: [Array],
                loc: [Object],
                parentName: 'MerkleShip' },
              { type: 'ModifierDefinition',
                name: 'turnControl',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isActive',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isReady',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isPlayer',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'notEmergency',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyEmergency',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyAdmin',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogProposedGame',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogGameAccepted',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogGameCancelled',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogSmackTalk',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogUserWithdraw',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogGuess',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogReveal',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogVictoryPending',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogVictoryChallenged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogWinner',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'LogEmergency',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'emergencyStop',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'proposeGame',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'acceptGame',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cancelProposedGame',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'guessAndReveal',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_reveal',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkForVictoryByHit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'resolveAbandonedGame',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'concedeGame',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'challengeVictory',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'answerChallenge',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_zeroOutStorage',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'resolveUnclaimedVictory',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'resolveUnansweredChallenge',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'emergencyResolve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkShipCount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkShipLength',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_hashEach',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_sortArray',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_quickSort',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_computeMerkleTree',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalance',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_verifyMerkleProof',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isCoordinateValid',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_coordinateToIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_subString',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isStringValid',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 },
              end: { line: 1098, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mod:
            [ { name: 'mod',
                signature: 'mod(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 65, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
  structs:
   { Game:
      { name: 'Game',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Game: [Circular] },
           enums:
            { GameState:
               { name: 'GameState', contract: [Circular], members: [Array] },
              Turn: { name: 'Turn', contract: [Circular], members: [Array] },
              GuessState:
               { name: 'GuessState', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        parameters:
         [ { name: 'id',
             isUserDefinedType: false,
             type: 'uint32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'turnStartTime',
             isUserDefinedType: false,
             type: 'uint32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'wager',
             isUserDefinedType: false,
             type: 'uint96',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerA',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerB',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'winner',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAhitCount',
             isUserDefinedType: false,
             type: 'uint8',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBhitCount',
             isUserDefinedType: false,
             type: 'uint8',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'state',
             isUserDefinedType: true,
             type: 'GameState',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'turn',
             isUserDefinedType: true,
             type: 'Turn',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAMerkleRoot',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBMerkleRoot',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAguesses',
             isUserDefinedType: false,
             type: 'mapping(uint8=>GuessState)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBguesses',
             isUserDefinedType: false,
             type: 'mapping(uint8=>GuessState)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAsquaresGuessed',
             isUserDefinedType: false,
             type: 'uint8[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBsquaresGuessed',
             isUserDefinedType: false,
             type: 'uint8[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'MerkleShip.Game':
      { name: 'Game',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Game: [Circular] },
           enums:
            { GameState:
               { name: 'GameState', contract: [Circular], members: [Array] },
              Turn: { name: 'Turn', contract: [Circular], members: [Array] },
              GuessState:
               { name: 'GuessState', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        parameters:
         [ { name: 'id',
             isUserDefinedType: false,
             type: 'uint32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'turnStartTime',
             isUserDefinedType: false,
             type: 'uint32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'wager',
             isUserDefinedType: false,
             type: 'uint96',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerA',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerB',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'winner',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAhitCount',
             isUserDefinedType: false,
             type: 'uint8',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBhitCount',
             isUserDefinedType: false,
             type: 'uint8',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'state',
             isUserDefinedType: true,
             type: 'GameState',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'turn',
             isUserDefinedType: true,
             type: 'Turn',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAMerkleRoot',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBMerkleRoot',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAguesses',
             isUserDefinedType: false,
             type: 'mapping(uint8=>GuessState)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBguesses',
             isUserDefinedType: false,
             type: 'mapping(uint8=>GuessState)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerAsquaresGuessed',
             isUserDefinedType: false,
             type: 'uint8[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'playerBsquaresGuessed',
             isUserDefinedType: false,
             type: 'uint8[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums:
   { GameState:
      { name: 'GameState',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs:
            { Game: { name: 'Game', contract: [Circular], parameters: [Array] } },
           enums:
            { GameState: [Circular],
              Turn: { name: 'Turn', contract: [Circular], members: [Array] },
              GuessState:
               { name: 'GuessState', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        members:
         [ 'Ready',
           'Cancelled',
           'Active',
           'Abandoned',
           'VictoryPending',
           'VictoryChallenged',
           'Complete',
           'Zeroed' ] },
     'MerkleShip.GameState':
      { name: 'GameState',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs:
            { Game: { name: 'Game', contract: [Circular], parameters: [Array] } },
           enums:
            { GameState: [Circular],
              Turn: { name: 'Turn', contract: [Circular], members: [Array] },
              GuessState:
               { name: 'GuessState', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        members:
         [ 'Ready',
           'Cancelled',
           'Active',
           'Abandoned',
           'VictoryPending',
           'VictoryChallenged',
           'Complete',
           'Zeroed' ] },
     Turn:
      { name: 'Turn',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs:
            { Game: { name: 'Game', contract: [Circular], parameters: [Array] } },
           enums:
            { GameState:
               { name: 'GameState', contract: [Circular], members: [Array] },
              Turn: [Circular],
              GuessState:
               { name: 'GuessState', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        members: [ 'Inactive', 'PlayerA', 'PlayerB' ] },
     'MerkleShip.Turn':
      { name: 'Turn',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs:
            { Game: { name: 'Game', contract: [Circular], parameters: [Array] } },
           enums:
            { GameState:
               { name: 'GameState', contract: [Circular], members: [Array] },
              Turn: [Circular],
              GuessState:
               { name: 'GuessState', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        members: [ 'Inactive', 'PlayerA', 'PlayerB' ] },
     GuessState:
      { name: 'GuessState',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs:
            { Game: { name: 'Game', contract: [Circular], parameters: [Array] } },
           enums:
            { GameState:
               { name: 'GameState', contract: [Circular], members: [Array] },
              Turn: { name: 'Turn', contract: [Circular], members: [Array] },
              GuessState: [Circular] },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        members: [ 'Unknown', 'Pending', 'Hit', 'Miss' ] },
     'MerkleShip.GuessState':
      { name: 'GuessState',
        contract:
         { projectGraph: [Circular],
           name: 'MerkleShip',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              emergencyStop: [ [Object] ],
              proposeGame: [ [Object] ],
              acceptGame: [ [Object] ],
              cancelProposedGame: [ [Object] ],
              guessAndReveal: [ [Object] ],
              _reveal: [ [Object] ],
              _checkForVictoryByHit: [ [Object] ],
              resolveAbandonedGame: [ [Object] ],
              concedeGame: [ [Object] ],
              challengeVictory: [ [Object] ],
              answerChallenge: [ [Object] ],
              _zeroOutStorage: [ [Object] ],
              resolveUnclaimedVictory: [ [Object] ],
              resolveUnansweredChallenge: [ [Object] ],
              withdraw: [ [Object] ],
              emergencyResolve: [ [Object] ],
              _checkShipCount: [ [Object] ],
              _checkShipLength: [ [Object] ],
              _hashEach: [ [Object] ],
              _sortArray: [ [Object] ],
              _quickSort: [ [Object] ],
              _computeMerkleTree: [ [Object] ],
              getBalance: [ [Object] ],
              _verifyMerkleProof: [ [Object] ],
              _isCoordinateValid: [ [Object] ],
              _coordinateToIndex: [ [Object] ],
              _subString: [ [Object] ],
              _isStringValid: [ [Object] ] },
           modifiers:
            { turnControl:
               { name: 'turnControl',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isActive:
               { name: 'isActive',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isReady:
               { name: 'isReady',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              isPlayer:
               { name: 'isPlayer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] },
              notEmergency:
               { name: 'notEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyEmergency:
               { name: 'onlyEmergency',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyAdmin:
               { name: 'onlyAdmin',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { isStopped:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'isStopped',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              admin:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'admin',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              gameCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'gameCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              abandonThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'abandonThreshold',
                 isArray: false,
                 initialValue: 48,
                 type: 'uint32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              rows:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'rows',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              columns:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'columns',
                 isArray: false,
                 initialValue: 8,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              hitThreshold:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'hitThreshold',
                 isArray: false,
                 initialValue: 12,
                 type: 'uint8',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              games:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'games',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>MerkleShip.Game)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              userBalance:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'userBalance',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              claimTimer:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'claimTimer',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint32=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/SafeMath.sol' } },
           inheritsFrom: {},
           structs:
            { Game: { name: 'Game', contract: [Circular], parameters: [Array] } },
           enums:
            { GameState:
               { name: 'GameState', contract: [Circular], members: [Array] },
              Turn: { name: 'Turn', contract: [Circular], members: [Array] },
              GuessState: [Circular] },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MerkleShip',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/truffle/contracts/MerkleShip.sol' },
        members: [ 'Unknown', 'Pending', 'Hit', 'Miss' ] } } }