,{
  "2020-11-11T02:20:04.485ZSwaps.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[60,214,193,244,226,220,221,54,247,254,249,73,64,175,212,217,45,18,186,5,90,205,236,126,176,108,251,140,228,168,82,50]",
              "sol": "abi.encode(\"60,214,193,244,226,220,221,54,247,254,249,73,64,175,212,217,45,18,186,5,90,205,236,126,176,108,251,140,228,168,82,50\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.486ZSwaps.createOrder": {
    "branches": {
      "0": {
        "branch": {
          "loc": "163-167",
          "restrictions": [
            "_brokerAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37]",
              "sol": "stringToBytes32(\"45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37\")"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+149",
              "sol": "block.timestamp+149"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37]",
                "sol": "stringToBytes32(\"45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37\")"
              },
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+149",
                "sol": "block.timestamp+149"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37]",
                "sol": "stringToBytes32(\"45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+149",
                "sol": "block.timestamp+149"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37]",
                "sol": "stringToBytes32(\"45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+149",
                "sol": "block.timestamp+149"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37]",
                "sol": "stringToBytes32(\"45,94,158,92,222,151,119,177,99,115,242,52,189,217,117,30,29,198,192,56,52,180,234,110,144,61,158,185,103,225,46,37\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_brokerAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2]",
              "sol": "stringToBytes32(\"109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2\")"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+415",
              "sol": "block.timestamp+415"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2]",
                "sol": "stringToBytes32(\"109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2\")"
              },
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+415",
                "sol": "block.timestamp+415"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2]",
                "sol": "stringToBytes32(\"109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+415",
                "sol": "block.timestamp+415"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2]",
                "sol": "stringToBytes32(\"109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+415",
                "sol": "block.timestamp+415"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2]",
                "sol": "stringToBytes32(\"109,6,202,167,86,170,230,92,0,185,28,117,9,113,105,183,78,117,239,4,23,135,108,230,246,245,101,174,25,25,218,2\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "168-172",
          "restrictions": [
            "myWishAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214]",
              "sol": "stringToBytes32(\"96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214\")"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+255",
              "sol": "block.timestamp+255"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214]",
                "sol": "stringToBytes32(\"96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214\")"
              },
              {
                "js": "accounts[4]",
                "sol": "accounts[4]"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+255",
                "sol": "block.timestamp+255"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214]",
                "sol": "stringToBytes32(\"96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214\")"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+255",
                "sol": "block.timestamp+255"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214]",
                "sol": "stringToBytes32(\"96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214\")"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+255",
                "sol": "block.timestamp+255"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214]",
                "sol": "stringToBytes32(\"96,29,86,99,159,253,83,234,28,12,242,201,22,96,189,32,167,108,143,203,206,194,166,167,106,167,36,38,11,201,130,214\")"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "myWishAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220]",
              "sol": "stringToBytes32(\"111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220\")"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+526",
              "sol": "block.timestamp+526"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220]",
                "sol": "stringToBytes32(\"111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220\")"
              },
              {
                "js": "accounts[0]",
                "sol": "accounts[0]"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+526",
                "sol": "block.timestamp+526"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220]",
                "sol": "stringToBytes32(\"111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+526",
                "sol": "block.timestamp+526"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220]",
                "sol": "stringToBytes32(\"111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+526",
                "sol": "block.timestamp+526"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220]",
                "sol": "stringToBytes32(\"111,97,33,9,212,161,193,153,138,187,234,92,104,122,49,83,43,21,233,216,95,89,82,205,17,78,201,3,60,18,111,220\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:20:04.499ZSwaps.deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "198-215",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.value==_amount,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[1,55,22,130,50,60,123,245,159,235,81,34,228,208,70,66,188,104,10,156,72,101,49,93,28,152,210,180,1,85,62,220]",
              "sol": "stringToBytes32(\"1,55,22,130,50,60,123,245,159,235,81,34,228,208,70,66,188,104,10,156,72,101,49,93,28,152,210,180,1,85,62,220\")"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0],value:10000}",
              "sol": "{\"from\":\"0x0\",\"value\":\"10000\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail deposit(bytes32,address,uint) when NOT comply with: msg.value == _amount",
            "parameters": [
              {
                "js": "[1,55,22,130,50,60,123,245,159,235,81,34,228,208,70,66,188,104,10,156,72,101,49,93,28,152,210,180,1,85,62,220]",
                "sol": "stringToBytes32(\"1,55,22,130,50,60,123,245,159,235,81,34,228,208,70,66,188,104,10,156,72,101,49,93,28,152,210,180,1,85,62,220\")"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[0],value:10000}",
                "sol": "{\"from\":\"0x0\",\"value\":\"10000\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "204-215",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[135,68,118,141,36,116,66,216,156,185,69,25,206,115,108,136,22,16,68,237,245,95,9,41,96,1,29,56,34,193,12,11]",
              "sol": "stringToBytes32(\"135,68,118,141,36,116,66,216,156,185,69,25,206,115,108,136,22,16,68,237,245,95,9,41,96,1,29,56,34,193,12,11\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.501ZSwaps.cancel": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute cancel(bytes32) WHEN msg.sender==owners,isCancelled!=true,isSwapped!=true",
          "parameters": [
            {
              "js": "[166,161,152,94,159,17,99,155,145,142,167,146,244,190,195,40,60,164,15,186,116,156,232,74,161,234,194,33,20,76,221,60]",
              "sol": "stringToBytes32(\"166,161,152,94,159,17,99,155,145,142,167,146,244,190,195,40,60,164,15,186,116,156,232,74,161,234,194,33,20,76,221,60\")"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.502ZSwaps.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "253-255",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[178,2,77,44,231,96,108,195,200,19,43,226,62,42,214,30,19,203,60,116,181,123,60,138,150,137,193,131,11,10,29,173]",
              "sol": "stringToBytes32(\"178,2,77,44,231,96,108,195,200,19,43,226,62,42,214,30,19,203,60,116,181,123,60,138,150,137,193,131,11,10,29,173\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[14,216,241,134,182,142,212,155,225,98,192,68,252,151,115,85,113,55,71,184,154,100,114,119,65,156,170,65,13,191,181,114]",
              "sol": "stringToBytes32(\"14,216,241,134,182,142,212,155,225,98,192,68,252,151,115,85,113,55,71,184,154,100,114,119,65,156,170,65,13,191,181,114\")"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "259-262",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[111,10,88,96,6,173,242,70,141,215,208,55,161,210,161,82,135,38,97,154,191,164,119,179,52,197,248,64,188,179,159,66]",
              "sol": "stringToBytes32(\"111,10,88,96,6,173,242,70,141,215,208,55,161,210,161,82,135,38,97,154,191,164,119,179,52,197,248,64,188,179,159,66\")"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[70,120,228,83,211,226,11,96,85,217,203,15,63,172,17,240,156,153,82,132,230,72,90,193,243,28,37,164,172,146,205,7]",
              "sol": "stringToBytes32(\"70,120,228,83,211,226,11,96,85,217,203,15,63,172,17,240,156,153,82,132,230,72,90,193,243,28,37,164,172,146,205,7\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.504ZSwaps.setVault": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setVault(Vault) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractVault.address",
              "sol": "contractVault"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setVault(Vault) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractVault.address",
                "sol": "contractVault"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:20:04.505ZSwaps.setMyWishPercents": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishPercents(uint,uint) WHEN msg.sender==_owner,_basePercent<=10000,_quotePercent<=10000",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _basePercent <= 10000",
            "parameters": [
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _quotePercent <= 10000",
            "parameters": [
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:20:04.506ZSwaps.setMyWishAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishAddress(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishAddress(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:20:04.506ZSwaps.createKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createKey(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.506ZSwaps.allBrokersBasePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersBasePercent(bytes32)",
          "parameters": [
            {
              "js": "[141,138,200,85,224,110,81,154,87,148,226,184,184,208,77,83,71,166,180,183,178,90,229,240,231,242,28,56,23,116,115,131]",
              "sol": "stringToBytes32(\"141,138,200,85,224,110,81,154,87,148,226,184,184,208,77,83,71,166,180,183,178,90,229,240,231,242,28,56,23,116,115,131\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.507ZSwaps.allBrokersQuotePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersQuotePercent(bytes32)",
          "parameters": [
            {
              "js": "[236,97,146,23,222,97,41,55,74,27,219,162,13,105,251,61,104,39,239,164,145,22,238,98,113,111,214,221,129,252,11,78]",
              "sol": "stringToBytes32(\"236,97,146,23,222,97,41,55,74,27,219,162,13,105,251,61,104,39,239,164,145,22,238,98,113,111,214,221,129,252,11,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.507ZSwaps.baseLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseLimit(bytes32)",
          "parameters": [
            {
              "js": "[119,33,193,174,249,208,72,81,212,201,143,243,196,152,150,163,179,228,79,68,33,212,133,200,134,47,144,218,221,120,29,32]",
              "sol": "stringToBytes32(\"119,33,193,174,249,208,72,81,212,201,143,243,196,152,150,163,179,228,79,68,33,212,133,200,134,47,144,218,221,120,29,32\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.507ZSwaps.quoteLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteLimit(bytes32)",
          "parameters": [
            {
              "js": "[26,144,29,242,221,14,164,173,119,116,48,166,232,79,6,87,246,61,44,109,196,1,150,223,39,198,64,121,136,250,176,18]",
              "sol": "stringToBytes32(\"26,144,29,242,221,14,164,173,119,116,48,166,232,79,6,87,246,61,44,109,196,1,150,223,39,198,64,121,136,250,176,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.507ZSwaps.baseRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseRaised(bytes32)",
          "parameters": [
            {
              "js": "[247,214,252,206,94,29,166,251,18,147,199,234,67,152,134,84,52,100,31,242,27,191,154,220,212,74,211,149,47,203,174,125]",
              "sol": "stringToBytes32(\"247,214,252,206,94,29,166,251,18,147,199,234,67,152,134,84,52,100,31,242,27,191,154,220,212,74,211,149,47,203,174,125\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.508ZSwaps.quoteRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteRaised(bytes32)",
          "parameters": [
            {
              "js": "[10,164,90,22,160,252,62,141,251,109,20,14,212,22,69,145,32,226,161,160,11,159,165,213,194,54,169,166,18,112,109,28]",
              "sol": "stringToBytes32(\"10,164,90,22,160,252,62,141,251,109,20,14,212,22,69,145,32,226,161,160,11,159,165,213,194,54,169,166,18,112,109,28\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.508ZSwaps.isBaseFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isBaseFilled(bytes32)",
          "parameters": [
            {
              "js": "[109,80,215,122,146,182,214,160,99,169,179,179,77,166,147,208,225,72,238,22,247,79,191,141,77,101,69,90,249,109,38,226]",
              "sol": "stringToBytes32(\"109,80,215,122,146,182,214,160,99,169,179,179,77,166,147,208,225,72,238,22,247,79,191,141,77,101,69,90,249,109,38,226\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.508ZSwaps.isQuoteFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isQuoteFilled(bytes32)",
          "parameters": [
            {
              "js": "[53,186,46,152,93,151,117,25,50,67,57,111,249,140,143,72,18,141,91,145,110,87,74,35,48,75,27,222,24,218,123,127]",
              "sol": "stringToBytes32(\"53,186,46,152,93,151,117,25,50,67,57,111,249,140,143,72,18,141,91,145,110,87,74,35,48,75,27,222,24,218,123,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.508ZSwaps.baseInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseInvestors(bytes32)",
          "parameters": [
            {
              "js": "[101,106,64,118,252,6,190,224,233,216,179,227,31,51,145,184,131,102,210,50,104,56,96,153,165,161,220,35,226,185,157,6]",
              "sol": "stringToBytes32(\"101,106,64,118,252,6,190,224,233,216,179,227,31,51,145,184,131,102,210,50,104,56,96,153,165,161,220,35,226,185,157,6\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.509ZSwaps.quoteInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteInvestors(bytes32)",
          "parameters": [
            {
              "js": "[105,31,79,244,103,141,132,123,192,74,20,79,241,242,14,1,149,131,233,18,45,160,248,163,237,63,243,0,85,19,35,37]",
              "sol": "stringToBytes32(\"105,31,79,244,103,141,132,123,192,74,20,79,241,242,14,1,149,131,233,18,45,160,248,163,237,63,243,0,85,19,35,37\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.509ZSwaps.baseUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[225,95,192,161,139,36,58,216,122,44,200,190,184,224,82,220,81,92,42,54,111,144,17,250,245,115,32,179,154,55,30,80]",
              "sol": "stringToBytes32(\"225,95,192,161,139,36,58,216,122,44,200,190,184,224,82,220,81,92,42,54,111,144,17,250,245,115,32,179,154,55,30,80\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.509ZSwaps.quoteUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[215,29,61,41,2,130,136,18,5,170,119,134,17,140,188,9,105,110,194,2,98,200,51,182,144,153,22,174,178,243,244,247]",
              "sol": "stringToBytes32(\"215,29,61,41,2,130,136,18,5,170,119,134,17,140,188,9,105,110,194,2,98,200,51,182,144,153,22,174,178,243,244,247\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.510ZSwaps.orderBrokers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute orderBrokers(bytes32)",
          "parameters": [
            {
              "js": "[190,217,108,95,86,237,90,76,0,245,242,252,162,33,196,29,0,195,212,88,74,221,24,48,61,230,178,178,149,4,126,143]",
              "sol": "stringToBytes32(\"190,217,108,95,86,237,90,76,0,245,242,252,162,33,196,29,0,195,212,88,74,221,24,48,61,230,178,178,149,4,126,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.514ZProxySwaps.test_allBrokersPercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_allBrokersPercent(address,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[176,125,105,18,178,162,36,159,58,119,93,168,93,43,7,130,231,112,2,10,95,48,74,95,87,13,232,94,58,167,203,130]",
              "sol": "stringToBytes32(\"176,125,105,18,178,162,36,159,58,119,93,168,93,43,7,130,231,112,2,10,95,48,74,95,87,13,232,94,58,167,203,130\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.515ZProxySwaps.test_swap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_swap(bytes32) WHEN isSwapped!=true,isCancelled!=true,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[79,154,114,199,231,98,137,120,214,219,34,210,143,146,225,198,19,240,102,81,152,89,137,19,42,180,5,161,56,114,35,138]",
              "sol": "stringToBytes32(\"79,154,114,199,231,98,137,120,214,219,34,210,143,146,225,198,19,240,102,81,152,89,137,19,42,180,5,161,56,114,35,138\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.516ZProxySwaps.test_distribute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_distribute(bytes32,address,address)",
          "parameters": [
            {
              "js": "[213,103,92,190,163,163,24,79,224,6,69,86,93,24,44,243,53,234,71,96,36,166,21,190,15,61,33,73,110,199,233,114]",
              "sol": "stringToBytes32(\"213,103,92,190,163,163,24,79,224,6,69,86,93,24,44,243,53,234,71,96,36,166,21,190,15,61,33,73,110,199,233,114\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.517ZProxySwaps.test_removeInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_removeInvestor(address[],address)",
          "parameters": [
            {
              "js": "[accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.518ZProxySwaps.test_deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "470-477",
          "restrictions": [
            "baseAddresses == _token",
            "baseOnlyInvestor != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses==_token,baseOnlyInvestor!=0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps,msg.sender==baseOnlyInvestor",
          "parameters": [
            {
              "js": "[129,137,65,153,67,52,114,152,113,222,96,74,221,223,81,16,75,27,16,47,191,245,108,78,139,225,207,133,101,244,234,42]",
              "sol": "stringToBytes32(\"129,137,65,153,67,52,114,152,113,222,96,74,221,223,81,16,75,27,16,47,191,245,108,78,139,225,207,133,101,244,234,42\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "baseAddresses != _token"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses!=_token,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[192,107,244,200,189,202,221,101,118,238,23,191,5,76,129,167,241,69,201,166,130,174,52,110,89,15,138,219,31,130,106,153]",
              "sol": "stringToBytes32(\"192,107,244,200,189,202,221,101,118,238,23,191,5,76,129,167,241,69,201,166,130,174,52,110,89,15,138,219,31,130,106,153\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "487-493",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall!=true,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[73,159,216,154,5,217,196,241,127,249,173,241,245,20,128,203,175,248,40,129,61,175,186,58,175,204,66,53,237,229,128,8]",
              "sol": "stringToBytes32(\"73,159,216,154,5,217,196,241,127,249,173,241,245,20,128,203,175,248,40,129,61,175,186,58,175,204,66,53,237,229,128,8\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714809",
              "sol": "4038714809"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true",
            "baseOnlyInvestor == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall==true,baseOnlyInvestor==0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[87,27,21,173,174,151,78,142,80,127,0,33,130,239,172,64,54,65,39,25,106,149,135,209,211,57,129,102,211,118,239,93]",
              "sol": "stringToBytes32(\"87,27,21,173,174,151,78,142,80,127,0,33,130,239,172,64,54,65,39,25,106,149,135,209,211,57,129,102,211,118,239,93\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.521ZProxySwaps.test_isInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isInvestor(bytes32,address,address)",
          "parameters": [
            {
              "js": "[7,162,147,174,160,34,196,181,86,254,119,75,6,33,43,9,105,19,23,250,206,86,109,35,10,209,96,189,123,160,37,45]",
              "sol": "stringToBytes32(\"7,162,147,174,160,34,196,181,86,254,119,75,6,33,43,9,105,19,23,250,206,86,109,35,10,209,96,189,123,160,37,45\")"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.522ZVault.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.522ZVault.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[54,195,113,152,250,199,227,99,73,108,197,23,14,140,22,247,202,60,149,137,194,153,232,112,144,166,240,140,213,91,20,204]",
              "sol": "abi.encode(\"54,195,113,152,250,199,227,99,73,108,197,23,14,140,22,247,202,60,149,137,194,153,232,112,144,166,240,140,213,91,20,204\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:20:04.522ZVault.setSwaps": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSwaps(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSwaps(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:20:04.523ZVault.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "26-30",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}