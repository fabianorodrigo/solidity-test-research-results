,{
  "2020-11-12T02:50:14.149ZSwaps.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[219,224,59,9,18,241,244,118,80,203,211,86,16,34,120,71,141,110,100,221,244,172,27,189,96,42,189,182,201,111,158,34]",
              "sol": "abi.encode(\"219,224,59,9,18,241,244,118,80,203,211,86,16,34,120,71,141,110,100,221,244,172,27,189,96,42,189,182,201,111,158,34\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.150ZSwaps.createOrder": {
    "branches": {
      "0": {
        "branch": {
          "loc": "163-167",
          "restrictions": [
            "_brokerAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78]",
              "sol": "stringToBytes32(\"118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78\")"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "4038714809",
              "sol": "4038714809"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+833",
              "sol": "block.timestamp+833"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78]",
                "sol": "stringToBytes32(\"118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78\")"
              },
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+833",
                "sol": "block.timestamp+833"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78]",
                "sol": "stringToBytes32(\"118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+833",
                "sol": "block.timestamp+833"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78]",
                "sol": "stringToBytes32(\"118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+833",
                "sol": "block.timestamp+833"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78]",
                "sol": "stringToBytes32(\"118,72,92,242,40,242,27,70,136,92,203,167,212,64,169,130,246,148,27,112,133,99,86,254,211,45,161,212,18,14,187,78\")"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_brokerAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209]",
              "sol": "stringToBytes32(\"34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+158",
              "sol": "block.timestamp+158"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209]",
                "sol": "stringToBytes32(\"34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209\")"
              },
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+158",
                "sol": "block.timestamp+158"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209]",
                "sol": "stringToBytes32(\"34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+158",
                "sol": "block.timestamp+158"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209]",
                "sol": "stringToBytes32(\"34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+158",
                "sol": "block.timestamp+158"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209]",
                "sol": "stringToBytes32(\"34,4,155,227,166,193,201,115,74,24,53,106,195,68,128,34,87,185,246,21,175,208,227,73,177,105,179,198,245,176,36,209\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "168-172",
          "restrictions": [
            "myWishAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122]",
              "sol": "stringToBytes32(\"0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
              "sol": "block.timestamp+725"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122]",
                "sol": "stringToBytes32(\"0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122\")"
              },
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
                "sol": "block.timestamp+725"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122]",
                "sol": "stringToBytes32(\"0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
                "sol": "block.timestamp+725"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122]",
                "sol": "stringToBytes32(\"0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
                "sol": "block.timestamp+725"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122]",
                "sol": "stringToBytes32(\"0,81,195,31,52,190,34,230,109,8,211,64,213,33,215,176,103,171,25,32,186,86,89,57,34,238,105,168,6,40,146,122\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "myWishAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210]",
              "sol": "stringToBytes32(\"202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+50",
              "sol": "block.timestamp+50"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210]",
                "sol": "stringToBytes32(\"202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210\")"
              },
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+50",
                "sol": "block.timestamp+50"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210]",
                "sol": "stringToBytes32(\"202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210\")"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+50",
                "sol": "block.timestamp+50"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210]",
                "sol": "stringToBytes32(\"202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210\")"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+50",
                "sol": "block.timestamp+50"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210]",
                "sol": "stringToBytes32(\"202,228,194,237,152,70,42,215,115,25,155,217,27,214,0,93,123,66,54,101,246,8,135,106,26,190,164,171,61,119,49,210\")"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:50:14.163ZSwaps.deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "198-215",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.value==_amount,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[193,52,142,137,164,235,240,187,144,255,167,128,61,156,139,127,240,94,231,234,121,42,234,140,5,154,80,62,1,108,50,37]",
              "sol": "stringToBytes32(\"193,52,142,137,164,235,240,187,144,255,167,128,61,156,139,127,240,94,231,234,121,42,234,140,5,154,80,62,1,108,50,37\")"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0],value:257}",
              "sol": "{\"from\":\"0x0\",\"value\":\"257\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail deposit(bytes32,address,uint) when NOT comply with: msg.value == _amount",
            "parameters": [
              {
                "js": "[193,52,142,137,164,235,240,187,144,255,167,128,61,156,139,127,240,94,231,234,121,42,234,140,5,154,80,62,1,108,50,37]",
                "sol": "stringToBytes32(\"193,52,142,137,164,235,240,187,144,255,167,128,61,156,139,127,240,94,231,234,121,42,234,140,5,154,80,62,1,108,50,37\")"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": 258,
                "sol": 258
              },
              {
                "js": "{from:accounts[0],value:257}",
                "sol": "{\"from\":\"0x0\",\"value\":\"257\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "204-215",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[207,173,90,28,129,167,26,110,152,146,34,172,4,228,101,98,67,114,35,118,96,21,216,51,139,177,154,210,237,105,243,120]",
              "sol": "stringToBytes32(\"207,173,90,28,129,167,26,110,152,146,34,172,4,228,101,98,67,114,35,118,96,21,216,51,139,177,154,210,237,105,243,120\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.165ZSwaps.cancel": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute cancel(bytes32) WHEN msg.sender==owners,isCancelled!=true,isSwapped!=true",
          "parameters": [
            {
              "js": "[190,30,204,92,209,62,7,23,140,197,197,185,232,42,177,183,20,106,40,85,72,29,197,145,61,87,179,94,21,158,10,7]",
              "sol": "stringToBytes32(\"190,30,204,92,209,62,7,23,140,197,197,185,232,42,177,183,20,106,40,85,72,29,197,145,61,87,179,94,21,158,10,7\")"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.166ZSwaps.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "253-255",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[102,79,179,129,53,175,171,206,252,224,188,8,203,177,203,206,139,196,209,1,254,170,157,30,54,121,173,116,227,189,77,218]",
              "sol": "stringToBytes32(\"102,79,179,129,53,175,171,206,252,224,188,8,203,177,203,206,139,196,209,1,254,170,157,30,54,121,173,116,227,189,77,218\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[141,219,251,215,241,19,166,91,148,82,145,153,155,104,132,115,97,168,174,33,50,185,155,169,101,91,161,225,204,106,111,117]",
              "sol": "stringToBytes32(\"141,219,251,215,241,19,166,91,148,82,145,153,155,104,132,115,97,168,174,33,50,185,155,169,101,91,161,225,204,106,111,117\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "259-262",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[201,63,39,201,18,170,228,208,243,140,97,29,244,205,245,198,118,36,141,143,174,155,251,11,114,236,163,187,97,188,21,32]",
              "sol": "stringToBytes32(\"201,63,39,201,18,170,228,208,243,140,97,29,244,205,245,198,118,36,141,143,174,155,251,11,114,236,163,187,97,188,21,32\")"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[183,234,143,238,51,57,18,226,110,188,109,35,141,84,158,248,63,182,37,1,7,87,46,157,52,179,231,56,76,137,51,16]",
              "sol": "stringToBytes32(\"183,234,143,238,51,57,18,226,110,188,109,35,141,84,158,248,63,182,37,1,7,87,46,157,52,179,231,56,76,137,51,16\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.167ZSwaps.setVault": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setVault(Vault) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractVault.address",
              "sol": "contractVault"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setVault(Vault) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractVault.address",
                "sol": "contractVault"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:50:14.168ZSwaps.setMyWishPercents": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishPercents(uint,uint) WHEN msg.sender==_owner,_basePercent<=10000,_quotePercent<=10000",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _basePercent <= 10000",
            "parameters": [
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _quotePercent <= 10000",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:50:14.169ZSwaps.setMyWishAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishAddress(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishAddress(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:50:14.170ZSwaps.createKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createKey(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.170ZSwaps.allBrokersBasePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersBasePercent(bytes32)",
          "parameters": [
            {
              "js": "[148,101,175,247,96,54,172,131,72,235,253,202,153,85,231,64,143,33,184,94,92,227,73,147,235,128,117,5,246,54,169,207]",
              "sol": "stringToBytes32(\"148,101,175,247,96,54,172,131,72,235,253,202,153,85,231,64,143,33,184,94,92,227,73,147,235,128,117,5,246,54,169,207\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.170ZSwaps.allBrokersQuotePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersQuotePercent(bytes32)",
          "parameters": [
            {
              "js": "[208,155,110,201,21,75,174,158,217,0,65,24,250,52,202,229,65,72,171,240,50,242,87,177,52,4,4,62,67,23,89,235]",
              "sol": "stringToBytes32(\"208,155,110,201,21,75,174,158,217,0,65,24,250,52,202,229,65,72,171,240,50,242,87,177,52,4,4,62,67,23,89,235\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.170ZSwaps.baseLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseLimit(bytes32)",
          "parameters": [
            {
              "js": "[163,19,210,217,108,215,119,70,13,168,247,41,230,24,26,54,20,24,246,96,176,174,141,61,4,22,228,214,83,215,10,137]",
              "sol": "stringToBytes32(\"163,19,210,217,108,215,119,70,13,168,247,41,230,24,26,54,20,24,246,96,176,174,141,61,4,22,228,214,83,215,10,137\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.171ZSwaps.quoteLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteLimit(bytes32)",
          "parameters": [
            {
              "js": "[41,42,3,150,15,12,100,155,72,184,19,85,188,62,151,43,12,12,139,9,106,22,242,44,194,164,114,175,226,124,208,243]",
              "sol": "stringToBytes32(\"41,42,3,150,15,12,100,155,72,184,19,85,188,62,151,43,12,12,139,9,106,22,242,44,194,164,114,175,226,124,208,243\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.171ZSwaps.baseRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseRaised(bytes32)",
          "parameters": [
            {
              "js": "[154,90,14,159,160,241,70,177,86,27,164,193,169,144,216,67,22,123,73,175,34,48,141,140,52,128,152,5,85,1,182,128]",
              "sol": "stringToBytes32(\"154,90,14,159,160,241,70,177,86,27,164,193,169,144,216,67,22,123,73,175,34,48,141,140,52,128,152,5,85,1,182,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.171ZSwaps.quoteRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteRaised(bytes32)",
          "parameters": [
            {
              "js": "[32,17,140,14,146,231,176,154,192,79,252,80,1,21,177,63,197,119,76,205,142,189,142,132,155,96,111,179,113,194,189,84]",
              "sol": "stringToBytes32(\"32,17,140,14,146,231,176,154,192,79,252,80,1,21,177,63,197,119,76,205,142,189,142,132,155,96,111,179,113,194,189,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.172ZSwaps.isBaseFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isBaseFilled(bytes32)",
          "parameters": [
            {
              "js": "[56,197,213,224,21,201,140,1,206,211,118,176,80,93,145,195,144,253,55,194,57,36,212,216,168,211,255,14,167,98,179,110]",
              "sol": "stringToBytes32(\"56,197,213,224,21,201,140,1,206,211,118,176,80,93,145,195,144,253,55,194,57,36,212,216,168,211,255,14,167,98,179,110\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.172ZSwaps.isQuoteFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isQuoteFilled(bytes32)",
          "parameters": [
            {
              "js": "[74,239,190,59,129,218,105,204,187,134,150,186,236,35,176,156,10,81,228,161,164,139,34,136,115,83,244,52,137,87,162,21]",
              "sol": "stringToBytes32(\"74,239,190,59,129,218,105,204,187,134,150,186,236,35,176,156,10,81,228,161,164,139,34,136,115,83,244,52,137,87,162,21\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.172ZSwaps.baseInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseInvestors(bytes32)",
          "parameters": [
            {
              "js": "[109,155,113,79,61,74,134,253,184,2,35,91,61,120,199,184,211,13,110,73,134,111,35,136,224,157,185,249,59,132,240,194]",
              "sol": "stringToBytes32(\"109,155,113,79,61,74,134,253,184,2,35,91,61,120,199,184,211,13,110,73,134,111,35,136,224,157,185,249,59,132,240,194\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.172ZSwaps.quoteInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteInvestors(bytes32)",
          "parameters": [
            {
              "js": "[149,52,146,37,226,149,241,70,145,79,48,92,197,30,224,231,86,218,153,210,141,15,84,19,204,101,97,91,40,10,117,105]",
              "sol": "stringToBytes32(\"149,52,146,37,226,149,241,70,145,79,48,92,197,30,224,231,86,218,153,210,141,15,84,19,204,101,97,91,40,10,117,105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.173ZSwaps.baseUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[166,42,85,183,44,108,102,94,180,95,84,20,34,172,208,242,119,197,211,25,201,103,80,174,173,208,207,101,43,87,169,204]",
              "sol": "stringToBytes32(\"166,42,85,183,44,108,102,94,180,95,84,20,34,172,208,242,119,197,211,25,201,103,80,174,173,208,207,101,43,87,169,204\")"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.173ZSwaps.quoteUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[92,98,41,215,35,113,70,247,26,12,61,179,139,41,176,148,46,106,53,231,30,0,1,49,6,206,3,89,194,192,251,184]",
              "sol": "stringToBytes32(\"92,98,41,215,35,113,70,247,26,12,61,179,139,41,176,148,46,106,53,231,30,0,1,49,6,206,3,89,194,192,251,184\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.173ZSwaps.orderBrokers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute orderBrokers(bytes32)",
          "parameters": [
            {
              "js": "[108,11,228,150,65,25,215,234,105,23,212,31,59,213,203,133,10,196,245,94,14,136,128,175,219,76,39,250,146,209,68,180]",
              "sol": "stringToBytes32(\"108,11,228,150,65,25,215,234,105,23,212,31,59,213,203,133,10,196,245,94,14,136,128,175,219,76,39,250,146,209,68,180\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.178ZProxySwaps.test_allBrokersPercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_allBrokersPercent(address,bytes32)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[144,166,8,44,237,240,197,167,36,120,16,178,1,244,230,58,48,210,130,243,167,32,83,191,233,99,206,242,180,153,113,88]",
              "sol": "stringToBytes32(\"144,166,8,44,237,240,197,167,36,120,16,178,1,244,230,58,48,210,130,243,167,32,83,191,233,99,206,242,180,153,113,88\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.178ZProxySwaps.test_swap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_swap(bytes32) WHEN isSwapped!=true,isCancelled!=true,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[120,168,105,29,149,116,164,39,224,61,31,152,66,98,162,93,237,145,117,243,187,138,5,135,202,111,122,192,197,229,231,193]",
              "sol": "stringToBytes32(\"120,168,105,29,149,116,164,39,224,61,31,152,66,98,162,93,237,145,117,243,187,138,5,135,202,111,122,192,197,229,231,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.179ZProxySwaps.test_distribute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_distribute(bytes32,address,address)",
          "parameters": [
            {
              "js": "[146,131,136,8,181,54,23,252,36,220,98,74,233,141,165,82,88,137,19,252,37,35,147,155,14,148,66,153,2,81,253,94]",
              "sol": "stringToBytes32(\"146,131,136,8,181,54,23,252,36,220,98,74,233,141,165,82,88,137,19,252,37,35,147,155,14,148,66,153,2,81,253,94\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.180ZProxySwaps.test_removeInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_removeInvestor(address[],address)",
          "parameters": [
            {
              "js": "[accounts[8],accounts[9],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.181ZProxySwaps.test_deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "470-477",
          "restrictions": [
            "baseAddresses == _token",
            "baseOnlyInvestor != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses==_token,baseOnlyInvestor!=0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps,msg.sender==baseOnlyInvestor",
          "parameters": [
            {
              "js": "[94,169,229,85,53,63,104,208,67,106,186,198,225,253,228,83,193,13,185,60,79,211,116,208,76,118,101,115,0,43,177,97]",
              "sol": "stringToBytes32(\"94,169,229,85,53,63,104,208,67,106,186,198,225,253,228,83,193,13,185,60,79,211,116,208,76,118,101,115,0,43,177,97\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "baseOnlyInvestor == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseOnlyInvestor==0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[212,128,247,224,128,70,66,249,76,188,188,59,123,19,98,26,181,128,78,178,224,122,57,240,35,222,183,228,172,37,32,199]",
              "sol": "stringToBytes32(\"212,128,247,224,128,70,66,249,76,188,188,59,123,19,98,26,181,128,78,178,224,122,57,240,35,222,183,228,172,37,32,199\")"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "487-493",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall!=true,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[254,30,49,226,167,141,78,194,161,215,57,129,204,111,134,78,141,139,29,192,60,4,112,64,135,244,73,102,202,150,168,209]",
              "sol": "stringToBytes32(\"254,30,49,226,167,141,78,194,161,215,57,129,204,111,134,78,141,139,29,192,60,4,112,64,135,244,73,102,202,150,168,209\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true",
            "baseOnlyInvestor == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall==true,baseOnlyInvestor==0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[133,22,197,147,0,165,194,0,201,50,56,64,164,184,117,142,67,112,27,10,181,18,96,3,254,147,114,190,92,251,80,239]",
              "sol": "stringToBytes32(\"133,22,197,147,0,165,194,0,201,50,56,64,164,184,117,142,67,112,27,10,181,18,96,3,254,147,114,190,92,251,80,239\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.184ZProxySwaps.test_isInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isInvestor(bytes32,address,address)",
          "parameters": [
            {
              "js": "[255,221,157,96,161,181,226,23,112,166,88,61,122,61,127,135,245,162,59,212,48,157,180,170,90,176,151,134,111,251,9,39]",
              "sol": "stringToBytes32(\"255,221,157,96,161,181,226,23,112,166,88,61,122,61,127,135,245,162,59,212,48,157,180,170,90,176,151,134,111,251,9,39\")"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.185ZVault.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.185ZVault.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[116,233,110,254,191,99,74,120,54,82,244,135,14,10,50,56,6,131,184,133,192,61,99,12,230,163,132,131,31,56,9,13]",
              "sol": "abi.encode(\"116,233,110,254,191,99,74,120,54,82,244,135,14,10,50,56,6,131,184,133,192,61,99,12,230,163,132,131,31,56,9,13\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:50:14.186ZVault.setSwaps": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSwaps(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSwaps(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:50:14.186ZVault.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "26-30",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}