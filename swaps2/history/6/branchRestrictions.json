,{
  "2020-11-10T17:15:35.412ZSwaps.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[228,92,61,9,115,179,216,75,51,2,134,119,255,136,5,127,60,110,159,62,160,25,119,231,69,98,81,37,64,201,44,226]",
              "sol": "abi.encode(\"228,92,61,9,115,179,216,75,51,2,134,119,255,136,5,127,60,110,159,62,160,25,119,231,69,98,81,37,64,201,44,226\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.413ZSwaps.createOrder": {
    "branches": {
      "0": {
        "branch": {
          "loc": "163-167",
          "restrictions": [
            "_brokerAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158]",
              "sol": "stringToBytes32(\"78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+92",
              "sol": "block.timestamp+92"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158]",
                "sol": "stringToBytes32(\"78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158\")"
              },
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+92",
                "sol": "block.timestamp+92"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158]",
                "sol": "stringToBytes32(\"78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158\")"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+92",
                "sol": "block.timestamp+92"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158]",
                "sol": "stringToBytes32(\"78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158\")"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+92",
                "sol": "block.timestamp+92"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158]",
                "sol": "stringToBytes32(\"78,34,69,140,32,68,57,203,153,29,209,232,232,239,60,100,187,107,182,139,167,29,138,99,206,241,27,81,148,50,98,158\")"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_brokerAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192]",
              "sol": "stringToBytes32(\"80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192\")"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+440",
              "sol": "block.timestamp+440"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192]",
                "sol": "stringToBytes32(\"80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192\")"
              },
              {
                "js": "accounts[0]",
                "sol": "accounts[0]"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+440",
                "sol": "block.timestamp+440"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192]",
                "sol": "stringToBytes32(\"80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+440",
                "sol": "block.timestamp+440"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192]",
                "sol": "stringToBytes32(\"80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+440",
                "sol": "block.timestamp+440"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192]",
                "sol": "stringToBytes32(\"80,210,36,115,183,85,174,220,42,217,108,248,87,200,21,216,221,42,121,9,246,11,19,12,151,215,148,118,81,28,219,192\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "168-172",
          "restrictions": [
            "myWishAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42]",
              "sol": "stringToBytes32(\"158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+889",
              "sol": "block.timestamp+889"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42]",
                "sol": "stringToBytes32(\"158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42\")"
              },
              {
                "js": "accounts[6]",
                "sol": "accounts[6]"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+889",
                "sol": "block.timestamp+889"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42]",
                "sol": "stringToBytes32(\"158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+889",
                "sol": "block.timestamp+889"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42]",
                "sol": "stringToBytes32(\"158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+889",
                "sol": "block.timestamp+889"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42]",
                "sol": "stringToBytes32(\"158,102,18,244,87,181,66,168,245,122,100,178,101,51,38,176,231,161,241,150,66,26,214,45,172,213,66,75,221,217,237,42\")"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "myWishAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234]",
              "sol": "stringToBytes32(\"22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234\")"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+42",
              "sol": "block.timestamp+42"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234]",
                "sol": "stringToBytes32(\"22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234\")"
              },
              {
                "js": "accounts[3]",
                "sol": "accounts[3]"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+42",
                "sol": "block.timestamp+42"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234]",
                "sol": "stringToBytes32(\"22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+42",
                "sol": "block.timestamp+42"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234]",
                "sol": "stringToBytes32(\"22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+42",
                "sol": "block.timestamp+42"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234]",
                "sol": "stringToBytes32(\"22,61,75,153,27,219,173,122,0,41,142,238,4,223,194,98,223,146,78,1,182,133,204,4,45,248,20,162,15,45,226,234\")"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:15:35.425ZSwaps.deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "198-215",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.value==_amount,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[67,88,49,0,89,112,4,85,211,178,227,87,37,86,65,153,157,68,76,168,97,45,75,151,93,215,102,179,25,130,235,185]",
              "sol": "stringToBytes32(\"67,88,49,0,89,112,4,85,211,178,227,87,37,86,65,153,157,68,76,168,97,45,75,151,93,215,102,179,25,130,235,185\")"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0],value:4038714810}",
              "sol": "{\"from\":\"0x0\",\"value\":\"4038714810\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail deposit(bytes32,address,uint) when NOT comply with: msg.value == _amount",
            "parameters": [
              {
                "js": "[67,88,49,0,89,112,4,85,211,178,227,87,37,86,65,153,157,68,76,168,97,45,75,151,93,215,102,179,25,130,235,185]",
                "sol": "stringToBytes32(\"67,88,49,0,89,112,4,85,211,178,227,87,37,86,65,153,157,68,76,168,97,45,75,151,93,215,102,179,25,130,235,185\")"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": 4038714811,
                "sol": 4038714811
              },
              {
                "js": "{from:accounts[0],value:4038714810}",
                "sol": "{\"from\":\"0x0\",\"value\":\"4038714810\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "204-215",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[155,249,202,179,251,111,69,185,177,58,206,142,43,94,48,174,203,88,222,77,242,236,216,27,134,187,214,164,12,129,136,221]",
              "sol": "stringToBytes32(\"155,249,202,179,251,111,69,185,177,58,206,142,43,94,48,174,203,88,222,77,242,236,216,27,134,187,214,164,12,129,136,221\")"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.427ZSwaps.cancel": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute cancel(bytes32) WHEN msg.sender==owners,isCancelled!=true,isSwapped!=true",
          "parameters": [
            {
              "js": "[228,45,133,169,115,22,252,178,100,255,234,17,31,37,101,15,226,213,124,145,190,91,4,51,40,83,99,247,130,116,186,107]",
              "sol": "stringToBytes32(\"228,45,133,169,115,22,252,178,100,255,234,17,31,37,101,15,226,213,124,145,190,91,4,51,40,83,99,247,130,116,186,107\")"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.428ZSwaps.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "253-255",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[111,64,143,196,96,220,54,136,208,54,118,3,217,56,237,61,237,20,42,48,114,186,60,253,114,218,143,119,43,182,244,158]",
              "sol": "stringToBytes32(\"111,64,143,196,96,220,54,136,208,54,118,3,217,56,237,61,237,20,42,48,114,186,60,253,114,218,143,119,43,182,244,158\")"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[110,182,64,214,149,92,234,78,144,56,239,68,169,161,111,251,185,23,238,48,126,57,82,158,135,7,92,190,119,191,117,24]",
              "sol": "stringToBytes32(\"110,182,64,214,149,92,234,78,144,56,239,68,169,161,111,251,185,23,238,48,126,57,82,158,135,7,92,190,119,191,117,24\")"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "259-262",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[34,99,207,65,253,238,212,65,157,160,250,64,242,127,177,191,143,29,180,189,120,102,121,223,28,108,246,122,232,145,116,58]",
              "sol": "stringToBytes32(\"34,99,207,65,253,238,212,65,157,160,250,64,242,127,177,191,143,29,180,189,120,102,121,223,28,108,246,122,232,145,116,58\")"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[248,1,146,246,32,179,165,93,236,84,225,47,142,46,108,112,184,128,147,68,35,72,230,209,107,235,216,245,226,94,42,3]",
              "sol": "stringToBytes32(\"248,1,146,246,32,179,165,93,236,84,225,47,142,46,108,112,184,128,147,68,35,72,230,209,107,235,216,245,226,94,42,3\")"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.430ZSwaps.setVault": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setVault(Vault) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractVault.address",
              "sol": "contractVault"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setVault(Vault) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractVault.address",
                "sol": "contractVault"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:15:35.431ZSwaps.setMyWishPercents": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishPercents(uint,uint) WHEN msg.sender==_owner,_basePercent<=10000,_quotePercent<=10000",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _basePercent <= 10000",
            "parameters": [
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _quotePercent <= 10000",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:15:35.432ZSwaps.setMyWishAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishAddress(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishAddress(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:15:35.432ZSwaps.createKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createKey(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.433ZSwaps.allBrokersBasePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersBasePercent(bytes32)",
          "parameters": [
            {
              "js": "[28,232,110,38,192,23,140,37,151,180,211,83,112,92,8,203,85,218,71,153,165,22,110,64,122,237,6,235,30,126,70,3]",
              "sol": "stringToBytes32(\"28,232,110,38,192,23,140,37,151,180,211,83,112,92,8,203,85,218,71,153,165,22,110,64,122,237,6,235,30,126,70,3\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.433ZSwaps.allBrokersQuotePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersQuotePercent(bytes32)",
          "parameters": [
            {
              "js": "[141,132,0,12,71,104,215,154,16,18,26,18,206,5,153,225,10,32,81,14,109,202,142,56,74,127,7,35,115,221,22,55]",
              "sol": "stringToBytes32(\"141,132,0,12,71,104,215,154,16,18,26,18,206,5,153,225,10,32,81,14,109,202,142,56,74,127,7,35,115,221,22,55\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.433ZSwaps.baseLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseLimit(bytes32)",
          "parameters": [
            {
              "js": "[170,234,143,201,45,31,252,143,183,209,34,126,1,177,41,169,230,82,113,117,59,122,156,59,216,73,192,152,128,203,37,159]",
              "sol": "stringToBytes32(\"170,234,143,201,45,31,252,143,183,209,34,126,1,177,41,169,230,82,113,117,59,122,156,59,216,73,192,152,128,203,37,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.433ZSwaps.quoteLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteLimit(bytes32)",
          "parameters": [
            {
              "js": "[235,239,10,22,191,125,205,176,212,168,44,121,135,31,129,186,72,163,197,61,247,125,170,253,10,121,161,200,242,192,142,140]",
              "sol": "stringToBytes32(\"235,239,10,22,191,125,205,176,212,168,44,121,135,31,129,186,72,163,197,61,247,125,170,253,10,121,161,200,242,192,142,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.434ZSwaps.baseRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseRaised(bytes32)",
          "parameters": [
            {
              "js": "[250,237,51,19,16,157,109,234,147,181,249,6,160,247,97,159,200,193,244,67,102,217,44,194,66,80,58,0,27,200,103,227]",
              "sol": "stringToBytes32(\"250,237,51,19,16,157,109,234,147,181,249,6,160,247,97,159,200,193,244,67,102,217,44,194,66,80,58,0,27,200,103,227\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.434ZSwaps.quoteRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteRaised(bytes32)",
          "parameters": [
            {
              "js": "[96,35,138,143,17,106,21,147,199,249,120,18,93,91,37,46,246,149,113,15,131,58,34,70,118,126,250,249,32,180,107,210]",
              "sol": "stringToBytes32(\"96,35,138,143,17,106,21,147,199,249,120,18,93,91,37,46,246,149,113,15,131,58,34,70,118,126,250,249,32,180,107,210\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.434ZSwaps.isBaseFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isBaseFilled(bytes32)",
          "parameters": [
            {
              "js": "[228,112,166,51,130,228,71,108,128,238,43,118,106,124,112,188,134,17,14,4,244,158,237,8,49,187,32,195,118,228,60,113]",
              "sol": "stringToBytes32(\"228,112,166,51,130,228,71,108,128,238,43,118,106,124,112,188,134,17,14,4,244,158,237,8,49,187,32,195,118,228,60,113\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.435ZSwaps.isQuoteFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isQuoteFilled(bytes32)",
          "parameters": [
            {
              "js": "[197,203,46,210,61,159,165,22,98,178,104,191,176,160,143,8,76,135,124,98,198,189,118,75,43,204,252,51,30,103,189,240]",
              "sol": "stringToBytes32(\"197,203,46,210,61,159,165,22,98,178,104,191,176,160,143,8,76,135,124,98,198,189,118,75,43,204,252,51,30,103,189,240\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.435ZSwaps.baseInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseInvestors(bytes32)",
          "parameters": [
            {
              "js": "[13,8,136,202,126,105,25,13,244,28,205,226,186,19,185,147,241,61,89,97,113,223,66,91,46,142,124,235,99,59,107,252]",
              "sol": "stringToBytes32(\"13,8,136,202,126,105,25,13,244,28,205,226,186,19,185,147,241,61,89,97,113,223,66,91,46,142,124,235,99,59,107,252\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.435ZSwaps.quoteInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteInvestors(bytes32)",
          "parameters": [
            {
              "js": "[219,41,234,245,237,168,247,96,229,14,218,24,36,183,232,28,250,115,223,87,253,46,235,123,58,141,136,116,174,139,211,169]",
              "sol": "stringToBytes32(\"219,41,234,245,237,168,247,96,229,14,218,24,36,183,232,28,250,115,223,87,253,46,235,123,58,141,136,116,174,139,211,169\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.435ZSwaps.baseUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[217,149,7,160,67,80,47,12,125,40,187,239,160,208,91,38,130,114,50,36,107,143,99,9,221,135,97,108,71,87,194,224]",
              "sol": "stringToBytes32(\"217,149,7,160,67,80,47,12,125,40,187,239,160,208,91,38,130,114,50,36,107,143,99,9,221,135,97,108,71,87,194,224\")"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.436ZSwaps.quoteUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[24,192,115,81,239,146,229,173,100,232,17,169,137,138,21,252,235,198,246,213,19,94,94,133,125,253,250,4,7,19,33,154]",
              "sol": "stringToBytes32(\"24,192,115,81,239,146,229,173,100,232,17,169,137,138,21,252,235,198,246,213,19,94,94,133,125,253,250,4,7,19,33,154\")"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.436ZSwaps.orderBrokers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute orderBrokers(bytes32)",
          "parameters": [
            {
              "js": "[90,127,214,166,99,150,138,29,41,135,237,8,144,214,223,187,105,33,105,83,101,227,65,236,9,208,50,90,23,212,240,88]",
              "sol": "stringToBytes32(\"90,127,214,166,99,150,138,29,41,135,237,8,144,214,223,187,105,33,105,83,101,227,65,236,9,208,50,90,23,212,240,88\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.446ZProxySwaps.test_allBrokersPercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_allBrokersPercent(address,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[48,156,36,200,170,102,60,115,150,136,111,243,223,227,129,217,174,240,233,136,93,218,187,168,129,62,104,83,27,210,48,255]",
              "sol": "stringToBytes32(\"48,156,36,200,170,102,60,115,150,136,111,243,223,227,129,217,174,240,233,136,93,218,187,168,129,62,104,83,27,210,48,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.447ZProxySwaps.test_swap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_swap(bytes32) WHEN isSwapped!=true,isCancelled!=true,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[74,168,148,101,193,250,205,111,34,250,224,253,201,57,64,55,85,242,248,35,153,64,7,202,78,6,9,61,255,63,237,189]",
              "sol": "stringToBytes32(\"74,168,148,101,193,250,205,111,34,250,224,253,201,57,64,55,85,242,248,35,153,64,7,202,78,6,9,61,255,63,237,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.448ZProxySwaps.test_distribute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_distribute(bytes32,address,address)",
          "parameters": [
            {
              "js": "[241,37,141,78,36,67,7,31,85,48,4,95,109,12,91,123,209,215,237,72,180,245,140,157,20,218,173,171,182,187,41,13]",
              "sol": "stringToBytes32(\"241,37,141,78,36,67,7,31,85,48,4,95,109,12,91,123,209,215,237,72,180,245,140,157,20,218,173,171,182,187,41,13\")"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.448ZProxySwaps.test_removeInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_removeInvestor(address[],address)",
          "parameters": [
            {
              "js": "[accounts[7],accounts[2],accounts[3],accounts[9]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.449ZProxySwaps.test_deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "470-477",
          "restrictions": [
            "baseAddresses == _token",
            "baseOnlyInvestor != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses==_token,baseOnlyInvestor!=0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps,msg.sender==baseOnlyInvestor",
          "parameters": [
            {
              "js": "[221,191,132,187,48,120,128,37,55,27,229,174,155,253,197,134,78,82,83,96,227,8,104,160,15,240,56,250,101,156,20,240]",
              "sol": "stringToBytes32(\"221,191,132,187,48,120,128,37,55,27,229,174,155,253,197,134,78,82,83,96,227,8,104,160,15,240,56,250,101,156,20,240\")"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "baseAddresses != _token"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses!=_token,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[6,139,85,21,23,106,113,24,17,13,148,87,251,228,183,8,16,42,62,29,179,255,73,5,154,158,159,9,165,182,29,230]",
              "sol": "stringToBytes32(\"6,139,85,21,23,106,113,24,17,13,148,87,251,228,183,8,16,42,62,29,179,255,73,5,154,158,159,9,165,182,29,230\")"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "487-493",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall!=true,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[35,168,245,61,83,252,13,25,177,181,123,240,185,121,234,96,230,216,49,203,138,65,20,220,88,124,140,45,183,93,42,143]",
              "sol": "stringToBytes32(\"35,168,245,61,83,252,13,25,177,181,123,240,185,121,234,96,230,216,49,203,138,65,20,220,88,124,140,45,183,93,42,143\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true",
            "baseOnlyInvestor == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall==true,baseOnlyInvestor==0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[144,203,138,148,246,32,146,43,21,200,59,16,115,167,50,88,244,172,150,232,25,173,13,253,127,2,187,139,210,56,127,149]",
              "sol": "stringToBytes32(\"144,203,138,148,246,32,146,43,21,200,59,16,115,167,50,88,244,172,150,232,25,173,13,253,127,2,187,139,210,56,127,149\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.453ZProxySwaps.test_isInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isInvestor(bytes32,address,address)",
          "parameters": [
            {
              "js": "[76,93,255,176,238,78,69,26,188,11,134,44,216,172,238,190,70,209,244,224,193,20,79,132,174,75,125,253,185,104,180,174]",
              "sol": "stringToBytes32(\"76,93,255,176,238,78,69,26,188,11,134,44,216,172,238,190,70,209,244,224,193,20,79,132,174,75,125,253,185,104,180,174\")"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.455ZVault.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.455ZVault.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[132,154,216,114,130,156,234,140,156,99,123,23,3,46,196,143,93,171,51,8,93,52,179,194,83,215,39,71,197,212,29,219]",
              "sol": "abi.encode(\"132,154,216,114,130,156,234,140,156,99,123,23,3,46,196,143,93,171,51,8,93,52,179,194,83,215,39,71,197,212,29,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:15:35.455ZVault.setSwaps": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSwaps(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSwaps(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:15:35.456ZVault.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "26-30",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}