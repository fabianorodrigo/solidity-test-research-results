,{
  "2020-11-12T02:35:02.494ZSwaps.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "[219,85,13,132,144,215,141,144,231,255,79,145,106,108,145,220,62,115,25,79,206,38,200,77,151,209,239,106,46,78,34,116]",
              "sol": "abi.encode(\"219,85,13,132,144,215,141,144,231,255,79,145,106,108,145,220,62,115,25,79,206,38,200,77,151,209,239,106,46,78,34,116\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.496ZSwaps.createOrder": {
    "branches": {
      "0": {
        "branch": {
          "loc": "163-167",
          "restrictions": [
            "_brokerAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110]",
              "sol": "stringToBytes32(\"52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110\")"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+808",
              "sol": "block.timestamp+808"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "4038714809",
              "sol": "4038714809"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110]",
                "sol": "stringToBytes32(\"52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110\")"
              },
              {
                "js": "accounts[3]",
                "sol": "accounts[3]"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+808",
                "sol": "block.timestamp+808"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110]",
                "sol": "stringToBytes32(\"52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110\")"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+808",
                "sol": "block.timestamp+808"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110]",
                "sol": "stringToBytes32(\"52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110\")"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+808",
                "sol": "block.timestamp+808"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110]",
                "sol": "stringToBytes32(\"52,177,44,50,39,186,168,186,90,113,145,222,98,41,167,231,59,197,220,84,68,119,10,242,128,67,77,246,115,124,46,110\")"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "4038714809",
                "sol": "4038714809"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_brokerAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN _brokerAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183]",
              "sol": "stringToBytes32(\"106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183\")"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+246",
              "sol": "block.timestamp+246"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183]",
                "sol": "stringToBytes32(\"106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183\")"
              },
              {
                "js": "accounts[5]",
                "sol": "accounts[5]"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+246",
                "sol": "block.timestamp+246"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183]",
                "sol": "stringToBytes32(\"106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183\")"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+246",
                "sol": "block.timestamp+246"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183]",
                "sol": "stringToBytes32(\"106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183\")"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+246",
                "sol": "block.timestamp+246"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183]",
                "sol": "stringToBytes32(\"106,191,197,96,156,11,194,93,165,139,235,113,31,57,8,48,99,120,227,211,126,56,64,99,40,199,25,70,73,61,206,183\")"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "168-172",
          "restrictions": [
            "myWishAddress != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress!=0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165]",
              "sol": "stringToBytes32(\"109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+253",
              "sol": "block.timestamp+253"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165]",
                "sol": "stringToBytes32(\"109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165\")"
              },
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+253",
                "sol": "block.timestamp+253"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165]",
                "sol": "stringToBytes32(\"109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165\")"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+253",
                "sol": "block.timestamp+253"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165]",
                "sol": "stringToBytes32(\"109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165\")"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+253",
                "sol": "block.timestamp+253"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165]",
                "sol": "stringToBytes32(\"109,154,167,160,104,86,24,233,2,147,130,168,150,159,143,242,81,218,149,46,159,38,92,148,109,88,97,142,157,221,8,165\")"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "myWishAddress == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) WHEN myWishAddress==0x0000000000000000000000000000000000000000,owners==0x0000000000000000000000000000000000000000,_baseAddress!=_quoteAddress,_baseLimit>0,_quoteLimit>0,_expirationTimestamp>block.timestamp",
          "parameters": [
            {
              "js": "[60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166]",
              "sol": "stringToBytes32(\"60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+933",
              "sol": "block.timestamp+933"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseAddress != _quoteAddress",
            "parameters": [
              {
                "js": "[60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166]",
                "sol": "stringToBytes32(\"60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166\")"
              },
              {
                "js": "accounts[9]",
                "sol": "accounts[9]"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+933",
                "sol": "block.timestamp+933"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _baseLimit > 0",
            "parameters": [
              {
                "js": "[60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166]",
                "sol": "stringToBytes32(\"60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166\")"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+933",
                "sol": "block.timestamp+933"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _quoteLimit > 0",
            "parameters": [
              {
                "js": "[60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166]",
                "sol": "stringToBytes32(\"60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166\")"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+933",
                "sol": "block.timestamp+933"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createOrder(bytes32,address,address,uint,uint,uint,address,uint,uint,address,uint,uint) when NOT comply with: _expirationTimestamp > (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "[60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166]",
                "sol": "stringToBytes32(\"60,132,169,22,232,123,75,171,126,246,147,187,181,160,83,147,173,94,120,211,65,94,231,37,95,232,100,29,193,192,31,166\")"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:35:02.507ZSwaps.deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "198-215",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.value==_amount,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[149,185,191,211,233,99,140,34,20,95,148,251,123,55,186,107,85,53,164,21,176,53,103,207,156,56,217,93,78,27,18,190]",
              "sol": "stringToBytes32(\"149,185,191,211,233,99,140,34,20,95,148,251,123,55,186,107,85,53,164,21,176,53,103,207,156,56,217,93,78,27,18,190\")"
            },
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0],value:10000}",
              "sol": "{\"from\":\"0x0\",\"value\":\"10000\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail deposit(bytes32,address,uint) when NOT comply with: msg.value == _amount",
            "parameters": [
              {
                "js": "[149,185,191,211,233,99,140,34,20,95,148,251,123,55,186,107,85,53,164,21,176,53,103,207,156,56,217,93,78,27,18,190]",
                "sol": "stringToBytes32(\"149,185,191,211,233,99,140,34,20,95,148,251,123,55,186,107,85,53,164,21,176,53,103,207,156,56,217,93,78,27,18,190\")"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[0],value:10000}",
                "sol": "{\"from\":\"0x0\",\"value\":\"10000\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "204-215",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deposit(bytes32,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[142,120,38,85,136,231,201,73,38,46,32,242,153,184,205,103,197,225,4,56,188,65,23,164,230,187,209,53,141,104,200,19]",
              "sol": "stringToBytes32(\"142,120,38,85,136,231,201,73,38,46,32,242,153,184,205,103,197,225,4,56,188,65,23,164,230,187,209,53,141,104,200,19\")"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.509ZSwaps.cancel": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute cancel(bytes32) WHEN msg.sender==owners,isCancelled!=true,isSwapped!=true",
          "parameters": [
            {
              "js": "[158,222,252,92,74,13,230,106,5,131,35,81,193,64,70,194,214,173,10,230,215,173,10,233,76,45,65,119,145,134,173,181]",
              "sol": "stringToBytes32(\"158,222,252,92,74,13,230,106,5,131,35,81,193,64,70,194,214,173,10,230,215,173,10,233,76,45,65,119,145,134,173,181\")"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.510ZSwaps.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "253-255",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[159,150,61,51,96,69,246,234,7,118,172,241,93,60,54,47,80,161,37,205,128,191,88,198,175,68,10,2,91,8,94,237]",
              "sol": "stringToBytes32(\"159,150,61,51,96,69,246,234,7,118,172,241,93,60,54,47,80,161,37,205,128,191,88,198,175,68,10,2,91,8,94,237\")"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[241,28,30,143,152,57,186,182,121,170,175,76,11,146,188,131,36,125,214,199,197,239,4,242,9,22,206,6,160,79,73,50]",
              "sol": "stringToBytes32(\"241,28,30,143,152,57,186,182,121,170,175,76,11,146,188,131,36,125,214,199,197,239,4,242,9,22,206,6,160,79,73,50\")"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "259-262",
          "restrictions": [
            "investment > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment>0,isSwapped!=true",
          "parameters": [
            {
              "js": "[197,41,165,249,213,78,8,37,71,89,49,112,48,115,58,83,65,136,91,166,57,204,47,7,237,145,111,97,58,115,138,7]",
              "sol": "stringToBytes32(\"197,41,165,249,213,78,8,37,71,89,49,112,48,115,58,83,65,136,91,166,57,204,47,7,237,145,111,97,58,115,138,7\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "investment <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund(bytes32,address) WHEN investment<=0,isSwapped!=true",
          "parameters": [
            {
              "js": "[10,220,242,242,136,48,247,163,206,118,119,72,210,237,6,196,215,252,172,129,244,93,20,177,150,115,94,33,200,153,241,19]",
              "sol": "stringToBytes32(\"10,220,242,242,136,48,247,163,206,118,119,72,210,237,6,196,215,252,172,129,244,93,20,177,150,115,94,33,200,153,241,19\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.513ZSwaps.setVault": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setVault(Vault) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractVault.address",
              "sol": "contractVault"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setVault(Vault) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractVault.address",
                "sol": "contractVault"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:35:02.514ZSwaps.setMyWishPercents": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishPercents(uint,uint) WHEN msg.sender==_owner,_basePercent<=10000,_quotePercent<=10000",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _basePercent <= 10000",
            "parameters": [
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMyWishPercents(uint,uint) when NOT comply with: _quotePercent <= 10000",
            "parameters": [
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:35:02.515ZSwaps.setMyWishAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMyWishAddress(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMyWishAddress(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:35:02.516ZSwaps.createKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createKey(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.516ZSwaps.allBrokersBasePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersBasePercent(bytes32)",
          "parameters": [
            {
              "js": "[148,203,206,71,178,118,145,43,76,211,142,207,49,86,36,112,233,120,243,44,193,163,204,5,149,88,99,128,165,28,41,96]",
              "sol": "stringToBytes32(\"148,203,206,71,178,118,145,43,76,211,142,207,49,86,36,112,233,120,243,44,193,163,204,5,149,88,99,128,165,28,41,96\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.516ZSwaps.allBrokersQuotePercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allBrokersQuotePercent(bytes32)",
          "parameters": [
            {
              "js": "[27,135,230,222,198,118,31,192,108,167,21,22,84,166,223,161,166,67,219,152,156,214,151,54,120,217,193,110,187,135,62,160]",
              "sol": "stringToBytes32(\"27,135,230,222,198,118,31,192,108,167,21,22,84,166,223,161,166,67,219,152,156,214,151,54,120,217,193,110,187,135,62,160\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.517ZSwaps.baseLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseLimit(bytes32)",
          "parameters": [
            {
              "js": "[18,215,120,55,129,66,191,29,188,109,157,208,12,70,255,147,173,176,46,127,167,33,177,133,73,124,124,219,82,135,187,31]",
              "sol": "stringToBytes32(\"18,215,120,55,129,66,191,29,188,109,157,208,12,70,255,147,173,176,46,127,167,33,177,133,73,124,124,219,82,135,187,31\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.517ZSwaps.quoteLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteLimit(bytes32)",
          "parameters": [
            {
              "js": "[110,251,173,39,184,252,70,48,28,162,120,168,79,197,237,57,83,59,86,180,177,241,221,21,126,56,76,210,90,123,208,189]",
              "sol": "stringToBytes32(\"110,251,173,39,184,252,70,48,28,162,120,168,79,197,237,57,83,59,86,180,177,241,221,21,126,56,76,210,90,123,208,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.517ZSwaps.baseRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseRaised(bytes32)",
          "parameters": [
            {
              "js": "[37,195,189,222,151,242,212,140,7,17,197,171,151,196,174,153,206,209,0,11,19,68,201,204,40,135,89,201,101,134,192,136]",
              "sol": "stringToBytes32(\"37,195,189,222,151,242,212,140,7,17,197,171,151,196,174,153,206,209,0,11,19,68,201,204,40,135,89,201,101,134,192,136\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.517ZSwaps.quoteRaised": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteRaised(bytes32)",
          "parameters": [
            {
              "js": "[133,149,184,29,170,4,217,172,180,214,89,185,85,113,213,48,198,246,237,6,48,168,224,22,10,35,97,231,206,74,226,30]",
              "sol": "stringToBytes32(\"133,149,184,29,170,4,217,172,180,214,89,185,85,113,213,48,198,246,237,6,48,168,224,22,10,35,97,231,206,74,226,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.518ZSwaps.isBaseFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isBaseFilled(bytes32)",
          "parameters": [
            {
              "js": "[124,207,106,70,223,111,102,48,56,61,97,202,110,24,210,115,54,18,226,122,223,108,248,233,61,253,6,188,117,171,154,58]",
              "sol": "stringToBytes32(\"124,207,106,70,223,111,102,48,56,61,97,202,110,24,210,115,54,18,226,122,223,108,248,233,61,253,6,188,117,171,154,58\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.518ZSwaps.isQuoteFilled": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isQuoteFilled(bytes32)",
          "parameters": [
            {
              "js": "[157,138,182,124,19,1,150,77,89,41,180,228,49,222,69,224,103,246,120,124,161,134,115,34,0,19,22,231,38,224,168,200]",
              "sol": "stringToBytes32(\"157,138,182,124,19,1,150,77,89,41,180,228,49,222,69,224,103,246,120,124,161,134,115,34,0,19,22,231,38,224,168,200\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.518ZSwaps.baseInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseInvestors(bytes32)",
          "parameters": [
            {
              "js": "[36,161,148,225,58,65,104,122,59,216,60,129,208,149,68,219,13,244,247,78,190,17,87,32,208,152,22,3,116,74,115,113]",
              "sol": "stringToBytes32(\"36,161,148,225,58,65,104,122,59,216,60,129,208,149,68,219,13,244,247,78,190,17,87,32,208,152,22,3,116,74,115,113\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.519ZSwaps.quoteInvestors": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteInvestors(bytes32)",
          "parameters": [
            {
              "js": "[44,16,213,160,178,78,249,190,145,154,9,143,33,213,157,82,174,234,66,181,26,197,104,216,122,72,188,233,87,196,79,102]",
              "sol": "stringToBytes32(\"44,16,213,160,178,78,249,190,145,154,9,143,33,213,157,82,174,234,66,181,26,197,104,216,122,72,188,233,87,196,79,102\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.519ZSwaps.baseUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute baseUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[9,133,198,137,178,248,125,240,228,202,253,59,47,238,179,149,242,105,141,53,211,226,156,12,97,254,107,188,21,78,208,187]",
              "sol": "stringToBytes32(\"9,133,198,137,178,248,125,240,228,202,253,59,47,238,179,149,242,105,141,53,211,226,156,12,97,254,107,188,21,78,208,187\")"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.519ZSwaps.quoteUserInvestment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute quoteUserInvestment(bytes32,address)",
          "parameters": [
            {
              "js": "[12,151,65,177,153,131,255,8,88,175,91,63,119,221,57,17,210,137,167,133,177,142,41,22,69,226,129,83,139,164,242,75]",
              "sol": "stringToBytes32(\"12,151,65,177,153,131,255,8,88,175,91,63,119,221,57,17,210,137,167,133,177,142,41,22,69,226,129,83,139,164,242,75\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.520ZSwaps.orderBrokers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute orderBrokers(bytes32)",
          "parameters": [
            {
              "js": "[92,212,25,116,7,239,138,97,159,2,141,26,188,191,37,144,150,69,60,180,112,64,161,157,249,253,177,248,67,254,76,219]",
              "sol": "stringToBytes32(\"92,212,25,116,7,239,138,97,159,2,141,26,188,191,37,144,150,69,60,180,112,64,161,157,249,253,177,248,67,254,76,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.524ZProxySwaps.test_allBrokersPercent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_allBrokersPercent(address,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[158,224,1,96,115,7,170,145,161,115,143,238,92,186,108,61,231,124,30,200,80,210,111,123,76,198,210,184,1,154,116,181]",
              "sol": "stringToBytes32(\"158,224,1,96,115,7,170,145,161,115,143,238,92,186,108,61,231,124,30,200,80,210,111,123,76,198,210,184,1,154,116,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.525ZProxySwaps.test_swap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_swap(bytes32) WHEN isSwapped!=true,isCancelled!=true,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[183,33,110,65,46,82,214,166,247,214,129,55,38,162,113,33,249,157,122,10,115,70,153,186,233,197,115,35,223,176,134,220]",
              "sol": "stringToBytes32(\"183,33,110,65,46,82,214,166,247,214,129,55,38,162,113,33,249,157,122,10,115,70,153,186,233,197,115,35,223,176,134,220\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.526ZProxySwaps.test_distribute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_distribute(bytes32,address,address)",
          "parameters": [
            {
              "js": "[35,212,120,158,129,56,160,90,195,11,190,163,89,251,35,20,190,95,42,58,102,39,112,85,179,160,228,165,4,199,213,88]",
              "sol": "stringToBytes32(\"35,212,120,158,129,56,160,90,195,11,190,163,89,251,35,20,190,95,42,58,102,39,112,85,179,160,228,165,4,199,213,88\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.527ZProxySwaps.test_removeInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_removeInvestor(address[],address)",
          "parameters": [
            {
              "js": "[accounts[4],accounts[4],accounts[6],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.528ZProxySwaps.test_deposit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "470-477",
          "restrictions": [
            "baseAddresses == _token",
            "baseOnlyInvestor != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses==_token,baseOnlyInvestor!=0x0000000000000000000000000000000000000000,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps,msg.sender==baseOnlyInvestor",
          "parameters": [
            {
              "js": "[70,242,176,62,136,212,255,244,84,186,141,137,112,126,209,145,162,245,224,30,18,129,33,127,111,4,166,108,53,126,142,249]",
              "sol": "stringToBytes32(\"70,242,176,62,136,212,255,244,84,186,141,137,112,126,209,145,162,245,224,30,18,129,33,127,111,4,166,108,53,126,142,249\")"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "baseAddresses != _token"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN baseAddresses!=_token,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[44,33,44,163,123,247,122,236,6,91,13,182,248,210,133,154,192,66,8,239,197,236,26,75,125,138,177,168,126,31,151,251]",
              "sol": "stringToBytes32(\"44,33,44,163,123,247,122,236,6,91,13,182,248,210,133,154,192,66,8,239,197,236,26,75,125,138,177,168,126,31,151,251\")"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "487-493",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall!=true,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[117,197,147,224,52,127,69,9,135,121,50,131,68,197,35,144,225,89,234,178,11,191,124,195,118,48,184,235,33,39,229,11]",
              "sol": "stringToBytes32(\"117,197,147,224,52,127,69,9,135,121,50,131,68,197,35,144,225,89,234,178,11,191,124,195,118,48,184,235,33,39,229,11\")"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true",
            "baseAddresses != _token"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_deposit(bytes32,address,address,uint) WHEN FunctionCall==true,baseAddresses!=_token,baseAddresses==_token,quoteAddresses==_token,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<=expirationTimestamps",
          "parameters": [
            {
              "js": "[122,233,33,255,189,29,120,158,178,58,84,246,244,203,43,183,95,152,10,159,170,170,64,76,92,161,76,0,233,12,159,51]",
              "sol": "stringToBytes32(\"122,233,33,255,189,29,120,158,178,58,84,246,244,203,43,183,95,152,10,159,170,170,64,76,92,161,76,0,233,12,159,51\")"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.531ZProxySwaps.test_isInvestor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isInvestor(bytes32,address,address)",
          "parameters": [
            {
              "js": "[171,183,7,132,12,45,55,24,31,176,138,171,80,49,136,89,82,74,161,175,233,109,81,32,249,75,171,219,214,134,196,46]",
              "sol": "stringToBytes32(\"171,183,7,132,12,45,55,24,31,176,138,171,80,49,136,89,82,74,161,175,233,109,81,32,249,75,171,219,214,134,196,46\")"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.533ZVault.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.533ZVault.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint,bytes)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "[188,59,243,109,129,225,105,100,141,135,155,254,139,143,55,39,89,213,155,73,135,246,222,4,247,224,185,109,157,216,150,167]",
              "sol": "abi.encode(\"188,59,243,109,129,225,105,100,141,135,155,254,139,143,55,39,89,213,155,73,135,246,222,4,247,224,185,109,157,216,150,167\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T02:35:02.534ZVault.setSwaps": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSwaps(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSwaps(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T02:35:02.534ZVault.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "26-30",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,address,uint) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==swaps",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(address,address,uint) when NOT comply with: msg.sender == swaps",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}