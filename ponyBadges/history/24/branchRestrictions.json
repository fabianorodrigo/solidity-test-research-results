,{
  "2020-11-12T15:24:05.373ZTESTBUXX.TESTBUXX": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute TESTBUXX(uint256,string,uint8,string)",
          "parameters": [
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "\"8oodh\"",
              "sol": "\"8oodh\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"8oodh\"",
              "sol": "\"8oodh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:12.234ZPony.Pony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute Pony(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.389ZTESTBUXX.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.390ZTESTBUXX.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.391ZTESTBUXX.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.391ZTESTBUXX.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.392ZTESTBUXX.safeApprove": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeApprove(address,uint256,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.392ZTESTBUXX.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.393ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.394ZTESTBUXX.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "757",
              "sol": "757"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "757",
                "sol": "757"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.395ZTESTBUXX.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-141",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[215,41,105,32,63,218,4,29,165,187,121,168,185,137,237,118,205,171,104,210,246,169,107,79,180,52,84,206,253,188,49,202]",
              "sol": "abi.encode(\"215,41,105,32,63,218,4,29,165,187,121,168,185,137,237,118,205,171,104,210,246,169,107,79,180,52,84,206,253,188,49,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "[39,251,236,115,59,204,144,195,79,76,77,8,190,39,105,237,38,238,131,30,214,12,8,206,158,252,55,64,67,207,183,81]",
              "sol": "abi.encode(\"39,251,236,115,59,204,144,195,79,76,77,8,190,39,105,237,38,238,131,30,214,12,8,206,158,252,55,64,67,207,183,81\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.396ZTESTBUXX.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.397ZTESTBUXX.burnFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burnFrom(address,uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T15:24:19.397ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "180-187",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[70,174,194,255,187,175,112,30,23,172,156,98,207,191,209,158,135,200,205,48,51,6,215,213,210,101,168,206,11,64,242,133]",
              "sol": "abi.encode(\"70,174,194,255,187,175,112,30,23,172,156,98,207,191,209,158,135,200,205,48,51,6,215,213,210,101,168,206,11,64,242,133\")"
            },
            {
              "js": "\"8oodh\"",
              "sol": "\"8oodh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[70,174,194,255,187,175,112,30,23,172,156,98,207,191,209,158,135,200,205,48,51,6,215,213,210,101,168,206,11,64,242,133]",
                "sol": "abi.encode(\"70,174,194,255,187,175,112,30,23,172,156,98,207,191,209,158,135,200,205,48,51,6,215,213,210,101,168,206,11,64,242,133\")"
              },
              {
                "js": "\"8oodh\"",
                "sol": "\"8oodh\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[183,76,79,27,222,44,182,94,67,128,2,225,47,34,232,1,121,83,155,115,126,207,68,38,199,158,209,211,203,47,12,5]",
              "sol": "abi.encode(\"183,76,79,27,222,44,182,94,67,128,2,225,47,34,232,1,121,83,155,115,126,207,68,38,199,158,209,211,203,47,12,5\")"
            },
            {
              "js": "\"wtryq\"",
              "sol": "\"wtryq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[183,76,79,27,222,44,182,94,67,128,2,225,47,34,232,1,121,83,155,115,126,207,68,38,199,158,209,211,203,47,12,5]",
                "sol": "abi.encode(\"183,76,79,27,222,44,182,94,67,128,2,225,47,34,232,1,121,83,155,115,126,207,68,38,199,158,209,211,203,47,12,5\")"
              },
              {
                "js": "\"wtryq\"",
                "sol": "\"wtryq\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.400ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "196-198",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[140,160,27,101,156,4,101,68,158,166,62,15,239,35,183,14,141,201,48,71,162,204,120,204,241,197,85,248,142,207,59,134]",
              "sol": "abi.encode(\"140,160,27,101,156,4,101,68,158,166,62,15,239,35,183,14,141,201,48,71,162,204,120,204,241,197,85,248,142,207,59,134\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[140,160,27,101,156,4,101,68,158,166,62,15,239,35,183,14,141,201,48,71,162,204,120,204,241,197,85,248,142,207,59,134]",
                "sol": "abi.encode(\"140,160,27,101,156,4,101,68,158,166,62,15,239,35,183,14,141,201,48,71,162,204,120,204,241,197,85,248,142,207,59,134\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[126,21,154,151,79,93,34,47,6,79,36,100,149,180,27,44,254,81,80,250,246,68,248,136,173,30,227,213,148,14,25,66]",
              "sol": "abi.encode(\"126,21,154,151,79,93,34,47,6,79,36,100,149,180,27,44,254,81,80,250,246,68,248,136,173,30,227,213,148,14,25,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[126,21,154,151,79,93,34,47,6,79,36,100,149,180,27,44,254,81,80,250,246,68,248,136,173,30,227,213,148,14,25,66]",
                "sol": "abi.encode(\"126,21,154,151,79,93,34,47,6,79,36,100,149,180,27,44,254,81,80,250,246,68,248,136,173,30,227,213,148,14,25,66\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.404ZProxyTESTBUXX.test_transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transfer(address,address,uint,bytes) WHEN to!=0x0,balances_>=value",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "758",
              "sol": "758"
            },
            {
              "js": "[10,161,77,220,78,132,159,216,182,227,244,88,11,217,166,49,147,25,81,208,154,78,51,133,158,200,200,4,224,72,243,201]",
              "sol": "abi.encode(\"10,161,77,220,78,132,159,216,182,227,244,88,11,217,166,49,147,25,81,208,154,78,51,133,158,200,200,4,224,72,243,201\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transfer(address,address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "758",
                "sol": "758"
              },
              {
                "js": "[10,161,77,220,78,132,159,216,182,227,244,88,11,217,166,49,147,25,81,208,154,78,51,133,158,200,200,4,224,72,243,201]",
                "sol": "abi.encode(\"10,161,77,220,78,132,159,216,182,227,244,88,11,217,166,49,147,25,81,208,154,78,51,133,158,200,200,4,224,72,243,201\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.406ZPony.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint256,bytes) WHEN value>=PLAY_COST",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "759",
              "sol": "759"
            },
            {
              "js": "[51,239,88,14,219,38,165,172,252,225,11,20,84,179,255,86,252,175,3,255,120,82,174,72,223,157,191,163,219,173,226,45]",
              "sol": "abi.encode(\"51,239,88,14,219,38,165,172,252,225,11,20,84,179,255,86,252,175,3,255,120,82,174,72,223,157,191,163,219,173,226,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail tokenFallback(address,uint256,bytes) when NOT comply with: value >= PLAY_COST",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 757,
                "sol": 757
              },
              {
                "js": "[51,239,88,14,219,38,165,172,252,225,11,20,84,179,255,86,252,175,3,255,120,82,174,72,223,157,191,163,219,173,226,45]",
                "sol": "abi.encode(\"51,239,88,14,219,38,165,172,252,225,11,20,84,179,255,86,252,175,3,255,120,82,174,72,223,157,191,163,219,173,226,45\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.406ZPony.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T15:24:19.407ZPony.getPony": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getPony(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}