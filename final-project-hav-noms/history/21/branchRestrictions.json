,{
  "2020-11-13T21:24:33.199ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:26:50.849ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:27:26.785ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:27:43.970ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:28:01.174ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:28:18.255ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:28:36.351ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:28:53.788ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:29:11.020ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:29:28.800ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:29:46.237ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.148ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.152ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [69,147,207,130,84,219,140,162,23,42,39,223,243,110,11,233,45,80,137,253,85,163,115,182,111,158,56,115,193,37,156,150],\"capacity\": 1337}",
              "sol": "Buffer.buffer(abi.encode(\"69,147,207,130,84,219,140,162,23,42,39,223,243,110,11,233,45,80,137,253,85,163,115,182,111,158,56,115,193,37,156,150\"),1337)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.152ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [219,79,118,160,128,197,0,210,180,5,214,7,180,186,60,209,128,249,138,190,3,160,203,200,218,200,125,119,36,6,72,130],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"219,79,118,160,128,197,0,210,180,5,214,7,180,186,60,209,128,249,138,190,3,160,203,200,218,200,125,119,36,6,72,130\"),23)"
            },
            {
              "js": "[45,211,239,39,204,164,23,230,123,95,139,80,107,234,120,188,82,113,252,210,235,164,195,12,96,96,82,243,13,22,146,74]",
              "sol": "abi.encode(\"45,211,239,39,204,164,23,230,123,95,139,80,107,234,120,188,82,113,252,210,235,164,195,12,96,96,82,243,13,22,146,74\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.153ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [226,78,204,237,200,113,213,100,147,227,80,79,167,213,47,175,121,79,155,38,250,47,7,39,55,210,248,10,179,236,65,67],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"226,78,204,237,200,113,213,100,147,227,80,79,167,213,47,175,121,79,155,38,250,47,7,39,55,210,248,10,179,236,65,67\"),24)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.153ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [115,192,46,141,92,59,36,246,32,240,107,152,196,19,225,204,240,230,101,143,56,1,207,223,188,108,33,169,168,165,2,11],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"115,192,46,141,92,59,36,246,32,240,107,152,196,19,225,204,240,230,101,143,56,1,207,223,188,108,33,169,168,165,2,11\"),61)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.155ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [229,215,127,159,60,158,11,110,222,23,5,123,9,236,245,255,114,153,60,30,77,107,131,19,38,211,203,246,41,131,27,111],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"229,215,127,159,60,158,11,110,222,23,5,123,9,236,245,255,114,153,60,30,77,107,131,19,38,211,203,246,41,131,27,111\"),55)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.156ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [127,99,129,108,76,166,239,63,161,54,174,86,15,127,124,57,181,148,20,166,161,158,150,97,169,177,83,107,50,109,51,23],\"capacity\": 1532892064}",
              "sol": "Buffer.buffer(abi.encode(\"127,99,129,108,76,166,239,63,161,54,174,86,15,127,124,57,181,148,20,166,161,158,150,97,169,177,83,107,50,109,51,23\"),1532892064)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [184,31,124,192,56,76,127,183,87,26,2,56,193,124,17,198,112,174,201,203,203,41,89,44,177,28,26,77,230,241,165,250],\"capacity\": 1023}",
              "sol": "Buffer.buffer(abi.encode(\"184,31,124,192,56,76,127,183,87,26,2,56,193,124,17,198,112,174,201,203,203,41,89,44,177,28,26,77,230,241,165,250\"),1023)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.157ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [225,141,120,246,248,121,14,27,242,136,214,72,254,144,56,11,99,141,14,116,248,60,248,44,31,26,63,93,45,236,86,209],\"capacity\": 200000}",
              "sol": "Buffer.buffer(abi.encode(\"225,141,120,246,248,121,14,27,242,136,214,72,254,144,56,11,99,141,14,116,248,60,248,44,31,26,63,93,45,236,86,209\"),200000)"
            },
            {
              "js": "[158,167,141,30,223,14,190,129,138,13,29,26,112,211,120,255,23,63,50,88,1,165,159,75,66,244,192,164,13,25,230,249]",
              "sol": "abi.encode(\"158,167,141,30,223,14,190,129,138,13,29,26,112,211,120,255,23,63,50,88,1,165,159,75,66,244,192,164,13,25,230,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.158ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [32,248,202,30,129,40,30,115,31,21,169,55,174,33,209,185,160,219,112,97,11,57,220,78,210,127,233,14,157,5,118,180],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"32,248,202,30,129,40,30,115,31,21,169,55,174,33,209,185,160,219,112,97,11,57,220,78,210,127,233,14,157,5,118,180\"),3)"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.158ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [9,171,170,104,229,205,214,37,42,45,25,74,183,215,84,209,66,175,220,181,75,26,3,81,42,186,219,134,219,94,115,225],\"capacity\": 10001}",
              "sol": "Buffer.buffer(abi.encode(\"9,171,170,104,229,205,214,37,42,45,25,74,183,215,84,209,66,175,220,181,75,26,3,81,42,186,219,134,219,94,115,225\"),10001)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.161ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [50,203,149,1,33,145,78,166,35,2,247,51,84,134,184,89,205,36,59,93,128,205,172,103,175,134,252,184,165,254,134,98],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"50,203,149,1,33,145,78,166,35,2,247,51,84,134,184,89,205,36,59,93,128,205,172,103,175,134,252,184,165,254,134,98\"),2014223716)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.161ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [109,207,126,225,245,240,126,173,39,96,55,126,107,107,79,97,138,122,54,44,100,217,242,234,91,42,66,121,195,247,150,80],\"capacity\": 9999}",
              "sol": "Buffer.buffer(abi.encode(\"109,207,126,225,245,240,126,173,39,96,55,126,107,107,79,97,138,122,54,44,100,217,242,234,91,42,66,121,195,247,150,80\"),9999)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.165ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.165ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.165ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.166ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.167ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.168ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.169ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.169ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.170ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.171ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.173ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[10,146,175,124,190,231,221,11,190,181,13,66,238,12,226,211,180,42,243,246,190,84,45,82,113,129,9,118,93,134,23,139]",
              "sol": "stringToBytes32(\"10,146,175,124,190,231,221,11,190,181,13,66,238,12,226,211,180,42,243,246,190,84,45,82,113,129,9,118,93,134,23,139\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.174ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[11,228,255,174,199,128,24,1,82,224,109,30,27,177,253,156,167,238,204,170,225,189,133,103,23,1,226,203,58,92,52,223]",
              "sol": "stringToBytes32(\"11,228,255,174,199,128,24,1,82,224,109,30,27,177,253,156,167,238,204,170,225,189,133,103,23,1,226,203,58,92,52,223\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[17,226,100,112,131,57,75,9,66,172,104,97,216,247,140,182,233,128,161,250,125,37,53,68,21,34,216,106,69,134,126,241]",
              "sol": "abi.encode(\"17,226,100,112,131,57,75,9,66,172,104,97,216,247,140,182,233,128,161,250,125,37,53,68,21,34,216,106,69,134,126,241\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.223ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.224ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.224ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.225ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.225ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.225ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.226ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.226ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.226ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.227ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.227ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.228ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.228ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.229ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.229ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"listingID arg\",\"listingID arg\",\"trade.totalPrice\",\"Oraclize query was sent, standing by for the answer...\",\"trade.totalPrice\",\"trade.totalPrice\",\"0\"]",
              "sol": "[string(\"listingID arg\"),string(\"listingID arg\"),string(\"trade.totalPrice\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"trade.totalPrice\"),string(\"trade.totalPrice\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.231ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"PayableExample\",\"\\x19Ethereum Signed Message:\\n32\",\"PayableExample\",\"poey67\",\"L\"]",
              "sol": "[string(\"PayableExample\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"PayableExample\"),string(\"poey67\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.231ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"listingID arg\",\"L\"]",
              "sol": "[string(\"listingID arg\"),string(\"L\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.232ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.233ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.233ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"4o14ws\"]",
              "sol": "[string(\"4o14ws\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.234ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"b7ss5d\"",
              "sol": "\"b7ss5d\""
            },
            {
              "js": "[\"costUSD\"]",
              "sol": "[string(\"costUSD\")]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.234ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"PayableExample\"]",
              "sol": "[string(\"PayableExample\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.235ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"ETH\",\"b7ss5d\"]",
              "sol": "[string(\"ETH\"),string(\"b7ss5d\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.235ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"P\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"P\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.236ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"updateEthPrice called\",\"b7ss5d\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"b7ss5d\")]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.236ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"UsesExample\",\"IsLibrary\"]",
              "sol": "[string(\"UsesExample\"),string(\"IsLibrary\")]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.237ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"\",\"IsLibrary\",\"b7ss5d\"]",
              "sol": "[string(\"\"),string(\"IsLibrary\"),string(\"b7ss5d\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.237ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"L\",\"trade.totalPrice\",\"updateEthPrice called\"]",
              "sol": "[string(\"L\"),string(\"trade.totalPrice\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.238ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"\",\"\",\"b7ss5d\"]",
              "sol": "[string(\"\"),string(\"\"),string(\"b7ss5d\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.238ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"L\",\"b7ss5d\",\"updateEthPrice called\"]",
              "sol": "[string(\"L\"),string(\"b7ss5d\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.239ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"costUSD\",\"4o14ws\",\"UsesExample\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"costUSD\"),string(\"4o14ws\"),string(\"UsesExample\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.239ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"poey67\",\"costUSD\",\"Oraclize query was sent, standing by for the answer...\",\"trade.totalPrice\"]",
              "sol": "[string(\"poey67\"),string(\"costUSD\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.240ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"0\",\"IsLibrary\",\"o58k7e\",\"k013tg\"]",
              "sol": "[string(\"0\"),string(\"IsLibrary\"),string(\"o58k7e\"),string(\"k013tg\")]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.241ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"\",\"Oraclize query was sent, standing by for the answer...\",\"RevertWithReason\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"RevertWithReason\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.241ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"b7ss5d\"",
              "sol": "\"b7ss5d\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"updateEthPrice called\",\"ETH\",\"trade.totalPrice\",\"updateEthPrice called\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"updateEthPrice called\"),string(\"ETH\"),string(\"trade.totalPrice\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.242ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"b7ss5d\",\"listingID arg\",\"trade.totalPrice\",\"PayableExample\",\"trade.totalPrice\"]",
              "sol": "[string(\"b7ss5d\"),string(\"listingID arg\"),string(\"trade.totalPrice\"),string(\"PayableExample\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.242ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"k013tg\"",
              "sol": "\"k013tg\""
            },
            {
              "js": "[\"\",\"b7ss5d\",\"PayableExample\",\"Oraclize query was sent, standing by for the answer...\",\"Example\"]",
              "sol": "[string(\"\"),string(\"b7ss5d\"),string(\"PayableExample\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Example\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.243ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"poey67\",\"UsesExample\",\"RevertWithReason\",\"PayableExample\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"poey67\"),string(\"UsesExample\"),string(\"RevertWithReason\"),string(\"PayableExample\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.244ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[63,167,24,188,199,88,69,105,70,14,97,147,189,59,39,117,144,57,45,41,180,236,62,32,163,237,125,197,56,82,200,175]]",
              "sol": "[bytes(abi.encode(\"63,167,24,188,199,88,69,105,70,14,97,147,189,59,39,117,144,57,45,41,180,236,62,32,163,237,125,197,56,82,200,175\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.245ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[9,199,154,244,106,0,33,116,37,61,218,89,131,129,140,6,143,44,207,0,51,152,237,113,18,48,220,35,137,155,28,45],[26,46,9,145,79,54,118,232,77,35,78,162,1,102,193,87,165,74,26,12,4,217,64,255,104,131,169,20,65,9,162,231],[231,204,112,145,145,52,227,77,165,153,130,218,26,110,128,175,48,236,108,21,216,97,54,60,16,111,134,89,187,31,36,221],[253,207,12,5,82,220,73,222,245,48,37,86,162,130,188,54,174,30,120,179,160,200,168,204,50,186,95,168,191,75,192,66],[248,26,132,64,244,216,103,35,6,149,1,69,222,141,228,195,27,209,8,57,200,8,177,182,216,171,77,0,51,80,227,184]]",
              "sol": "[bytes(abi.encode(\"9,199,154,244,106,0,33,116,37,61,218,89,131,129,140,6,143,44,207,0,51,152,237,113,18,48,220,35,137,155,28,45\")),bytes(abi.encode(\"26,46,9,145,79,54,118,232,77,35,78,162,1,102,193,87,165,74,26,12,4,217,64,255,104,131,169,20,65,9,162,231\")),bytes(abi.encode(\"231,204,112,145,145,52,227,77,165,153,130,218,26,110,128,175,48,236,108,21,216,97,54,60,16,111,134,89,187,31,36,221\")),bytes(abi.encode(\"253,207,12,5,82,220,73,222,245,48,37,86,162,130,188,54,174,30,120,179,160,200,168,204,50,186,95,168,191,75,192,66\")),bytes(abi.encode(\"248,26,132,64,244,216,103,35,6,149,1,69,222,141,228,195,27,209,8,57,200,8,177,182,216,171,77,0,51,80,227,184\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.245ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"czf25o\"",
              "sol": "\"czf25o\""
            },
            {
              "js": "[[105,78,135,166,177,111,105,87,90,203,176,13,182,133,102,167,169,117,192,229,200,144,18,138,68,231,254,207,226,30,146,128],[68,61,213,198,219,60,45,0,211,9,162,240,152,101,54,163,56,185,18,123,138,219,124,125,141,141,242,71,159,113,1,79],[39,171,226,187,119,136,234,36,35,34,122,155,119,172,4,107,80,193,45,166,121,247,51,25,226,160,31,87,150,55,146,31],[134,4,10,127,47,6,42,172,225,80,160,107,85,190,80,223,182,94,103,158,242,218,186,112,218,52,71,130,126,243,78,217],[182,28,22,163,207,237,146,18,10,226,91,169,166,97,10,107,106,192,217,39,120,162,190,5,211,214,46,252,226,106,184,252],[16,214,222,67,212,201,214,77,53,71,116,135,147,113,43,197,88,178,50,216,10,197,221,47,73,20,220,148,209,205,171,191],[251,86,173,179,187,214,8,220,131,176,177,211,147,224,84,144,240,189,15,105,17,150,217,136,108,49,154,255,201,155,120,63],[0,100,25,142,227,152,242,141,48,77,52,136,228,12,63,157,36,63,53,131,94,194,6,128,222,212,217,90,209,51,222,96],[107,249,251,27,13,41,136,173,182,27,124,15,69,22,22,149,241,96,134,224,95,232,40,144,42,20,39,27,105,26,228,183]]",
              "sol": "[bytes(abi.encode(\"105,78,135,166,177,111,105,87,90,203,176,13,182,133,102,167,169,117,192,229,200,144,18,138,68,231,254,207,226,30,146,128\")),bytes(abi.encode(\"68,61,213,198,219,60,45,0,211,9,162,240,152,101,54,163,56,185,18,123,138,219,124,125,141,141,242,71,159,113,1,79\")),bytes(abi.encode(\"39,171,226,187,119,136,234,36,35,34,122,155,119,172,4,107,80,193,45,166,121,247,51,25,226,160,31,87,150,55,146,31\")),bytes(abi.encode(\"134,4,10,127,47,6,42,172,225,80,160,107,85,190,80,223,182,94,103,158,242,218,186,112,218,52,71,130,126,243,78,217\")),bytes(abi.encode(\"182,28,22,163,207,237,146,18,10,226,91,169,166,97,10,107,106,192,217,39,120,162,190,5,211,214,46,252,226,106,184,252\")),bytes(abi.encode(\"16,214,222,67,212,201,214,77,53,71,116,135,147,113,43,197,88,178,50,216,10,197,221,47,73,20,220,148,209,205,171,191\")),bytes(abi.encode(\"251,86,173,179,187,214,8,220,131,176,177,211,147,224,84,144,240,189,15,105,17,150,217,136,108,49,154,255,201,155,120,63\")),bytes(abi.encode(\"0,100,25,142,227,152,242,141,48,77,52,136,228,12,63,157,36,63,53,131,94,194,6,128,222,212,217,90,209,51,222,96\")),bytes(abi.encode(\"107,249,251,27,13,41,136,173,182,27,124,15,69,22,22,149,241,96,134,224,95,232,40,144,42,20,39,27,105,26,228,183\"))]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.246ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[150,82,8,191,18,148,201,176,234,133,110,201,178,117,98,15,127,25,25,228,227,79,222,151,156,21,62,250,210,150,188,178],[172,55,199,76,203,107,254,134,250,67,211,59,90,88,93,110,2,232,137,99,186,190,103,177,156,152,15,65,135,56,170,138],[151,201,58,185,108,216,155,148,142,136,165,206,114,132,146,244,25,187,18,126,195,172,227,111,50,96,102,132,222,144,239,30],[79,57,47,163,111,88,89,125,231,69,18,218,169,163,217,156,219,103,71,229,239,159,237,218,163,4,82,201,164,120,18,195]]",
              "sol": "[bytes(abi.encode(\"150,82,8,191,18,148,201,176,234,133,110,201,178,117,98,15,127,25,25,228,227,79,222,151,156,21,62,250,210,150,188,178\")),bytes(abi.encode(\"172,55,199,76,203,107,254,134,250,67,211,59,90,88,93,110,2,232,137,99,186,190,103,177,156,152,15,65,135,56,170,138\")),bytes(abi.encode(\"151,201,58,185,108,216,155,148,142,136,165,206,114,132,146,244,25,187,18,126,195,172,227,111,50,96,102,132,222,144,239,30\")),bytes(abi.encode(\"79,57,47,163,111,88,89,125,231,69,18,218,169,163,217,156,219,103,71,229,239,159,237,218,163,4,82,201,164,120,18,195\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.247ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[202,6,202,52,179,213,236,161,88,129,193,21,125,215,17,34,68,214,218,27,0,177,86,30,44,22,74,35,209,220,244,66]]",
              "sol": "[bytes(abi.encode(\"202,6,202,52,179,213,236,161,88,129,193,21,125,215,17,34,68,214,218,27,0,177,86,30,44,22,74,35,209,220,244,66\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.247ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[167,123,197,150,125,195,104,49,121,201,235,32,30,55,182,180,72,67,204,89,33,144,149,209,223,212,35,241,35,71,3,50]]",
              "sol": "[bytes(abi.encode(\"167,123,197,150,125,195,104,49,121,201,235,32,30,55,182,180,72,67,204,89,33,144,149,209,223,212,35,241,35,71,3,50\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.248ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[115,75,30,205,54,142,210,20,243,248,15,178,0,30,218,79,195,176,149,173,103,29,255,54,116,189,163,216,49,84,238,150]]",
              "sol": "[bytes(abi.encode(\"115,75,30,205,54,142,210,20,243,248,15,178,0,30,218,79,195,176,149,173,103,29,255,54,116,189,163,216,49,84,238,150\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.248ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[190,125,245,135,3,19,15,169,70,16,60,57,134,28,89,142,187,192,18,148,28,102,195,118,211,207,61,126,226,25,24,245]]",
              "sol": "[bytes(abi.encode(\"190,125,245,135,3,19,15,169,70,16,60,57,134,28,89,142,187,192,18,148,28,102,195,118,211,207,61,126,226,25,24,245\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.250ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"k013tg\"",
              "sol": "\"k013tg\""
            },
            {
              "js": "[[252,237,48,23,44,140,130,69,169,117,32,107,240,88,239,205,152,136,89,36,130,198,25,152,43,97,1,113,41,180,93,248],[125,209,75,55,106,244,255,20,248,91,250,53,137,5,61,149,155,11,0,167,78,135,144,5,117,80,168,114,103,236,161,12]]",
              "sol": "[bytes(abi.encode(\"252,237,48,23,44,140,130,69,169,117,32,107,240,88,239,205,152,136,89,36,130,198,25,152,43,97,1,113,41,180,93,248\")),bytes(abi.encode(\"125,209,75,55,106,244,255,20,248,91,250,53,137,5,61,149,155,11,0,167,78,135,144,5,117,80,168,114,103,236,161,12\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.250ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"mg4z7w\"",
              "sol": "\"mg4z7w\""
            },
            {
              "js": "[[206,41,96,29,82,207,140,85,152,251,55,67,245,159,205,109,32,12,69,172,45,214,54,22,13,163,156,225,42,111,207,36],[202,243,213,151,228,51,83,53,246,125,3,176,210,144,208,127,156,31,83,41,25,223,126,69,99,33,124,189,5,202,234,15]]",
              "sol": "[bytes(abi.encode(\"206,41,96,29,82,207,140,85,152,251,55,67,245,159,205,109,32,12,69,172,45,214,54,22,13,163,156,225,42,111,207,36\")),bytes(abi.encode(\"202,243,213,151,228,51,83,53,246,125,3,176,210,144,208,127,156,31,83,41,25,223,126,69,99,33,124,189,5,202,234,15\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.251ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"b7ss5d\"",
              "sol": "\"b7ss5d\""
            },
            {
              "js": "[[24,193,158,14,36,68,178,187,183,151,107,233,250,25,134,33,150,99,214,185,126,13,170,103,124,253,53,80,145,65,125,115],[42,218,207,108,127,37,184,1,168,113,20,162,84,234,40,216,134,244,184,133,152,45,108,146,62,225,233,112,203,173,50,248]]",
              "sol": "[bytes(abi.encode(\"24,193,158,14,36,68,178,187,183,151,107,233,250,25,134,33,150,99,214,185,126,13,170,103,124,253,53,80,145,65,125,115\")),bytes(abi.encode(\"42,218,207,108,127,37,184,1,168,113,20,162,84,234,40,216,134,244,184,133,152,45,108,146,62,225,233,112,203,173,50,248\"))]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.252ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[5,71,165,56,127,148,66,155,164,150,33,63,187,88,203,8,217,57,76,129,176,133,129,125,195,22,119,174,142,149,164,161],[215,161,17,146,238,233,244,132,131,149,226,153,225,111,126,227,226,195,147,164,245,238,233,208,33,195,111,238,83,152,171,161]]",
              "sol": "[bytes(abi.encode(\"5,71,165,56,127,148,66,155,164,150,33,63,187,88,203,8,217,57,76,129,176,133,129,125,195,22,119,174,142,149,164,161\")),bytes(abi.encode(\"215,161,17,146,238,233,244,132,131,149,226,153,225,111,126,227,226,195,147,164,245,238,233,208,33,195,111,238,83,152,171,161\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.252ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[133,178,61,47,76,150,116,208,216,92,75,55,5,80,205,19,29,135,34,158,116,103,53,103,32,111,188,171,248,50,72,71],[138,153,84,174,12,31,57,48,173,43,176,151,217,120,144,101,155,49,24,180,49,79,134,15,97,205,109,197,35,221,202,203],[117,145,82,220,92,196,133,155,171,207,148,123,244,229,241,83,158,254,0,206,199,124,156,49,10,72,59,45,40,162,24,75]]",
              "sol": "[bytes(abi.encode(\"133,178,61,47,76,150,116,208,216,92,75,55,5,80,205,19,29,135,34,158,116,103,53,103,32,111,188,171,248,50,72,71\")),bytes(abi.encode(\"138,153,84,174,12,31,57,48,173,43,176,151,217,120,144,101,155,49,24,180,49,79,134,15,97,205,109,197,35,221,202,203\")),bytes(abi.encode(\"117,145,82,220,92,196,133,155,171,207,148,123,244,229,241,83,158,254,0,206,199,124,156,49,10,72,59,45,40,162,24,75\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.253ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[127,154,182,11,216,135,209,37,144,100,44,15,153,14,23,47,220,0,69,62,153,68,177,195,4,94,154,158,108,120,211,44],[7,143,108,185,105,221,235,53,81,76,186,245,115,125,26,153,13,146,143,139,202,41,254,87,57,206,25,54,243,120,191,95],[92,214,201,217,206,253,12,24,202,127,4,198,65,238,207,101,61,201,13,161,239,225,224,184,226,42,41,39,160,128,101,127]]",
              "sol": "[bytes(abi.encode(\"127,154,182,11,216,135,209,37,144,100,44,15,153,14,23,47,220,0,69,62,153,68,177,195,4,94,154,158,108,120,211,44\")),bytes(abi.encode(\"7,143,108,185,105,221,235,53,81,76,186,245,115,125,26,153,13,146,143,139,202,41,254,87,57,206,25,54,243,120,191,95\")),bytes(abi.encode(\"92,214,201,217,206,253,12,24,202,127,4,198,65,238,207,101,61,201,13,161,239,225,224,184,226,42,41,39,160,128,101,127\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.253ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[148,238,133,209,176,124,210,6,26,33,255,187,124,183,51,59,184,149,175,126,219,157,86,26,158,76,170,29,170,150,20,180],[127,53,218,57,114,210,152,50,119,100,44,138,231,207,248,0,96,208,60,166,213,191,37,63,131,115,252,69,170,209,72,212],[7,24,65,149,119,194,53,75,178,79,116,70,13,87,139,209,32,78,238,127,104,155,77,154,56,143,176,254,204,81,15,238]]",
              "sol": "[bytes(abi.encode(\"148,238,133,209,176,124,210,6,26,33,255,187,124,183,51,59,184,149,175,126,219,157,86,26,158,76,170,29,170,150,20,180\")),bytes(abi.encode(\"127,53,218,57,114,210,152,50,119,100,44,138,231,207,248,0,96,208,60,166,213,191,37,63,131,115,252,69,170,209,72,212\")),bytes(abi.encode(\"7,24,65,149,119,194,53,75,178,79,116,70,13,87,139,209,32,78,238,127,104,155,77,154,56,143,176,254,204,81,15,238\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.254ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[187,4,148,18,149,22,132,164,33,197,178,125,61,172,223,61,17,166,173,156,61,62,194,46,236,229,234,104,248,29,54,84],[78,246,239,62,146,195,39,94,98,239,248,253,31,77,35,142,103,238,71,106,37,13,224,242,100,40,112,50,88,222,208,201],[65,233,39,11,30,161,62,106,219,16,131,7,52,131,4,229,26,168,117,26,40,249,183,167,22,108,96,25,40,214,167,189]]",
              "sol": "[bytes(abi.encode(\"187,4,148,18,149,22,132,164,33,197,178,125,61,172,223,61,17,166,173,156,61,62,194,46,236,229,234,104,248,29,54,84\")),bytes(abi.encode(\"78,246,239,62,146,195,39,94,98,239,248,253,31,77,35,142,103,238,71,106,37,13,224,242,100,40,112,50,88,222,208,201\")),bytes(abi.encode(\"65,233,39,11,30,161,62,106,219,16,131,7,52,131,4,229,26,168,117,26,40,249,183,167,22,108,96,25,40,214,167,189\"))]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.255ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[53,45,85,29,219,224,209,149,133,212,15,46,49,50,214,213,223,131,176,214,73,127,199,248,31,107,34,30,240,38,34,228],[249,58,185,50,0,48,148,51,221,247,101,121,104,176,45,27,164,185,18,235,217,234,229,44,173,106,50,191,9,201,81,63],[121,65,9,32,220,217,182,29,95,110,147,4,99,85,126,64,72,217,38,88,218,163,20,115,101,78,9,222,243,9,93,209],[110,111,81,205,67,42,171,187,245,80,191,187,47,69,39,231,105,30,49,64,1,49,127,41,187,31,115,167,1,133,176,109]]",
              "sol": "[bytes(abi.encode(\"53,45,85,29,219,224,209,149,133,212,15,46,49,50,214,213,223,131,176,214,73,127,199,248,31,107,34,30,240,38,34,228\")),bytes(abi.encode(\"249,58,185,50,0,48,148,51,221,247,101,121,104,176,45,27,164,185,18,235,217,234,229,44,173,106,50,191,9,201,81,63\")),bytes(abi.encode(\"121,65,9,32,220,217,182,29,95,110,147,4,99,85,126,64,72,217,38,88,218,163,20,115,101,78,9,222,243,9,93,209\")),bytes(abi.encode(\"110,111,81,205,67,42,171,187,245,80,191,187,47,69,39,231,105,30,49,64,1,49,127,41,187,31,115,167,1,133,176,109\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.255ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[41,158,206,96,108,87,147,47,53,179,254,168,166,107,164,108,147,176,238,196,32,30,115,0,41,45,224,7,21,97,179,140],[246,171,12,112,240,219,131,39,168,237,196,181,64,13,184,242,156,75,105,92,48,184,131,197,165,133,119,198,153,196,125,238],[103,254,0,199,197,231,142,215,18,120,119,119,234,191,211,17,230,255,31,196,121,125,161,7,113,122,250,28,27,197,234,115],[75,104,143,142,57,31,169,201,177,34,119,10,56,73,55,37,130,27,30,247,229,39,0,160,20,42,29,154,130,214,4,162]]",
              "sol": "[bytes(abi.encode(\"41,158,206,96,108,87,147,47,53,179,254,168,166,107,164,108,147,176,238,196,32,30,115,0,41,45,224,7,21,97,179,140\")),bytes(abi.encode(\"246,171,12,112,240,219,131,39,168,237,196,181,64,13,184,242,156,75,105,92,48,184,131,197,165,133,119,198,153,196,125,238\")),bytes(abi.encode(\"103,254,0,199,197,231,142,215,18,120,119,119,234,191,211,17,230,255,31,196,121,125,161,7,113,122,250,28,27,197,234,115\")),bytes(abi.encode(\"75,104,143,142,57,31,169,201,177,34,119,10,56,73,55,37,130,27,30,247,229,39,0,160,20,42,29,154,130,214,4,162\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.256ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[138,72,203,8,99,7,120,59,64,229,163,120,109,148,183,219,233,165,173,244,35,56,107,68,81,128,202,144,200,245,6,103],[93,46,240,1,231,191,184,17,93,78,114,185,208,105,142,18,189,223,35,47,77,44,198,160,154,241,147,168,250,219,36,48],[215,155,150,113,149,242,121,106,176,206,12,137,136,217,251,134,241,180,248,171,26,107,94,244,242,146,165,123,216,61,1,214],[209,208,180,167,201,150,178,155,156,189,162,113,176,109,15,231,18,70,0,33,89,22,254,209,186,99,70,152,194,19,152,168]]",
              "sol": "[bytes(abi.encode(\"138,72,203,8,99,7,120,59,64,229,163,120,109,148,183,219,233,165,173,244,35,56,107,68,81,128,202,144,200,245,6,103\")),bytes(abi.encode(\"93,46,240,1,231,191,184,17,93,78,114,185,208,105,142,18,189,223,35,47,77,44,198,160,154,241,147,168,250,219,36,48\")),bytes(abi.encode(\"215,155,150,113,149,242,121,106,176,206,12,137,136,217,251,134,241,180,248,171,26,107,94,244,242,146,165,123,216,61,1,214\")),bytes(abi.encode(\"209,208,180,167,201,150,178,155,156,189,162,113,176,109,15,231,18,70,0,33,89,22,254,209,186,99,70,152,194,19,152,168\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.256ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[253,52,145,125,163,11,20,23,191,252,184,66,111,249,89,242,241,149,247,52,72,52,112,14,221,5,51,241,173,43,207,199],[121,229,215,176,191,193,183,143,241,48,255,18,17,198,56,90,130,88,69,75,163,205,166,89,39,69,82,191,75,157,16,152],[246,229,21,188,148,6,194,87,208,4,240,218,85,249,242,252,91,202,213,244,97,230,177,213,243,68,44,27,85,179,65,137],[50,87,160,187,237,78,160,49,170,33,71,100,194,79,116,160,242,253,163,150,231,212,46,29,60,105,187,139,93,46,35,135]]",
              "sol": "[bytes(abi.encode(\"253,52,145,125,163,11,20,23,191,252,184,66,111,249,89,242,241,149,247,52,72,52,112,14,221,5,51,241,173,43,207,199\")),bytes(abi.encode(\"121,229,215,176,191,193,183,143,241,48,255,18,17,198,56,90,130,88,69,75,163,205,166,89,39,69,82,191,75,157,16,152\")),bytes(abi.encode(\"246,229,21,188,148,6,194,87,208,4,240,218,85,249,242,252,91,202,213,244,97,230,177,213,243,68,44,27,85,179,65,137\")),bytes(abi.encode(\"50,87,160,187,237,78,160,49,170,33,71,100,194,79,116,160,242,253,163,150,231,212,46,29,60,105,187,139,93,46,35,135\"))]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.257ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[59,157,33,162,162,164,68,18,120,137,164,45,221,234,243,109,75,168,219,201,5,162,153,26,105,100,155,253,53,186,152,214],[43,31,248,155,185,167,84,76,136,185,73,121,12,203,152,81,112,146,64,99,192,99,165,18,45,31,125,36,166,198,190,62],[26,219,124,37,199,51,137,27,114,205,100,62,183,245,51,35,164,248,205,232,253,156,141,57,25,74,247,152,152,104,159,18],[98,16,72,242,47,220,214,245,129,211,238,41,3,238,52,105,63,15,169,146,120,27,168,106,171,96,78,99,57,143,103,15],[131,226,41,19,95,69,232,103,212,145,167,22,42,202,108,89,133,76,199,48,205,215,34,26,169,245,54,27,56,247,84,79]]",
              "sol": "[bytes(abi.encode(\"59,157,33,162,162,164,68,18,120,137,164,45,221,234,243,109,75,168,219,201,5,162,153,26,105,100,155,253,53,186,152,214\")),bytes(abi.encode(\"43,31,248,155,185,167,84,76,136,185,73,121,12,203,152,81,112,146,64,99,192,99,165,18,45,31,125,36,166,198,190,62\")),bytes(abi.encode(\"26,219,124,37,199,51,137,27,114,205,100,62,183,245,51,35,164,248,205,232,253,156,141,57,25,74,247,152,152,104,159,18\")),bytes(abi.encode(\"98,16,72,242,47,220,214,245,129,211,238,41,3,238,52,105,63,15,169,146,120,27,168,106,171,96,78,99,57,143,103,15\")),bytes(abi.encode(\"131,226,41,19,95,69,232,103,212,145,167,22,42,202,108,89,133,76,199,48,205,215,34,26,169,245,54,27,56,247,84,79\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.258ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[228,121,207,40,14,107,88,8,248,198,240,139,106,167,134,23,205,13,63,252,103,16,52,210,221,134,81,203,52,130,238,88],[87,182,82,246,15,162,73,172,10,220,192,87,222,170,77,59,72,59,148,225,36,10,57,5,154,199,177,83,184,189,102,34],[184,39,10,169,200,134,68,241,26,93,116,87,227,134,0,2,96,213,122,231,117,95,231,197,141,115,196,92,95,41,106,201],[38,207,139,61,162,40,238,167,23,51,167,138,189,162,47,148,102,76,129,36,7,116,40,193,51,190,68,227,212,102,27,69],[169,95,141,127,28,152,157,17,141,109,93,150,5,201,235,154,234,248,187,39,205,172,144,233,125,143,181,180,45,157,46,78]]",
              "sol": "[bytes(abi.encode(\"228,121,207,40,14,107,88,8,248,198,240,139,106,167,134,23,205,13,63,252,103,16,52,210,221,134,81,203,52,130,238,88\")),bytes(abi.encode(\"87,182,82,246,15,162,73,172,10,220,192,87,222,170,77,59,72,59,148,225,36,10,57,5,154,199,177,83,184,189,102,34\")),bytes(abi.encode(\"184,39,10,169,200,134,68,241,26,93,116,87,227,134,0,2,96,213,122,231,117,95,231,197,141,115,196,92,95,41,106,201\")),bytes(abi.encode(\"38,207,139,61,162,40,238,167,23,51,167,138,189,162,47,148,102,76,129,36,7,116,40,193,51,190,68,227,212,102,27,69\")),bytes(abi.encode(\"169,95,141,127,28,152,157,17,141,109,93,150,5,201,235,154,234,248,187,39,205,172,144,233,125,143,181,180,45,157,46,78\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.259ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[56,122,124,159,207,103,131,56,81,145,18,31,102,153,139,114,118,233,216,71,179,218,27,195,222,88,249,77,1,242,238,46],[57,251,249,126,143,138,47,240,231,197,21,157,186,155,91,238,193,204,51,95,196,174,204,149,77,216,231,220,160,49,25,178],[117,52,114,108,129,235,149,87,102,87,67,133,81,57,88,250,140,227,251,154,126,253,101,101,202,112,252,248,130,24,242,103],[231,211,181,15,181,203,11,111,246,225,46,22,141,96,69,125,128,244,33,222,64,244,107,177,14,223,182,215,97,139,160,117],[45,41,77,25,162,146,116,241,232,175,11,128,253,210,213,14,169,64,70,240,250,123,148,146,21,80,82,243,132,4,234,58]]",
              "sol": "[bytes(abi.encode(\"56,122,124,159,207,103,131,56,81,145,18,31,102,153,139,114,118,233,216,71,179,218,27,195,222,88,249,77,1,242,238,46\")),bytes(abi.encode(\"57,251,249,126,143,138,47,240,231,197,21,157,186,155,91,238,193,204,51,95,196,174,204,149,77,216,231,220,160,49,25,178\")),bytes(abi.encode(\"117,52,114,108,129,235,149,87,102,87,67,133,81,57,88,250,140,227,251,154,126,253,101,101,202,112,252,248,130,24,242,103\")),bytes(abi.encode(\"231,211,181,15,181,203,11,111,246,225,46,22,141,96,69,125,128,244,33,222,64,244,107,177,14,223,182,215,97,139,160,117\")),bytes(abi.encode(\"45,41,77,25,162,146,116,241,232,175,11,128,253,210,213,14,169,64,70,240,250,123,148,146,21,80,82,243,132,4,234,58\"))]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.260ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[165,41,214,59,138,149,247,215,34,184,208,6,78,107,227,232,169,186,71,73,151,1,193,169,140,135,211,20,226,53,216,72],[218,160,255,123,26,32,97,200,16,89,132,202,95,233,49,80,237,245,215,132,135,224,251,129,39,19,57,243,54,169,52,43],[188,198,168,149,242,41,132,179,90,134,70,182,152,147,145,202,233,220,103,244,34,98,48,197,5,30,89,231,14,220,58,180],[41,195,39,140,169,189,242,231,166,45,30,253,253,47,125,3,139,88,74,52,9,105,15,3,71,99,12,97,236,253,249,197],[188,150,89,0,66,255,227,163,56,4,133,133,34,242,130,212,105,169,85,207,94,172,155,46,134,208,155,6,229,216,115,4]]",
              "sol": "[bytes(abi.encode(\"165,41,214,59,138,149,247,215,34,184,208,6,78,107,227,232,169,186,71,73,151,1,193,169,140,135,211,20,226,53,216,72\")),bytes(abi.encode(\"218,160,255,123,26,32,97,200,16,89,132,202,95,233,49,80,237,245,215,132,135,224,251,129,39,19,57,243,54,169,52,43\")),bytes(abi.encode(\"188,198,168,149,242,41,132,179,90,134,70,182,152,147,145,202,233,220,103,244,34,98,48,197,5,30,89,231,14,220,58,180\")),bytes(abi.encode(\"41,195,39,140,169,189,242,231,166,45,30,253,253,47,125,3,139,88,74,52,9,105,15,3,71,99,12,97,236,253,249,197\")),bytes(abi.encode(\"188,150,89,0,66,255,227,163,56,4,133,133,34,242,130,212,105,169,85,207,94,172,155,46,134,208,155,6,229,216,115,4\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.261ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[18]",
              "sol": "bytes1(\"18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.261ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.261ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.261ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.262ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.263ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.263ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.264ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"v619ip\"",
              "sol": "\"v619ip\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.264ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.265ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"11rr5s\"",
              "sol": "\"11rr5s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.265ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.266ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"4o14ws\"",
              "sol": "\"4o14ws\""
            },
            {
              "js": "\"czf25o\"",
              "sol": "\"czf25o\""
            },
            {
              "js": "\"11rr5s\"",
              "sol": "\"11rr5s\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.266ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.266ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.268ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"poey67\"",
              "sol": "\"poey67\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.268ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.269ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.270ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"listingID arg\",\"PayableExample\",\"v619ip\",\"updateEthPrice called\",\"L\",\"4o14ws\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"listingID arg\"),string(\"PayableExample\"),string(\"v619ip\"),string(\"updateEthPrice called\"),string(\"L\"),string(\"4o14ws\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.270ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[254,244,17,136,12,13,93,163,204,125,200,184,88,164,79,118,139,209,217,48,164,233,89,13,117,181,191,131,4,221,85,9],[87,118,32,130,41,240,95,133,184,240,207,165,51,235,193,200,161,87,111,32,2,244,189,47,74,247,236,211,134,173,53,81],[101,84,19,60,249,118,79,28,239,205,209,254,7,10,179,197,201,158,49,15,162,61,34,132,227,149,67,136,134,205,68,6],[219,157,62,35,245,162,15,77,82,160,97,195,89,108,133,139,179,139,231,144,134,80,136,195,137,14,66,212,218,101,163,9],[64,12,174,68,3,231,9,240,162,233,57,227,228,190,241,208,156,235,199,76,70,189,7,61,19,12,185,222,22,117,67,198],[188,210,254,99,118,62,56,148,245,192,28,243,114,181,71,93,148,91,146,57,196,184,245,34,230,49,81,127,118,22,200,203]]",
              "sol": "[bytes(abi.encode(\"254,244,17,136,12,13,93,163,204,125,200,184,88,164,79,118,139,209,217,48,164,233,89,13,117,181,191,131,4,221,85,9\")),bytes(abi.encode(\"87,118,32,130,41,240,95,133,184,240,207,165,51,235,193,200,161,87,111,32,2,244,189,47,74,247,236,211,134,173,53,81\")),bytes(abi.encode(\"101,84,19,60,249,118,79,28,239,205,209,254,7,10,179,197,201,158,49,15,162,61,34,132,227,149,67,136,134,205,68,6\")),bytes(abi.encode(\"219,157,62,35,245,162,15,77,82,160,97,195,89,108,133,139,179,139,231,144,134,80,136,195,137,14,66,212,218,101,163,9\")),bytes(abi.encode(\"64,12,174,68,3,231,9,240,162,233,57,227,228,190,241,208,156,235,199,76,70,189,7,61,19,12,185,222,22,117,67,198\")),bytes(abi.encode(\"188,210,254,99,118,62,56,148,245,192,28,243,114,181,71,93,148,91,146,57,196,184,245,34,230,49,81,127,118,22,200,203\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.271ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.271ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[125,152,146,175,101,201,95,43,131,194,49,248,93,111,236,76,119,81,38,35,191,145,158,61,226,192,247,90,215,26,86,93]",
              "sol": "stringToBytes32(\"125,152,146,175,101,201,95,43,131,194,49,248,93,111,236,76,119,81,38,35,191,145,158,61,226,192,247,90,215,26,86,93\")"
            },
            {
              "js": "[139,51,50,124,214,173,173,239,55,68,231,210,85,125,182,43,25,238,22,186,82,66,185,91,182,1,249,63,185,225,1,241]",
              "sol": "stringToBytes32(\"139,51,50,124,214,173,173,239,55,68,231,210,85,125,182,43,25,238,22,186,82,66,185,91,182,1,249,63,185,225,1,241\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.272ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[166,19,24,211,68,96,172,207,213,132,237,28,242,166,147,160,250,216,40,83,141,17,34,153,31,80,232,248,243,11,101,40]",
              "sol": "stringToBytes32(\"166,19,24,211,68,96,172,207,213,132,237,28,242,166,147,160,250,216,40,83,141,17,34,153,31,80,232,248,243,11,101,40\")"
            },
            {
              "js": "[220,235,183,182,67,221,160,96,55,37,132,231,115,186,82,223,234,207,222,101,93,45,254,221,229,181,221,19,38,207,181,141]",
              "sol": "abi.encode(\"220,235,183,182,67,221,160,96,55,37,132,231,115,186,82,223,234,207,222,101,93,45,254,221,229,181,221,19,38,207,181,141\")"
            },
            {
              "js": "[26,44,239,37,211,169,107,174,206,77,187,80,69,82,134,7,173,65,164,91,66,148,116,129,42,111,190,123,183,133,242,183]",
              "sol": "abi.encode(\"26,44,239,37,211,169,107,174,206,77,187,80,69,82,134,7,173,65,164,91,66,148,116,129,42,111,190,123,183,133,242,183\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.272ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[49,126,142,145,9,70,56,140,42,73,114,8,229,108,5,124,91,66,182,21,65,237,35,171,121,236,183,248,243,239,106,56]",
              "sol": "abi.encode(\"49,126,142,145,9,70,56,140,42,73,114,8,229,108,5,124,91,66,182,21,65,237,35,171,121,236,183,248,243,239,106,56\")"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[205,124,203,242,230,234,119,14,38,220,128,225,114,202,149,18,96,126,17,249,186,194,47,239,144,250,243,61,241,126,188,216]",
              "sol": "abi.encode(\"205,124,203,242,230,234,119,14,38,220,128,225,114,202,149,18,96,126,17,249,186,194,47,239,144,250,243,61,241,126,188,216\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.274ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[250,146,56,174,223,68,49,233,137,189,220,27,230,75,52,138,207,141,57,60,221,60,17,4,245,218,15,13,120,12,126,37]",
              "sol": "stringToBytes32(\"250,146,56,174,223,68,49,233,137,189,220,27,230,75,52,138,207,141,57,60,221,60,17,4,245,218,15,13,120,12,126,37\")"
            },
            {
              "js": "\"11rr5s\"",
              "sol": "\"11rr5s\""
            },
            {
              "js": "[166,68,109,52,78,51,11,153,173,108,138,237,72,73,175,219,19,165,201,98,36,255,183,30,167,44,58,160,0,33,156,182]",
              "sol": "abi.encode(\"166,68,109,52,78,51,11,153,173,108,138,237,72,73,175,219,19,165,201,98,36,255,183,30,167,44,58,160,0,33,156,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[209,149,1,73,226,248,29,6,2,61,55,185,31,13,106,61,68,141,246,196,138,16,0,192,209,51,234,170,160,231,131,238]",
              "sol": "stringToBytes32(\"209,149,1,73,226,248,29,6,2,61,55,185,31,13,106,61,68,141,246,196,138,16,0,192,209,51,234,170,160,231,131,238\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[75,220,56,73,94,246,30,243,166,69,153,148,232,62,24,35,79,91,47,33,157,43,131,173,206,92,172,141,163,144,47,172]",
              "sol": "abi.encode(\"75,220,56,73,94,246,30,243,166,69,153,148,232,62,24,35,79,91,47,33,157,43,131,173,206,92,172,141,163,144,47,172\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.274ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[122,8,64,122,172,83,179,245,200,226,239,191,220,159,72,160,121,217,150,193,110,197,169,116,95,123,211,28,180,152,81,35]",
              "sol": "stringToBytes32(\"122,8,64,122,172,83,179,245,200,226,239,191,220,159,72,160,121,217,150,193,110,197,169,116,95,123,211,28,180,152,81,35\")"
            },
            {
              "js": "[178,183,234,23,163,252,251,78,218,234,202,56,86,145,72,176,91,104,106,63,17,106,117,212,187,183,26,135,237,94,28,211]",
              "sol": "abi.encode(\"178,183,234,23,163,252,251,78,218,234,202,56,86,145,72,176,91,104,106,63,17,106,117,212,187,183,26,135,237,94,28,211\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[122,8,64,122,172,83,179,245,200,226,239,191,220,159,72,160,121,217,150,193,110,197,169,116,95,123,211,28,180,152,81,35]",
                "sol": "stringToBytes32(\"122,8,64,122,172,83,179,245,200,226,239,191,220,159,72,160,121,217,150,193,110,197,169,116,95,123,211,28,180,152,81,35\")"
              },
              {
                "js": "[200,5,56,204,218,91,148,61,157,77,204,221,172,52,13,222,99,26,204,216,200,207,192,241,52,250,168,219,236,167,181,28,57]",
                "sol": "bytes33(\"200,5,56,204,218,91,148,61,157,77,204,221,172,52,13,222,99,26,204,216,200,207,192,241,52,250,168,219,236,167,181,28,57\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.276ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[77,89,186,229,22,52,168,124,29,58,39,153,1,5,81,183,146,169,81,69,40,89,15,120,162,53,206,45,168,254,228,113]",
              "sol": "abi.encode(\"77,89,186,229,22,52,168,124,29,58,39,153,1,5,81,183,146,169,81,69,40,89,15,120,162,53,206,45,168,254,228,113\")"
            },
            {
              "js": "[199,27,195,8,13,8,41,66,167,231,18,174,197,129,137,158,248,73,79,113,250,137,246,21,82,35,202,206,184,236,104,239]",
              "sol": "stringToBytes32(\"199,27,195,8,13,8,41,66,167,231,18,174,197,129,137,158,248,73,79,113,250,137,246,21,82,35,202,206,184,236,104,239\")"
            },
            {
              "js": "[72,140,89,163,246,126,164,97,228,40,220,46,74,56,112,210,236,5,232,178,135,228,155,218,155,119,9,51,188,215,215,20]",
              "sol": "abi.encode(\"72,140,89,163,246,126,164,97,228,40,220,46,74,56,112,210,236,5,232,178,135,228,155,218,155,119,9,51,188,215,215,20\")"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[169,21,137,87,177,27,194,93,16,149,76,158,32,2,219,127,60,23,228,71,152,208,172,134,186,236,29,125,186,42,63,233]",
              "sol": "abi.encode(\"169,21,137,87,177,27,194,93,16,149,76,158,32,2,219,127,60,23,228,71,152,208,172,134,186,236,29,125,186,42,63,233\")"
            },
            {
              "js": "[247,138,226,32,85,231,16,107,163,56,0,73,243,21,164,17,66,16,42,23,27,90,210,175,112,248,199,176,188,21,199,56]",
              "sol": "stringToBytes32(\"247,138,226,32,85,231,16,107,163,56,0,73,243,21,164,17,66,16,42,23,27,90,210,175,112,248,199,176,188,21,199,56\")"
            },
            {
              "js": "[81,140,226,8,23,145,226,20,254,114,191,3,73,37,233,226,50,49,120,88,86,190,115,41,30,222,27,189,235,95,97,109]",
              "sol": "abi.encode(\"81,140,226,8,23,145,226,20,254,114,191,3,73,37,233,226,50,49,120,88,86,190,115,41,30,222,27,189,235,95,97,109\")"
            },
            {
              "js": "\"o58k7e\"",
              "sol": "\"o58k7e\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[57,61,42,151,126,125,190,123,101,4,23,145,151,187,27,147,164,27,239,117,182,17,55,51,229,52,105,169,180,112,24,14]",
              "sol": "abi.encode(\"57,61,42,151,126,125,190,123,101,4,23,145,151,187,27,147,164,27,239,117,182,17,55,51,229,52,105,169,180,112,24,14\")"
            },
            {
              "js": "[177,85,217,11,49,215,122,164,179,203,105,216,170,207,179,187,98,63,180,196,63,186,3,71,36,92,121,235,140,33,128,88]",
              "sol": "stringToBytes32(\"177,85,217,11,49,215,122,164,179,203,105,216,170,207,179,187,98,63,180,196,63,186,3,71,36,92,121,235,140,33,128,88\")"
            },
            {
              "js": "[110,148,136,104,235,248,163,21,145,15,216,251,47,147,57,52,0,135,122,254,23,253,73,220,56,80,131,175,183,63,88,164]",
              "sol": "abi.encode(\"110,148,136,104,235,248,163,21,145,15,216,251,47,147,57,52,0,135,122,254,23,253,73,220,56,80,131,175,183,63,88,164\")"
            },
            {
              "js": "\"k013tg\"",
              "sol": "\"k013tg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[54,168,81,10,22,99,250,208,187,32,82,93,96,229,42,174,88,188,140,29,82,23,76,154,79,200,204,205,217,104,51,45]",
              "sol": "abi.encode(\"54,168,81,10,22,99,250,208,187,32,82,93,96,229,42,174,88,188,140,29,82,23,76,154,79,200,204,205,217,104,51,45\")"
            },
            {
              "js": "[17,203,197,223,90,248,22,189,173,49,11,128,34,76,131,153,115,95,231,141,188,58,145,152,6,133,164,96,35,242,80,58]",
              "sol": "stringToBytes32(\"17,203,197,223,90,248,22,189,173,49,11,128,34,76,131,153,115,95,231,141,188,58,145,152,6,133,164,96,35,242,80,58\")"
            },
            {
              "js": "[243,52,75,179,177,96,142,146,228,183,117,47,45,22,6,48,73,81,244,139,24,31,241,75,44,130,150,140,225,171,39,176]",
              "sol": "abi.encode(\"243,52,75,179,177,96,142,146,228,183,117,47,45,22,6,48,73,81,244,139,24,31,241,75,44,130,150,140,225,171,39,176\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[69,176,130,228,135,210,103,171,27,116,100,32,188,83,240,138,252,152,176,6,210,6,177,30,187,193,15,235,247,212,240,40]",
              "sol": "abi.encode(\"69,176,130,228,135,210,103,171,27,116,100,32,188,83,240,138,252,152,176,6,210,6,177,30,187,193,15,235,247,212,240,40\")"
            },
            {
              "js": "[162,252,135,176,78,118,227,64,198,70,110,93,200,211,130,146,164,144,174,18,103,92,28,48,32,106,249,113,165,124,51,33]",
              "sol": "stringToBytes32(\"162,252,135,176,78,118,227,64,198,70,110,93,200,211,130,146,164,144,174,18,103,92,28,48,32,106,249,113,165,124,51,33\")"
            },
            {
              "js": "[246,238,254,209,168,252,238,46,187,11,7,189,11,235,54,136,26,159,15,127,149,32,248,7,90,40,251,24,135,248,119,26]",
              "sol": "abi.encode(\"246,238,254,209,168,252,238,46,187,11,7,189,11,235,54,136,26,159,15,127,149,32,248,7,90,40,251,24,135,248,119,26\")"
            },
            {
              "js": "\"k013tg\"",
              "sol": "\"k013tg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[138,131,167,85,252,200,197,117,234,210,10,6,20,148,158,247,59,93,193,125,166,126,231,115,109,118,97,52,246,69,187,35]",
              "sol": "abi.encode(\"138,131,167,85,252,200,197,117,234,210,10,6,20,148,158,247,59,93,193,125,166,126,231,115,109,118,97,52,246,69,187,35\")"
            },
            {
              "js": "[64,25,93,36,249,158,211,126,105,210,132,39,190,49,120,66,11,197,172,200,190,16,215,182,58,154,205,165,133,149,203,34]",
              "sol": "stringToBytes32(\"64,25,93,36,249,158,211,126,105,210,132,39,190,49,120,66,11,197,172,200,190,16,215,182,58,154,205,165,133,149,203,34\")"
            },
            {
              "js": "[231,6,124,32,45,208,12,222,8,237,159,227,3,108,8,158,105,192,129,22,203,249,45,46,197,91,84,68,88,172,42,133]",
              "sol": "abi.encode(\"231,6,124,32,45,208,12,222,8,237,159,227,3,108,8,158,105,192,129,22,203,249,45,46,197,91,84,68,88,172,42,133\")"
            },
            {
              "js": "\"k013tg\"",
              "sol": "\"k013tg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[79,130,202,125,1,8,18,66,141,184,236,199,202,115,41,116,209,67,43,208,62,207,168,112,147,253,7,35,141,218,109,207]",
              "sol": "abi.encode(\"79,130,202,125,1,8,18,66,141,184,236,199,202,115,41,116,209,67,43,208,62,207,168,112,147,253,7,35,141,218,109,207\")"
            },
            {
              "js": "[34,16,240,154,35,216,52,190,170,228,12,227,103,38,54,23,180,36,76,161,89,19,149,99,174,124,183,109,74,28,100,131]",
              "sol": "stringToBytes32(\"34,16,240,154,35,216,52,190,170,228,12,227,103,38,54,23,180,36,76,161,89,19,149,99,174,124,183,109,74,28,100,131\")"
            },
            {
              "js": "[29,4,202,148,219,103,203,245,36,219,151,231,86,226,135,116,82,23,115,217,198,215,87,34,189,47,19,232,159,230,158,235]",
              "sol": "abi.encode(\"29,4,202,148,219,103,203,245,36,219,151,231,86,226,135,116,82,23,115,217,198,215,87,34,189,47,19,232,159,230,158,235\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[80,92,22,72,219,139,182,202,211,53,228,113,116,238,85,9,63,52,104,235,91,205,38,13,232,164,84,202,98,191,199,208]",
              "sol": "abi.encode(\"80,92,22,72,219,139,182,202,211,53,228,113,116,238,85,9,63,52,104,235,91,205,38,13,232,164,84,202,98,191,199,208\")"
            },
            {
              "js": "[110,236,183,160,113,21,85,69,234,93,252,86,86,6,88,251,21,9,239,182,147,254,149,172,203,170,234,2,192,234,198,19]",
              "sol": "stringToBytes32(\"110,236,183,160,113,21,85,69,234,93,252,86,86,6,88,251,21,9,239,182,147,254,149,172,203,170,234,2,192,234,198,19\")"
            },
            {
              "js": "[237,17,255,48,39,106,24,87,253,182,27,112,147,194,46,211,26,134,199,73,114,81,6,171,224,101,67,215,22,156,196,49]",
              "sol": "abi.encode(\"237,17,255,48,39,106,24,87,253,182,27,112,147,194,46,211,26,134,199,73,114,81,6,171,224,101,67,215,22,156,196,49\")"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.283ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[205,139,77,229,247,228,132,136,96,254,155,60,100,207,127,106,46,56,106,168,29,23,155,35,120,4,39,30,130,25,240,32]",
              "sol": "abi.encode(\"205,139,77,229,247,228,132,136,96,254,155,60,100,207,127,106,46,56,106,168,29,23,155,35,120,4,39,30,130,25,240,32\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "[226,74,117,85,242,12,42,232,99,246,125,239,23,212,116,168,175,137,78,249,12,160,101,47,147,86,201,62,171,83,99,27]",
              "sol": "abi.encode(\"226,74,117,85,242,12,42,232,99,246,125,239,23,212,116,168,175,137,78,249,12,160,101,47,147,86,201,62,171,83,99,27\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.284ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[173,125,228,2,22,120,104,48,162,108,136,61,91,99,253,7,46,231,15,187,173,159,136,11,134,34,123,191,115,141,191,72]",
              "sol": "stringToBytes32(\"173,125,228,2,22,120,104,48,162,108,136,61,91,99,253,7,46,231,15,187,173,159,136,11,134,34,123,191,115,141,191,72\")"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "[85,29,131,121,159,253,7,62,117,147,53,31,101,24,219,156,7,67,212,222,43,54,26,96,115,197,125,150,149,14,249,241]",
              "sol": "stringToBytes32(\"85,29,131,121,159,253,7,62,117,147,53,31,101,24,219,156,7,67,212,222,43,54,26,96,115,197,125,150,149,14,249,241\")"
            },
            {
              "js": "[15,221,120,173,251,118,67,87,122,216,112,56,36,155,161,157,208,214,192,57,224,12,56,190,106,9,229,128,87,233,146,127]",
              "sol": "stringToBytes32(\"15,221,120,173,251,118,67,87,122,216,112,56,36,155,161,157,208,214,192,57,224,12,56,190,106,9,229,128,87,233,146,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.285ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[25,28,73,173,186,122,46,22,180,129,188,64,36,138,93,235,250,81,243,181,41,207,180,59,111,11,251,105,24,40,45,212]",
              "sol": "stringToBytes32(\"25,28,73,173,186,122,46,22,180,129,188,64,36,138,93,235,250,81,243,181,41,207,180,59,111,11,251,105,24,40,45,212\")"
            },
            {
              "js": "[230,236,29,145,127,163,208,109,0,164,97,184,190,46,232,40,154,67,196,23,106,98,226,37,244,80,126,14,134,150,176,77,253,56,203,2,74,95,31,97,194,35,168,230,205,167,158,120,120,161,163,236,115,208,48,252,79,85,242,104,17,120,151,86,3,195,228,15,57,64,127,242,138,220,52,115,209,4,88,67,4,240,79,233,88,254,49,175,27,169,238,38,67,192,29,33,122,146,10,252,10,252,125,250,95,167,210,49,233,242,25,186,98,45,200,33,123,237,232,83,106,13,250,97,4,201,153]",
              "sol": "abi.encode(\"230,236,29,145,127,163,208,109,0,164,97,184,190,46,232,40,154,67,196,23,106,98,226,37,244,80,126,14,134,150,176,77,253,56,203,2,74,95,31,97,194,35,168,230,205,167,158,120,120,161,163,236,115,208,48,252,79,85,242,104,17,120,151,86,3,195,228,15,57,64,127,242,138,220,52,115,209,4,88,67,4,240,79,233,88,254,49,175,27,169,238,38,67,192,29,33,122,146,10,252,10,252,125,250,95,167,210,49,233,242,25,186,98,45,200,33,123,237,232,83,106,13,250,97,4,201,153\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[32,128,127,244,97,33,149,155,48,46,45,17,245,233,50,239,106,13,8,99,169,135,47,88,242,61,112,139,114,56,97,128]",
              "sol": "stringToBytes32(\"32,128,127,244,97,33,149,155,48,46,45,17,245,233,50,239,106,13,8,99,169,135,47,88,242,61,112,139,114,56,97,128\")"
            },
            {
              "js": "[149,198,186,240,63,64,68,28,189,205,86,210,236,64,227,26,195,183,29,230,31,114,69,185,0,161,55,238,69,229,8,85,22,94,156,83,31,110,210,164,149,61,108,155,255,217,106,221,47,219,22,54,143,171,176,30,248,61,192,155,250,176,167,0,77]",
              "sol": "abi.encode(\"149,198,186,240,63,64,68,28,189,205,86,210,236,64,227,26,195,183,29,230,31,114,69,185,0,161,55,238,69,229,8,85,22,94,156,83,31,110,210,164,149,61,108,155,255,217,106,221,47,219,22,54,143,171,176,30,248,61,192,155,250,176,167,0,77\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.287ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.288ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.288ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.288ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.289ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.289ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.289ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.290ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.290ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.290ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.290ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.291ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.292ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.293ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.293ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.297ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.300ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[48,90,216,133,23,16,39,22,146,175,32,90,228,33,14,188,188,146,184,9,183,161,163,151,161,73,144,136,40,234,244,11]",
              "sol": "stringToBytes32(\"48,90,216,133,23,16,39,22,146,175,32,90,228,33,14,188,188,146,184,9,183,161,163,151,161,73,144,136,40,234,244,11\")"
            },
            {
              "js": "\"11rr5s\"",
              "sol": "\"11rr5s\""
            },
            {
              "js": "[252,85,233,98,101,6,79,70,198,133,255,56,7,78,192,39,93,16,46,0,44,101,250,60,4,209,152,241,121,54,185,35]",
              "sol": "abi.encode(\"252,85,233,98,101,6,79,70,198,133,255,56,7,78,192,39,93,16,46,0,44,101,250,60,4,209,152,241,121,54,185,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.301ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.302ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.304ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxyable.address",
              "sol": "contractProxyable"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxyable.address",
                "sol": "contractProxyable"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.304ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[22,192,9,195,149,104,227,155,14,70,23,159,125,113,95,238,46,36,11,251,197,104,211,135,197,143,48,162,186,245,163,88]",
              "sol": "abi.encode(\"22,192,9,195,149,104,227,155,14,70,23,159,125,113,95,238,46,36,11,251,197,104,211,135,197,143,48,162,186,245,163,88\")"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "[68,78,215,211,23,47,43,169,13,165,5,100,194,124,15,183,106,232,115,159,190,121,50,152,225,239,96,67,172,7,213,198]",
              "sol": "stringToBytes32(\"68,78,215,211,23,47,43,169,13,165,5,100,194,124,15,183,106,232,115,159,190,121,50,152,225,239,96,67,172,7,213,198\")"
            },
            {
              "js": "[5,180,27,135,158,247,202,150,104,192,34,25,168,68,179,62,112,234,70,91,103,175,15,14,180,220,162,77,83,128,182,234]",
              "sol": "stringToBytes32(\"5,180,27,135,158,247,202,150,104,192,34,25,168,68,179,62,112,234,70,91,103,175,15,14,180,220,162,77,83,128,182,234\")"
            },
            {
              "js": "[83,159,201,233,126,21,198,38,108,49,38,123,145,233,12,226,70,15,6,222,94,231,48,6,121,212,134,82,254,77,6,12]",
              "sol": "stringToBytes32(\"83,159,201,233,126,21,198,38,108,49,38,123,145,233,12,226,70,15,6,222,94,231,48,6,121,212,134,82,254,77,6,12\")"
            },
            {
              "js": "[98,203,153,164,89,249,128,215,28,148,134,97,24,13,53,0,1,147,199,97,222,30,78,100,210,23,220,89,28,144,61,91]",
              "sol": "stringToBytes32(\"98,203,153,164,89,249,128,215,28,148,134,97,24,13,53,0,1,147,199,97,222,30,78,100,210,23,220,89,28,144,61,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.305ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.306ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.307ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.308ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.309ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.309ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.310ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "98",
                "sol": "98"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "98",
                "sol": "98"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.312ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.314ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:30:04.319ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.320ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.322ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:30:04.323ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}