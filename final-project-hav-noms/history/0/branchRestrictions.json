,{
  "2020-11-10T02:36:43.397ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:39:00.724ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:39:36.755ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:39:53.998ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:40:11.203ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:40:28.554ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:40:45.826ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:41:03.148ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:41:20.852ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:41:38.361ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:41:55.763ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.342ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.346ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [197,188,79,151,35,177,31,8,73,128,245,138,158,21,23,214,204,82,108,158,219,123,181,203,239,204,98,160,9,175,207,195],\"capacity\": 58}",
              "sol": "Buffer.buffer(abi.encode(\"197,188,79,151,35,177,31,8,73,128,245,138,158,21,23,214,204,82,108,158,219,123,181,203,239,204,98,160,9,175,207,195\"),58)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.347ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [83,45,228,95,103,183,182,44,168,38,214,138,105,209,129,151,133,180,236,119,162,179,142,21,147,165,215,147,231,32,81,120],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"83,45,228,95,103,183,182,44,168,38,214,138,105,209,129,151,133,180,236,119,162,179,142,21,147,165,215,147,231,32,81,120\"),95)"
            },
            {
              "js": "[82,62,193,161,169,3,86,116,94,120,46,254,171,154,172,47,50,224,6,190,216,123,110,211,67,148,219,86,140,114,127,51]",
              "sol": "abi.encode(\"82,62,193,161,169,3,86,116,94,120,46,254,171,154,172,47,50,224,6,190,216,123,110,211,67,148,219,86,140,114,127,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.347ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [192,249,101,206,238,139,23,134,135,51,226,42,195,126,129,24,33,164,10,56,50,69,111,217,20,30,138,108,32,249,213,167],\"capacity\": 1336}",
              "sol": "Buffer.buffer(abi.encode(\"192,249,101,206,238,139,23,134,135,51,226,42,195,126,129,24,33,164,10,56,50,69,111,217,20,30,138,108,32,249,213,167\"),1336)"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.348ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [51,154,218,144,178,135,124,223,220,128,97,200,208,212,163,146,230,230,135,213,206,197,90,234,4,97,59,84,224,65,152,10],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"51,154,218,144,178,135,124,223,220,128,97,200,208,212,163,146,230,230,135,213,206,197,90,234,4,97,59,84,224,65,152,10\"),24)"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.350ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [97,83,147,16,11,120,111,28,35,55,5,153,79,8,150,57,218,20,57,162,47,140,255,146,241,92,29,51,166,255,249,240],\"capacity\": 45}",
              "sol": "Buffer.buffer(abi.encode(\"97,83,147,16,11,120,111,28,35,55,5,153,79,8,150,57,218,20,57,162,47,140,255,146,241,92,29,51,166,255,249,240\"),45)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.351ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [108,140,71,53,207,255,245,178,27,214,59,42,45,121,106,211,181,229,178,120,132,241,16,231,197,164,241,200,1,172,157,206],\"capacity\": 162}",
              "sol": "Buffer.buffer(abi.encode(\"108,140,71,53,207,255,245,178,27,214,59,42,45,121,106,211,181,229,178,120,132,241,16,231,197,164,241,200,1,172,157,206\"),162)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [1,162,64,4,183,88,70,65,198,165,207,112,80,153,232,129,105,151,96,160,130,246,66,105,108,30,237,57,240,24,14,26],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"1,162,64,4,183,88,70,65,198,165,207,112,80,153,232,129,105,151,96,160,130,246,66,105,108,30,237,57,240,24,14,26\"),57)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.353ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [232,50,204,112,247,210,16,192,3,110,240,179,22,23,240,136,40,34,78,227,153,97,27,224,98,116,43,243,70,150,169,41],\"capacity\": 31}",
              "sol": "Buffer.buffer(abi.encode(\"232,50,204,112,247,210,16,192,3,110,240,179,22,23,240,136,40,34,78,227,153,97,27,224,98,116,43,243,70,150,169,41\"),31)"
            },
            {
              "js": "[184,43,38,0,71,98,85,92,252,31,165,238,23,97,168,254,48,184,141,154,33,158,93,135,148,215,213,83,94,3,153,4]",
              "sol": "abi.encode(\"184,43,38,0,71,98,85,92,252,31,165,238,23,97,168,254,48,184,141,154,33,158,93,135,148,215,213,83,94,3,153,4\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.353ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [79,69,237,69,176,179,237,86,152,70,118,28,129,183,160,48,179,189,221,16,251,230,108,207,147,239,112,169,61,7,49,125],\"capacity\": 10001}",
              "sol": "Buffer.buffer(abi.encode(\"79,69,237,69,176,179,237,86,152,70,118,28,129,183,160,48,179,189,221,16,251,230,108,207,147,239,112,169,61,7,49,125\"),10001)"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.354ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [174,111,251,170,120,171,218,131,163,20,18,8,95,134,166,114,168,201,92,202,30,216,15,194,52,126,67,77,2,67,239,150],\"capacity\": 96}",
              "sol": "Buffer.buffer(abi.encode(\"174,111,251,170,120,171,218,131,163,20,18,8,95,134,166,114,168,201,92,202,30,216,15,194,52,126,67,77,2,67,239,150\"),96)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.355ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [155,192,129,172,79,142,29,38,93,143,79,28,211,164,186,201,67,230,130,47,26,36,22,235,3,150,179,231,16,81,135,7],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"155,192,129,172,79,142,29,38,93,143,79,28,211,164,186,201,67,230,130,47,26,36,22,235,3,150,179,231,16,81,135,7\"),55)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.355ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [113,236,210,214,47,115,20,105,202,121,227,17,55,252,170,174,163,237,252,205,38,0,153,126,186,73,216,234,30,166,65,73],\"capacity\": 255}",
              "sol": "Buffer.buffer(abi.encode(\"113,236,210,214,47,115,20,105,202,121,227,17,55,252,170,174,163,237,252,205,38,0,153,126,186,73,216,234,30,166,65,73\"),255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.358ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.358ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.358ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.359ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.360ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.361ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.362ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.362ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.363ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.364ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.365ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[124,105,41,53,123,211,20,42,77,37,70,179,148,129,39,153,18,43,173,44,101,186,89,9,245,228,8,80,185,199,253,161]",
              "sol": "stringToBytes32(\"124,105,41,53,123,211,20,42,77,37,70,179,148,129,39,153,18,43,173,44,101,186,89,9,245,228,8,80,185,199,253,161\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.365ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[186,163,169,49,253,53,200,104,8,25,55,111,53,24,207,142,150,185,107,167,101,89,120,148,138,28,149,190,27,75,232,1]",
              "sol": "stringToBytes32(\"186,163,169,49,253,53,200,104,8,25,55,111,53,24,207,142,150,185,107,167,101,89,120,148,138,28,149,190,27,75,232,1\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[82,74,113,60,105,137,180,1,214,30,53,17,188,156,225,190,53,170,189,168,97,68,153,140,1,122,20,105,51,48,101,40]",
              "sol": "abi.encode(\"82,74,113,60,105,137,180,1,214,30,53,17,188,156,225,190,53,170,189,168,97,68,153,140,1,122,20,105,51,48,101,40\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.434ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.434ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.435ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.435ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.436ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.436ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"bd9hum\"",
              "sol": "\"bd9hum\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.437ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.437ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.438ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.438ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.439ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.439ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.440ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.440ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.441ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"PayableExample\",\"L\",\"p6d0k9\",\"Oraclize query was sent, standing by for the answer...\",\"updateEthPrice called\",\"trade.totalPrice\",\"trade.totalPrice\",\"PayableExample\",\"bd9hum\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"PayableExample\"),string(\"L\"),string(\"p6d0k9\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"updateEthPrice called\"),string(\"trade.totalPrice\"),string(\"trade.totalPrice\"),string(\"PayableExample\"),string(\"bd9hum\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.447ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"p6d0k9\",\"bd9hum\",\"RevertWithReason\",\"listingID arg\"]",
              "sol": "[string(\"p6d0k9\"),string(\"bd9hum\"),string(\"RevertWithReason\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.448ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"0\",\"0\",\"trade.totalPrice\",\"0\"]",
              "sol": "[string(\"0\"),string(\"0\"),string(\"trade.totalPrice\"),string(\"0\")]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.449ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"bd9hum\",\"p6d0k9\",\"RevertWithReason\",\"L\",\"Example\",\"listingID arg\",\"\\x19Ethereum Signed Message:\\n32\",\"0\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"bd9hum\"),string(\"p6d0k9\"),string(\"RevertWithReason\"),string(\"L\"),string(\"Example\"),string(\"listingID arg\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.449ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"\"]",
              "sol": "[string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.450ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.451ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.451ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"call updateEthPrice\"]",
              "sol": "[string(\"call updateEthPrice\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.452ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"bd9hum\",\"costUSD\"]",
              "sol": "[string(\"bd9hum\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.452ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"trade.totalPrice\",\"IsLibrary\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.453ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"bd9hum\",\"listingID arg\"]",
              "sol": "[string(\"bd9hum\"),string(\"listingID arg\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.454ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"p6d0k9\"",
              "sol": "\"p6d0k9\""
            },
            {
              "js": "[\"Example\",\"P\"]",
              "sol": "[string(\"Example\"),string(\"P\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.456ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"p6d0k9\",\"Oraclize query was sent, standing by for the answer...\",\"p6d0k9\"]",
              "sol": "[string(\"p6d0k9\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"p6d0k9\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.457ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"RevertWithReason\",\"IsLibrary\",\"UsesExample\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"IsLibrary\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.458ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"P\",\"IsLibrary\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"P\"),string(\"IsLibrary\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.460ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"P\",\"\\x19Ethereum Signed Message:\\n32\",\"bd9hum\"]",
              "sol": "[string(\"P\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"bd9hum\")]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.461ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"v4qlkg\"",
              "sol": "\"v4qlkg\""
            },
            {
              "js": "[\"PayableExample\",\"Example\",\"bd9hum\",\"RevertWithReason\"]",
              "sol": "[string(\"PayableExample\"),string(\"Example\"),string(\"bd9hum\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.461ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"P\",\"ETH\",\"trade.totalPrice\",\"costUSD\"]",
              "sol": "[string(\"P\"),string(\"ETH\"),string(\"trade.totalPrice\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.462ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"bd9hum\",\"\\x19Ethereum Signed Message:\\n32\",\"RevertWithReason\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"bd9hum\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"RevertWithReason\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.463ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"call updateEthPrice\",\"\\x19Ethereum Signed Message:\\n32\",\"IsLibrary\",\"ETH\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"IsLibrary\"),string(\"ETH\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.463ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"n3j0zi\",\"\",\"call updateEthPrice\",\"bd9hum\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"n3j0zi\"),string(\"\"),string(\"call updateEthPrice\"),string(\"bd9hum\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.464ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"bd9hum\",\"Oraclize query was sent, standing by for the answer...\",\"L\",\"ETH\",\"UsesExample\"]",
              "sol": "[string(\"bd9hum\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"L\"),string(\"ETH\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.464ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"fpcc0a\",\"bd9hum\",\"0\",\"updateEthPrice called\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"fpcc0a\"),string(\"bd9hum\"),string(\"0\"),string(\"updateEthPrice called\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.465ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"call updateEthPrice\",\"PayableExample\",\"Oraclize query was sent, standing by for the answer...\",\"costUSD\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"PayableExample\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"costUSD\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.467ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[38,197,10,3,155,14,93,91,118,190,14,13,35,90,162,121,29,246,47,247,144,38,123,9,128,127,91,24,73,221,120,212],[109,2,201,201,36,140,71,55,204,227,198,69,129,1,235,124,166,51,206,147,242,69,187,184,250,44,23,166,22,12,198,64],[208,239,174,182,221,246,223,237,117,0,34,235,53,8,77,231,65,122,120,25,108,200,23,151,88,206,120,220,53,56,6,54],[93,221,55,176,1,141,133,9,27,85,139,253,78,49,157,120,205,71,73,138,20,174,145,99,191,201,196,50,140,104,120,24]]",
              "sol": "[bytes(abi.encode(\"38,197,10,3,155,14,93,91,118,190,14,13,35,90,162,121,29,246,47,247,144,38,123,9,128,127,91,24,73,221,120,212\")),bytes(abi.encode(\"109,2,201,201,36,140,71,55,204,227,198,69,129,1,235,124,166,51,206,147,242,69,187,184,250,44,23,166,22,12,198,64\")),bytes(abi.encode(\"208,239,174,182,221,246,223,237,117,0,34,235,53,8,77,231,65,122,120,25,108,200,23,151,88,206,120,220,53,56,6,54\")),bytes(abi.encode(\"93,221,55,176,1,141,133,9,27,85,139,253,78,49,157,120,205,71,73,138,20,174,145,99,191,201,196,50,140,104,120,24\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.468ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[112,226,196,186,204,105,126,151,122,96,216,160,125,223,106,230,164,97,123,73,66,219,188,250,181,146,195,190,15,198,138,223],[238,201,136,5,34,234,43,79,130,44,185,71,175,246,236,78,187,167,170,37,30,66,233,67,60,144,80,76,231,54,238,120],[212,231,11,83,13,194,61,243,172,198,197,96,170,128,107,68,163,51,62,127,247,130,119,126,1,68,216,135,55,37,14,180]]",
              "sol": "[bytes(abi.encode(\"112,226,196,186,204,105,126,151,122,96,216,160,125,223,106,230,164,97,123,73,66,219,188,250,181,146,195,190,15,198,138,223\")),bytes(abi.encode(\"238,201,136,5,34,234,43,79,130,44,185,71,175,246,236,78,187,167,170,37,30,66,233,67,60,144,80,76,231,54,238,120\")),bytes(abi.encode(\"212,231,11,83,13,194,61,243,172,198,197,96,170,128,107,68,163,51,62,127,247,130,119,126,1,68,216,135,55,37,14,180\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.469ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[45,213,84,39,234,196,55,148,172,226,106,218,25,19,31,221,226,6,251,137,175,31,69,18,51,22,102,15,235,21,90,164],[22,191,95,156,79,125,209,159,135,252,213,131,124,203,221,218,233,92,165,44,136,19,247,12,3,222,83,225,7,215,117,29],[165,155,150,65,144,95,71,99,106,156,207,8,180,65,6,65,118,20,190,220,126,29,31,108,241,137,155,194,51,224,193,176],[2,78,34,31,163,94,204,69,244,157,140,88,59,53,90,44,233,169,205,184,115,2,216,132,210,185,95,47,193,151,221,82],[254,167,146,208,68,222,75,131,244,127,9,99,132,212,199,10,150,148,153,57,237,18,70,184,171,190,105,81,42,179,37,61],[112,235,176,202,211,12,77,119,240,131,63,113,59,156,255,42,115,186,196,124,249,40,45,54,225,33,224,227,177,4,210,169],[43,99,159,128,47,9,129,74,65,84,170,54,228,28,165,106,152,131,226,198,148,164,111,60,76,71,92,238,197,28,237,164],[15,10,145,225,185,104,121,181,125,129,199,169,111,75,98,2,156,13,93,243,144,111,31,161,129,35,150,82,158,180,17,110],[116,239,7,245,189,226,218,122,119,195,103,116,162,217,105,77,138,141,93,78,155,230,22,117,149,71,251,242,46,43,193,231],[234,77,178,43,144,86,194,182,98,251,23,175,96,192,214,185,146,56,230,206,31,42,221,148,65,225,119,6,171,128,83,226]]",
              "sol": "[bytes(abi.encode(\"45,213,84,39,234,196,55,148,172,226,106,218,25,19,31,221,226,6,251,137,175,31,69,18,51,22,102,15,235,21,90,164\")),bytes(abi.encode(\"22,191,95,156,79,125,209,159,135,252,213,131,124,203,221,218,233,92,165,44,136,19,247,12,3,222,83,225,7,215,117,29\")),bytes(abi.encode(\"165,155,150,65,144,95,71,99,106,156,207,8,180,65,6,65,118,20,190,220,126,29,31,108,241,137,155,194,51,224,193,176\")),bytes(abi.encode(\"2,78,34,31,163,94,204,69,244,157,140,88,59,53,90,44,233,169,205,184,115,2,216,132,210,185,95,47,193,151,221,82\")),bytes(abi.encode(\"254,167,146,208,68,222,75,131,244,127,9,99,132,212,199,10,150,148,153,57,237,18,70,184,171,190,105,81,42,179,37,61\")),bytes(abi.encode(\"112,235,176,202,211,12,77,119,240,131,63,113,59,156,255,42,115,186,196,124,249,40,45,54,225,33,224,227,177,4,210,169\")),bytes(abi.encode(\"43,99,159,128,47,9,129,74,65,84,170,54,228,28,165,106,152,131,226,198,148,164,111,60,76,71,92,238,197,28,237,164\")),bytes(abi.encode(\"15,10,145,225,185,104,121,181,125,129,199,169,111,75,98,2,156,13,93,243,144,111,31,161,129,35,150,82,158,180,17,110\")),bytes(abi.encode(\"116,239,7,245,189,226,218,122,119,195,103,116,162,217,105,77,138,141,93,78,155,230,22,117,149,71,251,242,46,43,193,231\")),bytes(abi.encode(\"234,77,178,43,144,86,194,182,98,251,23,175,96,192,214,185,146,56,230,206,31,42,221,148,65,225,119,6,171,128,83,226\"))]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.473ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[92,1,36,249,95,61,241,165,62,246,138,67,130,189,72,69,182,106,154,100,250,197,220,92,203,13,94,252,129,114,229,231],[244,130,192,242,138,37,150,219,219,227,27,163,185,156,1,154,175,227,153,153,226,116,85,154,83,126,52,252,92,174,164,84],[201,2,208,227,84,217,55,251,62,122,84,6,179,49,115,122,137,42,214,160,210,116,167,165,222,59,205,160,42,186,96,252],[214,129,158,121,244,169,22,133,116,3,7,82,10,91,120,61,143,140,188,101,117,128,225,211,218,143,213,248,7,91,250,137]]",
              "sol": "[bytes(abi.encode(\"92,1,36,249,95,61,241,165,62,246,138,67,130,189,72,69,182,106,154,100,250,197,220,92,203,13,94,252,129,114,229,231\")),bytes(abi.encode(\"244,130,192,242,138,37,150,219,219,227,27,163,185,156,1,154,175,227,153,153,226,116,85,154,83,126,52,252,92,174,164,84\")),bytes(abi.encode(\"201,2,208,227,84,217,55,251,62,122,84,6,179,49,115,122,137,42,214,160,210,116,167,165,222,59,205,160,42,186,96,252\")),bytes(abi.encode(\"214,129,158,121,244,169,22,133,116,3,7,82,10,91,120,61,143,140,188,101,117,128,225,211,218,143,213,248,7,91,250,137\"))]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.474ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[63,110,16,63,76,71,95,13,224,161,52,157,110,58,52,236,126,232,4,36,132,192,164,150,7,110,181,149,184,230,231,170]]",
              "sol": "[bytes(abi.encode(\"63,110,16,63,76,71,95,13,224,161,52,157,110,58,52,236,126,232,4,36,132,192,164,150,7,110,181,149,184,230,231,170\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.474ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[221,83,19,190,251,143,196,148,42,216,223,225,165,240,203,212,179,251,173,174,147,119,205,130,230,150,255,125,235,182,188,113]]",
              "sol": "[bytes(abi.encode(\"221,83,19,190,251,143,196,148,42,216,223,225,165,240,203,212,179,251,173,174,147,119,205,130,230,150,255,125,235,182,188,113\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.475ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[145,24,223,6,174,105,11,111,63,221,75,252,7,153,92,188,31,231,127,185,55,77,241,113,4,30,30,73,44,4,248,51]]",
              "sol": "[bytes(abi.encode(\"145,24,223,6,174,105,11,111,63,221,75,252,7,153,92,188,31,231,127,185,55,77,241,113,4,30,30,73,44,4,248,51\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.476ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[36,133,224,5,109,243,84,47,75,45,2,91,124,168,119,41,63,78,60,208,108,29,4,150,241,212,240,237,169,247,226,219]]",
              "sol": "[bytes(abi.encode(\"36,133,224,5,109,243,84,47,75,45,2,91,124,168,119,41,63,78,60,208,108,29,4,150,241,212,240,237,169,247,226,219\"))]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.477ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[141,127,78,80,233,163,200,22,136,178,156,224,109,227,150,234,199,211,51,143,200,130,206,228,160,13,249,34,26,75,217,222],[102,192,224,77,219,138,172,122,28,219,169,37,209,161,198,47,112,254,149,12,94,110,87,112,248,229,231,137,204,47,253,87]]",
              "sol": "[bytes(abi.encode(\"141,127,78,80,233,163,200,22,136,178,156,224,109,227,150,234,199,211,51,143,200,130,206,228,160,13,249,34,26,75,217,222\")),bytes(abi.encode(\"102,192,224,77,219,138,172,122,28,219,169,37,209,161,198,47,112,254,149,12,94,110,87,112,248,229,231,137,204,47,253,87\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.478ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"nombqa\"",
              "sol": "\"nombqa\""
            },
            {
              "js": "[[144,147,238,15,179,21,36,43,191,157,87,233,4,150,216,121,91,25,171,25,61,108,197,223,155,211,48,104,216,196,238,248],[245,188,156,228,231,170,3,9,19,66,11,50,164,190,39,120,245,182,209,91,127,249,165,149,244,186,108,84,90,190,142,38]]",
              "sol": "[bytes(abi.encode(\"144,147,238,15,179,21,36,43,191,157,87,233,4,150,216,121,91,25,171,25,61,108,197,223,155,211,48,104,216,196,238,248\")),bytes(abi.encode(\"245,188,156,228,231,170,3,9,19,66,11,50,164,190,39,120,245,182,209,91,127,249,165,149,244,186,108,84,90,190,142,38\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.478ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[66,123,19,228,35,119,3,51,9,223,123,179,143,119,25,86,146,242,75,143,137,253,164,23,199,166,203,133,200,56,202,18],[166,47,11,187,55,253,212,121,131,232,202,229,72,222,36,191,19,228,234,67,129,157,78,251,205,140,47,245,203,237,135,44]]",
              "sol": "[bytes(abi.encode(\"66,123,19,228,35,119,3,51,9,223,123,179,143,119,25,86,146,242,75,143,137,253,164,23,199,166,203,133,200,56,202,18\")),bytes(abi.encode(\"166,47,11,187,55,253,212,121,131,232,202,229,72,222,36,191,19,228,234,67,129,157,78,251,205,140,47,245,203,237,135,44\"))]"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.479ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"9dxfn7\"",
              "sol": "\"9dxfn7\""
            },
            {
              "js": "[[56,9,64,243,228,117,224,89,22,134,67,197,84,108,161,224,119,16,105,249,71,73,187,46,235,130,4,101,126,102,94,1],[222,245,126,75,203,79,178,217,113,199,180,141,252,201,18,91,145,164,207,55,134,233,77,185,172,228,135,143,56,166,4,30]]",
              "sol": "[bytes(abi.encode(\"56,9,64,243,228,117,224,89,22,134,67,197,84,108,161,224,119,16,105,249,71,73,187,46,235,130,4,101,126,102,94,1\")),bytes(abi.encode(\"222,245,126,75,203,79,178,217,113,199,180,141,252,201,18,91,145,164,207,55,134,233,77,185,172,228,135,143,56,166,4,30\"))]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.481ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[110,78,116,8,122,157,190,16,192,138,57,229,124,183,192,162,167,123,161,148,97,13,75,71,0,45,92,181,150,12,241,134],[236,176,237,138,192,186,157,52,23,102,81,223,195,255,252,221,163,29,168,226,53,215,227,249,12,60,89,136,207,59,119,146],[253,120,202,155,212,51,9,2,106,62,97,146,233,59,34,234,75,103,15,241,99,174,83,120,214,20,75,149,149,216,229,192]]",
              "sol": "[bytes(abi.encode(\"110,78,116,8,122,157,190,16,192,138,57,229,124,183,192,162,167,123,161,148,97,13,75,71,0,45,92,181,150,12,241,134\")),bytes(abi.encode(\"236,176,237,138,192,186,157,52,23,102,81,223,195,255,252,221,163,29,168,226,53,215,227,249,12,60,89,136,207,59,119,146\")),bytes(abi.encode(\"253,120,202,155,212,51,9,2,106,62,97,146,233,59,34,234,75,103,15,241,99,174,83,120,214,20,75,149,149,216,229,192\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.482ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"nombqa\"",
              "sol": "\"nombqa\""
            },
            {
              "js": "[[71,42,100,151,232,210,2,15,156,229,68,148,249,254,83,158,71,56,227,199,199,58,81,172,122,118,155,89,232,87,153,70],[190,73,55,59,152,67,234,98,193,18,208,44,179,33,65,76,36,152,191,194,229,151,225,216,144,168,99,114,180,42,9,93],[63,222,218,93,147,14,109,74,98,134,46,37,133,190,211,253,34,200,97,214,200,225,142,28,192,60,228,87,92,43,27,3]]",
              "sol": "[bytes(abi.encode(\"71,42,100,151,232,210,2,15,156,229,68,148,249,254,83,158,71,56,227,199,199,58,81,172,122,118,155,89,232,87,153,70\")),bytes(abi.encode(\"190,73,55,59,152,67,234,98,193,18,208,44,179,33,65,76,36,152,191,194,229,151,225,216,144,168,99,114,180,42,9,93\")),bytes(abi.encode(\"63,222,218,93,147,14,109,74,98,134,46,37,133,190,211,253,34,200,97,214,200,225,142,28,192,60,228,87,92,43,27,3\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.483ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[249,108,111,98,13,230,204,130,33,208,219,139,188,177,92,51,237,152,186,76,116,13,186,242,151,121,171,161,83,22,130,45],[82,24,233,104,190,177,190,22,190,227,22,190,193,111,171,127,74,235,123,59,25,68,165,126,250,5,26,232,114,10,39,209],[149,217,77,125,63,242,103,87,172,40,157,197,42,125,196,9,146,14,90,155,245,23,75,12,187,214,192,16,213,13,76,206]]",
              "sol": "[bytes(abi.encode(\"249,108,111,98,13,230,204,130,33,208,219,139,188,177,92,51,237,152,186,76,116,13,186,242,151,121,171,161,83,22,130,45\")),bytes(abi.encode(\"82,24,233,104,190,177,190,22,190,227,22,190,193,111,171,127,74,235,123,59,25,68,165,126,250,5,26,232,114,10,39,209\")),bytes(abi.encode(\"149,217,77,125,63,242,103,87,172,40,157,197,42,125,196,9,146,14,90,155,245,23,75,12,187,214,192,16,213,13,76,206\"))]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.484ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[239,112,10,19,151,136,122,225,86,237,42,19,102,176,223,149,31,21,23,240,55,186,23,242,190,203,44,114,111,126,155,195],[33,174,103,218,214,18,81,94,21,83,41,255,179,74,75,130,9,176,35,212,237,0,233,118,102,182,40,174,65,159,191,151],[61,55,210,228,169,125,120,207,146,208,135,226,185,151,205,64,190,4,175,205,49,115,38,58,8,94,154,78,59,249,24,66]]",
              "sol": "[bytes(abi.encode(\"239,112,10,19,151,136,122,225,86,237,42,19,102,176,223,149,31,21,23,240,55,186,23,242,190,203,44,114,111,126,155,195\")),bytes(abi.encode(\"33,174,103,218,214,18,81,94,21,83,41,255,179,74,75,130,9,176,35,212,237,0,233,118,102,182,40,174,65,159,191,151\")),bytes(abi.encode(\"61,55,210,228,169,125,120,207,146,208,135,226,185,151,205,64,190,4,175,205,49,115,38,58,8,94,154,78,59,249,24,66\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.485ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"nombqa\"",
              "sol": "\"nombqa\""
            },
            {
              "js": "[[108,221,50,81,8,168,192,39,238,33,155,98,198,200,186,134,156,137,79,231,45,25,132,138,213,156,19,134,251,49,53,201],[91,233,124,158,15,109,188,143,135,189,7,213,221,103,176,201,29,92,53,7,154,153,20,80,46,175,138,187,122,56,232,253],[59,235,192,208,180,198,195,223,68,141,160,218,68,200,25,247,185,129,243,197,8,144,201,215,40,100,112,0,183,205,216,145],[239,163,215,15,98,242,121,19,62,102,99,113,138,82,12,217,49,130,48,223,2,227,206,152,166,5,241,231,102,228,12,45]]",
              "sol": "[bytes(abi.encode(\"108,221,50,81,8,168,192,39,238,33,155,98,198,200,186,134,156,137,79,231,45,25,132,138,213,156,19,134,251,49,53,201\")),bytes(abi.encode(\"91,233,124,158,15,109,188,143,135,189,7,213,221,103,176,201,29,92,53,7,154,153,20,80,46,175,138,187,122,56,232,253\")),bytes(abi.encode(\"59,235,192,208,180,198,195,223,68,141,160,218,68,200,25,247,185,129,243,197,8,144,201,215,40,100,112,0,183,205,216,145\")),bytes(abi.encode(\"239,163,215,15,98,242,121,19,62,102,99,113,138,82,12,217,49,130,48,223,2,227,206,152,166,5,241,231,102,228,12,45\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.486ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"n3j0zi\"",
              "sol": "\"n3j0zi\""
            },
            {
              "js": "[[194,26,102,172,39,195,91,14,13,188,106,215,140,225,123,211,200,191,160,32,107,74,247,206,31,47,255,6,45,27,172,223],[243,73,110,245,253,208,130,136,104,224,9,56,43,13,6,237,179,251,128,72,4,171,148,195,144,176,97,91,200,93,140,227],[49,5,224,73,225,108,47,133,35,78,27,209,13,42,139,178,158,108,144,220,35,229,184,60,166,8,77,149,241,207,91,19],[171,237,139,241,120,122,222,253,104,203,141,188,132,13,11,126,231,149,210,112,227,62,18,193,170,20,17,220,111,182,167,218]]",
              "sol": "[bytes(abi.encode(\"194,26,102,172,39,195,91,14,13,188,106,215,140,225,123,211,200,191,160,32,107,74,247,206,31,47,255,6,45,27,172,223\")),bytes(abi.encode(\"243,73,110,245,253,208,130,136,104,224,9,56,43,13,6,237,179,251,128,72,4,171,148,195,144,176,97,91,200,93,140,227\")),bytes(abi.encode(\"49,5,224,73,225,108,47,133,35,78,27,209,13,42,139,178,158,108,144,220,35,229,184,60,166,8,77,149,241,207,91,19\")),bytes(abi.encode(\"171,237,139,241,120,122,222,253,104,203,141,188,132,13,11,126,231,149,210,112,227,62,18,193,170,20,17,220,111,182,167,218\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.486ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[1,136,39,251,75,128,194,96,246,0,180,97,206,196,212,88,130,80,224,105,125,163,159,225,78,76,152,155,208,120,92,34],[143,119,71,149,40,73,225,35,217,75,148,243,22,98,244,116,61,190,183,195,207,3,42,242,1,35,19,215,178,164,246,82],[12,211,83,191,41,213,175,31,58,136,24,154,21,63,33,154,210,113,132,151,8,109,51,130,244,156,138,245,216,62,8,207],[114,15,31,200,31,113,25,0,28,0,49,126,47,245,109,55,69,247,0,138,124,192,214,253,125,183,80,210,163,236,241,218]]",
              "sol": "[bytes(abi.encode(\"1,136,39,251,75,128,194,96,246,0,180,97,206,196,212,88,130,80,224,105,125,163,159,225,78,76,152,155,208,120,92,34\")),bytes(abi.encode(\"143,119,71,149,40,73,225,35,217,75,148,243,22,98,244,116,61,190,183,195,207,3,42,242,1,35,19,215,178,164,246,82\")),bytes(abi.encode(\"12,211,83,191,41,213,175,31,58,136,24,154,21,63,33,154,210,113,132,151,8,109,51,130,244,156,138,245,216,62,8,207\")),bytes(abi.encode(\"114,15,31,200,31,113,25,0,28,0,49,126,47,245,109,55,69,247,0,138,124,192,214,253,125,183,80,210,163,236,241,218\"))]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.487ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[237,60,47,214,113,65,237,217,65,198,161,103,209,22,171,212,197,147,142,113,6,31,244,84,116,154,169,190,184,155,215,36],[138,121,160,85,194,179,246,4,19,233,17,83,239,201,69,13,149,253,106,221,93,96,151,64,153,210,174,222,202,44,15,182],[138,243,206,186,185,163,181,123,239,106,168,118,17,19,243,115,56,196,165,253,77,211,236,69,30,49,73,179,114,224,185,139],[154,1,183,243,92,89,178,75,175,214,10,250,36,183,139,115,110,155,177,59,68,194,129,114,160,157,222,208,49,94,125,178]]",
              "sol": "[bytes(abi.encode(\"237,60,47,214,113,65,237,217,65,198,161,103,209,22,171,212,197,147,142,113,6,31,244,84,116,154,169,190,184,155,215,36\")),bytes(abi.encode(\"138,121,160,85,194,179,246,4,19,233,17,83,239,201,69,13,149,253,106,221,93,96,151,64,153,210,174,222,202,44,15,182\")),bytes(abi.encode(\"138,243,206,186,185,163,181,123,239,106,168,118,17,19,243,115,56,196,165,253,77,211,236,69,30,49,73,179,114,224,185,139\")),bytes(abi.encode(\"154,1,183,243,92,89,178,75,175,214,10,250,36,183,139,115,110,155,177,59,68,194,129,114,160,157,222,208,49,94,125,178\"))]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.488ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[98,174,111,204,137,218,56,7,123,37,107,147,177,159,141,196,41,93,125,73,250,42,36,94,215,204,165,173,243,96,162,81],[143,34,82,80,111,182,239,140,91,229,161,194,66,3,22,159,1,184,187,186,59,135,132,108,170,70,103,30,136,47,110,61],[189,121,37,193,108,95,56,81,182,226,216,47,224,136,81,227,230,49,39,106,81,12,34,188,45,230,67,61,98,22,97,51],[40,98,129,65,242,226,236,194,87,47,119,213,177,27,130,202,7,66,167,255,22,145,241,173,42,71,12,153,242,83,106,32],[220,72,162,188,66,26,9,76,128,171,49,193,114,222,47,93,184,250,198,69,139,192,88,149,146,224,76,131,170,45,234,156]]",
              "sol": "[bytes(abi.encode(\"98,174,111,204,137,218,56,7,123,37,107,147,177,159,141,196,41,93,125,73,250,42,36,94,215,204,165,173,243,96,162,81\")),bytes(abi.encode(\"143,34,82,80,111,182,239,140,91,229,161,194,66,3,22,159,1,184,187,186,59,135,132,108,170,70,103,30,136,47,110,61\")),bytes(abi.encode(\"189,121,37,193,108,95,56,81,182,226,216,47,224,136,81,227,230,49,39,106,81,12,34,188,45,230,67,61,98,22,97,51\")),bytes(abi.encode(\"40,98,129,65,242,226,236,194,87,47,119,213,177,27,130,202,7,66,167,255,22,145,241,173,42,71,12,153,242,83,106,32\")),bytes(abi.encode(\"220,72,162,188,66,26,9,76,128,171,49,193,114,222,47,93,184,250,198,69,139,192,88,149,146,224,76,131,170,45,234,156\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.489ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[141,178,186,191,163,200,234,42,79,58,171,53,115,75,199,158,119,233,57,19,127,248,84,32,227,84,111,243,241,92,128,8],[146,144,36,208,91,220,244,61,94,6,204,229,41,201,209,76,211,165,82,114,241,17,186,11,129,237,40,182,115,53,78,226],[11,53,168,144,123,238,122,35,15,9,252,147,152,5,139,101,234,42,146,168,247,45,81,197,216,115,161,214,108,43,138,111],[25,87,43,195,87,21,249,24,254,243,210,121,10,194,120,52,230,59,166,144,213,115,14,157,80,56,7,166,20,117,232,231],[149,21,9,193,205,68,172,6,57,34,190,162,82,224,175,141,156,172,109,250,137,246,48,44,210,243,73,246,237,215,54,165]]",
              "sol": "[bytes(abi.encode(\"141,178,186,191,163,200,234,42,79,58,171,53,115,75,199,158,119,233,57,19,127,248,84,32,227,84,111,243,241,92,128,8\")),bytes(abi.encode(\"146,144,36,208,91,220,244,61,94,6,204,229,41,201,209,76,211,165,82,114,241,17,186,11,129,237,40,182,115,53,78,226\")),bytes(abi.encode(\"11,53,168,144,123,238,122,35,15,9,252,147,152,5,139,101,234,42,146,168,247,45,81,197,216,115,161,214,108,43,138,111\")),bytes(abi.encode(\"25,87,43,195,87,21,249,24,254,243,210,121,10,194,120,52,230,59,166,144,213,115,14,157,80,56,7,166,20,117,232,231\")),bytes(abi.encode(\"149,21,9,193,205,68,172,6,57,34,190,162,82,224,175,141,156,172,109,250,137,246,48,44,210,243,73,246,237,215,54,165\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.490ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[146,190,91,221,115,153,50,164,27,131,157,153,147,16,213,223,83,118,221,51,93,51,63,147,234,152,42,150,145,129,203,76],[14,253,70,0,77,102,193,1,15,32,58,157,222,216,183,50,157,153,2,9,9,120,144,194,162,172,127,136,240,228,78,29],[108,242,230,28,158,109,227,174,201,189,162,103,204,253,189,172,209,12,68,126,128,141,88,206,13,185,112,192,166,145,166,198],[42,155,181,166,38,183,102,122,139,97,236,222,146,22,44,44,41,242,22,78,71,150,119,102,66,223,221,186,162,227,202,74],[43,177,187,149,101,77,144,208,244,116,44,203,100,116,249,252,88,216,239,219,115,181,28,38,191,144,152,115,100,50,194,11]]",
              "sol": "[bytes(abi.encode(\"146,190,91,221,115,153,50,164,27,131,157,153,147,16,213,223,83,118,221,51,93,51,63,147,234,152,42,150,145,129,203,76\")),bytes(abi.encode(\"14,253,70,0,77,102,193,1,15,32,58,157,222,216,183,50,157,153,2,9,9,120,144,194,162,172,127,136,240,228,78,29\")),bytes(abi.encode(\"108,242,230,28,158,109,227,174,201,189,162,103,204,253,189,172,209,12,68,126,128,141,88,206,13,185,112,192,166,145,166,198\")),bytes(abi.encode(\"42,155,181,166,38,183,102,122,139,97,236,222,146,22,44,44,41,242,22,78,71,150,119,102,66,223,221,186,162,227,202,74\")),bytes(abi.encode(\"43,177,187,149,101,77,144,208,244,116,44,203,100,116,249,252,88,216,239,219,115,181,28,38,191,144,152,115,100,50,194,11\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.491ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[10,200,124,199,5,19,79,137,118,25,50,28,193,215,120,209,233,112,42,84,26,107,46,142,35,143,131,57,199,230,142,78],[176,245,54,69,10,141,251,66,123,114,65,181,49,163,156,133,200,166,149,95,138,102,224,45,114,58,138,192,126,81,151,191],[48,181,132,9,167,7,179,199,81,48,159,244,168,75,249,122,216,58,81,93,169,145,4,211,230,194,128,164,28,217,152,43],[112,92,214,171,29,123,88,224,11,93,145,193,201,131,190,94,105,65,152,26,121,239,73,102,251,242,201,69,95,140,136,92],[37,80,151,167,34,201,170,30,54,202,113,69,34,28,151,204,116,171,165,249,215,186,153,81,113,46,243,213,168,23,250,33]]",
              "sol": "[bytes(abi.encode(\"10,200,124,199,5,19,79,137,118,25,50,28,193,215,120,209,233,112,42,84,26,107,46,142,35,143,131,57,199,230,142,78\")),bytes(abi.encode(\"176,245,54,69,10,141,251,66,123,114,65,181,49,163,156,133,200,166,149,95,138,102,224,45,114,58,138,192,126,81,151,191\")),bytes(abi.encode(\"48,181,132,9,167,7,179,199,81,48,159,244,168,75,249,122,216,58,81,93,169,145,4,211,230,194,128,164,28,217,152,43\")),bytes(abi.encode(\"112,92,214,171,29,123,88,224,11,93,145,193,201,131,190,94,105,65,152,26,121,239,73,102,251,242,201,69,95,140,136,92\")),bytes(abi.encode(\"37,80,151,167,34,201,170,30,54,202,113,69,34,28,151,204,116,171,165,249,215,186,153,81,113,46,243,213,168,23,250,33\"))]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.492ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[213]",
              "sol": "bytes1(\"213\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.492ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.493ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.493ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.493ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.494ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"q6nule\"",
              "sol": "\"q6nule\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.494ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"9dxfn7\"",
              "sol": "\"9dxfn7\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.495ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"v4qlkg\"",
              "sol": "\"v4qlkg\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.495ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"n3j0zi\"",
              "sol": "\"n3j0zi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.496ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"q6nule\"",
              "sol": "\"q6nule\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.496ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"n3j0zi\"",
              "sol": "\"n3j0zi\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"bd9hum\"",
              "sol": "\"bd9hum\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.496ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"9dxfn7\"",
              "sol": "\"9dxfn7\""
            },
            {
              "js": "\"p6d0k9\"",
              "sol": "\"p6d0k9\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.497ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"p6d0k9\"",
              "sol": "\"p6d0k9\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.497ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"9dxfn7\"",
              "sol": "\"9dxfn7\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.499ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.500ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"nombqa\"",
              "sol": "\"nombqa\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.501ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.502ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"n3j0zi\",\"updateEthPrice called\",\"v4qlkg\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"n3j0zi\"),string(\"updateEthPrice called\"),string(\"v4qlkg\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.503ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[147,216,110,146,116,70,60,29,16,200,96,64,72,63,223,152,147,51,58,241,226,8,164,115,91,251,215,152,15,64,99,25],[149,108,137,32,218,164,90,42,113,235,235,65,150,46,188,178,216,7,145,69,247,50,219,230,252,4,88,89,176,162,129,54],[75,237,121,104,50,93,191,76,239,213,52,244,14,7,5,237,209,226,236,178,164,235,2,49,86,91,89,56,74,1,20,189],[154,13,88,183,42,102,225,142,171,216,156,172,120,191,240,53,217,228,136,93,209,150,150,48,103,254,236,210,249,119,97,204],[43,137,130,20,23,25,19,91,50,1,235,13,244,151,145,60,246,43,22,246,231,226,198,44,200,51,62,134,211,80,161,71],[193,254,207,245,95,165,146,5,44,26,60,207,193,255,241,49,20,69,70,164,205,26,70,18,29,20,242,158,161,233,98,63],[174,198,63,199,104,200,153,75,72,228,88,38,40,250,166,199,183,168,101,60,61,252,74,122,35,188,161,153,173,90,209,254],[67,7,77,86,162,44,220,215,110,193,253,4,159,61,54,176,201,206,83,64,225,220,25,238,37,78,250,232,66,67,202,98],[223,40,106,130,240,176,36,168,39,29,42,233,66,86,238,236,155,54,28,183,39,23,53,54,4,108,92,224,113,238,254,15],[209,36,182,189,150,97,6,22,47,67,137,221,55,179,58,23,78,31,111,224,38,93,157,166,151,85,114,218,73,254,113,98]]",
              "sol": "[bytes(abi.encode(\"147,216,110,146,116,70,60,29,16,200,96,64,72,63,223,152,147,51,58,241,226,8,164,115,91,251,215,152,15,64,99,25\")),bytes(abi.encode(\"149,108,137,32,218,164,90,42,113,235,235,65,150,46,188,178,216,7,145,69,247,50,219,230,252,4,88,89,176,162,129,54\")),bytes(abi.encode(\"75,237,121,104,50,93,191,76,239,213,52,244,14,7,5,237,209,226,236,178,164,235,2,49,86,91,89,56,74,1,20,189\")),bytes(abi.encode(\"154,13,88,183,42,102,225,142,171,216,156,172,120,191,240,53,217,228,136,93,209,150,150,48,103,254,236,210,249,119,97,204\")),bytes(abi.encode(\"43,137,130,20,23,25,19,91,50,1,235,13,244,151,145,60,246,43,22,246,231,226,198,44,200,51,62,134,211,80,161,71\")),bytes(abi.encode(\"193,254,207,245,95,165,146,5,44,26,60,207,193,255,241,49,20,69,70,164,205,26,70,18,29,20,242,158,161,233,98,63\")),bytes(abi.encode(\"174,198,63,199,104,200,153,75,72,228,88,38,40,250,166,199,183,168,101,60,61,252,74,122,35,188,161,153,173,90,209,254\")),bytes(abi.encode(\"67,7,77,86,162,44,220,215,110,193,253,4,159,61,54,176,201,206,83,64,225,220,25,238,37,78,250,232,66,67,202,98\")),bytes(abi.encode(\"223,40,106,130,240,176,36,168,39,29,42,233,66,86,238,236,155,54,28,183,39,23,53,54,4,108,92,224,113,238,254,15\")),bytes(abi.encode(\"209,36,182,189,150,97,6,22,47,67,137,221,55,179,58,23,78,31,111,224,38,93,157,166,151,85,114,218,73,254,113,98\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.504ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.504ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[176,36,189,157,83,165,185,123,77,166,168,243,44,179,108,146,86,93,85,14,96,14,236,51,232,241,92,96,133,18,168,51]",
              "sol": "stringToBytes32(\"176,36,189,157,83,165,185,123,77,166,168,243,44,179,108,146,86,93,85,14,96,14,236,51,232,241,92,96,133,18,168,51\")"
            },
            {
              "js": "[3,188,184,131,235,201,47,240,235,44,216,78,181,170,218,31,210,66,6,100,36,177,117,246,252,204,68,66,55,207,16,35]",
              "sol": "stringToBytes32(\"3,188,184,131,235,201,47,240,235,44,216,78,181,170,218,31,210,66,6,100,36,177,117,246,252,204,68,66,55,207,16,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.505ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[132,70,118,193,176,84,8,232,100,246,59,147,160,33,156,81,56,169,74,130,216,238,216,212,227,248,74,204,227,96,237,7]",
              "sol": "stringToBytes32(\"132,70,118,193,176,84,8,232,100,246,59,147,160,33,156,81,56,169,74,130,216,238,216,212,227,248,74,204,227,96,237,7\")"
            },
            {
              "js": "[93,235,86,27,19,186,79,6,31,164,18,136,160,118,125,182,149,88,217,197,46,253,26,143,65,108,52,15,125,82,143,207]",
              "sol": "abi.encode(\"93,235,86,27,19,186,79,6,31,164,18,136,160,118,125,182,149,88,217,197,46,253,26,143,65,108,52,15,125,82,143,207\")"
            },
            {
              "js": "[110,86,20,206,153,0,253,22,27,219,29,74,241,1,243,215,57,50,91,50,150,228,11,217,221,253,224,83,20,234,157,232]",
              "sol": "abi.encode(\"110,86,20,206,153,0,253,22,27,219,29,74,241,1,243,215,57,50,91,50,150,228,11,217,221,253,224,83,20,234,157,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.505ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[71,121,100,12,120,18,249,242,57,33,160,18,48,79,116,35,181,137,188,232,233,194,186,61,8,37,86,120,247,107,162,163]",
              "sol": "abi.encode(\"71,121,100,12,120,18,249,242,57,33,160,18,48,79,116,35,181,137,188,232,233,194,186,61,8,37,86,120,247,107,162,163\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[152,49,89,13,102,144,136,238,146,239,26,166,73,139,172,17,83,184,157,113,130,124,194,13,250,217,145,11,176,197,168,146]",
              "sol": "abi.encode(\"152,49,89,13,102,144,136,238,146,239,26,166,73,139,172,17,83,184,157,113,130,124,194,13,250,217,145,11,176,197,168,146\")"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.508ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[18,43,172,115,214,42,69,99,228,31,210,233,122,197,4,149,242,74,213,151,222,17,181,63,9,215,190,95,233,201,144,93]",
              "sol": "stringToBytes32(\"18,43,172,115,214,42,69,99,228,31,210,233,122,197,4,149,242,74,213,151,222,17,181,63,9,215,190,95,233,201,144,93\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[186,252,226,0,128,105,37,174,8,252,165,183,49,39,141,67,11,111,136,222,162,122,231,120,15,89,242,19,111,55,100,111]",
              "sol": "abi.encode(\"186,252,226,0,128,105,37,174,8,252,165,183,49,39,141,67,11,111,136,222,162,122,231,120,15,89,242,19,111,55,100,111\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[143,120,223,205,150,94,105,199,179,119,251,68,34,175,23,249,96,158,182,93,225,158,16,80,43,127,193,79,169,228,29,156]",
              "sol": "stringToBytes32(\"143,120,223,205,150,94,105,199,179,119,251,68,34,175,23,249,96,158,182,93,225,158,16,80,43,127,193,79,169,228,29,156\")"
            },
            {
              "js": "\"djaf1o\"",
              "sol": "\"djaf1o\""
            },
            {
              "js": "[26,23,47,186,164,127,84,92,200,206,47,248,237,36,150,30,48,65,183,230,79,10,225,59,129,124,163,143,124,244,227,103]",
              "sol": "abi.encode(\"26,23,47,186,164,127,84,92,200,206,47,248,237,36,150,30,48,65,183,230,79,10,225,59,129,124,163,143,124,244,227,103\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.509ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[65,233,85,107,10,9,207,229,91,215,170,159,55,71,42,59,43,147,9,124,193,209,81,183,187,195,220,20,131,62,30,197]",
              "sol": "stringToBytes32(\"65,233,85,107,10,9,207,229,91,215,170,159,55,71,42,59,43,147,9,124,193,209,81,183,187,195,220,20,131,62,30,197\")"
            },
            {
              "js": "[164,226,111,122,123,175,129,64,199,10,49,64,69,196,224,221,65,122,16,254,5,24,113,145,180,228,17,41,172,66,143,205]",
              "sol": "abi.encode(\"164,226,111,122,123,175,129,64,199,10,49,64,69,196,224,221,65,122,16,254,5,24,113,145,180,228,17,41,172,66,143,205\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[65,233,85,107,10,9,207,229,91,215,170,159,55,71,42,59,43,147,9,124,193,209,81,183,187,195,220,20,131,62,30,197]",
                "sol": "stringToBytes32(\"65,233,85,107,10,9,207,229,91,215,170,159,55,71,42,59,43,147,9,124,193,209,81,183,187,195,220,20,131,62,30,197\")"
              },
              {
                "js": "[53,198,198,135,123,208,140,105,38,85,86,106,175,141,118,168,87,75,166,241,166,0,177,199,191,16,4,109,54,166,49,237,99]",
                "sol": "bytes33(\"53,198,198,135,123,208,140,105,38,85,86,106,175,141,118,168,87,75,166,241,166,0,177,199,191,16,4,109,54,166,49,237,99\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.511ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[8,250,69,118,103,60,4,42,185,211,72,81,46,219,229,159,182,42,141,77,149,4,244,55,11,169,172,180,58,207,236,163]",
              "sol": "abi.encode(\"8,250,69,118,103,60,4,42,185,211,72,81,46,219,229,159,182,42,141,77,149,4,244,55,11,169,172,180,58,207,236,163\")"
            },
            {
              "js": "[34,36,43,236,18,206,153,12,163,191,147,30,78,56,30,61,202,159,156,202,26,166,209,167,80,75,8,130,81,82,181,59]",
              "sol": "stringToBytes32(\"34,36,43,236,18,206,153,12,163,191,147,30,78,56,30,61,202,159,156,202,26,166,209,167,80,75,8,130,81,82,181,59\")"
            },
            {
              "js": "[57,180,251,52,100,88,207,70,45,59,13,144,27,186,167,143,166,208,60,116,66,255,41,191,103,83,59,218,248,207,195,47]",
              "sol": "abi.encode(\"57,180,251,52,100,88,207,70,45,59,13,144,27,186,167,143,166,208,60,116,66,255,41,191,103,83,59,218,248,207,195,47\")"
            },
            {
              "js": "\"p6d0k9\"",
              "sol": "\"p6d0k9\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[183,144,124,168,88,76,224,155,208,193,182,100,247,97,126,54,188,53,42,201,234,226,138,82,229,12,154,75,105,241,45,75]",
              "sol": "abi.encode(\"183,144,124,168,88,76,224,155,208,193,182,100,247,97,126,54,188,53,42,201,234,226,138,82,229,12,154,75,105,241,45,75\")"
            },
            {
              "js": "[211,190,148,169,42,196,41,173,129,126,56,158,126,180,82,85,39,62,166,250,66,88,200,54,245,13,82,249,238,226,37,16]",
              "sol": "stringToBytes32(\"211,190,148,169,42,196,41,173,129,126,56,158,126,180,82,85,39,62,166,250,66,88,200,54,245,13,82,249,238,226,37,16\")"
            },
            {
              "js": "[242,190,211,188,175,99,129,41,222,249,10,172,237,77,224,88,46,53,224,121,96,16,119,170,35,8,195,229,171,154,241,19]",
              "sol": "abi.encode(\"242,190,211,188,175,99,129,41,222,249,10,172,237,77,224,88,46,53,224,121,96,16,119,170,35,8,195,229,171,154,241,19\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[128,156,106,254,56,70,19,122,170,103,10,65,17,226,32,13,21,242,10,108,234,44,38,143,199,221,165,149,100,65,165,191]",
              "sol": "abi.encode(\"128,156,106,254,56,70,19,122,170,103,10,65,17,226,32,13,21,242,10,108,234,44,38,143,199,221,165,149,100,65,165,191\")"
            },
            {
              "js": "[162,198,73,105,112,48,236,155,118,167,19,10,118,69,206,215,174,244,94,227,122,23,23,90,35,202,119,56,197,171,143,184]",
              "sol": "stringToBytes32(\"162,198,73,105,112,48,236,155,118,167,19,10,118,69,206,215,174,244,94,227,122,23,23,90,35,202,119,56,197,171,143,184\")"
            },
            {
              "js": "[36,158,238,12,179,178,155,182,210,223,170,184,212,47,134,90,16,49,85,72,171,127,38,69,158,212,84,206,252,166,107,78]",
              "sol": "abi.encode(\"36,158,238,12,179,178,155,182,210,223,170,184,212,47,134,90,16,49,85,72,171,127,38,69,158,212,84,206,252,166,107,78\")"
            },
            {
              "js": "\"szimc\"",
              "sol": "\"szimc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[242,129,137,113,234,65,89,123,246,92,147,6,148,125,134,93,66,213,78,168,46,154,197,46,76,139,121,44,105,118,121,15]",
              "sol": "abi.encode(\"242,129,137,113,234,65,89,123,246,92,147,6,148,125,134,93,66,213,78,168,46,154,197,46,76,139,121,44,105,118,121,15\")"
            },
            {
              "js": "[75,242,179,183,19,2,11,123,190,236,163,249,118,105,28,114,87,96,217,155,171,247,249,177,34,239,135,86,84,184,218,248]",
              "sol": "stringToBytes32(\"75,242,179,183,19,2,11,123,190,236,163,249,118,105,28,114,87,96,217,155,171,247,249,177,34,239,135,86,84,184,218,248\")"
            },
            {
              "js": "[211,47,56,136,176,126,33,92,255,238,14,186,241,1,22,0,235,247,230,27,206,46,97,144,126,200,200,153,79,171,15,146]",
              "sol": "abi.encode(\"211,47,56,136,176,126,33,92,255,238,14,186,241,1,22,0,235,247,230,27,206,46,97,144,126,200,200,153,79,171,15,146\")"
            },
            {
              "js": "\"9dxfn7\"",
              "sol": "\"9dxfn7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[152,154,145,175,54,109,16,108,242,215,141,128,71,251,130,53,27,38,183,240,153,67,211,221,242,92,35,121,193,183,85,244]",
              "sol": "abi.encode(\"152,154,145,175,54,109,16,108,242,215,141,128,71,251,130,53,27,38,183,240,153,67,211,221,242,92,35,121,193,183,85,244\")"
            },
            {
              "js": "[179,224,232,71,163,77,19,77,40,125,102,193,184,142,223,118,34,127,224,85,99,25,134,87,25,136,80,101,199,12,86,214]",
              "sol": "stringToBytes32(\"179,224,232,71,163,77,19,77,40,125,102,193,184,142,223,118,34,127,224,85,99,25,134,87,25,136,80,101,199,12,86,214\")"
            },
            {
              "js": "[89,238,137,119,162,163,19,87,186,4,30,233,222,248,112,198,170,92,113,236,247,96,67,192,122,47,187,234,14,24,181,243]",
              "sol": "abi.encode(\"89,238,137,119,162,163,19,87,186,4,30,233,222,248,112,198,170,92,113,236,247,96,67,192,122,47,187,234,14,24,181,243\")"
            },
            {
              "js": "\"nombqa\"",
              "sol": "\"nombqa\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[62,58,92,29,116,210,64,96,50,131,251,170,234,94,136,20,144,21,31,106,136,199,72,196,152,215,35,84,136,98,137,126]",
              "sol": "abi.encode(\"62,58,92,29,116,210,64,96,50,131,251,170,234,94,136,20,144,21,31,106,136,199,72,196,152,215,35,84,136,98,137,126\")"
            },
            {
              "js": "[194,227,18,148,45,227,110,48,240,201,220,232,250,204,56,241,231,118,44,67,88,228,119,129,30,95,65,225,239,62,12,156]",
              "sol": "stringToBytes32(\"194,227,18,148,45,227,110,48,240,201,220,232,250,204,56,241,231,118,44,67,88,228,119,129,30,95,65,225,239,62,12,156\")"
            },
            {
              "js": "[140,99,52,124,157,132,135,168,164,77,7,95,32,194,118,10,187,140,32,152,125,111,18,194,143,115,203,143,64,140,38,140]",
              "sol": "abi.encode(\"140,99,52,124,157,132,135,168,164,77,7,95,32,194,118,10,187,140,32,152,125,111,18,194,143,115,203,143,64,140,38,140\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[69,32,163,23,54,190,0,201,86,253,178,213,40,203,65,242,103,91,52,6,231,36,138,14,71,122,140,113,160,131,140,13]",
              "sol": "abi.encode(\"69,32,163,23,54,190,0,201,86,253,178,213,40,203,65,242,103,91,52,6,231,36,138,14,71,122,140,113,160,131,140,13\")"
            },
            {
              "js": "[105,245,192,245,30,34,211,86,130,124,42,151,210,231,199,10,98,51,39,139,154,145,130,247,242,159,162,230,43,247,18,78]",
              "sol": "stringToBytes32(\"105,245,192,245,30,34,211,86,130,124,42,151,210,231,199,10,98,51,39,139,154,145,130,247,242,159,162,230,43,247,18,78\")"
            },
            {
              "js": "[58,230,151,118,6,142,182,41,53,197,182,114,49,93,215,68,161,17,175,51,7,206,236,253,209,144,13,156,158,202,228,177]",
              "sol": "abi.encode(\"58,230,151,118,6,142,182,41,53,197,182,114,49,93,215,68,161,17,175,51,7,206,236,253,209,144,13,156,158,202,228,177\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[61,137,133,3,209,45,120,11,44,202,185,49,216,212,48,17,112,244,227,23,92,63,215,7,239,113,69,87,176,12,204,22]",
              "sol": "abi.encode(\"61,137,133,3,209,45,120,11,44,202,185,49,216,212,48,17,112,244,227,23,92,63,215,7,239,113,69,87,176,12,204,22\")"
            },
            {
              "js": "[201,228,95,113,207,169,58,211,219,247,254,236,116,224,161,115,30,21,59,249,78,186,157,129,142,101,144,176,113,26,50,171]",
              "sol": "stringToBytes32(\"201,228,95,113,207,169,58,211,219,247,254,236,116,224,161,115,30,21,59,249,78,186,157,129,142,101,144,176,113,26,50,171\")"
            },
            {
              "js": "[212,116,47,137,213,212,180,145,218,235,212,180,249,114,105,116,185,32,21,145,210,67,49,4,226,159,255,247,39,167,202,163]",
              "sol": "abi.encode(\"212,116,47,137,213,212,180,145,218,235,212,180,249,114,105,116,185,32,21,145,210,67,49,4,226,159,255,247,39,167,202,163\")"
            },
            {
              "js": "\"djaf1o\"",
              "sol": "\"djaf1o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.519ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[42,170,192,203,22,116,57,180,44,249,214,218,165,15,93,132,142,206,57,99,102,141,167,151,191,14,158,92,85,158,57,90]",
              "sol": "abi.encode(\"42,170,192,203,22,116,57,180,44,249,214,218,165,15,93,132,142,206,57,99,102,141,167,151,191,14,158,92,85,158,57,90\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[8,171,64,245,228,245,251,11,255,104,199,199,27,79,179,172,80,241,249,105,165,213,27,84,30,106,136,108,206,28,10,194]",
              "sol": "abi.encode(\"8,171,64,245,228,245,251,11,255,104,199,199,27,79,179,172,80,241,249,105,165,213,27,84,30,106,136,108,206,28,10,194\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.520ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[111,35,20,108,126,102,156,80,241,101,124,236,104,244,76,104,140,142,10,244,165,239,224,199,201,87,110,235,167,59,175,135]",
              "sol": "stringToBytes32(\"111,35,20,108,126,102,156,80,241,101,124,236,104,244,76,104,140,142,10,244,165,239,224,199,201,87,110,235,167,59,175,135\")"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "[73,156,90,95,142,200,154,103,185,80,165,149,57,45,63,10,135,240,106,16,250,167,37,170,25,214,121,169,21,193,173,214]",
              "sol": "stringToBytes32(\"73,156,90,95,142,200,154,103,185,80,165,149,57,45,63,10,135,240,106,16,250,167,37,170,25,214,121,169,21,193,173,214\")"
            },
            {
              "js": "[158,243,162,64,136,75,158,225,9,164,163,57,195,61,126,242,122,87,141,50,91,94,180,120,49,217,167,58,244,165,180,145]",
              "sol": "stringToBytes32(\"158,243,162,64,136,75,158,225,9,164,163,57,195,61,126,242,122,87,141,50,91,94,180,120,49,217,167,58,244,165,180,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.521ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[66,49,85,98,47,86,89,209,88,27,81,151,79,157,167,86,113,204,236,232,227,152,213,241,18,231,201,59,161,149,8,239]",
              "sol": "stringToBytes32(\"66,49,85,98,47,86,89,209,88,27,81,151,79,157,167,86,113,204,236,232,227,152,213,241,18,231,201,59,161,149,8,239\")"
            },
            {
              "js": "[202,133,62,237,166,100,97,195,183,204,48,237,176,175,60,212,174,124,55,26,111,19,105,250,101,169,54,223,143,255,133,148,51,177,114,134,81,68,232,64,15,108,108,65,50,182,152,17,233,172,54,157,174,179,69,116,153,240,128,67,241,114,68,216,101,228,17,236,5,230,33,193,128,38,122,152,32,189,206,237,195,49,40,200,46,193,128,251,75,103,88,75,37,178,243,211]",
              "sol": "abi.encode(\"202,133,62,237,166,100,97,195,183,204,48,237,176,175,60,212,174,124,55,26,111,19,105,250,101,169,54,223,143,255,133,148,51,177,114,134,81,68,232,64,15,108,108,65,50,182,152,17,233,172,54,157,174,179,69,116,153,240,128,67,241,114,68,216,101,228,17,236,5,230,33,193,128,38,122,152,32,189,206,237,195,49,40,200,46,193,128,251,75,103,88,75,37,178,243,211\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[117,174,68,69,6,47,5,133,203,223,116,77,163,16,9,101,51,247,245,9,162,69,52,58,80,75,38,227,106,226,206,135]",
              "sol": "stringToBytes32(\"117,174,68,69,6,47,5,133,203,223,116,77,163,16,9,101,51,247,245,9,162,69,52,58,80,75,38,227,106,226,206,135\")"
            },
            {
              "js": "[68,134,166,183,175,77,126,112,70,218,214,232,103,97,74,171,69,208,254,218,75,136,234,192,193,62,71,176,141,233,94,170,47,149,254,123,251,90,151,217,171,248,202,46,207,27,20,20,186,220,122,67,228,38,170,228,182,126,48,125,118,59,41,65,80]",
              "sol": "abi.encode(\"68,134,166,183,175,77,126,112,70,218,214,232,103,97,74,171,69,208,254,218,75,136,234,192,193,62,71,176,141,233,94,170,47,149,254,123,251,90,151,217,171,248,202,46,207,27,20,20,186,220,122,67,228,38,170,228,182,126,48,125,118,59,41,65,80\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.522ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.524ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.525ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.525ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.525ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.525ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.526ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.526ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.526ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.527ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.527ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.528ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.529ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.530ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.530ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.535ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.539ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[110,67,214,45,203,21,160,229,144,42,78,121,117,164,252,26,235,142,170,31,121,174,153,202,55,124,234,83,125,123,141,30]",
              "sol": "stringToBytes32(\"110,67,214,45,203,21,160,229,144,42,78,121,117,164,252,26,235,142,170,31,121,174,153,202,55,124,234,83,125,123,141,30\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[126,149,231,94,13,108,229,146,52,52,6,221,250,167,166,71,156,123,228,198,96,100,197,163,148,94,169,170,85,233,122,251]",
              "sol": "abi.encode(\"126,149,231,94,13,108,229,146,52,52,6,221,250,167,166,71,156,123,228,198,96,100,197,163,148,94,169,170,85,233,122,251\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.540ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.541ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.543ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxyable.address",
              "sol": "contractProxyable"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxyable.address",
                "sol": "contractProxyable"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.544ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[140,248,196,213,17,27,241,228,247,37,59,162,200,161,139,183,160,98,17,40,20,17,138,80,28,132,225,140,122,64,233,218]",
              "sol": "abi.encode(\"140,248,196,213,17,27,241,228,247,37,59,162,200,161,139,183,160,98,17,40,20,17,138,80,28,132,225,140,122,64,233,218\")"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "[107,178,40,113,41,36,153,122,13,34,78,128,128,112,66,162,23,118,93,247,2,2,18,139,25,42,176,232,241,2,46,179]",
              "sol": "stringToBytes32(\"107,178,40,113,41,36,153,122,13,34,78,128,128,112,66,162,23,118,93,247,2,2,18,139,25,42,176,232,241,2,46,179\")"
            },
            {
              "js": "[170,106,102,208,160,204,63,35,166,22,125,121,152,176,213,57,44,177,198,243,193,108,76,110,171,255,232,100,164,161,203,103]",
              "sol": "stringToBytes32(\"170,106,102,208,160,204,63,35,166,22,125,121,152,176,213,57,44,177,198,243,193,108,76,110,171,255,232,100,164,161,203,103\")"
            },
            {
              "js": "[188,33,189,49,219,108,240,4,43,17,73,140,225,199,33,178,57,206,171,76,237,219,82,250,49,47,41,56,128,189,150,229]",
              "sol": "stringToBytes32(\"188,33,189,49,219,108,240,4,43,17,73,140,225,199,33,178,57,206,171,76,237,219,82,250,49,47,41,56,128,189,150,229\")"
            },
            {
              "js": "[119,33,131,234,225,110,237,127,148,107,178,141,187,167,108,103,33,144,226,248,193,67,69,48,43,65,144,244,12,112,245,30]",
              "sol": "stringToBytes32(\"119,33,131,234,225,110,237,127,148,107,178,141,187,167,108,103,33,144,226,248,193,67,69,48,43,65,144,244,12,112,245,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.545ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.545ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.546ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.547ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.547ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.548ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.549ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "87",
                "sol": "87"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "87",
                "sol": "87"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.554ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.556ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:42:13.562ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.563ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.564ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:42:13.565ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}