,{
  "2020-11-13T20:51:00.257ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:53:17.569ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:53:52.955ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:54:10.110ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:54:27.676ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:54:45.122ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:55:02.509ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:55:19.788ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:55:37.254ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:55:54.508ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:11.923ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"3nbv5d\"",
              "sol": "\"3nbv5d\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.858ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.861ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [62,85,242,205,167,72,10,132,92,249,103,239,39,28,86,196,37,90,196,72,205,82,221,95,104,123,96,131,142,39,72,46],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"62,85,242,205,167,72,10,132,92,249,103,239,39,28,86,196,37,90,196,72,205,82,221,95,104,123,96,131,142,39,72,46\"),97)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.862ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [211,105,102,10,84,211,76,55,104,87,155,99,172,122,227,210,238,240,44,106,186,89,199,153,197,145,148,214,188,240,151,209],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"211,105,102,10,84,211,76,55,104,87,155,99,172,122,227,210,238,240,44,106,186,89,199,153,197,145,148,214,188,240,151,209\"),3)"
            },
            {
              "js": "[92,23,164,35,168,168,72,144,255,189,22,54,148,117,178,196,50,135,17,217,242,194,19,116,191,248,233,35,204,89,207,173]",
              "sol": "abi.encode(\"92,23,164,35,168,168,72,144,255,189,22,54,148,117,178,196,50,135,17,217,242,194,19,116,191,248,233,35,204,89,207,173\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.862ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [157,16,7,250,107,223,145,110,173,103,180,141,101,133,206,123,129,117,247,41,249,113,188,172,59,212,116,91,200,50,26,5],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"157,16,7,250,107,223,145,110,173,103,180,141,101,133,206,123,129,117,247,41,249,113,188,172,59,212,116,91,200,50,26,5\"),101)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.862ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [188,60,144,169,78,28,133,210,64,54,47,223,91,214,200,139,155,202,152,175,235,218,90,217,217,187,192,193,111,35,80,28],\"capacity\": 254}",
              "sol": "Buffer.buffer(abi.encode(\"188,60,144,169,78,28,133,210,64,54,47,223,91,214,200,139,155,202,152,175,235,218,90,217,217,187,192,193,111,35,80,28\"),254)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.864ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [163,59,12,50,125,232,230,149,113,216,36,213,86,204,118,195,74,52,116,184,213,107,221,132,125,79,132,43,204,106,142,212],\"capacity\": 46}",
              "sol": "Buffer.buffer(abi.encode(\"163,59,12,50,125,232,230,149,113,216,36,213,86,204,118,195,74,52,116,184,213,107,221,132,125,79,132,43,204,106,142,212\"),46)"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.865ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [17,19,189,72,88,214,21,205,29,143,16,72,53,252,51,177,255,21,131,124,26,110,21,118,117,86,131,115,199,46,107,154],\"capacity\": 21}",
              "sol": "Buffer.buffer(abi.encode(\"17,19,189,72,88,214,21,205,29,143,16,72,53,252,51,177,255,21,131,124,26,110,21,118,117,86,131,115,199,46,107,154\"),21)"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [149,224,41,2,127,213,119,200,118,147,144,168,115,201,124,252,208,113,163,145,5,57,40,68,126,50,46,76,219,153,79,155],\"capacity\": 64}",
              "sol": "Buffer.buffer(abi.encode(\"149,224,41,2,127,213,119,200,118,147,144,168,115,201,124,252,208,113,163,145,5,57,40,68,126,50,46,76,219,153,79,155\"),64)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.866ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [122,59,12,98,67,164,115,14,193,79,98,51,41,117,253,173,81,49,48,126,100,99,209,80,25,100,156,155,134,156,151,177],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"122,59,12,98,67,164,115,14,193,79,98,51,41,117,253,173,81,49,48,126,100,99,209,80,25,100,156,155,134,156,151,177\"),27)"
            },
            {
              "js": "[94,122,144,227,182,91,169,152,76,7,208,136,244,161,34,13,164,181,162,20,122,88,32,215,127,200,52,253,114,41,199,55]",
              "sol": "abi.encode(\"94,122,144,227,182,91,169,152,76,7,208,136,244,161,34,13,164,181,162,20,122,88,32,215,127,200,52,253,114,41,199,55\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.866ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [100,88,37,1,189,135,110,184,17,199,96,200,221,54,122,55,82,3,120,42,128,119,14,5,69,172,236,23,137,207,99,44],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"100,88,37,1,189,135,110,184,17,199,96,200,221,54,122,55,82,3,120,42,128,119,14,5,69,172,236,23,137,207,99,44\"),61)"
            },
            {
              "js": "\"3nbv5d\"",
              "sol": "\"3nbv5d\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.867ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [189,240,206,53,234,10,244,45,122,153,160,226,39,123,123,252,247,59,253,238,110,146,253,201,3,190,23,148,207,73,188,165],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"189,240,206,53,234,10,244,45,122,153,160,226,39,123,123,252,247,59,253,238,110,146,253,201,3,190,23,148,207,73,188,165\"),128)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.867ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [93,169,156,180,52,50,87,47,79,127,39,212,68,131,184,248,166,139,217,186,250,210,216,23,85,252,83,13,110,236,247,116],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"93,169,156,180,52,50,87,47,79,127,39,212,68,131,184,248,166,139,217,186,250,210,216,23,85,252,83,13,110,236,247,116\"),1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.867ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [36,4,5,216,37,94,228,10,22,170,1,67,195,139,54,50,255,1,15,40,231,19,137,73,78,39,84,125,71,123,48,99],\"capacity\": 45}",
              "sol": "Buffer.buffer(abi.encode(\"36,4,5,216,37,94,228,10,22,170,1,67,195,139,54,50,255,1,15,40,231,19,137,73,78,39,84,125,71,123,48,99\"),45)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.870ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.870ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.870ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.872ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.873ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.875ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:29.876ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.877ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.878ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.878ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.879ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[37,131,115,144,3,67,249,78,79,138,110,19,152,6,211,207,37,94,198,159,230,13,12,12,31,11,235,42,29,212,185,187]",
              "sol": "stringToBytes32(\"37,131,115,144,3,67,249,78,79,138,110,19,152,6,211,207,37,94,198,159,230,13,12,12,31,11,235,42,29,212,185,187\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.880ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[18,65,230,114,94,127,220,246,106,92,227,22,100,193,151,196,104,108,165,147,67,43,102,16,166,158,111,67,25,99,151,131]",
              "sol": "stringToBytes32(\"18,65,230,114,94,127,220,246,106,92,227,22,100,193,151,196,104,108,165,147,67,43,102,16,166,158,111,67,25,99,151,131\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[50,143,16,50,66,20,52,111,133,208,65,131,224,31,200,56,216,178,145,32,134,151,16,211,55,202,218,196,207,38,31,89]",
              "sol": "abi.encode(\"50,143,16,50,66,20,52,111,133,208,65,131,224,31,200,56,216,178,145,32,134,151,16,211,55,202,218,196,207,38,31,89\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.929ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.930ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.930ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.931ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.931ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.932ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.932ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.933ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.933ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.934ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.934ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.934ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.935ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.935ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.936ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"3nbv5d\"",
              "sol": "\"3nbv5d\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.937ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"P\",\"ETH\",\"PayableExample\",\"\",\"ETH\",\"P\",\"updateEthPrice called\"]",
              "sol": "[string(\"P\"),string(\"ETH\"),string(\"PayableExample\"),string(\"\"),string(\"ETH\"),string(\"P\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.938ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"a0evd\"",
              "sol": "\"a0evd\""
            },
            {
              "js": "[\"listingID arg\",\"a0evd\",\"0\",\"costUSD\",\"Oraclize query was sent, standing by for the answer...\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"call updateEthPrice\",\"3nbv5d\",\"\"]",
              "sol": "[string(\"listingID arg\"),string(\"a0evd\"),string(\"0\"),string(\"costUSD\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"call updateEthPrice\"),string(\"3nbv5d\"),string(\"\")]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.938ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"RevertWithReason\",\"Oraclize query was sent, standing by for the answer...\",\"costUSD\",\"\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"costUSD\"),string(\"\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.939ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.939ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"listingID arg\"]",
              "sol": "[string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.940ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"Example\"]",
              "sol": "[string(\"Example\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.940ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"UsesExample\"]",
              "sol": "[string(\"UsesExample\")]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.945ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"3nbv5d\"",
              "sol": "\"3nbv5d\""
            },
            {
              "js": "[\"P\",\"updateEthPrice called\"]",
              "sol": "[string(\"P\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.946ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"ETH\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"ETH\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.947ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"IsLibrary\",\"listingID arg\"]",
              "sol": "[string(\"IsLibrary\"),string(\"listingID arg\")]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.948ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"UsesExample\",\"listingID arg\"]",
              "sol": "[string(\"UsesExample\"),string(\"listingID arg\")]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.948ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"IsLibrary\",\"PayableExample\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"IsLibrary\"),string(\"PayableExample\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.949ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"PayableExample\",\"3nbv5d\",\"UsesExample\"]",
              "sol": "[string(\"PayableExample\"),string(\"3nbv5d\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.949ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"IsLibrary\",\"costUSD\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"IsLibrary\"),string(\"costUSD\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.950ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"costUSD\",\"updateEthPrice called\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"costUSD\"),string(\"updateEthPrice called\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.950ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"PayableExample\",\"Oraclize query was sent, standing by for the answer...\",\"costUSD\",\"PayableExample\"]",
              "sol": "[string(\"PayableExample\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"costUSD\"),string(\"PayableExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.951ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"0\",\"RevertWithReason\",\"call updateEthPrice\",\"L\"]",
              "sol": "[string(\"0\"),string(\"RevertWithReason\"),string(\"call updateEthPrice\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.952ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"0\",\"listingID arg\",\"IsLibrary\",\"Example\"]",
              "sol": "[string(\"0\"),string(\"listingID arg\"),string(\"IsLibrary\"),string(\"Example\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.952ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ETH\",\"updateEthPrice called\",\"updateEthPrice called\",\"0\"]",
              "sol": "[string(\"ETH\"),string(\"updateEthPrice called\"),string(\"updateEthPrice called\"),string(\"0\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.953ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"a0evd\",\"PayableExample\",\"call updateEthPrice\",\"0\",\"IsLibrary\"]",
              "sol": "[string(\"a0evd\"),string(\"PayableExample\"),string(\"call updateEthPrice\"),string(\"0\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.953ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"trade.totalPrice\",\"Example\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"trade.totalPrice\",\"IsLibrary\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"Example\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"trade.totalPrice\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.954ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"ETH\",\"Example\",\"trade.totalPrice\",\"listingID arg\",\"UsesExample\"]",
              "sol": "[string(\"ETH\"),string(\"Example\"),string(\"trade.totalPrice\"),string(\"listingID arg\"),string(\"UsesExample\")]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.955ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"trade.totalPrice\",\"RevertWithReason\",\"call updateEthPrice\",\"listingID arg\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"trade.totalPrice\"),string(\"RevertWithReason\"),string(\"call updateEthPrice\"),string(\"listingID arg\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.956ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[30,223,57,56,99,4,99,120,136,174,181,91,143,168,221,136,231,103,115,104,211,11,43,54,172,25,217,43,126,178,210,28],[232,93,232,236,147,241,125,55,215,173,203,89,174,210,121,103,133,107,72,86,177,54,116,176,99,230,2,108,156,1,230,88]]",
              "sol": "[bytes(abi.encode(\"30,223,57,56,99,4,99,120,136,174,181,91,143,168,221,136,231,103,115,104,211,11,43,54,172,25,217,43,126,178,210,28\")),bytes(abi.encode(\"232,93,232,236,147,241,125,55,215,173,203,89,174,210,121,103,133,107,72,86,177,54,116,176,99,230,2,108,156,1,230,88\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.957ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[238,155,7,225,63,77,164,235,82,160,253,118,90,55,44,213,80,156,140,89,40,135,68,21,109,58,210,173,143,189,55,152],[10,227,232,165,103,120,52,84,96,122,140,41,230,67,47,248,24,176,63,139,178,48,162,113,133,75,246,202,94,174,28,144],[126,42,88,107,154,141,56,102,97,23,40,99,46,116,141,101,250,72,180,148,94,56,32,231,232,152,126,124,152,63,192,138],[122,16,107,163,176,117,140,71,81,222,127,98,105,36,167,116,134,80,192,198,226,228,236,243,243,7,16,171,12,131,7,68],[166,230,25,151,83,83,69,41,117,53,64,19,114,53,7,222,24,155,212,141,181,65,61,52,86,94,205,93,30,108,151,23],[224,63,8,107,188,240,226,227,234,116,222,24,215,143,171,172,18,223,43,44,249,113,155,48,207,79,171,74,235,145,86,244],[75,21,99,234,173,211,63,209,75,164,119,197,228,41,162,82,102,46,243,174,28,77,110,132,74,90,74,194,222,225,155,185],[228,26,169,241,156,230,30,122,114,46,251,241,63,50,131,255,95,194,121,209,214,197,110,101,81,168,200,60,223,216,160,15],[249,101,229,45,147,2,133,225,205,214,15,80,176,92,14,64,119,107,207,139,10,231,134,103,76,159,227,4,64,99,50,138],[97,16,154,91,115,152,226,60,71,199,107,238,101,165,37,135,120,243,99,192,252,31,11,48,30,220,116,143,65,228,126,49]]",
              "sol": "[bytes(abi.encode(\"238,155,7,225,63,77,164,235,82,160,253,118,90,55,44,213,80,156,140,89,40,135,68,21,109,58,210,173,143,189,55,152\")),bytes(abi.encode(\"10,227,232,165,103,120,52,84,96,122,140,41,230,67,47,248,24,176,63,139,178,48,162,113,133,75,246,202,94,174,28,144\")),bytes(abi.encode(\"126,42,88,107,154,141,56,102,97,23,40,99,46,116,141,101,250,72,180,148,94,56,32,231,232,152,126,124,152,63,192,138\")),bytes(abi.encode(\"122,16,107,163,176,117,140,71,81,222,127,98,105,36,167,116,134,80,192,198,226,228,236,243,243,7,16,171,12,131,7,68\")),bytes(abi.encode(\"166,230,25,151,83,83,69,41,117,53,64,19,114,53,7,222,24,155,212,141,181,65,61,52,86,94,205,93,30,108,151,23\")),bytes(abi.encode(\"224,63,8,107,188,240,226,227,234,116,222,24,215,143,171,172,18,223,43,44,249,113,155,48,207,79,171,74,235,145,86,244\")),bytes(abi.encode(\"75,21,99,234,173,211,63,209,75,164,119,197,228,41,162,82,102,46,243,174,28,77,110,132,74,90,74,194,222,225,155,185\")),bytes(abi.encode(\"228,26,169,241,156,230,30,122,114,46,251,241,63,50,131,255,95,194,121,209,214,197,110,101,81,168,200,60,223,216,160,15\")),bytes(abi.encode(\"249,101,229,45,147,2,133,225,205,214,15,80,176,92,14,64,119,107,207,139,10,231,134,103,76,159,227,4,64,99,50,138\")),bytes(abi.encode(\"97,16,154,91,115,152,226,60,71,199,107,238,101,165,37,135,120,243,99,192,252,31,11,48,30,220,116,143,65,228,126,49\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.958ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[50,241,4,109,135,73,227,109,1,251,152,212,155,58,8,104,149,234,55,2,183,127,247,66,98,203,212,31,16,92,148,121],[173,107,79,28,204,140,224,38,58,251,9,161,239,61,169,137,82,129,249,69,229,41,14,224,111,93,57,137,202,160,173,206],[3,123,239,156,147,31,12,122,251,233,75,249,185,151,53,90,230,95,100,111,135,111,86,233,239,83,87,27,137,152,61,106],[67,241,9,61,154,245,32,240,66,9,16,134,179,169,35,216,48,31,23,64,209,18,98,185,125,132,45,134,11,42,227,180],[199,129,73,165,81,253,156,167,149,105,209,136,46,241,112,88,17,57,207,10,83,73,48,70,54,60,181,92,58,75,241,39]]",
              "sol": "[bytes(abi.encode(\"50,241,4,109,135,73,227,109,1,251,152,212,155,58,8,104,149,234,55,2,183,127,247,66,98,203,212,31,16,92,148,121\")),bytes(abi.encode(\"173,107,79,28,204,140,224,38,58,251,9,161,239,61,169,137,82,129,249,69,229,41,14,224,111,93,57,137,202,160,173,206\")),bytes(abi.encode(\"3,123,239,156,147,31,12,122,251,233,75,249,185,151,53,90,230,95,100,111,135,111,86,233,239,83,87,27,137,152,61,106\")),bytes(abi.encode(\"67,241,9,61,154,245,32,240,66,9,16,134,179,169,35,216,48,31,23,64,209,18,98,185,125,132,45,134,11,42,227,180\")),bytes(abi.encode(\"199,129,73,165,81,253,156,167,149,105,209,136,46,241,112,88,17,57,207,10,83,73,48,70,54,60,181,92,58,75,241,39\"))]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.959ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"3nbv5d\"",
              "sol": "\"3nbv5d\""
            },
            {
              "js": "[[85,30,114,101,252,71,255,85,177,177,121,212,108,148,70,224,218,80,35,238,134,201,93,243,103,66,177,133,116,248,218,57],[190,249,172,104,236,97,92,107,1,212,107,58,141,203,133,11,67,107,143,40,215,34,144,19,17,6,56,180,214,32,131,73],[228,91,168,165,53,50,194,67,209,124,122,123,254,97,72,226,69,20,112,183,182,27,36,145,104,179,2,74,133,147,57,26],[161,177,176,0,236,147,184,74,90,47,57,135,37,140,32,43,161,74,100,159,108,27,201,119,137,224,248,146,97,55,40,56]]",
              "sol": "[bytes(abi.encode(\"85,30,114,101,252,71,255,85,177,177,121,212,108,148,70,224,218,80,35,238,134,201,93,243,103,66,177,133,116,248,218,57\")),bytes(abi.encode(\"190,249,172,104,236,97,92,107,1,212,107,58,141,203,133,11,67,107,143,40,215,34,144,19,17,6,56,180,214,32,131,73\")),bytes(abi.encode(\"228,91,168,165,53,50,194,67,209,124,122,123,254,97,72,226,69,20,112,183,182,27,36,145,104,179,2,74,133,147,57,26\")),bytes(abi.encode(\"161,177,176,0,236,147,184,74,90,47,57,135,37,140,32,43,161,74,100,159,108,27,201,119,137,224,248,146,97,55,40,56\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.959ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[224,12,244,181,224,151,177,12,124,232,64,51,48,20,243,169,78,156,106,40,6,12,201,105,179,129,239,192,180,245,29,68]]",
              "sol": "[bytes(abi.encode(\"224,12,244,181,224,151,177,12,124,232,64,51,48,20,243,169,78,156,106,40,6,12,201,105,179,129,239,192,180,245,29,68\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.960ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[67,70,235,86,2,177,139,120,235,208,175,151,147,205,146,220,12,246,167,174,26,13,74,144,238,147,69,1,250,42,235,57]]",
              "sol": "[bytes(abi.encode(\"67,70,235,86,2,177,139,120,235,208,175,151,147,205,146,220,12,246,167,174,26,13,74,144,238,147,69,1,250,42,235,57\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.960ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[226,230,36,71,41,210,146,26,161,115,107,8,3,153,20,236,59,250,185,139,52,13,46,223,222,96,56,61,190,55,243,185]]",
              "sol": "[bytes(abi.encode(\"226,230,36,71,41,210,146,26,161,115,107,8,3,153,20,236,59,250,185,139,52,13,46,223,222,96,56,61,190,55,243,185\"))]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.961ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[164,12,18,58,133,3,156,49,46,168,76,19,161,189,226,86,186,3,249,164,113,47,214,92,194,151,0,246,93,222,79,207]]",
              "sol": "[bytes(abi.encode(\"164,12,18,58,133,3,156,49,46,168,76,19,161,189,226,86,186,3,249,164,113,47,214,92,194,151,0,246,93,222,79,207\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.961ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"jqv0dy\"",
              "sol": "\"jqv0dy\""
            },
            {
              "js": "[[41,176,0,54,131,1,147,198,161,37,235,237,144,19,209,249,164,46,128,196,82,207,83,236,98,38,32,45,61,249,80,254],[51,245,7,138,254,119,23,113,133,146,66,119,190,133,239,156,57,59,160,163,106,72,6,101,245,195,17,38,201,135,108,138]]",
              "sol": "[bytes(abi.encode(\"41,176,0,54,131,1,147,198,161,37,235,237,144,19,209,249,164,46,128,196,82,207,83,236,98,38,32,45,61,249,80,254\")),bytes(abi.encode(\"51,245,7,138,254,119,23,113,133,146,66,119,190,133,239,156,57,59,160,163,106,72,6,101,245,195,17,38,201,135,108,138\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.962ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[142,102,167,157,150,80,8,212,186,220,189,217,60,82,178,231,171,23,122,202,13,224,77,140,66,153,24,81,196,194,191,164],[32,165,187,247,215,55,167,226,111,229,111,123,144,176,201,233,122,135,211,183,198,239,15,46,106,199,164,146,249,101,66,242]]",
              "sol": "[bytes(abi.encode(\"142,102,167,157,150,80,8,212,186,220,189,217,60,82,178,231,171,23,122,202,13,224,77,140,66,153,24,81,196,194,191,164\")),bytes(abi.encode(\"32,165,187,247,215,55,167,226,111,229,111,123,144,176,201,233,122,135,211,183,198,239,15,46,106,199,164,146,249,101,66,242\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.963ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[230,186,205,5,127,145,35,99,141,90,73,67,251,231,109,197,158,158,238,73,188,76,192,34,71,188,100,178,197,92,22,243],[116,217,111,124,9,169,239,138,254,130,54,58,0,140,241,54,158,106,158,240,159,227,193,32,212,156,63,172,145,130,196,224]]",
              "sol": "[bytes(abi.encode(\"230,186,205,5,127,145,35,99,141,90,73,67,251,231,109,197,158,158,238,73,188,76,192,34,71,188,100,178,197,92,22,243\")),bytes(abi.encode(\"116,217,111,124,9,169,239,138,254,130,54,58,0,140,241,54,158,106,158,240,159,227,193,32,212,156,63,172,145,130,196,224\"))]"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.963ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[87,241,197,81,56,251,137,138,94,62,138,128,207,77,179,129,157,51,1,161,44,3,238,127,48,56,226,191,186,100,225,5],[104,18,176,238,170,219,205,179,111,243,13,142,12,180,59,210,208,41,241,157,37,2,8,199,188,235,243,199,40,183,99,0]]",
              "sol": "[bytes(abi.encode(\"87,241,197,81,56,251,137,138,94,62,138,128,207,77,179,129,157,51,1,161,44,3,238,127,48,56,226,191,186,100,225,5\")),bytes(abi.encode(\"104,18,176,238,170,219,205,179,111,243,13,142,12,180,59,210,208,41,241,157,37,2,8,199,188,235,243,199,40,183,99,0\"))]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.964ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"3nbv5d\"",
              "sol": "\"3nbv5d\""
            },
            {
              "js": "[[55,91,158,58,200,222,81,98,3,145,243,124,107,175,175,125,203,102,246,71,120,104,181,4,216,129,38,67,57,159,177,157],[57,231,188,128,250,22,0,135,157,133,180,189,38,23,37,169,112,14,162,222,33,95,67,126,248,124,178,82,183,16,132,251],[175,139,145,169,102,79,50,160,1,185,5,86,237,107,105,40,198,108,129,189,57,251,192,241,71,104,88,61,28,143,79,35]]",
              "sol": "[bytes(abi.encode(\"55,91,158,58,200,222,81,98,3,145,243,124,107,175,175,125,203,102,246,71,120,104,181,4,216,129,38,67,57,159,177,157\")),bytes(abi.encode(\"57,231,188,128,250,22,0,135,157,133,180,189,38,23,37,169,112,14,162,222,33,95,67,126,248,124,178,82,183,16,132,251\")),bytes(abi.encode(\"175,139,145,169,102,79,50,160,1,185,5,86,237,107,105,40,198,108,129,189,57,251,192,241,71,104,88,61,28,143,79,35\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.964ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[76,86,210,194,212,116,215,38,146,99,154,222,235,81,228,8,26,249,203,121,20,200,119,53,21,164,244,230,214,6,90,152],[209,197,43,5,135,165,144,120,3,227,98,211,28,76,19,8,153,136,218,163,87,234,126,96,73,23,92,106,147,218,51,220],[238,65,163,191,28,248,188,229,255,39,73,57,196,11,65,81,42,235,198,128,242,108,242,183,180,85,9,24,205,251,131,140]]",
              "sol": "[bytes(abi.encode(\"76,86,210,194,212,116,215,38,146,99,154,222,235,81,228,8,26,249,203,121,20,200,119,53,21,164,244,230,214,6,90,152\")),bytes(abi.encode(\"209,197,43,5,135,165,144,120,3,227,98,211,28,76,19,8,153,136,218,163,87,234,126,96,73,23,92,106,147,218,51,220\")),bytes(abi.encode(\"238,65,163,191,28,248,188,229,255,39,73,57,196,11,65,81,42,235,198,128,242,108,242,183,180,85,9,24,205,251,131,140\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.965ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[237,97,59,184,189,2,155,43,10,82,38,53,5,72,229,149,205,29,45,229,42,23,181,86,232,164,53,132,230,157,154,249],[23,216,168,83,39,97,22,6,203,222,236,75,236,242,60,168,233,15,218,162,134,184,43,254,141,77,89,154,194,203,79,95],[25,194,215,178,176,214,33,165,193,188,134,225,15,244,200,29,122,167,211,187,63,48,110,202,5,118,159,88,32,8,216,125]]",
              "sol": "[bytes(abi.encode(\"237,97,59,184,189,2,155,43,10,82,38,53,5,72,229,149,205,29,45,229,42,23,181,86,232,164,53,132,230,157,154,249\")),bytes(abi.encode(\"23,216,168,83,39,97,22,6,203,222,236,75,236,242,60,168,233,15,218,162,134,184,43,254,141,77,89,154,194,203,79,95\")),bytes(abi.encode(\"25,194,215,178,176,214,33,165,193,188,134,225,15,244,200,29,122,167,211,187,63,48,110,202,5,118,159,88,32,8,216,125\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.965ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[23,61,117,192,134,135,255,97,39,25,91,51,124,221,253,197,114,209,141,11,75,142,111,26,183,88,132,169,154,237,110,75],[30,217,74,54,128,141,59,172,249,110,115,227,23,52,116,35,6,39,240,241,42,251,192,210,45,20,61,151,209,91,158,194],[26,28,38,235,101,226,197,158,229,102,218,216,220,71,65,115,29,69,87,254,111,214,113,46,106,160,136,57,217,160,72,80]]",
              "sol": "[bytes(abi.encode(\"23,61,117,192,134,135,255,97,39,25,91,51,124,221,253,197,114,209,141,11,75,142,111,26,183,88,132,169,154,237,110,75\")),bytes(abi.encode(\"30,217,74,54,128,141,59,172,249,110,115,227,23,52,116,35,6,39,240,241,42,251,192,210,45,20,61,151,209,91,158,194\")),bytes(abi.encode(\"26,28,38,235,101,226,197,158,229,102,218,216,220,71,65,115,29,69,87,254,111,214,113,46,106,160,136,57,217,160,72,80\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.966ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"a0evd\"",
              "sol": "\"a0evd\""
            },
            {
              "js": "[[110,136,0,197,46,164,222,204,202,209,80,42,186,228,1,19,177,46,36,92,222,147,98,147,79,76,93,29,89,147,12,126],[206,218,194,40,121,108,245,137,184,236,251,67,56,49,102,71,233,172,145,138,168,133,134,232,155,151,68,38,152,109,95,246],[122,166,228,76,221,123,202,85,136,215,78,91,124,192,93,112,76,92,255,76,227,117,140,226,146,115,253,84,70,138,197,131],[62,209,112,46,64,72,113,124,218,95,0,130,20,13,202,250,112,247,37,238,99,113,160,126,160,39,25,203,155,9,106,5]]",
              "sol": "[bytes(abi.encode(\"110,136,0,197,46,164,222,204,202,209,80,42,186,228,1,19,177,46,36,92,222,147,98,147,79,76,93,29,89,147,12,126\")),bytes(abi.encode(\"206,218,194,40,121,108,245,137,184,236,251,67,56,49,102,71,233,172,145,138,168,133,134,232,155,151,68,38,152,109,95,246\")),bytes(abi.encode(\"122,166,228,76,221,123,202,85,136,215,78,91,124,192,93,112,76,92,255,76,227,117,140,226,146,115,253,84,70,138,197,131\")),bytes(abi.encode(\"62,209,112,46,64,72,113,124,218,95,0,130,20,13,202,250,112,247,37,238,99,113,160,126,160,39,25,203,155,9,106,5\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.967ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[191,174,117,24,209,122,171,114,75,93,92,145,65,56,177,138,7,100,35,214,207,192,24,208,171,163,101,200,29,112,189,253],[172,79,88,118,240,154,161,180,242,249,105,180,122,29,196,248,213,33,107,195,247,112,165,233,129,124,214,229,163,195,43,213],[247,208,164,156,105,54,254,67,145,124,112,36,137,36,151,147,238,70,240,159,253,174,171,97,45,191,148,182,109,194,207,34],[6,157,166,155,19,112,37,17,180,71,231,137,111,252,190,139,168,247,242,212,245,120,146,49,124,249,255,54,169,249,8,201]]",
              "sol": "[bytes(abi.encode(\"191,174,117,24,209,122,171,114,75,93,92,145,65,56,177,138,7,100,35,214,207,192,24,208,171,163,101,200,29,112,189,253\")),bytes(abi.encode(\"172,79,88,118,240,154,161,180,242,249,105,180,122,29,196,248,213,33,107,195,247,112,165,233,129,124,214,229,163,195,43,213\")),bytes(abi.encode(\"247,208,164,156,105,54,254,67,145,124,112,36,137,36,151,147,238,70,240,159,253,174,171,97,45,191,148,182,109,194,207,34\")),bytes(abi.encode(\"6,157,166,155,19,112,37,17,180,71,231,137,111,252,190,139,168,247,242,212,245,120,146,49,124,249,255,54,169,249,8,201\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.967ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[107,250,243,176,109,183,216,140,187,95,185,187,33,34,1,103,166,35,163,17,130,69,135,122,213,32,205,175,110,7,235,8],[212,170,219,90,239,233,211,54,140,244,2,201,23,250,92,243,75,114,19,140,36,12,155,163,142,9,100,169,245,105,236,189],[12,81,53,223,180,162,157,79,243,94,158,33,47,191,197,164,72,58,2,145,138,98,102,69,74,106,139,127,245,72,241,217],[194,130,44,70,176,239,206,170,74,174,45,130,41,135,44,171,30,99,111,38,233,67,59,196,255,189,169,200,166,72,94,227]]",
              "sol": "[bytes(abi.encode(\"107,250,243,176,109,183,216,140,187,95,185,187,33,34,1,103,166,35,163,17,130,69,135,122,213,32,205,175,110,7,235,8\")),bytes(abi.encode(\"212,170,219,90,239,233,211,54,140,244,2,201,23,250,92,243,75,114,19,140,36,12,155,163,142,9,100,169,245,105,236,189\")),bytes(abi.encode(\"12,81,53,223,180,162,157,79,243,94,158,33,47,191,197,164,72,58,2,145,138,98,102,69,74,106,139,127,245,72,241,217\")),bytes(abi.encode(\"194,130,44,70,176,239,206,170,74,174,45,130,41,135,44,171,30,99,111,38,233,67,59,196,255,189,169,200,166,72,94,227\"))]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.968ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[82,216,217,125,250,226,56,36,97,187,141,9,235,238,68,201,184,158,210,99,131,213,143,165,231,122,42,255,242,217,2,7],[10,40,202,165,21,130,75,10,106,5,234,18,143,142,171,139,92,107,188,116,70,88,182,32,121,30,40,147,155,61,148,65],[120,99,209,208,27,185,93,172,37,247,114,194,204,64,244,84,215,250,140,11,68,44,131,25,181,49,241,40,82,238,93,37],[2,129,239,106,16,11,147,133,41,99,21,24,67,208,212,252,146,40,185,19,26,100,107,113,196,155,100,159,66,30,163,103]]",
              "sol": "[bytes(abi.encode(\"82,216,217,125,250,226,56,36,97,187,141,9,235,238,68,201,184,158,210,99,131,213,143,165,231,122,42,255,242,217,2,7\")),bytes(abi.encode(\"10,40,202,165,21,130,75,10,106,5,234,18,143,142,171,139,92,107,188,116,70,88,182,32,121,30,40,147,155,61,148,65\")),bytes(abi.encode(\"120,99,209,208,27,185,93,172,37,247,114,194,204,64,244,84,215,250,140,11,68,44,131,25,181,49,241,40,82,238,93,37\")),bytes(abi.encode(\"2,129,239,106,16,11,147,133,41,99,21,24,67,208,212,252,146,40,185,19,26,100,107,113,196,155,100,159,66,30,163,103\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.969ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[245,207,170,95,20,222,166,69,222,184,19,174,111,245,102,49,177,89,137,246,201,56,36,122,232,139,58,250,86,151,59,201],[198,210,96,232,78,17,99,24,222,137,149,92,255,114,213,130,3,80,169,14,71,54,85,237,175,175,109,153,176,237,177,136],[75,22,79,135,212,109,129,87,207,43,63,248,127,17,84,198,9,236,236,197,248,210,106,203,61,173,137,28,61,101,152,209],[64,125,155,199,25,199,41,233,153,183,45,232,4,36,232,165,64,10,120,12,212,132,196,207,117,102,192,197,170,170,195,167],[219,88,222,245,99,22,48,114,244,93,105,6,44,231,193,44,42,17,134,168,175,83,231,165,189,53,151,117,148,233,14,201]]",
              "sol": "[bytes(abi.encode(\"245,207,170,95,20,222,166,69,222,184,19,174,111,245,102,49,177,89,137,246,201,56,36,122,232,139,58,250,86,151,59,201\")),bytes(abi.encode(\"198,210,96,232,78,17,99,24,222,137,149,92,255,114,213,130,3,80,169,14,71,54,85,237,175,175,109,153,176,237,177,136\")),bytes(abi.encode(\"75,22,79,135,212,109,129,87,207,43,63,248,127,17,84,198,9,236,236,197,248,210,106,203,61,173,137,28,61,101,152,209\")),bytes(abi.encode(\"64,125,155,199,25,199,41,233,153,183,45,232,4,36,232,165,64,10,120,12,212,132,196,207,117,102,192,197,170,170,195,167\")),bytes(abi.encode(\"219,88,222,245,99,22,48,114,244,93,105,6,44,231,193,44,42,17,134,168,175,83,231,165,189,53,151,117,148,233,14,201\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.972ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[168,203,242,163,170,153,210,218,113,141,208,20,160,137,87,34,213,60,155,20,180,183,142,53,42,116,119,181,41,104,155,164],[161,84,145,106,48,91,41,233,116,164,128,84,213,114,251,236,91,100,28,21,2,218,83,3,99,136,2,68,68,250,215,16],[67,215,69,197,116,124,185,160,66,213,202,191,220,49,230,83,57,167,194,231,59,180,120,32,150,72,150,67,249,79,220,221],[63,251,224,122,144,239,248,83,218,145,12,236,92,63,244,11,162,181,98,59,112,6,59,233,100,249,220,251,88,78,159,32],[116,129,176,45,214,195,230,40,84,247,118,75,122,49,173,2,150,229,102,110,82,6,25,223,52,92,81,116,31,0,165,236]]",
              "sol": "[bytes(abi.encode(\"168,203,242,163,170,153,210,218,113,141,208,20,160,137,87,34,213,60,155,20,180,183,142,53,42,116,119,181,41,104,155,164\")),bytes(abi.encode(\"161,84,145,106,48,91,41,233,116,164,128,84,213,114,251,236,91,100,28,21,2,218,83,3,99,136,2,68,68,250,215,16\")),bytes(abi.encode(\"67,215,69,197,116,124,185,160,66,213,202,191,220,49,230,83,57,167,194,231,59,180,120,32,150,72,150,67,249,79,220,221\")),bytes(abi.encode(\"63,251,224,122,144,239,248,83,218,145,12,236,92,63,244,11,162,181,98,59,112,6,59,233,100,249,220,251,88,78,159,32\")),bytes(abi.encode(\"116,129,176,45,214,195,230,40,84,247,118,75,122,49,173,2,150,229,102,110,82,6,25,223,52,92,81,116,31,0,165,236\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.973ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[205,63,196,241,127,110,255,183,147,26,150,137,127,16,13,186,16,219,108,33,6,175,141,45,142,176,134,237,71,118,120,40],[244,195,107,162,159,120,197,58,54,90,103,242,87,97,153,11,169,48,186,46,179,206,27,163,88,138,246,60,10,135,98,102],[27,127,96,218,127,127,78,141,70,218,54,85,21,205,107,59,135,140,220,45,165,83,194,91,115,195,63,223,98,218,152,11],[19,10,80,64,84,186,62,217,153,178,44,108,232,159,150,121,3,215,195,59,101,82,41,143,62,231,213,138,215,162,239,32],[47,215,23,228,114,92,129,245,13,2,90,193,49,100,239,84,186,101,121,221,97,20,38,224,68,130,211,235,237,125,54,5]]",
              "sol": "[bytes(abi.encode(\"205,63,196,241,127,110,255,183,147,26,150,137,127,16,13,186,16,219,108,33,6,175,141,45,142,176,134,237,71,118,120,40\")),bytes(abi.encode(\"244,195,107,162,159,120,197,58,54,90,103,242,87,97,153,11,169,48,186,46,179,206,27,163,88,138,246,60,10,135,98,102\")),bytes(abi.encode(\"27,127,96,218,127,127,78,141,70,218,54,85,21,205,107,59,135,140,220,45,165,83,194,91,115,195,63,223,98,218,152,11\")),bytes(abi.encode(\"19,10,80,64,84,186,62,217,153,178,44,108,232,159,150,121,3,215,195,59,101,82,41,143,62,231,213,138,215,162,239,32\")),bytes(abi.encode(\"47,215,23,228,114,92,129,245,13,2,90,193,49,100,239,84,186,101,121,221,97,20,38,224,68,130,211,235,237,125,54,5\"))]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.974ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[190,99,102,147,181,70,134,149,178,65,205,236,222,166,140,192,204,60,9,116,124,251,172,158,138,67,17,191,247,156,118,36],[112,60,73,54,65,184,97,20,125,51,224,145,162,75,228,184,88,92,190,209,48,86,194,146,49,48,21,78,191,202,33,247],[217,111,157,57,251,106,68,145,157,70,32,96,122,86,173,56,233,104,34,135,243,66,191,105,164,17,0,145,156,55,53,240],[255,11,41,199,226,31,216,59,243,189,156,178,210,219,92,69,143,96,149,13,190,246,139,118,122,149,8,33,124,53,189,11],[172,174,109,78,231,162,199,11,136,203,4,33,89,167,123,132,8,105,128,101,127,195,19,176,198,125,150,253,21,154,114,240]]",
              "sol": "[bytes(abi.encode(\"190,99,102,147,181,70,134,149,178,65,205,236,222,166,140,192,204,60,9,116,124,251,172,158,138,67,17,191,247,156,118,36\")),bytes(abi.encode(\"112,60,73,54,65,184,97,20,125,51,224,145,162,75,228,184,88,92,190,209,48,86,194,146,49,48,21,78,191,202,33,247\")),bytes(abi.encode(\"217,111,157,57,251,106,68,145,157,70,32,96,122,86,173,56,233,104,34,135,243,66,191,105,164,17,0,145,156,55,53,240\")),bytes(abi.encode(\"255,11,41,199,226,31,216,59,243,189,156,178,210,219,92,69,143,96,149,13,190,246,139,118,122,149,8,33,124,53,189,11\")),bytes(abi.encode(\"172,174,109,78,231,162,199,11,136,203,4,33,89,167,123,132,8,105,128,101,127,195,19,176,198,125,150,253,21,154,114,240\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.975ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[65]",
              "sol": "bytes1(\"65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.975ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.976ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.976ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.976ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.977ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.977ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.977ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"jqv0dy\"",
              "sol": "\"jqv0dy\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.978ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.978ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.979ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.980ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"a0evd\"",
              "sol": "\"a0evd\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.980ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.980ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.982ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.982ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"a0evd\"",
              "sol": "\"a0evd\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.983ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.984ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"L\",\"pbn0jr\"]",
              "sol": "[string(\"L\"),string(\"pbn0jr\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.984ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[160,161,88,55,61,133,156,66,231,252,132,96,180,14,149,137,163,204,153,161,152,73,160,35,69,87,163,67,221,244,75,114]]",
              "sol": "[bytes(abi.encode(\"160,161,88,55,61,133,156,66,231,252,132,96,180,14,149,137,163,204,153,161,152,73,160,35,69,87,163,67,221,244,75,114\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.985ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.985ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[104,148,26,170,190,208,172,152,153,136,85,233,64,25,124,157,205,162,148,155,39,152,33,125,248,144,57,148,187,127,40,125]",
              "sol": "stringToBytes32(\"104,148,26,170,190,208,172,152,153,136,85,233,64,25,124,157,205,162,148,155,39,152,33,125,248,144,57,148,187,127,40,125\")"
            },
            {
              "js": "[87,117,222,185,190,246,33,215,57,101,4,91,136,92,188,217,184,0,145,224,55,175,241,41,122,31,76,182,156,193,128,200]",
              "sol": "stringToBytes32(\"87,117,222,185,190,246,33,215,57,101,4,91,136,92,188,217,184,0,145,224,55,175,241,41,122,31,76,182,156,193,128,200\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.986ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[98,185,193,217,69,148,44,202,197,15,112,56,75,182,85,16,154,70,172,4,28,168,205,13,215,130,223,216,39,2,26,199]",
              "sol": "stringToBytes32(\"98,185,193,217,69,148,44,202,197,15,112,56,75,182,85,16,154,70,172,4,28,168,205,13,215,130,223,216,39,2,26,199\")"
            },
            {
              "js": "[205,229,189,34,96,215,10,104,2,103,73,178,129,249,3,116,234,204,193,91,90,113,192,247,244,173,71,156,79,213,22,192]",
              "sol": "abi.encode(\"205,229,189,34,96,215,10,104,2,103,73,178,129,249,3,116,234,204,193,91,90,113,192,247,244,173,71,156,79,213,22,192\")"
            },
            {
              "js": "[200,115,215,220,46,105,145,158,110,189,47,187,22,110,4,127,162,169,185,182,104,177,144,51,112,4,68,234,182,239,31,44]",
              "sol": "abi.encode(\"200,115,215,220,46,105,145,158,110,189,47,187,22,110,4,127,162,169,185,182,104,177,144,51,112,4,68,234,182,239,31,44\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.986ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[123,150,169,162,130,163,94,144,238,90,92,102,196,249,200,163,238,184,198,199,4,243,166,203,15,158,175,157,144,92,210,110]",
              "sol": "abi.encode(\"123,150,169,162,130,163,94,144,238,90,92,102,196,249,200,163,238,184,198,199,4,243,166,203,15,158,175,157,144,92,210,110\")"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[211,188,194,108,188,129,89,99,165,164,203,102,59,51,143,69,103,200,139,155,59,117,136,228,32,28,74,139,10,95,114,178]",
              "sol": "abi.encode(\"211,188,194,108,188,129,89,99,165,164,203,102,59,51,143,69,103,200,139,155,59,117,136,228,32,28,74,139,10,95,114,178\")"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.989ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[127,194,184,166,134,148,98,96,193,42,84,223,68,234,60,53,148,62,217,200,87,50,197,12,249,200,232,54,134,45,233,222]",
              "sol": "stringToBytes32(\"127,194,184,166,134,148,98,96,193,42,84,223,68,234,60,53,148,62,217,200,87,50,197,12,249,200,232,54,134,45,233,222\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[60,205,255,184,33,151,216,0,181,238,22,238,16,81,207,33,116,22,193,252,161,201,28,235,242,251,50,60,143,7,31,179]",
              "sol": "abi.encode(\"60,205,255,184,33,151,216,0,181,238,22,238,16,81,207,33,116,22,193,252,161,201,28,235,242,251,50,60,143,7,31,179\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[48,13,4,42,89,161,6,221,173,5,11,73,125,26,77,249,126,80,193,35,67,149,92,197,233,165,131,180,80,196,166,15]",
              "sol": "stringToBytes32(\"48,13,4,42,89,161,6,221,173,5,11,73,125,26,77,249,126,80,193,35,67,149,92,197,233,165,131,180,80,196,166,15\")"
            },
            {
              "js": "\"pbn0jr\"",
              "sol": "\"pbn0jr\""
            },
            {
              "js": "[97,251,98,156,207,188,62,244,9,156,115,69,202,132,164,134,177,202,113,37,31,154,75,15,174,14,84,92,106,233,39,173]",
              "sol": "abi.encode(\"97,251,98,156,207,188,62,244,9,156,115,69,202,132,164,134,177,202,113,37,31,154,75,15,174,14,84,92,106,233,39,173\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:29.989ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[57,152,228,101,154,2,219,159,3,167,129,208,6,226,196,67,142,163,210,239,120,70,32,136,210,209,9,199,179,58,237,71]",
              "sol": "stringToBytes32(\"57,152,228,101,154,2,219,159,3,167,129,208,6,226,196,67,142,163,210,239,120,70,32,136,210,209,9,199,179,58,237,71\")"
            },
            {
              "js": "[227,59,44,86,81,79,247,252,25,115,219,189,208,103,249,80,73,170,247,8,234,197,233,144,148,114,22,190,99,201,201,48]",
              "sol": "abi.encode(\"227,59,44,86,81,79,247,252,25,115,219,189,208,103,249,80,73,170,247,8,234,197,233,144,148,114,22,190,99,201,201,48\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[57,152,228,101,154,2,219,159,3,167,129,208,6,226,196,67,142,163,210,239,120,70,32,136,210,209,9,199,179,58,237,71]",
                "sol": "stringToBytes32(\"57,152,228,101,154,2,219,159,3,167,129,208,6,226,196,67,142,163,210,239,120,70,32,136,210,209,9,199,179,58,237,71\")"
              },
              {
                "js": "[145,32,13,100,238,107,152,230,209,76,111,168,220,18,4,163,170,126,249,159,104,176,235,174,49,74,164,46,170,71,28,48,132]",
                "sol": "bytes33(\"145,32,13,100,238,107,152,230,209,76,111,168,220,18,4,163,170,126,249,159,104,176,235,174,49,74,164,46,170,71,28,48,132\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:29.990ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[171,171,55,189,112,46,111,242,61,116,182,115,15,84,26,193,142,240,115,6,96,251,189,223,251,70,13,168,35,111,119,54]",
              "sol": "abi.encode(\"171,171,55,189,112,46,111,242,61,116,182,115,15,84,26,193,142,240,115,6,96,251,189,223,251,70,13,168,35,111,119,54\")"
            },
            {
              "js": "[230,46,145,175,216,224,13,6,125,189,214,207,112,96,172,67,88,157,120,63,110,130,42,72,96,104,138,97,223,13,253,153]",
              "sol": "stringToBytes32(\"230,46,145,175,216,224,13,6,125,189,214,207,112,96,172,67,88,157,120,63,110,130,42,72,96,104,138,97,223,13,253,153\")"
            },
            {
              "js": "[228,77,136,129,151,78,145,66,16,25,233,52,42,146,217,127,128,237,65,228,165,160,111,137,233,95,155,5,237,229,66,134]",
              "sol": "abi.encode(\"228,77,136,129,151,78,145,66,16,25,233,52,42,146,217,127,128,237,65,228,165,160,111,137,233,95,155,5,237,229,66,134\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[106,71,29,253,240,49,190,47,147,251,101,69,167,45,85,82,148,10,88,205,117,196,75,32,215,95,58,105,33,175,223,18]",
              "sol": "abi.encode(\"106,71,29,253,240,49,190,47,147,251,101,69,167,45,85,82,148,10,88,205,117,196,75,32,215,95,58,105,33,175,223,18\")"
            },
            {
              "js": "[220,124,22,212,202,94,76,118,103,214,183,125,113,215,218,145,2,253,125,254,207,75,73,222,1,90,65,248,222,59,40,104]",
              "sol": "stringToBytes32(\"220,124,22,212,202,94,76,118,103,214,183,125,113,215,218,145,2,253,125,254,207,75,73,222,1,90,65,248,222,59,40,104\")"
            },
            {
              "js": "[98,228,247,111,93,238,232,174,136,112,253,203,27,248,202,169,211,147,136,53,201,48,50,3,208,86,157,122,14,150,208,173]",
              "sol": "abi.encode(\"98,228,247,111,93,238,232,174,136,112,253,203,27,248,202,169,211,147,136,53,201,48,50,3,208,86,157,122,14,150,208,173\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[95,179,166,107,43,183,178,247,93,98,221,49,235,206,127,48,88,242,114,106,23,91,157,212,51,145,15,149,185,22,32,138]",
              "sol": "abi.encode(\"95,179,166,107,43,183,178,247,93,98,221,49,235,206,127,48,88,242,114,106,23,91,157,212,51,145,15,149,185,22,32,138\")"
            },
            {
              "js": "[62,19,97,238,70,171,114,99,195,224,244,85,35,85,118,215,129,200,44,166,68,223,149,226,42,32,150,147,71,34,142,163]",
              "sol": "stringToBytes32(\"62,19,97,238,70,171,114,99,195,224,244,85,35,85,118,215,129,200,44,166,68,223,149,226,42,32,150,147,71,34,142,163\")"
            },
            {
              "js": "[171,65,118,100,139,116,111,3,194,90,226,80,219,174,127,147,234,64,58,41,89,26,89,138,2,244,96,10,239,230,7,144]",
              "sol": "abi.encode(\"171,65,118,100,139,116,111,3,194,90,226,80,219,174,127,147,234,64,58,41,89,26,89,138,2,244,96,10,239,230,7,144\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[18,78,126,163,219,227,63,166,6,56,88,205,1,165,195,44,255,101,65,14,112,159,88,149,48,104,236,98,29,22,245,111]",
              "sol": "abi.encode(\"18,78,126,163,219,227,63,166,6,56,88,205,1,165,195,44,255,101,65,14,112,159,88,149,48,104,236,98,29,22,245,111\")"
            },
            {
              "js": "[60,66,130,252,196,125,140,92,192,62,222,85,113,54,77,100,232,54,193,191,131,69,115,243,61,230,82,89,180,229,1,35]",
              "sol": "stringToBytes32(\"60,66,130,252,196,125,140,92,192,62,222,85,113,54,77,100,232,54,193,191,131,69,115,243,61,230,82,89,180,229,1,35\")"
            },
            {
              "js": "[184,192,20,87,148,140,169,164,146,189,175,68,253,117,9,219,24,183,17,125,231,152,191,124,4,104,134,30,16,186,154,99]",
              "sol": "abi.encode(\"184,192,20,87,148,140,169,164,146,189,175,68,253,117,9,219,24,183,17,125,231,152,191,124,4,104,134,30,16,186,154,99\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[108,123,24,164,238,207,185,245,235,13,2,147,47,233,69,81,155,196,226,56,27,197,48,217,112,75,41,32,69,211,91,170]",
              "sol": "abi.encode(\"108,123,24,164,238,207,185,245,235,13,2,147,47,233,69,81,155,196,226,56,27,197,48,217,112,75,41,32,69,211,91,170\")"
            },
            {
              "js": "[38,105,24,50,110,14,140,150,102,223,232,135,243,170,135,161,95,181,201,123,197,100,189,202,88,30,49,135,143,48,30,188]",
              "sol": "stringToBytes32(\"38,105,24,50,110,14,140,150,102,223,232,135,243,170,135,161,95,181,201,123,197,100,189,202,88,30,49,135,143,48,30,188\")"
            },
            {
              "js": "[246,81,140,226,233,149,172,60,179,221,102,197,104,93,231,116,103,115,227,235,15,126,103,180,192,176,14,118,101,12,232,54]",
              "sol": "abi.encode(\"246,81,140,226,233,149,172,60,179,221,102,197,104,93,231,116,103,115,227,235,15,126,103,180,192,176,14,118,101,12,232,54\")"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[203,191,247,80,236,153,174,29,35,66,129,41,177,137,119,180,153,181,167,205,51,181,32,226,182,85,33,123,17,36,241,88]",
              "sol": "abi.encode(\"203,191,247,80,236,153,174,29,35,66,129,41,177,137,119,180,153,181,167,205,51,181,32,226,182,85,33,123,17,36,241,88\")"
            },
            {
              "js": "[36,167,35,36,147,143,27,107,166,114,238,217,153,222,196,187,250,204,79,156,46,150,210,186,35,49,167,220,7,246,238,126]",
              "sol": "stringToBytes32(\"36,167,35,36,147,143,27,107,166,114,238,217,153,222,196,187,250,204,79,156,46,150,210,186,35,49,167,220,7,246,238,126\")"
            },
            {
              "js": "[99,137,142,163,31,133,130,113,141,198,155,211,101,41,17,148,104,79,233,53,60,223,169,232,69,108,158,184,122,134,166,212]",
              "sol": "abi.encode(\"99,137,142,163,31,133,130,113,141,198,155,211,101,41,17,148,104,79,233,53,60,223,169,232,69,108,158,184,122,134,166,212\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[37,76,84,169,245,86,212,247,162,231,16,207,42,237,151,250,206,221,52,93,96,250,54,203,216,116,188,136,58,137,217,75]",
              "sol": "abi.encode(\"37,76,84,169,245,86,212,247,162,231,16,207,42,237,151,250,206,221,52,93,96,250,54,203,216,116,188,136,58,137,217,75\")"
            },
            {
              "js": "[135,55,119,251,79,250,6,95,227,132,215,29,68,255,115,174,172,248,104,95,154,219,249,210,141,103,74,194,36,145,224,216]",
              "sol": "stringToBytes32(\"135,55,119,251,79,250,6,95,227,132,215,29,68,255,115,174,172,248,104,95,154,219,249,210,141,103,74,194,36,145,224,216\")"
            },
            {
              "js": "[33,86,94,151,233,143,33,226,247,30,33,6,247,198,109,167,209,179,210,62,123,217,57,252,116,245,130,233,248,91,48,6]",
              "sol": "abi.encode(\"33,86,94,151,233,143,33,226,247,30,33,6,247,198,109,167,209,179,210,62,123,217,57,252,116,245,130,233,248,91,48,6\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[89,92,9,56,132,198,48,65,141,64,101,154,169,222,255,8,47,167,39,13,137,186,78,52,134,58,187,202,212,71,34,214]",
              "sol": "abi.encode(\"89,92,9,56,132,198,48,65,141,64,101,154,169,222,255,8,47,167,39,13,137,186,78,52,134,58,187,202,212,71,34,214\")"
            },
            {
              "js": "[13,116,123,215,101,163,46,200,49,32,228,3,202,16,86,239,82,77,203,99,228,200,237,244,228,177,22,139,235,234,166,190]",
              "sol": "stringToBytes32(\"13,116,123,215,101,163,46,200,49,32,228,3,202,16,86,239,82,77,203,99,228,200,237,244,228,177,22,139,235,234,166,190\")"
            },
            {
              "js": "[252,176,211,22,80,3,168,156,233,255,167,209,84,182,206,187,64,83,232,249,163,171,97,146,129,195,159,141,71,156,152,21]",
              "sol": "abi.encode(\"252,176,211,22,80,3,168,156,233,255,167,209,84,182,206,187,64,83,232,249,163,171,97,146,129,195,159,141,71,156,152,21\")"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.000ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[155,112,143,200,178,166,113,198,232,71,201,172,62,235,76,32,156,28,161,251,157,108,146,196,185,43,9,2,25,243,50,246]",
              "sol": "abi.encode(\"155,112,143,200,178,166,113,198,232,71,201,172,62,235,76,32,156,28,161,251,157,108,146,196,185,43,9,2,25,243,50,246\")"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "[142,86,126,123,226,218,71,72,25,242,182,241,59,49,195,73,187,109,189,108,178,47,197,98,176,218,214,207,116,240,186,159]",
              "sol": "abi.encode(\"142,86,126,123,226,218,71,72,25,242,182,241,59,49,195,73,187,109,189,108,178,47,197,98,176,218,214,207,116,240,186,159\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.001ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[216,19,248,15,12,205,32,180,24,162,157,55,138,64,57,110,210,62,33,208,118,129,122,82,125,98,59,51,82,183,221,125]",
              "sol": "stringToBytes32(\"216,19,248,15,12,205,32,180,24,162,157,55,138,64,57,110,210,62,33,208,118,129,122,82,125,98,59,51,82,183,221,125\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "[57,21,43,161,210,162,114,69,230,57,220,143,66,175,95,53,176,184,216,2,13,26,85,243,56,12,139,180,90,15,37,71]",
              "sol": "stringToBytes32(\"57,21,43,161,210,162,114,69,230,57,220,143,66,175,95,53,176,184,216,2,13,26,85,243,56,12,139,180,90,15,37,71\")"
            },
            {
              "js": "[194,169,120,202,83,139,77,0,86,229,222,40,58,36,78,222,65,81,203,96,166,239,173,174,43,116,56,54,54,86,228,221]",
              "sol": "stringToBytes32(\"194,169,120,202,83,139,77,0,86,229,222,40,58,36,78,222,65,81,203,96,166,239,173,174,43,116,56,54,54,86,228,221\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.002ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[10,82,238,115,149,80,231,3,38,60,127,159,88,116,136,105,216,33,211,20,30,165,228,2,32,171,66,69,55,11,72,89]",
              "sol": "stringToBytes32(\"10,82,238,115,149,80,231,3,38,60,127,159,88,116,136,105,216,33,211,20,30,165,228,2,32,171,66,69,55,11,72,89\")"
            },
            {
              "js": "[133,221,15,111,226,201,243,199,168,250,19,138,99,245,139,162,3,175,173,14,231,76,117,111,80]",
              "sol": "abi.encode(\"133,221,15,111,226,201,243,199,168,250,19,138,99,245,139,162,3,175,173,14,231,76,117,111,80\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[42,148,29,155,125,254,90,197,132,22,91,123,22,59,175,133,225,98,153,218,119,21,131,89,224,204,83,94,22,134,185,190]",
              "sol": "stringToBytes32(\"42,148,29,155,125,254,90,197,132,22,91,123,22,59,175,133,225,98,153,218,119,21,131,89,224,204,83,94,22,134,185,190\")"
            },
            {
              "js": "[168,62,239,118,163,144,169,96,250,130,237,120,94,65,221,180,200,77,193,31,237,199,188,253,16,119,69,174,210,69,124,35,40,26,152,224,54,128,254,61,38,123,209,144,103,150,239,16,35,72,82,27,110,221,129,168,123,20,240,29,85,46,26,140,159]",
              "sol": "abi.encode(\"168,62,239,118,163,144,169,96,250,130,237,120,94,65,221,180,200,77,193,31,237,199,188,253,16,119,69,174,210,69,124,35,40,26,152,224,54,128,254,61,38,123,209,144,103,150,239,16,35,72,82,27,110,221,129,168,123,20,240,29,85,46,26,140,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.003ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.006ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.006ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.006ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.006ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.007ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.007ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.007ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.008ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.008ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.009ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.009ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.012ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.012ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.013ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.016ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.020ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[55,55,223,126,12,30,224,99,159,215,9,35,173,193,229,166,37,207,25,110,222,142,166,59,87,49,244,103,37,15,100,252]",
              "sol": "stringToBytes32(\"55,55,223,126,12,30,224,99,159,215,9,35,173,193,229,166,37,207,25,110,222,142,166,59,87,49,244,103,37,15,100,252\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[177,71,229,250,147,248,184,85,67,134,215,242,213,151,60,180,173,119,138,51,172,28,234,181,243,75,24,21,226,35,159,18]",
              "sol": "abi.encode(\"177,71,229,250,147,248,184,85,67,134,215,242,213,151,60,180,173,119,138,51,172,28,234,181,243,75,24,21,226,35,159,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.020ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.023ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.024ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.024ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[168,148,85,98,87,147,9,195,181,215,34,183,89,140,166,81,48,225,0,120,247,159,38,2,79,49,90,45,194,204,190,2]",
              "sol": "abi.encode(\"168,148,85,98,87,147,9,195,181,215,34,183,89,140,166,81,48,225,0,120,247,159,38,2,79,49,90,45,194,204,190,2\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[73,190,162,236,85,107,156,111,223,112,224,18,195,131,165,14,14,54,171,99,168,8,114,56,193,18,220,229,212,37,133,16]",
              "sol": "stringToBytes32(\"73,190,162,236,85,107,156,111,223,112,224,18,195,131,165,14,14,54,171,99,168,8,114,56,193,18,220,229,212,37,133,16\")"
            },
            {
              "js": "[200,118,1,232,179,110,74,195,5,239,80,157,77,92,222,199,231,254,132,150,83,72,69,132,25,252,232,175,134,231,109,134]",
              "sol": "stringToBytes32(\"200,118,1,232,179,110,74,195,5,239,80,157,77,92,222,199,231,254,132,150,83,72,69,132,25,252,232,175,134,231,109,134\")"
            },
            {
              "js": "[174,236,61,146,89,181,181,70,43,171,101,25,134,137,155,215,49,169,25,145,200,79,62,140,107,185,85,119,78,212,164,85]",
              "sol": "stringToBytes32(\"174,236,61,146,89,181,181,70,43,171,101,25,134,137,155,215,49,169,25,145,200,79,62,140,107,185,85,119,78,212,164,85\")"
            },
            {
              "js": "[149,65,44,200,246,38,59,170,222,203,6,39,198,219,245,203,44,226,148,60,12,35,126,120,202,49,171,172,28,142,47,177]",
              "sol": "stringToBytes32(\"149,65,44,200,246,38,59,170,222,203,6,39,198,219,245,203,44,226,148,60,12,35,126,120,202,49,171,172,28,142,47,177\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.025ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.026ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.026ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.027ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.028ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.028ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.028ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.031ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.034ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:56:30.036ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.037ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.038ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:56:30.040ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}