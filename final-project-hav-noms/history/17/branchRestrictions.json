,{
  "2020-11-13T20:40:02.692ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:42:20.147ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:42:56.634ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:43:14.139ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:43:31.364ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:43:48.675ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:44:06.227ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:44:23.642ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:44:41.176ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:44:58.689ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:16.183ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.949ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.953ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [172,182,7,233,175,176,133,132,69,91,166,38,118,206,69,225,135,74,242,126,104,192,50,176,79,143,45,253,206,77,34,69],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"172,182,7,233,175,176,133,132,69,91,166,38,118,206,69,225,135,74,242,126,104,192,50,176,79,143,45,253,206,77,34,69\"),23)"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.954ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [13,126,245,101,27,228,37,124,90,146,162,191,160,53,2,235,44,242,123,23,115,73,201,50,94,139,71,105,162,143,185,44],\"capacity\": 66}",
              "sol": "Buffer.buffer(abi.encode(\"13,126,245,101,27,228,37,124,90,146,162,191,160,53,2,235,44,242,123,23,115,73,201,50,94,139,71,105,162,143,185,44\"),66)"
            },
            {
              "js": "[105,244,146,158,111,116,247,89,78,166,5,220,64,50,83,131,224,98,229,124,62,83,140,27,102,68,106,73,238,145,164,91]",
              "sol": "abi.encode(\"105,244,146,158,111,116,247,89,78,166,5,220,64,50,83,131,224,98,229,124,62,83,140,27,102,68,106,73,238,145,164,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.955ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [134,30,107,250,169,24,132,213,57,175,150,21,175,252,223,98,166,191,230,248,50,143,5,136,136,231,62,252,69,114,240,137],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"134,30,107,250,169,24,132,213,57,175,150,21,175,252,223,98,166,191,230,248,50,143,5,136,136,231,62,252,69,114,240,137\"),59)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.955ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [248,7,85,0,18,236,201,142,126,31,47,4,198,106,220,131,205,158,21,147,224,135,154,254,224,178,9,65,246,120,67,97],\"capacity\": 254}",
              "sol": "Buffer.buffer(abi.encode(\"248,7,85,0,18,236,201,142,126,31,47,4,198,106,220,131,205,158,21,147,224,135,154,254,224,178,9,65,246,120,67,97\"),254)"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.957ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [26,81,255,2,104,35,118,57,100,145,33,3,194,59,154,7,173,165,47,156,120,201,73,90,159,229,126,46,251,79,204,209],\"capacity\": 10}",
              "sol": "Buffer.buffer(abi.encode(\"26,81,255,2,104,35,118,57,100,145,33,3,194,59,154,7,173,165,47,156,120,201,73,90,159,229,126,46,251,79,204,209\"),10)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.958ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [159,133,67,238,199,217,165,248,182,111,129,191,158,236,148,53,96,39,75,45,216,173,84,91,75,254,238,117,142,94,1,222],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"159,133,67,238,199,217,165,248,182,111,129,191,158,236,148,53,96,39,75,45,216,173,84,91,75,254,238,117,142,94,1,222\"),28)"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [113,149,162,219,198,38,114,232,246,24,131,47,223,52,33,56,170,0,221,12,133,109,238,102,210,61,131,138,187,82,205,85],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"113,149,162,219,198,38,114,232,246,24,131,47,223,52,33,56,170,0,221,12,133,109,238,102,210,61,131,138,187,82,205,85\"),101)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.959ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [55,28,19,71,191,228,73,91,190,224,132,150,193,112,255,72,205,237,163,187,140,49,68,142,242,179,118,96,43,92,1,143],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"55,28,19,71,191,228,73,91,190,224,132,150,193,112,255,72,205,237,163,187,140,49,68,142,242,179,118,96,43,92,1,143\"),65)"
            },
            {
              "js": "[9,225,53,207,233,140,177,194,38,90,240,189,239,232,169,173,145,249,14,17,231,177,110,57,4,149,111,167,79,136,188,254]",
              "sol": "abi.encode(\"9,225,53,207,233,140,177,194,38,90,240,189,239,232,169,173,145,249,14,17,231,177,110,57,4,149,111,167,79,136,188,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.960ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [51,152,134,209,242,74,72,133,154,211,116,67,158,143,65,134,233,72,56,32,215,215,199,94,1,105,3,42,48,165,128,92],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"51,152,134,209,242,74,72,133,154,211,116,67,158,143,65,134,233,72,56,32,215,215,199,94,1,105,3,42,48,165,128,92\"),128)"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.960ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [21,74,226,247,60,188,53,74,151,36,211,182,254,173,213,124,246,240,187,14,203,172,32,58,20,1,232,28,76,34,33,221],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"21,74,226,247,60,188,53,74,151,36,211,182,254,173,213,124,246,240,187,14,203,172,32,58,20,1,232,28,76,34,33,221\"),2014223716)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.963ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [99,159,99,155,26,6,140,69,173,235,249,81,83,215,64,7,92,254,121,149,220,253,65,252,138,8,202,254,131,252,35,241],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"99,159,99,155,26,6,140,69,173,235,249,81,83,215,64,7,92,254,121,149,220,253,65,252,138,8,202,254,131,252,35,241\"),161)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.964ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [104,184,160,29,209,203,158,135,108,173,187,172,109,232,237,114,17,189,234,166,250,81,38,164,187,23,138,181,116,10,154,188],\"capacity\": 127}",
              "sol": "Buffer.buffer(abi.encode(\"104,184,160,29,209,203,158,135,108,173,187,172,109,232,237,114,17,189,234,166,250,81,38,164,187,23,138,181,116,10,154,188\"),127)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.967ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.967ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.967ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.968ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.969ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.970ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:33.971ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.971ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.972ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.972ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.975ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[104,49,129,67,9,28,26,25,124,210,60,214,96,132,207,6,32,191,44,238,203,207,189,151,214,240,195,223,41,89,27,137]",
              "sol": "stringToBytes32(\"104,49,129,67,9,28,26,25,124,210,60,214,96,132,207,6,32,191,44,238,203,207,189,151,214,240,195,223,41,89,27,137\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:33.976ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[136,66,194,187,21,162,87,1,198,206,114,235,160,24,201,13,20,122,33,147,198,156,95,40,78,1,78,226,113,246,230,25]",
              "sol": "stringToBytes32(\"136,66,194,187,21,162,87,1,198,206,114,235,160,24,201,13,20,122,33,147,198,156,95,40,78,1,78,226,113,246,230,25\")"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[13,57,52,207,31,245,247,83,95,146,76,119,110,32,248,140,19,94,24,62,57,122,212,115,148,238,138,144,240,52,224,68]",
              "sol": "abi.encode(\"13,57,52,207,31,245,247,83,95,146,76,119,110,32,248,140,19,94,24,62,57,122,212,115,148,238,138,144,240,52,224,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.024ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.025ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.026ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.027ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.028ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.028ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.029ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.030ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.031ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.032ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.033ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.034ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.034ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.036ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.036ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.039ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"RevertWithReason\",\"u04xef\",\"8s1ugh\",\"q4usrb\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"RevertWithReason\"),string(\"u04xef\"),string(\"8s1ugh\"),string(\"q4usrb\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.042ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"costUSD\",\"PayableExample\",\"\",\"P\",\"RevertWithReason\",\"call updateEthPrice\"]",
              "sol": "[string(\"costUSD\"),string(\"PayableExample\"),string(\"\"),string(\"P\"),string(\"RevertWithReason\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.043ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"IsLibrary\",\"RevertWithReason\",\"q4usrb\",\"costUSD\",\"trade.totalPrice\",\"8s1ugh\",\"call updateEthPrice\",\"RevertWithReason\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"IsLibrary\"),string(\"RevertWithReason\"),string(\"q4usrb\"),string(\"costUSD\"),string(\"trade.totalPrice\"),string(\"8s1ugh\"),string(\"call updateEthPrice\"),string(\"RevertWithReason\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.044ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"gwofoa\"",
              "sol": "\"gwofoa\""
            },
            {
              "js": "[\"IsLibrary\"]",
              "sol": "[string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.045ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"q4usrb\"",
              "sol": "\"q4usrb\""
            },
            {
              "js": "[\"78g949\"]",
              "sol": "[string(\"78g949\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.046ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"Example\"]",
              "sol": "[string(\"Example\")]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.047ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"78g949\"]",
              "sol": "[string(\"78g949\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.048ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"q4usrb\",\"L\"]",
              "sol": "[string(\"q4usrb\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.049ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"u04xef\"",
              "sol": "\"u04xef\""
            },
            {
              "js": "[\"UsesExample\",\"IsLibrary\"]",
              "sol": "[string(\"UsesExample\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.050ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"L\",\"costUSD\"]",
              "sol": "[string(\"L\"),string(\"costUSD\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.051ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"q4usrb\"",
              "sol": "\"q4usrb\""
            },
            {
              "js": "[\"UsesExample\",\"IsLibrary\"]",
              "sol": "[string(\"UsesExample\"),string(\"IsLibrary\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.052ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"bpveg\"",
              "sol": "\"bpveg\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"costUSD\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.053ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"q4usrb\"",
              "sol": "\"q4usrb\""
            },
            {
              "js": "[\"0\",\"8s1ugh\",\"78g949\"]",
              "sol": "[string(\"0\"),string(\"8s1ugh\"),string(\"78g949\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.054ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"listingID arg\",\"78g949\",\"q4usrb\"]",
              "sol": "[string(\"listingID arg\"),string(\"78g949\"),string(\"q4usrb\")]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.054ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\",\"\\x19Ethereum Signed Message:\\n32\",\"gwofoa\"]",
              "sol": "[string(\"\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"gwofoa\")]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.055ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"0\",\"q4usrb\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"costUSD\"]",
              "sol": "[string(\"0\"),string(\"q4usrb\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.057ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"RevertWithReason\",\"P\",\"Oraclize query was sent, standing by for the answer...\",\"8s1ugh\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"P\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"8s1ugh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.058ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"t61cho\",\"RevertWithReason\",\"8s1ugh\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"t61cho\"),string(\"RevertWithReason\"),string(\"8s1ugh\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.058ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"8s1ugh\",\"call updateEthPrice\",\"\\x19Ethereum Signed Message:\\n32\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"8s1ugh\"),string(\"call updateEthPrice\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.059ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"P\",\"RevertWithReason\",\"RevertWithReason\",\"78g949\",\"q4usrb\"]",
              "sol": "[string(\"P\"),string(\"RevertWithReason\"),string(\"RevertWithReason\"),string(\"78g949\"),string(\"q4usrb\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.060ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"Example\",\"L\",\"0\",\"trade.totalPrice\",\"z59u3t\"]",
              "sol": "[string(\"Example\"),string(\"L\"),string(\"0\"),string(\"trade.totalPrice\"),string(\"z59u3t\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.060ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"bpveg\",\"gwofoa\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"UsesExample\"]",
              "sol": "[string(\"bpveg\"),string(\"gwofoa\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"UsesExample\")]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.062ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"0\",\"78g949\",\"trade.totalPrice\",\"listingID arg\",\"P\"]",
              "sol": "[string(\"0\"),string(\"78g949\"),string(\"trade.totalPrice\"),string(\"listingID arg\"),string(\"P\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.062ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"8s1ugh\"",
              "sol": "\"8s1ugh\""
            },
            {
              "js": "[[229,1,152,21,219,143,94,7,45,215,60,27,238,65,160,68,167,93,62,82,159,200,138,74,18,195,190,103,186,220,77,64],[97,116,23,71,107,232,143,59,136,5,216,89,243,100,247,216,223,95,72,16,220,3,46,141,143,248,214,170,190,155,242,238],[103,212,124,5,250,206,247,197,229,175,7,56,145,192,106,6,103,163,13,54,246,146,104,241,101,247,5,189,13,51,62,177],[37,152,253,129,12,233,189,7,65,255,215,111,216,190,76,162,37,237,163,152,31,80,220,119,142,201,240,76,255,172,144,44],[85,121,118,234,223,129,0,75,132,33,206,214,230,7,75,54,114,231,251,132,0,33,247,86,21,74,134,22,171,73,88,59],[101,147,54,6,36,9,2,40,201,231,54,171,88,249,132,1,6,189,164,53,198,102,206,76,2,62,194,170,65,31,141,62]]",
              "sol": "[bytes(abi.encode(\"229,1,152,21,219,143,94,7,45,215,60,27,238,65,160,68,167,93,62,82,159,200,138,74,18,195,190,103,186,220,77,64\")),bytes(abi.encode(\"97,116,23,71,107,232,143,59,136,5,216,89,243,100,247,216,223,95,72,16,220,3,46,141,143,248,214,170,190,155,242,238\")),bytes(abi.encode(\"103,212,124,5,250,206,247,197,229,175,7,56,145,192,106,6,103,163,13,54,246,146,104,241,101,247,5,189,13,51,62,177\")),bytes(abi.encode(\"37,152,253,129,12,233,189,7,65,255,215,111,216,190,76,162,37,237,163,152,31,80,220,119,142,201,240,76,255,172,144,44\")),bytes(abi.encode(\"85,121,118,234,223,129,0,75,132,33,206,214,230,7,75,54,114,231,251,132,0,33,247,86,21,74,134,22,171,73,88,59\")),bytes(abi.encode(\"101,147,54,6,36,9,2,40,201,231,54,171,88,249,132,1,6,189,164,53,198,102,206,76,2,62,194,170,65,31,141,62\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.063ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"me8tm\"",
              "sol": "\"me8tm\""
            },
            {
              "js": "[[102,131,130,146,64,235,55,11,116,226,131,32,55,127,199,149,205,234,79,128,172,222,255,28,211,53,169,40,74,248,220,125],[200,59,136,188,229,99,193,184,67,27,6,63,136,174,107,61,224,119,95,225,244,24,37,87,121,108,27,254,234,204,160,225],[14,118,249,217,103,167,224,242,54,160,33,150,46,135,188,129,200,119,58,10,162,211,27,160,89,24,139,254,182,145,241,236],[186,79,112,75,116,205,124,121,94,90,157,137,23,212,146,118,69,84,251,231,72,10,248,27,217,254,99,10,52,207,49,106],[38,242,135,55,252,161,145,75,197,193,227,31,158,211,20,245,217,200,28,127,34,228,64,187,163,185,254,76,27,103,101,215],[214,76,241,58,244,231,87,66,13,68,136,71,31,8,68,71,102,51,145,139,9,187,95,60,147,163,229,32,38,17,22,22],[146,98,251,199,82,7,171,115,36,11,2,43,26,176,100,121,246,162,218,251,177,158,12,129,49,190,172,133,126,233,142,55],[102,210,7,111,82,28,92,217,164,176,225,184,190,69,96,45,3,245,15,193,177,190,60,227,96,244,82,163,110,108,225,85]]",
              "sol": "[bytes(abi.encode(\"102,131,130,146,64,235,55,11,116,226,131,32,55,127,199,149,205,234,79,128,172,222,255,28,211,53,169,40,74,248,220,125\")),bytes(abi.encode(\"200,59,136,188,229,99,193,184,67,27,6,63,136,174,107,61,224,119,95,225,244,24,37,87,121,108,27,254,234,204,160,225\")),bytes(abi.encode(\"14,118,249,217,103,167,224,242,54,160,33,150,46,135,188,129,200,119,58,10,162,211,27,160,89,24,139,254,182,145,241,236\")),bytes(abi.encode(\"186,79,112,75,116,205,124,121,94,90,157,137,23,212,146,118,69,84,251,231,72,10,248,27,217,254,99,10,52,207,49,106\")),bytes(abi.encode(\"38,242,135,55,252,161,145,75,197,193,227,31,158,211,20,245,217,200,28,127,34,228,64,187,163,185,254,76,27,103,101,215\")),bytes(abi.encode(\"214,76,241,58,244,231,87,66,13,68,136,71,31,8,68,71,102,51,145,139,9,187,95,60,147,163,229,32,38,17,22,22\")),bytes(abi.encode(\"146,98,251,199,82,7,171,115,36,11,2,43,26,176,100,121,246,162,218,251,177,158,12,129,49,190,172,133,126,233,142,55\")),bytes(abi.encode(\"102,210,7,111,82,28,92,217,164,176,225,184,190,69,96,45,3,245,15,193,177,190,60,227,96,244,82,163,110,108,225,85\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.064ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[85,199,198,244,210,77,238,211,145,192,98,156,163,106,119,114,40,32,88,151,82,131,246,42,142,102,242,36,74,251,34,205],[8,219,196,30,66,239,16,104,198,148,108,175,37,205,186,94,247,67,161,252,85,141,85,143,227,11,161,80,222,141,235,15],[121,153,112,229,117,249,155,171,200,227,48,167,36,210,208,0,52,50,136,16,55,121,241,114,7,194,1,26,149,28,139,0],[248,190,21,141,27,62,0,193,67,178,40,35,78,216,89,182,57,66,229,166,225,174,136,1,1,137,213,85,33,223,232,183],[166,110,156,193,110,201,131,128,63,51,238,126,81,136,83,34,145,45,166,155,248,169,160,234,3,98,57,131,175,61,126,76],[142,129,19,200,207,186,136,45,35,218,245,50,237,112,164,129,60,199,211,232,17,157,122,141,10,177,95,146,185,203,18,175],[122,14,13,75,185,2,157,242,235,41,103,254,42,246,8,255,53,35,123,213,87,64,148,178,109,134,68,182,217,103,18,68],[15,242,195,49,69,91,216,154,86,222,25,235,238,227,153,60,255,146,55,129,39,138,231,14,121,23,58,0,151,90,12,86]]",
              "sol": "[bytes(abi.encode(\"85,199,198,244,210,77,238,211,145,192,98,156,163,106,119,114,40,32,88,151,82,131,246,42,142,102,242,36,74,251,34,205\")),bytes(abi.encode(\"8,219,196,30,66,239,16,104,198,148,108,175,37,205,186,94,247,67,161,252,85,141,85,143,227,11,161,80,222,141,235,15\")),bytes(abi.encode(\"121,153,112,229,117,249,155,171,200,227,48,167,36,210,208,0,52,50,136,16,55,121,241,114,7,194,1,26,149,28,139,0\")),bytes(abi.encode(\"248,190,21,141,27,62,0,193,67,178,40,35,78,216,89,182,57,66,229,166,225,174,136,1,1,137,213,85,33,223,232,183\")),bytes(abi.encode(\"166,110,156,193,110,201,131,128,63,51,238,126,81,136,83,34,145,45,166,155,248,169,160,234,3,98,57,131,175,61,126,76\")),bytes(abi.encode(\"142,129,19,200,207,186,136,45,35,218,245,50,237,112,164,129,60,199,211,232,17,157,122,141,10,177,95,146,185,203,18,175\")),bytes(abi.encode(\"122,14,13,75,185,2,157,242,235,41,103,254,42,246,8,255,53,35,123,213,87,64,148,178,109,134,68,182,217,103,18,68\")),bytes(abi.encode(\"15,242,195,49,69,91,216,154,86,222,25,235,238,227,153,60,255,146,55,129,39,138,231,14,121,23,58,0,151,90,12,86\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.065ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[191,210,115,76,123,141,64,177,163,247,78,192,68,178,37,193,204,155,104,95,118,31,2,80,26,88,21,2,102,130,180,165]]",
              "sol": "[bytes(abi.encode(\"191,210,115,76,123,141,64,177,163,247,78,192,68,178,37,193,204,155,104,95,118,31,2,80,26,88,21,2,102,130,180,165\"))]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.066ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "[[27,157,252,91,31,136,174,218,126,16,97,184,76,95,144,192,175,62,50,131,192,239,191,242,187,155,92,51,232,96,234,28]]",
              "sol": "[bytes(abi.encode(\"27,157,252,91,31,136,174,218,126,16,97,184,76,95,144,192,175,62,50,131,192,239,191,242,187,155,92,51,232,96,234,28\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.067ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"z59u3t\"",
              "sol": "\"z59u3t\""
            },
            {
              "js": "[[136,48,212,14,95,71,119,139,55,161,45,7,131,191,128,203,156,180,120,251,119,128,115,70,237,204,80,236,180,73,230,252]]",
              "sol": "[bytes(abi.encode(\"136,48,212,14,95,71,119,139,55,161,45,7,131,191,128,203,156,180,120,251,119,128,115,70,237,204,80,236,180,73,230,252\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.068ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[222,127,217,200,243,69,231,30,7,13,104,103,87,205,126,48,178,147,249,132,191,135,163,4,46,72,171,182,131,208,26,152]]",
              "sol": "[bytes(abi.encode(\"222,127,217,200,243,69,231,30,7,13,104,103,87,205,126,48,178,147,249,132,191,135,163,4,46,72,171,182,131,208,26,152\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.072ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[245,83,237,234,224,102,7,12,149,61,198,76,27,80,65,180,155,41,158,203,145,207,32,216,187,169,19,115,253,242,234,146]]",
              "sol": "[bytes(abi.encode(\"245,83,237,234,224,102,7,12,149,61,198,76,27,80,65,180,155,41,158,203,145,207,32,216,187,169,19,115,253,242,234,146\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.073ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"q4usrb\"",
              "sol": "\"q4usrb\""
            },
            {
              "js": "[[13,213,204,200,111,250,10,193,8,180,143,201,227,78,172,61,129,179,102,148,116,94,242,51,226,192,156,16,173,74,251,204],[138,217,244,247,0,175,174,95,48,202,209,12,105,9,252,87,158,94,222,139,6,13,160,141,178,63,127,128,69,161,56,214]]",
              "sol": "[bytes(abi.encode(\"13,213,204,200,111,250,10,193,8,180,143,201,227,78,172,61,129,179,102,148,116,94,242,51,226,192,156,16,173,74,251,204\")),bytes(abi.encode(\"138,217,244,247,0,175,174,95,48,202,209,12,105,9,252,87,158,94,222,139,6,13,160,141,178,63,127,128,69,161,56,214\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.074ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"78g949\"",
              "sol": "\"78g949\""
            },
            {
              "js": "[[230,234,4,199,50,188,173,225,50,26,189,159,221,127,244,90,167,252,248,195,212,157,253,28,122,168,129,40,133,67,253,146],[184,15,237,46,210,154,224,79,229,50,0,21,124,176,71,224,185,83,2,254,67,28,94,109,163,92,252,89,241,165,246,100]]",
              "sol": "[bytes(abi.encode(\"230,234,4,199,50,188,173,225,50,26,189,159,221,127,244,90,167,252,248,195,212,157,253,28,122,168,129,40,133,67,253,146\")),bytes(abi.encode(\"184,15,237,46,210,154,224,79,229,50,0,21,124,176,71,224,185,83,2,254,67,28,94,109,163,92,252,89,241,165,246,100\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.075ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[200,15,123,111,187,81,117,17,176,238,66,60,236,71,221,144,83,40,182,16,238,120,232,238,137,183,120,92,12,127,21,109],[134,253,79,83,234,145,233,40,139,62,253,1,133,1,62,94,205,213,110,206,83,179,223,200,233,1,223,108,127,217,96,223]]",
              "sol": "[bytes(abi.encode(\"200,15,123,111,187,81,117,17,176,238,66,60,236,71,221,144,83,40,182,16,238,120,232,238,137,183,120,92,12,127,21,109\")),bytes(abi.encode(\"134,253,79,83,234,145,233,40,139,62,253,1,133,1,62,94,205,213,110,206,83,179,223,200,233,1,223,108,127,217,96,223\"))]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.077ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[100,181,184,237,26,157,60,245,32,98,194,5,22,84,81,109,7,160,133,235,156,46,2,159,87,243,85,188,179,54,139,240],[51,159,140,49,182,75,66,33,248,222,38,126,8,2,186,52,132,15,214,17,118,27,59,127,58,45,16,41,68,37,179,133]]",
              "sol": "[bytes(abi.encode(\"100,181,184,237,26,157,60,245,32,98,194,5,22,84,81,109,7,160,133,235,156,46,2,159,87,243,85,188,179,54,139,240\")),bytes(abi.encode(\"51,159,140,49,182,75,66,33,248,222,38,126,8,2,186,52,132,15,214,17,118,27,59,127,58,45,16,41,68,37,179,133\"))]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.078ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[122,23,83,111,82,100,109,111,223,43,53,95,165,137,55,6,107,105,73,69,202,150,0,171,199,99,78,170,12,128,31,37],[154,223,76,129,5,43,226,5,19,55,249,205,70,87,221,103,72,1,176,161,210,18,239,199,114,94,204,49,164,7,149,70],[175,15,89,13,41,67,8,56,84,231,106,155,205,43,188,252,99,243,68,35,100,19,142,124,145,118,152,181,19,203,174,190]]",
              "sol": "[bytes(abi.encode(\"122,23,83,111,82,100,109,111,223,43,53,95,165,137,55,6,107,105,73,69,202,150,0,171,199,99,78,170,12,128,31,37\")),bytes(abi.encode(\"154,223,76,129,5,43,226,5,19,55,249,205,70,87,221,103,72,1,176,161,210,18,239,199,114,94,204,49,164,7,149,70\")),bytes(abi.encode(\"175,15,89,13,41,67,8,56,84,231,106,155,205,43,188,252,99,243,68,35,100,19,142,124,145,118,152,181,19,203,174,190\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.080ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[106,179,185,177,88,21,184,184,42,38,35,21,192,182,176,231,158,138,42,182,149,71,146,155,14,102,30,25,127,224,35,87],[76,222,223,167,121,17,227,106,106,84,41,171,215,51,135,35,180,88,198,222,74,163,135,84,25,144,78,3,187,173,106,242],[46,69,116,27,241,199,110,97,77,84,0,79,247,63,207,237,192,170,183,67,35,9,96,100,198,247,233,111,61,130,56,121]]",
              "sol": "[bytes(abi.encode(\"106,179,185,177,88,21,184,184,42,38,35,21,192,182,176,231,158,138,42,182,149,71,146,155,14,102,30,25,127,224,35,87\")),bytes(abi.encode(\"76,222,223,167,121,17,227,106,106,84,41,171,215,51,135,35,180,88,198,222,74,163,135,84,25,144,78,3,187,173,106,242\")),bytes(abi.encode(\"46,69,116,27,241,199,110,97,77,84,0,79,247,63,207,237,192,170,183,67,35,9,96,100,198,247,233,111,61,130,56,121\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.082ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"78g949\"",
              "sol": "\"78g949\""
            },
            {
              "js": "[[48,149,231,237,46,122,47,54,79,182,64,19,199,28,85,83,25,63,47,243,125,2,22,249,106,208,253,191,92,195,159,50],[211,229,96,132,197,60,42,40,251,144,108,186,118,29,196,235,33,175,119,235,59,183,33,34,165,94,41,128,179,91,131,126],[14,254,132,70,192,252,233,160,117,27,187,200,255,196,140,253,148,160,66,106,162,108,83,234,250,80,211,5,83,36,175,186]]",
              "sol": "[bytes(abi.encode(\"48,149,231,237,46,122,47,54,79,182,64,19,199,28,85,83,25,63,47,243,125,2,22,249,106,208,253,191,92,195,159,50\")),bytes(abi.encode(\"211,229,96,132,197,60,42,40,251,144,108,186,118,29,196,235,33,175,119,235,59,183,33,34,165,94,41,128,179,91,131,126\")),bytes(abi.encode(\"14,254,132,70,192,252,233,160,117,27,187,200,255,196,140,253,148,160,66,106,162,108,83,234,250,80,211,5,83,36,175,186\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.084ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"me8tm\"",
              "sol": "\"me8tm\""
            },
            {
              "js": "[[86,117,215,147,9,7,106,175,114,44,222,100,174,215,26,188,127,22,237,188,1,205,125,22,242,202,152,255,132,100,143,166],[201,30,241,78,162,0,135,202,188,183,99,36,119,45,124,4,52,124,167,53,164,219,94,254,5,255,162,76,8,214,156,51],[59,191,110,224,216,176,23,47,246,183,155,219,145,161,43,163,120,77,198,138,1,117,13,189,105,68,57,70,70,39,156,33]]",
              "sol": "[bytes(abi.encode(\"86,117,215,147,9,7,106,175,114,44,222,100,174,215,26,188,127,22,237,188,1,205,125,22,242,202,152,255,132,100,143,166\")),bytes(abi.encode(\"201,30,241,78,162,0,135,202,188,183,99,36,119,45,124,4,52,124,167,53,164,219,94,254,5,255,162,76,8,214,156,51\")),bytes(abi.encode(\"59,191,110,224,216,176,23,47,246,183,155,219,145,161,43,163,120,77,198,138,1,117,13,189,105,68,57,70,70,39,156,33\"))]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.086ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[111,200,127,170,64,165,87,197,102,242,205,8,119,21,14,75,235,136,237,73,89,143,135,96,113,110,122,87,207,117,29,130],[47,4,132,227,95,20,154,49,250,196,175,130,3,208,254,204,50,7,230,252,128,135,191,127,46,228,1,153,115,42,72,132],[141,235,123,167,179,4,112,92,115,33,87,84,14,88,94,154,116,182,186,86,3,242,179,67,4,217,128,162,107,251,70,213],[185,122,115,106,174,87,115,208,92,49,233,194,44,195,254,226,45,32,67,247,130,208,230,70,131,222,206,170,80,183,94,70]]",
              "sol": "[bytes(abi.encode(\"111,200,127,170,64,165,87,197,102,242,205,8,119,21,14,75,235,136,237,73,89,143,135,96,113,110,122,87,207,117,29,130\")),bytes(abi.encode(\"47,4,132,227,95,20,154,49,250,196,175,130,3,208,254,204,50,7,230,252,128,135,191,127,46,228,1,153,115,42,72,132\")),bytes(abi.encode(\"141,235,123,167,179,4,112,92,115,33,87,84,14,88,94,154,116,182,186,86,3,242,179,67,4,217,128,162,107,251,70,213\")),bytes(abi.encode(\"185,122,115,106,174,87,115,208,92,49,233,194,44,195,254,226,45,32,67,247,130,208,230,70,131,222,206,170,80,183,94,70\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.088ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[9,202,101,57,92,13,4,177,158,152,223,82,46,225,152,176,100,140,221,6,36,159,242,11,122,47,65,89,55,243,51,10],[62,222,207,182,132,189,167,145,144,109,135,187,147,54,168,35,192,233,199,188,139,51,159,106,101,227,9,142,149,149,148,174],[22,66,207,162,106,216,25,219,96,193,230,46,155,235,198,250,167,10,37,60,197,194,149,242,147,153,59,174,239,23,228,143],[166,35,205,1,77,193,195,98,29,76,180,127,137,171,212,252,202,112,13,134,159,47,126,87,161,141,127,47,41,10,228,5]]",
              "sol": "[bytes(abi.encode(\"9,202,101,57,92,13,4,177,158,152,223,82,46,225,152,176,100,140,221,6,36,159,242,11,122,47,65,89,55,243,51,10\")),bytes(abi.encode(\"62,222,207,182,132,189,167,145,144,109,135,187,147,54,168,35,192,233,199,188,139,51,159,106,101,227,9,142,149,149,148,174\")),bytes(abi.encode(\"22,66,207,162,106,216,25,219,96,193,230,46,155,235,198,250,167,10,37,60,197,194,149,242,147,153,59,174,239,23,228,143\")),bytes(abi.encode(\"166,35,205,1,77,193,195,98,29,76,180,127,137,171,212,252,202,112,13,134,159,47,126,87,161,141,127,47,41,10,228,5\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.089ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "[[236,70,115,55,48,97,14,30,132,226,152,98,34,163,95,20,63,48,8,97,62,97,192,114,38,134,209,138,152,92,218,132],[184,53,107,100,227,197,217,165,170,178,154,243,73,76,197,177,144,10,228,168,65,17,31,243,247,227,124,93,224,96,222,45],[5,174,127,136,115,127,255,154,54,8,121,234,76,162,22,208,106,84,233,158,129,136,219,30,162,238,111,38,233,183,191,194],[172,241,105,114,197,37,139,19,134,166,171,32,209,237,224,192,235,227,98,148,198,138,192,50,6,91,35,235,203,164,31,104]]",
              "sol": "[bytes(abi.encode(\"236,70,115,55,48,97,14,30,132,226,152,98,34,163,95,20,63,48,8,97,62,97,192,114,38,134,209,138,152,92,218,132\")),bytes(abi.encode(\"184,53,107,100,227,197,217,165,170,178,154,243,73,76,197,177,144,10,228,168,65,17,31,243,247,227,124,93,224,96,222,45\")),bytes(abi.encode(\"5,174,127,136,115,127,255,154,54,8,121,234,76,162,22,208,106,84,233,158,129,136,219,30,162,238,111,38,233,183,191,194\")),bytes(abi.encode(\"172,241,105,114,197,37,139,19,134,166,171,32,209,237,224,192,235,227,98,148,198,138,192,50,6,91,35,235,203,164,31,104\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.100ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[230,141,117,233,200,198,80,195,115,220,96,101,79,176,137,0,152,155,104,71,180,9,40,183,123,45,53,114,81,226,150,104],[172,115,139,16,163,31,198,10,180,95,54,147,121,177,178,189,140,229,161,187,215,140,97,2,73,110,6,174,215,153,145,13],[212,162,108,251,138,236,49,22,130,207,97,165,64,56,194,185,16,155,21,118,116,74,184,148,46,80,24,152,233,252,155,129],[114,53,155,216,179,246,158,242,237,214,219,97,49,39,89,149,115,236,134,154,180,9,60,158,138,57,214,111,38,235,26,248]]",
              "sol": "[bytes(abi.encode(\"230,141,117,233,200,198,80,195,115,220,96,101,79,176,137,0,152,155,104,71,180,9,40,183,123,45,53,114,81,226,150,104\")),bytes(abi.encode(\"172,115,139,16,163,31,198,10,180,95,54,147,121,177,178,189,140,229,161,187,215,140,97,2,73,110,6,174,215,153,145,13\")),bytes(abi.encode(\"212,162,108,251,138,236,49,22,130,207,97,165,64,56,194,185,16,155,21,118,116,74,184,148,46,80,24,152,233,252,155,129\")),bytes(abi.encode(\"114,53,155,216,179,246,158,242,237,214,219,97,49,39,89,149,115,236,134,154,180,9,60,158,138,57,214,111,38,235,26,248\"))]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.101ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[171,161,115,153,137,83,57,142,72,237,145,6,1,77,109,41,245,103,219,48,45,94,235,5,85,171,186,192,58,100,20,39],[1,215,183,154,207,209,203,155,176,20,14,238,112,14,180,242,250,227,206,134,207,179,54,17,145,88,98,175,176,205,64,26],[222,51,135,34,88,31,76,69,4,131,105,110,183,12,46,248,8,190,2,247,192,32,100,87,230,120,107,63,198,145,200,39],[151,140,218,30,246,177,213,113,31,29,196,48,95,23,50,20,180,143,3,172,58,169,22,124,106,102,152,106,181,157,217,131],[121,219,185,90,113,187,17,217,95,139,43,77,187,111,213,255,193,16,243,189,165,66,74,147,47,71,239,131,121,1,1,111]]",
              "sol": "[bytes(abi.encode(\"171,161,115,153,137,83,57,142,72,237,145,6,1,77,109,41,245,103,219,48,45,94,235,5,85,171,186,192,58,100,20,39\")),bytes(abi.encode(\"1,215,183,154,207,209,203,155,176,20,14,238,112,14,180,242,250,227,206,134,207,179,54,17,145,88,98,175,176,205,64,26\")),bytes(abi.encode(\"222,51,135,34,88,31,76,69,4,131,105,110,183,12,46,248,8,190,2,247,192,32,100,87,230,120,107,63,198,145,200,39\")),bytes(abi.encode(\"151,140,218,30,246,177,213,113,31,29,196,48,95,23,50,20,180,143,3,172,58,169,22,124,106,102,152,106,181,157,217,131\")),bytes(abi.encode(\"121,219,185,90,113,187,17,217,95,139,43,77,187,111,213,255,193,16,243,189,165,66,74,147,47,71,239,131,121,1,1,111\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.103ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[241,238,235,91,240,193,8,178,96,228,139,171,51,120,215,18,211,238,19,113,47,192,140,138,185,90,135,135,107,206,140,125],[3,125,117,141,37,167,245,32,142,177,195,70,61,90,29,14,167,69,62,109,59,77,193,106,233,3,145,187,232,217,18,169],[42,245,243,16,104,51,178,159,159,67,2,126,28,24,208,161,144,32,60,102,179,58,109,140,67,88,66,82,16,129,4,13],[107,239,79,121,193,248,102,7,38,19,131,69,44,147,64,91,103,96,198,97,249,81,121,50,66,85,192,236,146,184,212,135],[196,61,210,197,156,135,16,226,102,203,159,203,148,212,39,81,118,38,111,5,212,121,106,239,122,209,36,134,94,53,152,255]]",
              "sol": "[bytes(abi.encode(\"241,238,235,91,240,193,8,178,96,228,139,171,51,120,215,18,211,238,19,113,47,192,140,138,185,90,135,135,107,206,140,125\")),bytes(abi.encode(\"3,125,117,141,37,167,245,32,142,177,195,70,61,90,29,14,167,69,62,109,59,77,193,106,233,3,145,187,232,217,18,169\")),bytes(abi.encode(\"42,245,243,16,104,51,178,159,159,67,2,126,28,24,208,161,144,32,60,102,179,58,109,140,67,88,66,82,16,129,4,13\")),bytes(abi.encode(\"107,239,79,121,193,248,102,7,38,19,131,69,44,147,64,91,103,96,198,97,249,81,121,50,66,85,192,236,146,184,212,135\")),bytes(abi.encode(\"196,61,210,197,156,135,16,226,102,203,159,203,148,212,39,81,118,38,111,5,212,121,106,239,122,209,36,134,94,53,152,255\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.105ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[185,163,157,171,84,132,218,69,43,145,184,244,29,182,59,133,89,182,39,36,247,44,133,151,226,208,71,131,56,239,183,81],[131,157,138,55,42,100,244,6,69,195,207,158,131,122,217,236,99,133,189,177,245,92,217,137,202,171,65,201,81,101,151,218],[70,205,29,213,218,12,99,78,208,225,235,226,138,66,167,83,208,160,93,194,233,64,57,95,24,132,72,50,185,67,133,74],[193,46,59,211,72,38,131,239,90,144,38,43,205,230,222,47,116,110,104,94,19,1,168,122,44,224,40,216,233,46,66,37],[64,177,15,182,32,39,199,140,52,30,180,30,76,150,101,138,155,54,16,220,93,13,109,112,162,178,93,161,103,228,218,10]]",
              "sol": "[bytes(abi.encode(\"185,163,157,171,84,132,218,69,43,145,184,244,29,182,59,133,89,182,39,36,247,44,133,151,226,208,71,131,56,239,183,81\")),bytes(abi.encode(\"131,157,138,55,42,100,244,6,69,195,207,158,131,122,217,236,99,133,189,177,245,92,217,137,202,171,65,201,81,101,151,218\")),bytes(abi.encode(\"70,205,29,213,218,12,99,78,208,225,235,226,138,66,167,83,208,160,93,194,233,64,57,95,24,132,72,50,185,67,133,74\")),bytes(abi.encode(\"193,46,59,211,72,38,131,239,90,144,38,43,205,230,222,47,116,110,104,94,19,1,168,122,44,224,40,216,233,46,66,37\")),bytes(abi.encode(\"64,177,15,182,32,39,199,140,52,30,180,30,76,150,101,138,155,54,16,220,93,13,109,112,162,178,93,161,103,228,218,10\"))]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.107ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "[[132,11,135,34,224,168,245,92,218,112,217,63,9,134,217,23,200,169,104,157,159,0,80,67,246,104,225,94,107,115,91,46],[183,69,27,192,84,122,241,83,197,157,27,30,2,28,22,73,141,191,132,222,181,253,39,181,60,43,8,131,118,130,15,55],[198,97,234,68,184,215,23,251,221,77,25,2,129,29,237,97,250,185,94,224,149,192,201,137,0,71,235,6,229,12,234,100],[169,23,117,56,49,152,19,16,8,73,188,64,104,115,102,79,84,157,83,222,46,209,60,70,136,203,230,10,250,93,194,99],[246,213,69,61,224,142,133,208,169,162,197,126,22,94,74,147,154,118,161,139,13,133,188,142,136,232,128,41,153,150,182,30]]",
              "sol": "[bytes(abi.encode(\"132,11,135,34,224,168,245,92,218,112,217,63,9,134,217,23,200,169,104,157,159,0,80,67,246,104,225,94,107,115,91,46\")),bytes(abi.encode(\"183,69,27,192,84,122,241,83,197,157,27,30,2,28,22,73,141,191,132,222,181,253,39,181,60,43,8,131,118,130,15,55\")),bytes(abi.encode(\"198,97,234,68,184,215,23,251,221,77,25,2,129,29,237,97,250,185,94,224,149,192,201,137,0,71,235,6,229,12,234,100\")),bytes(abi.encode(\"169,23,117,56,49,152,19,16,8,73,188,64,104,115,102,79,84,157,83,222,46,209,60,70,136,203,230,10,250,93,194,99\")),bytes(abi.encode(\"246,213,69,61,224,142,133,208,169,162,197,126,22,94,74,147,154,118,161,139,13,133,188,142,136,232,128,41,153,150,182,30\"))]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.109ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[113]",
              "sol": "bytes1(\"113\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.109ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.110ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.110ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.110ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.111ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.111ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.111ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.112ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.112ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"78g949\"",
              "sol": "\"78g949\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.112ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"gwofoa\"",
              "sol": "\"gwofoa\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.113ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"78g949\"",
              "sol": "\"78g949\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"me8tm\"",
              "sol": "\"me8tm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.113ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.113ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.114ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.115ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"78g949\"",
              "sol": "\"78g949\""
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.116ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.116ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"z59u3t\",\"ETH\",\"trade.totalPrice\",\"8s1ugh\",\"me8tm\",\"UsesExample\",\"58w66n\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"z59u3t\"),string(\"ETH\"),string(\"trade.totalPrice\"),string(\"8s1ugh\"),string(\"me8tm\"),string(\"UsesExample\"),string(\"58w66n\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.117ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[120,12,158,73,253,33,73,5,213,118,156,129,60,151,25,32,243,249,223,242,172,85,49,45,227,175,88,128,150,148,196,250],[87,201,141,42,248,202,170,128,70,123,99,0,143,196,20,232,248,244,165,2,208,77,174,154,42,238,250,106,167,164,149,82],[220,32,148,88,13,122,114,190,220,56,134,41,151,43,210,202,59,114,254,226,7,136,55,109,9,154,127,138,21,244,116,192]]",
              "sol": "[bytes(abi.encode(\"120,12,158,73,253,33,73,5,213,118,156,129,60,151,25,32,243,249,223,242,172,85,49,45,227,175,88,128,150,148,196,250\")),bytes(abi.encode(\"87,201,141,42,248,202,170,128,70,123,99,0,143,196,20,232,248,244,165,2,208,77,174,154,42,238,250,106,167,164,149,82\")),bytes(abi.encode(\"220,32,148,88,13,122,114,190,220,56,134,41,151,43,210,202,59,114,254,226,7,136,55,109,9,154,127,138,21,244,116,192\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.117ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.118ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[37,117,66,177,43,109,36,43,181,19,0,234,127,42,118,252,9,99,136,1,164,161,146,64,23,59,112,80,243,218,56,217]",
              "sol": "stringToBytes32(\"37,117,66,177,43,109,36,43,181,19,0,234,127,42,118,252,9,99,136,1,164,161,146,64,23,59,112,80,243,218,56,217\")"
            },
            {
              "js": "[251,91,189,21,99,249,217,83,193,86,139,66,158,241,126,51,204,142,76,96,252,98,24,205,242,20,252,115,13,203,155,128]",
              "sol": "stringToBytes32(\"251,91,189,21,99,249,217,83,193,86,139,66,158,241,126,51,204,142,76,96,252,98,24,205,242,20,252,115,13,203,155,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.118ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[175,91,46,147,93,11,123,170,139,230,58,231,217,128,253,204,118,201,215,245,109,35,244,117,151,47,94,71,131,111,74,182]",
              "sol": "stringToBytes32(\"175,91,46,147,93,11,123,170,139,230,58,231,217,128,253,204,118,201,215,245,109,35,244,117,151,47,94,71,131,111,74,182\")"
            },
            {
              "js": "[41,141,121,12,232,138,111,31,157,39,245,235,242,39,148,243,164,161,167,161,210,140,88,109,144,82,139,253,67,17,38,146]",
              "sol": "abi.encode(\"41,141,121,12,232,138,111,31,157,39,245,235,242,39,148,243,164,161,167,161,210,140,88,109,144,82,139,253,67,17,38,146\")"
            },
            {
              "js": "[79,146,197,69,58,17,63,184,200,34,140,59,212,127,145,56,38,17,72,235,178,49,184,157,222,241,6,191,123,190,96,85]",
              "sol": "abi.encode(\"79,146,197,69,58,17,63,184,200,34,140,59,212,127,145,56,38,17,72,235,178,49,184,157,222,241,6,191,123,190,96,85\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.119ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[71,141,1,115,222,104,120,132,79,251,198,197,18,69,76,233,73,97,116,67,220,45,128,107,199,150,91,59,165,15,204,213]",
              "sol": "abi.encode(\"71,141,1,115,222,104,120,132,79,251,198,197,18,69,76,233,73,97,116,67,220,45,128,107,199,150,91,59,165,15,204,213\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[5,200,22,31,111,65,109,165,64,241,21,66,154,88,137,174,208,88,146,85,212,243,198,67,144,44,191,207,112,234,123,9]",
              "sol": "abi.encode(\"5,200,22,31,111,65,109,165,64,241,21,66,154,88,137,174,208,88,146,85,212,243,198,67,144,44,191,207,112,234,123,9\")"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.120ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[238,212,0,185,26,55,104,125,109,15,190,58,131,252,212,5,40,15,23,107,58,3,157,149,98,247,161,73,14,173,48,238]",
              "sol": "stringToBytes32(\"238,212,0,185,26,55,104,125,109,15,190,58,131,252,212,5,40,15,23,107,58,3,157,149,98,247,161,73,14,173,48,238\")"
            },
            {
              "js": "\"t61cho\"",
              "sol": "\"t61cho\""
            },
            {
              "js": "[214,38,166,196,192,87,55,202,50,224,220,116,73,248,170,203,49,101,79,101,183,120,138,216,21,214,184,239,89,22,203,252]",
              "sol": "abi.encode(\"214,38,166,196,192,87,55,202,50,224,220,116,73,248,170,203,49,101,79,101,183,120,138,216,21,214,184,239,89,22,203,252\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[164,0,73,168,61,72,54,174,53,250,203,45,211,255,211,36,13,218,50,113,92,170,224,252,152,203,92,221,247,192,57,68]",
              "sol": "stringToBytes32(\"164,0,73,168,61,72,54,174,53,250,203,45,211,255,211,36,13,218,50,113,92,170,224,252,152,203,92,221,247,192,57,68\")"
            },
            {
              "js": "\"gwofoa\"",
              "sol": "\"gwofoa\""
            },
            {
              "js": "[135,205,136,147,35,134,139,47,154,62,23,101,170,74,128,74,71,67,25,17,228,238,208,146,35,0,236,186,208,52,32,147]",
              "sol": "abi.encode(\"135,205,136,147,35,134,139,47,154,62,23,101,170,74,128,74,71,67,25,17,228,238,208,146,35,0,236,186,208,52,32,147\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.121ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[47,9,159,11,233,34,242,212,110,92,249,243,185,22,83,169,24,26,2,202,254,174,135,55,8,58,232,35,3,132,142,114]",
              "sol": "stringToBytes32(\"47,9,159,11,233,34,242,212,110,92,249,243,185,22,83,169,24,26,2,202,254,174,135,55,8,58,232,35,3,132,142,114\")"
            },
            {
              "js": "[78,77,196,121,223,99,170,223,193,199,60,187,113,120,18,88,83,9,220,107,67,221,248,111,172,223,207,251,30,155,208,5]",
              "sol": "abi.encode(\"78,77,196,121,223,99,170,223,193,199,60,187,113,120,18,88,83,9,220,107,67,221,248,111,172,223,207,251,30,155,208,5\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[47,9,159,11,233,34,242,212,110,92,249,243,185,22,83,169,24,26,2,202,254,174,135,55,8,58,232,35,3,132,142,114]",
                "sol": "stringToBytes32(\"47,9,159,11,233,34,242,212,110,92,249,243,185,22,83,169,24,26,2,202,254,174,135,55,8,58,232,35,3,132,142,114\")"
              },
              {
                "js": "[96,171,177,192,32,19,253,18,133,97,62,77,178,250,146,190,88,54,241,209,184,69,162,135,42,112,26,133,197,19,232,45,253]",
                "sol": "bytes33(\"96,171,177,192,32,19,253,18,133,97,62,77,178,250,146,190,88,54,241,209,184,69,162,135,42,112,26,133,197,19,232,45,253\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.122ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[127,58,156,110,19,175,183,124,130,147,177,176,123,213,58,242,149,207,107,186,60,249,182,226,253,145,18,21,224,82,35,54]",
              "sol": "abi.encode(\"127,58,156,110,19,175,183,124,130,147,177,176,123,213,58,242,149,207,107,186,60,249,182,226,253,145,18,21,224,82,35,54\")"
            },
            {
              "js": "[243,69,58,94,104,10,219,153,70,153,5,17,141,152,5,117,192,15,121,139,20,243,95,163,198,145,202,192,189,242,92,22]",
              "sol": "stringToBytes32(\"243,69,58,94,104,10,219,153,70,153,5,17,141,152,5,117,192,15,121,139,20,243,95,163,198,145,202,192,189,242,92,22\")"
            },
            {
              "js": "[168,201,249,26,148,161,74,105,194,9,20,71,106,150,243,210,242,176,169,55,10,232,30,96,244,190,85,0,38,229,250,157]",
              "sol": "abi.encode(\"168,201,249,26,148,161,74,105,194,9,20,71,106,150,243,210,242,176,169,55,10,232,30,96,244,190,85,0,38,229,250,157\")"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[39,177,70,189,10,137,184,169,138,112,66,201,145,241,131,12,254,4,6,200,118,85,10,233,166,217,117,162,49,188,222,252]",
              "sol": "abi.encode(\"39,177,70,189,10,137,184,169,138,112,66,201,145,241,131,12,254,4,6,200,118,85,10,233,166,217,117,162,49,188,222,252\")"
            },
            {
              "js": "[101,201,184,65,98,121,29,17,125,54,171,229,176,145,217,22,203,110,36,35,5,182,151,199,223,38,157,7,203,59,191,29]",
              "sol": "stringToBytes32(\"101,201,184,65,98,121,29,17,125,54,171,229,176,145,217,22,203,110,36,35,5,182,151,199,223,38,157,7,203,59,191,29\")"
            },
            {
              "js": "[175,73,10,112,65,209,85,40,87,27,14,155,114,9,17,161,193,16,211,86,120,251,48,174,240,156,4,118,199,46,112,193]",
              "sol": "abi.encode(\"175,73,10,112,65,209,85,40,87,27,14,155,114,9,17,161,193,16,211,86,120,251,48,174,240,156,4,118,199,46,112,193\")"
            },
            {
              "js": "\"gwofoa\"",
              "sol": "\"gwofoa\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[0,192,169,195,16,165,157,116,190,215,73,146,149,111,232,149,86,41,8,187,130,95,164,131,29,111,23,34,186,91,134,207]",
              "sol": "abi.encode(\"0,192,169,195,16,165,157,116,190,215,73,146,149,111,232,149,86,41,8,187,130,95,164,131,29,111,23,34,186,91,134,207\")"
            },
            {
              "js": "[66,112,220,229,111,230,40,3,67,2,149,108,205,253,231,47,98,27,112,78,251,1,248,11,232,196,80,177,61,12,225,224]",
              "sol": "stringToBytes32(\"66,112,220,229,111,230,40,3,67,2,149,108,205,253,231,47,98,27,112,78,251,1,248,11,232,196,80,177,61,12,225,224\")"
            },
            {
              "js": "[93,68,18,178,30,105,240,47,209,169,96,90,41,129,115,142,94,127,87,52,135,87,108,142,124,214,198,159,158,46,167,95]",
              "sol": "abi.encode(\"93,68,18,178,30,105,240,47,209,169,96,90,41,129,115,142,94,127,87,52,135,87,108,142,124,214,198,159,158,46,167,95\")"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[220,105,100,20,75,242,216,194,16,16,131,33,83,21,246,169,182,15,97,199,185,76,137,58,60,14,1,133,113,29,112,92]",
              "sol": "abi.encode(\"220,105,100,20,75,242,216,194,16,16,131,33,83,21,246,169,182,15,97,199,185,76,137,58,60,14,1,133,113,29,112,92\")"
            },
            {
              "js": "[144,13,111,186,87,232,67,55,27,199,46,133,122,88,138,198,240,66,236,218,180,164,161,219,8,147,91,122,178,180,7,52]",
              "sol": "stringToBytes32(\"144,13,111,186,87,232,67,55,27,199,46,133,122,88,138,198,240,66,236,218,180,164,161,219,8,147,91,122,178,180,7,52\")"
            },
            {
              "js": "[243,86,46,10,223,215,206,34,100,161,76,201,34,78,153,201,19,51,121,121,66,45,64,83,123,127,76,32,115,13,91,41]",
              "sol": "abi.encode(\"243,86,46,10,223,215,206,34,100,161,76,201,34,78,153,201,19,51,121,121,66,45,64,83,123,127,76,32,115,13,91,41\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[114,252,69,116,24,134,156,31,214,248,111,5,132,25,229,90,229,155,152,97,140,64,14,49,101,109,123,124,197,148,114,255]",
              "sol": "abi.encode(\"114,252,69,116,24,134,156,31,214,248,111,5,132,25,229,90,229,155,152,97,140,64,14,49,101,109,123,124,197,148,114,255\")"
            },
            {
              "js": "[206,210,62,191,51,159,246,54,228,0,4,197,248,35,113,181,225,92,3,52,255,216,215,8,115,64,122,113,18,255,111,83]",
              "sol": "stringToBytes32(\"206,210,62,191,51,159,246,54,228,0,4,197,248,35,113,181,225,92,3,52,255,216,215,8,115,64,122,113,18,255,111,83\")"
            },
            {
              "js": "[165,101,79,198,178,237,244,239,2,205,93,147,54,227,213,224,239,130,204,41,215,106,99,238,213,3,215,190,83,152,246,7]",
              "sol": "abi.encode(\"165,101,79,198,178,237,244,239,2,205,93,147,54,227,213,224,239,130,204,41,215,106,99,238,213,3,215,190,83,152,246,7\")"
            },
            {
              "js": "\"qxjgln\"",
              "sol": "\"qxjgln\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[247,112,76,67,126,91,190,72,94,12,109,215,69,238,153,154,12,89,99,29,23,251,103,25,152,231,129,4,114,60,182,151]",
              "sol": "abi.encode(\"247,112,76,67,126,91,190,72,94,12,109,215,69,238,153,154,12,89,99,29,23,251,103,25,152,231,129,4,114,60,182,151\")"
            },
            {
              "js": "[145,166,169,55,10,198,163,201,225,156,135,212,43,109,114,157,231,234,243,191,150,192,232,144,39,96,249,238,214,245,125,65]",
              "sol": "stringToBytes32(\"145,166,169,55,10,198,163,201,225,156,135,212,43,109,114,157,231,234,243,191,150,192,232,144,39,96,249,238,214,245,125,65\")"
            },
            {
              "js": "[231,164,239,126,23,253,66,183,21,223,169,121,156,220,69,250,137,12,88,202,155,19,14,24,166,74,231,194,219,226,57,123]",
              "sol": "abi.encode(\"231,164,239,126,23,253,66,183,21,223,169,121,156,220,69,250,137,12,88,202,155,19,14,24,166,74,231,194,219,226,57,123\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[151,98,106,88,60,222,53,237,10,151,69,5,158,204,155,214,191,249,232,238,96,218,58,10,9,169,225,80,141,31,55,130]",
              "sol": "abi.encode(\"151,98,106,88,60,222,53,237,10,151,69,5,158,204,155,214,191,249,232,238,96,218,58,10,9,169,225,80,141,31,55,130\")"
            },
            {
              "js": "[64,97,196,171,125,180,210,179,115,174,170,8,103,29,202,192,106,116,94,47,215,213,99,32,227,184,52,132,217,131,192,99]",
              "sol": "stringToBytes32(\"64,97,196,171,125,180,210,179,115,174,170,8,103,29,202,192,106,116,94,47,215,213,99,32,227,184,52,132,217,131,192,99\")"
            },
            {
              "js": "[80,90,221,5,131,181,27,237,134,53,79,132,40,245,139,153,163,139,90,94,183,63,146,115,165,203,230,43,238,15,131,92]",
              "sol": "abi.encode(\"80,90,221,5,131,181,27,237,134,53,79,132,40,245,139,153,163,139,90,94,183,63,146,115,165,203,230,43,238,15,131,92\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[121,13,73,82,63,179,158,125,118,4,123,91,91,199,183,225,223,108,213,72,58,95,253,59,201,195,79,25,120,234,231,211]",
              "sol": "abi.encode(\"121,13,73,82,63,179,158,125,118,4,123,91,91,199,183,225,223,108,213,72,58,95,253,59,201,195,79,25,120,234,231,211\")"
            },
            {
              "js": "[8,42,203,176,229,38,32,29,131,5,164,68,129,134,254,71,6,222,30,235,147,246,127,153,84,23,196,2,40,247,214,69]",
              "sol": "stringToBytes32(\"8,42,203,176,229,38,32,29,131,5,164,68,129,134,254,71,6,222,30,235,147,246,127,153,84,23,196,2,40,247,214,69\")"
            },
            {
              "js": "[97,250,63,14,16,162,117,167,96,210,98,82,56,160,130,45,39,202,134,2,195,26,37,239,17,96,198,28,105,51,15,8]",
              "sol": "abi.encode(\"97,250,63,14,16,162,117,167,96,210,98,82,56,160,130,45,39,202,134,2,195,26,37,239,17,96,198,28,105,51,15,8\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.130ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[192,81,165,15,114,39,215,119,74,19,191,214,42,97,160,171,160,199,100,153,123,171,89,53,7,115,136,102,235,173,51,127]",
              "sol": "abi.encode(\"192,81,165,15,114,39,215,119,74,19,191,214,42,97,160,171,160,199,100,153,123,171,89,53,7,115,136,102,235,173,51,127\")"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "[234,125,93,63,198,207,16,98,27,82,189,30,26,145,102,243,151,81,145,168,183,233,82,143,5,207,97,0,214,234,81,136]",
              "sol": "abi.encode(\"234,125,93,63,198,207,16,98,27,82,189,30,26,145,102,243,151,81,145,168,183,233,82,143,5,207,97,0,214,234,81,136\")"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.130ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[7,164,207,166,135,109,101,72,235,94,170,40,53,61,139,137,171,248,94,217,110,6,165,43,33,30,8,231,171,208,92,134]",
              "sol": "stringToBytes32(\"7,164,207,166,135,109,101,72,235,94,170,40,53,61,139,137,171,248,94,217,110,6,165,43,33,30,8,231,171,208,92,134\")"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "[152,151,39,157,36,58,64,218,10,56,135,48,133,86,24,216,186,130,217,192,223,70,181,248,92,211,222,225,149,163,172,74]",
              "sol": "stringToBytes32(\"152,151,39,157,36,58,64,218,10,56,135,48,133,86,24,216,186,130,217,192,223,70,181,248,92,211,222,225,149,163,172,74\")"
            },
            {
              "js": "[121,157,53,60,237,2,70,0,199,116,113,244,37,71,22,143,203,223,160,45,26,223,147,166,121,148,90,11,240,195,1,151]",
              "sol": "stringToBytes32(\"121,157,53,60,237,2,70,0,199,116,113,244,37,71,22,143,203,223,160,45,26,223,147,166,121,148,90,11,240,195,1,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.131ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[83,55,53,244,57,82,254,147,67,224,32,5,166,253,135,35,101,136,20,4,139,160,175,26,159,209,162,147,232,239,36,109]",
              "sol": "stringToBytes32(\"83,55,53,244,57,82,254,147,67,224,32,5,166,253,135,35,101,136,20,4,139,160,175,26,159,209,162,147,232,239,36,109\")"
            },
            {
              "js": "[218,0,219,42,131,242,102,219,186,83,84,102,7,232,214,213,97,130,69,104,1,92,34,191,205,29,162,168,158,120,31,53,199,119,187,207,151,131,174,186,29,139,36,43,98,141,33,153,197,163,90,154,156,247,195,20,110,124,73,153,80,110,172,235,3,240,21,121,79,203,225,120,33,142,219,28,160,225,217,108,24,39,136,168,234,194,7,31,184,20,173,75,149,180,207,81,191,107,139,134,210,191,2,217,183,208,110,184,159,79,1,150,145,3,217,119,67,88,142,251,221,66,240,250,159,41,131,172,144,138,45,120,5,110,84,221,241,45,64,168,197,251,94,170,79,132,187,131,56,102,19,32,91,209,204,201,5,223,164,198,204,65,182,236,105,86,0,227,37,63,89,73,190,14,22,23,196,76,164,25,192,209,100,206,113,141,6,82,216,60,197,202,41,3,119,26,154,209,178,33,103,169,153,211,133,211,198,96,190,103,191,202,97,83,15,166,222,63,85,41,174,220,230,223,28,18,69,198,125,186,107,65,184,19,186,217,61,96,106,216,170,221,76,204,106,90,123,95,70,208,100,159,180,79]",
              "sol": "abi.encode(\"218,0,219,42,131,242,102,219,186,83,84,102,7,232,214,213,97,130,69,104,1,92,34,191,205,29,162,168,158,120,31,53,199,119,187,207,151,131,174,186,29,139,36,43,98,141,33,153,197,163,90,154,156,247,195,20,110,124,73,153,80,110,172,235,3,240,21,121,79,203,225,120,33,142,219,28,160,225,217,108,24,39,136,168,234,194,7,31,184,20,173,75,149,180,207,81,191,107,139,134,210,191,2,217,183,208,110,184,159,79,1,150,145,3,217,119,67,88,142,251,221,66,240,250,159,41,131,172,144,138,45,120,5,110,84,221,241,45,64,168,197,251,94,170,79,132,187,131,56,102,19,32,91,209,204,201,5,223,164,198,204,65,182,236,105,86,0,227,37,63,89,73,190,14,22,23,196,76,164,25,192,209,100,206,113,141,6,82,216,60,197,202,41,3,119,26,154,209,178,33,103,169,153,211,133,211,198,96,190,103,191,202,97,83,15,166,222,63,85,41,174,220,230,223,28,18,69,198,125,186,107,65,184,19,186,217,61,96,106,216,170,221,76,204,106,90,123,95,70,208,100,159,180,79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[198,1,61,77,97,35,3,81,16,46,33,112,178,81,120,225,109,166,69,144,144,202,116,230,34,156,207,64,231,115,49,37]",
              "sol": "stringToBytes32(\"198,1,61,77,97,35,3,81,16,46,33,112,178,81,120,225,109,166,69,144,144,202,116,230,34,156,207,64,231,115,49,37\")"
            },
            {
              "js": "[106,136,84,241,32,37,20,175,243,39,41,33,101,109,44,237,134,99,41,195,155,195,6,130,150,129,234,107,205,18,108,150,124,6,234,130,85,209,233,7,239,245,238,197,210,2,36,178,232,57,40,116,92,201,215,253,211,203,218,177,248,11,107,130,13]",
              "sol": "abi.encode(\"106,136,84,241,32,37,20,175,243,39,41,33,101,109,44,237,134,99,41,195,155,195,6,130,150,129,234,107,205,18,108,150,124,6,234,130,85,209,233,7,239,245,238,197,210,2,36,178,232,57,40,116,92,201,215,253,211,203,218,177,248,11,107,130,13\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.132ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.134ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.134ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.134ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.134ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.135ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.135ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.135ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.135ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.136ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.136ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.137ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.138ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.138ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.139ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.142ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.146ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[254,153,92,195,94,213,76,36,181,17,110,201,101,107,52,105,188,200,120,85,71,185,227,110,108,232,77,189,227,73,100,195]",
              "sol": "stringToBytes32(\"254,153,92,195,94,213,76,36,181,17,110,201,101,107,52,105,188,200,120,85,71,185,227,110,108,232,77,189,227,73,100,195\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[154,247,105,87,224,122,76,237,244,49,132,210,166,97,160,84,164,102,189,123,160,149,220,238,179,211,117,208,226,25,224,229]",
              "sol": "abi.encode(\"154,247,105,87,224,122,76,237,244,49,132,210,166,97,160,84,164,102,189,123,160,149,220,238,179,211,117,208,226,25,224,229\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.147ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.148ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.149ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.150ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[102,145,192,70,174,79,235,29,36,142,46,246,80,66,178,166,237,139,129,37,204,213,157,204,48,208,14,140,94,117,115,156]",
              "sol": "abi.encode(\"102,145,192,70,174,79,235,29,36,142,46,246,80,66,178,166,237,139,129,37,204,213,157,204,48,208,14,140,94,117,115,156\")"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "[195,181,175,30,20,6,144,245,151,18,194,131,247,136,205,180,88,48,188,162,194,57,247,62,115,224,243,178,107,166,174,48]",
              "sol": "stringToBytes32(\"195,181,175,30,20,6,144,245,151,18,194,131,247,136,205,180,88,48,188,162,194,57,247,62,115,224,243,178,107,166,174,48\")"
            },
            {
              "js": "[26,104,176,61,26,28,201,29,15,153,44,144,94,47,236,184,254,197,129,24,206,206,187,65,238,78,92,60,152,46,41,174]",
              "sol": "stringToBytes32(\"26,104,176,61,26,28,201,29,15,153,44,144,94,47,236,184,254,197,129,24,206,206,187,65,238,78,92,60,152,46,41,174\")"
            },
            {
              "js": "[80,117,102,66,194,42,62,232,245,121,75,101,151,104,119,9,3,199,71,29,247,220,63,234,26,236,131,202,148,138,254,35]",
              "sol": "stringToBytes32(\"80,117,102,66,194,42,62,232,245,121,75,101,151,104,119,9,3,199,71,29,247,220,63,234,26,236,131,202,148,138,254,35\")"
            },
            {
              "js": "[111,207,125,233,54,210,196,164,17,185,159,159,98,149,252,20,196,8,82,188,141,175,1,205,141,203,91,87,24,202,29,64]",
              "sol": "stringToBytes32(\"111,207,125,233,54,210,196,164,17,185,159,159,98,149,252,20,196,8,82,188,141,175,1,205,141,203,91,87,24,202,29,64\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.150ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.151ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.152ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.152ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.153ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.153ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.154ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.156ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "103",
                "sol": "103"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.158ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T20:45:34.161ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.162ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.162ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T20:45:34.164ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}