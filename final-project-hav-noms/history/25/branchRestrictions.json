,{
  "2020-11-13T22:08:45.100ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:11:03.504ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:11:39.494ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:11:56.652ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:12:14.082ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:12:31.314ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:12:48.554ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:13:05.946ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:13:23.357ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:13:41.538ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:13:59.301ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.243ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.247ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [97,155,38,250,5,105,115,132,248,82,101,238,150,83,161,74,84,65,44,254,66,181,44,218,147,108,16,4,54,203,92,29],\"capacity\": 17}",
              "sol": "Buffer.buffer(abi.encode(\"97,155,38,250,5,105,115,132,248,82,101,238,150,83,161,74,84,65,44,254,66,181,44,218,147,108,16,4,54,203,92,29\"),17)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.248ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [103,144,98,69,88,237,186,69,101,94,123,3,46,177,213,131,130,92,255,31,99,36,38,197,225,218,77,122,193,251,172,54],\"capacity\": 1025}",
              "sol": "Buffer.buffer(abi.encode(\"103,144,98,69,88,237,186,69,101,94,123,3,46,177,213,131,130,92,255,31,99,36,38,197,225,218,77,122,193,251,172,54\"),1025)"
            },
            {
              "js": "[248,165,71,155,18,112,89,38,174,103,160,72,66,121,5,61,45,109,139,146,107,76,47,250,118,37,14,123,232,203,249,97]",
              "sol": "abi.encode(\"248,165,71,155,18,112,89,38,174,103,160,72,66,121,5,61,45,109,139,146,107,76,47,250,118,37,14,123,232,203,249,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.248ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [26,100,78,166,153,77,76,53,191,124,109,65,184,62,166,162,182,102,251,169,50,33,48,2,0,209,49,14,152,6,109,147],\"capacity\": 47}",
              "sol": "Buffer.buffer(abi.encode(\"26,100,78,166,153,77,76,53,191,124,109,65,184,62,166,162,182,102,251,169,50,33,48,2,0,209,49,14,152,6,109,147\"),47)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.249ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [147,253,195,124,185,23,224,63,93,197,86,99,18,177,207,67,204,80,234,231,118,68,255,73,77,53,112,202,192,20,68,178],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"147,253,195,124,185,23,224,63,93,197,86,99,18,177,207,67,204,80,234,231,118,68,255,73,77,53,112,202,192,20,68,178\"),7)"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.252ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [167,92,20,72,206,173,77,208,81,208,25,84,190,177,44,121,28,96,70,223,254,113,201,8,133,237,248,228,110,25,231,67],\"capacity\": 1338}",
              "sol": "Buffer.buffer(abi.encode(\"167,92,20,72,206,173,77,208,81,208,25,84,190,177,44,121,28,96,70,223,254,113,201,8,133,237,248,228,110,25,231,67\"),1338)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.253ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [231,67,44,148,89,205,208,61,212,66,210,203,243,185,155,154,103,196,210,204,127,218,244,209,161,211,12,190,63,188,39,29],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"231,67,44,148,89,205,208,61,212,66,210,203,243,185,155,154,103,196,210,204,127,218,244,209,161,211,12,190,63,188,39,29\"),24)"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [169,106,208,169,87,153,155,128,96,112,59,173,157,3,145,116,131,149,238,169,88,34,239,16,168,24,79,14,79,183,243,190],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"169,106,208,169,87,153,155,128,96,112,59,173,157,3,145,116,131,149,238,169,88,34,239,16,168,24,79,14,79,183,243,190\"),1532892062)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.255ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [186,60,136,61,16,243,244,176,249,56,100,10,219,217,113,66,254,253,48,252,141,35,212,110,184,222,18,73,9,192,11,168],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"186,60,136,61,16,243,244,176,249,56,100,10,219,217,113,66,254,253,48,252,141,35,212,110,184,222,18,73,9,192,11,168\"),1532892062)"
            },
            {
              "js": "[241,180,42,122,72,30,170,235,119,71,75,185,32,112,19,72,23,82,145,11,7,110,237,188,198,233,209,99,195,232,84,98]",
              "sol": "abi.encode(\"241,180,42,122,72,30,170,235,119,71,75,185,32,112,19,72,23,82,145,11,7,110,237,188,198,233,209,99,195,232,84,98\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.256ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [208,31,192,91,88,2,243,63,12,168,171,62,212,165,220,184,136,25,88,38,211,243,156,14,62,177,118,154,208,216,219,207],\"capacity\": 63}",
              "sol": "Buffer.buffer(abi.encode(\"208,31,192,91,88,2,243,63,12,168,171,62,212,165,220,184,136,25,88,38,211,243,156,14,62,177,118,154,208,216,219,207\"),63)"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.257ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [219,74,216,74,192,194,11,141,26,127,214,175,28,61,71,207,64,81,35,60,211,238,103,247,100,64,195,65,52,193,26,205],\"capacity\": 254}",
              "sol": "Buffer.buffer(abi.encode(\"219,74,216,74,192,194,11,141,26,127,214,175,28,61,71,207,64,81,35,60,211,238,103,247,100,64,195,65,52,193,26,205\"),254)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.259ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [138,22,21,219,143,217,234,13,16,191,97,77,160,84,15,227,114,250,86,57,124,71,174,223,25,77,44,144,66,39,221,1],\"capacity\": 200000}",
              "sol": "Buffer.buffer(abi.encode(\"138,22,21,219,143,217,234,13,16,191,97,77,160,84,15,227,114,250,86,57,124,71,174,223,25,77,44,144,66,39,221,1\"),200000)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.259ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [230,39,194,102,93,153,16,49,139,44,156,153,49,165,232,8,71,125,65,163,242,138,225,203,60,246,212,166,89,179,10,124],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"230,39,194,102,93,153,16,49,139,44,156,153,49,165,232,8,71,125,65,163,242,138,225,203,60,246,212,166,89,179,10,124\"),257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.262ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.262ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.262ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.263ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.264ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.265ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "1023",
                "sol": "1023"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.265ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.266ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.267ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.267ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.270ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[69,133,76,78,157,96,151,96,223,244,156,193,160,121,236,24,138,54,47,234,0,66,203,216,41,201,124,184,199,4,224,8]",
              "sol": "stringToBytes32(\"69,133,76,78,157,96,151,96,223,244,156,193,160,121,236,24,138,54,47,234,0,66,203,216,41,201,124,184,199,4,224,8\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.271ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[153,250,49,76,51,43,224,139,98,186,167,239,29,103,54,253,27,33,248,27,37,216,15,129,234,110,7,102,123,101,79,105]",
              "sol": "stringToBytes32(\"153,250,49,76,51,43,224,139,98,186,167,239,29,103,54,253,27,33,248,27,37,216,15,129,234,110,7,102,123,101,79,105\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[58,169,224,212,232,195,224,55,195,234,10,215,73,198,56,235,84,61,255,213,10,44,200,155,41,62,69,14,85,50,153,70]",
              "sol": "abi.encode(\"58,169,224,212,232,195,224,55,195,234,10,215,73,198,56,235,84,61,255,213,10,44,200,155,41,62,69,14,85,50,153,70\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.321ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.322ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.322ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.323ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.323ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"7ftu88\"",
              "sol": "\"7ftu88\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.323ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.324ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.324ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.325ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"pb9s2g\"",
              "sol": "\"pb9s2g\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.325ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.326ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"pb9s2g\"",
              "sol": "\"pb9s2g\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.326ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.326ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"xdgfvd\"",
              "sol": "\"xdgfvd\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.327ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"xdgfvd\"",
              "sol": "\"xdgfvd\""
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.327ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"call updateEthPrice\",\"0\",\"call updateEthPrice\",\"\",\"RevertWithReason\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"call updateEthPrice\"),string(\"0\"),string(\"call updateEthPrice\"),string(\"\"),string(\"RevertWithReason\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.329ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"UsesExample\",\"trade.totalPrice\",\"P\",\"\\x19Ethereum Signed Message:\\n32\",\"UsesExample\",\"pb9s2g\",\"updateEthPrice called\"]",
              "sol": "[string(\"UsesExample\"),string(\"trade.totalPrice\"),string(\"P\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"UsesExample\"),string(\"pb9s2g\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.330ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"ETH\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"ETH\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.330ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"7ftu88\"",
              "sol": "\"7ftu88\""
            },
            {
              "js": "[\"xdgfvd\",\"IsLibrary\"]",
              "sol": "[string(\"xdgfvd\"),string(\"IsLibrary\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.331ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"pb9s2g\"]",
              "sol": "[string(\"pb9s2g\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.331ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"trade.totalPrice\"]",
              "sol": "[string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.332ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"ETH\"]",
              "sol": "[string(\"ETH\")]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.332ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"5dknu8\"]",
              "sol": "[string(\"5dknu8\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.333ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.333ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"call updateEthPrice\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.334ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"P\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"P\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.334ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"L\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\")]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.335ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"hy5ulp\"",
              "sol": "\"hy5ulp\""
            },
            {
              "js": "[\"L\",\"listingID arg\",\"IsLibrary\"]",
              "sol": "[string(\"L\"),string(\"listingID arg\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.335ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"updateEthPrice called\",\"UsesExample\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"UsesExample\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.336ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"IsLibrary\",\"xdgfvd\",\"pb9s2g\"]",
              "sol": "[string(\"IsLibrary\"),string(\"xdgfvd\"),string(\"pb9s2g\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.336ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"RevertWithReason\",\"\",\"Example\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"\"),string(\"Example\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.337ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"5dknu8\",\"3h5lm7\",\"xdgfvd\",\"trade.totalPrice\"]",
              "sol": "[string(\"5dknu8\"),string(\"3h5lm7\"),string(\"xdgfvd\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.337ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"call updateEthPrice\",\"Example\",\"updateEthPrice called\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"Example\"),string(\"updateEthPrice called\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.338ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"pb9s2g\",\"5dknu8\",\"updateEthPrice called\",\"0\"]",
              "sol": "[string(\"pb9s2g\"),string(\"5dknu8\"),string(\"updateEthPrice called\"),string(\"0\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.339ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"costUSD\",\"hy5ulp\",\"\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"costUSD\"),string(\"hy5ulp\"),string(\"\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.339ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"0\",\"L\",\"P\",\"\\x19Ethereum Signed Message:\\n32\",\"xlkqon\"]",
              "sol": "[string(\"0\"),string(\"L\"),string(\"P\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"xlkqon\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.340ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"pb9s2g\",\"xdgfvd\",\"\\x19Ethereum Signed Message:\\n32\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"pb9s2g\"),string(\"xdgfvd\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.341ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"L\",\"costUSD\",\"pb9s2g\",\"P\",\"ETH\"]",
              "sol": "[string(\"L\"),string(\"costUSD\"),string(\"pb9s2g\"),string(\"P\"),string(\"ETH\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.342ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"costUSD\",\"trade.totalPrice\",\"updateEthPrice called\",\"Oraclize query was sent, standing by for the answer...\",\"L\"]",
              "sol": "[string(\"costUSD\"),string(\"trade.totalPrice\"),string(\"updateEthPrice called\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"L\")]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.343ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[238,36,181,170,45,62,252,19,190,59,184,209,53,164,97,166,150,227,149,251,225,36,47,10,178,116,201,134,53,135,146,182],[55,128,151,119,225,10,229,85,208,207,220,86,179,148,73,60,174,118,42,95,36,235,96,224,168,84,169,144,53,175,95,230],[217,150,209,233,2,161,165,166,67,106,58,5,198,63,192,180,20,145,115,183,35,73,225,59,41,194,63,135,32,151,24,80]]",
              "sol": "[bytes(abi.encode(\"238,36,181,170,45,62,252,19,190,59,184,209,53,164,97,166,150,227,149,251,225,36,47,10,178,116,201,134,53,135,146,182\")),bytes(abi.encode(\"55,128,151,119,225,10,229,85,208,207,220,86,179,148,73,60,174,118,42,95,36,235,96,224,168,84,169,144,53,175,95,230\")),bytes(abi.encode(\"217,150,209,233,2,161,165,166,67,106,58,5,198,63,192,180,20,145,115,183,35,73,225,59,41,194,63,135,32,151,24,80\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.344ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"xlkqon\"",
              "sol": "\"xlkqon\""
            },
            {
              "js": "[[169,62,221,184,5,141,202,39,221,7,188,93,25,89,162,240,49,80,2,73,78,193,173,93,48,152,19,11,15,225,153,207]]",
              "sol": "[bytes(abi.encode(\"169,62,221,184,5,141,202,39,221,7,188,93,25,89,162,240,49,80,2,73,78,193,173,93,48,152,19,11,15,225,153,207\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.344ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[143,69,93,223,95,161,49,121,250,105,2,69,167,5,248,74,8,69,156,125,85,166,118,135,8,114,85,22,80,57,162,74],[206,18,58,190,0,168,176,254,244,165,93,25,26,37,239,198,82,45,92,33,145,150,129,253,150,84,43,179,233,43,79,40],[249,118,184,231,158,10,177,45,65,234,99,163,250,5,44,168,7,190,203,69,228,7,82,230,70,1,208,47,62,165,151,103],[24,79,5,134,60,51,14,17,172,132,132,215,28,32,160,176,193,119,5,12,217,202,205,86,85,121,50,189,199,217,62,108],[165,36,1,45,136,210,123,117,46,152,112,26,209,96,162,13,236,25,172,165,5,210,82,96,180,40,164,182,152,26,128,173]]",
              "sol": "[bytes(abi.encode(\"143,69,93,223,95,161,49,121,250,105,2,69,167,5,248,74,8,69,156,125,85,166,118,135,8,114,85,22,80,57,162,74\")),bytes(abi.encode(\"206,18,58,190,0,168,176,254,244,165,93,25,26,37,239,198,82,45,92,33,145,150,129,253,150,84,43,179,233,43,79,40\")),bytes(abi.encode(\"249,118,184,231,158,10,177,45,65,234,99,163,250,5,44,168,7,190,203,69,228,7,82,230,70,1,208,47,62,165,151,103\")),bytes(abi.encode(\"24,79,5,134,60,51,14,17,172,132,132,215,28,32,160,176,193,119,5,12,217,202,205,86,85,121,50,189,199,217,62,108\")),bytes(abi.encode(\"165,36,1,45,136,210,123,117,46,152,112,26,209,96,162,13,236,25,172,165,5,210,82,96,180,40,164,182,152,26,128,173\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.345ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[41,251,5,183,7,156,106,231,191,171,213,176,122,151,101,132,255,187,245,56,65,189,2,228,44,198,51,74,181,92,61,232],[188,61,195,140,143,7,78,226,89,113,57,184,97,6,232,162,50,178,11,188,232,47,252,228,144,240,5,168,1,76,90,20],[6,234,155,55,243,238,175,206,22,0,223,252,197,184,132,120,53,82,100,165,30,79,19,45,106,149,18,48,153,159,202,147],[57,60,214,130,165,76,191,28,13,178,199,96,133,253,195,61,83,36,156,227,229,91,54,195,217,26,79,151,73,85,73,101]]",
              "sol": "[bytes(abi.encode(\"41,251,5,183,7,156,106,231,191,171,213,176,122,151,101,132,255,187,245,56,65,189,2,228,44,198,51,74,181,92,61,232\")),bytes(abi.encode(\"188,61,195,140,143,7,78,226,89,113,57,184,97,6,232,162,50,178,11,188,232,47,252,228,144,240,5,168,1,76,90,20\")),bytes(abi.encode(\"6,234,155,55,243,238,175,206,22,0,223,252,197,184,132,120,53,82,100,165,30,79,19,45,106,149,18,48,153,159,202,147\")),bytes(abi.encode(\"57,60,214,130,165,76,191,28,13,178,199,96,133,253,195,61,83,36,156,227,229,91,54,195,217,26,79,151,73,85,73,101\"))]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.346ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[203,145,247,103,79,54,136,232,41,129,152,186,211,235,118,224,114,13,166,232,64,112,88,130,100,171,142,184,209,38,234,98]]",
              "sol": "[bytes(abi.encode(\"203,145,247,103,79,54,136,232,41,129,152,186,211,235,118,224,114,13,166,232,64,112,88,130,100,171,142,184,209,38,234,98\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.347ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[150,121,145,188,167,204,184,232,191,82,254,32,145,134,155,172,214,221,86,14,204,235,139,29,152,106,93,235,28,72,239,132]]",
              "sol": "[bytes(abi.encode(\"150,121,145,188,167,204,184,232,191,82,254,32,145,134,155,172,214,221,86,14,204,235,139,29,152,106,93,235,28,72,239,132\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.347ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[132,21,89,7,224,242,31,239,56,47,215,83,57,145,83,23,242,7,127,87,163,200,23,152,229,255,81,84,116,210,28,63]]",
              "sol": "[bytes(abi.encode(\"132,21,89,7,224,242,31,239,56,47,215,83,57,145,83,23,242,7,127,87,163,200,23,152,229,255,81,84,116,210,28,63\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.348ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[232,150,70,37,228,231,117,253,151,80,125,56,236,152,19,66,193,174,52,213,74,100,22,138,135,147,111,245,131,71,204,53]]",
              "sol": "[bytes(abi.encode(\"232,150,70,37,228,231,117,253,151,80,125,56,236,152,19,66,193,174,52,213,74,100,22,138,135,147,111,245,131,71,204,53\"))]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.349ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[30,181,131,208,45,64,174,180,19,194,198,44,82,116,58,231,223,176,14,206,71,133,30,89,146,133,173,143,218,148,186,247],[150,196,195,218,186,236,92,3,38,98,129,35,15,50,243,172,50,175,49,119,27,66,186,246,17,196,126,71,240,71,25,118]]",
              "sol": "[bytes(abi.encode(\"30,181,131,208,45,64,174,180,19,194,198,44,82,116,58,231,223,176,14,206,71,133,30,89,146,133,173,143,218,148,186,247\")),bytes(abi.encode(\"150,196,195,218,186,236,92,3,38,98,129,35,15,50,243,172,50,175,49,119,27,66,186,246,17,196,126,71,240,71,25,118\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.350ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[4,13,192,84,103,146,105,248,253,76,128,147,54,29,89,129,61,168,246,209,186,103,101,104,166,252,144,7,54,44,146,90],[35,154,169,186,120,49,228,22,157,245,96,233,186,103,90,72,108,102,40,82,5,111,21,37,111,147,77,10,208,125,161,120]]",
              "sol": "[bytes(abi.encode(\"4,13,192,84,103,146,105,248,253,76,128,147,54,29,89,129,61,168,246,209,186,103,101,104,166,252,144,7,54,44,146,90\")),bytes(abi.encode(\"35,154,169,186,120,49,228,22,157,245,96,233,186,103,90,72,108,102,40,82,5,111,21,37,111,147,77,10,208,125,161,120\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.351ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"xdgfvd\"",
              "sol": "\"xdgfvd\""
            },
            {
              "js": "[[212,19,231,233,77,66,200,234,98,155,207,227,30,234,230,19,13,38,98,23,81,254,158,107,134,66,81,40,137,133,237,53],[103,137,101,119,11,5,75,110,53,196,108,230,130,230,26,151,127,7,107,95,105,143,204,101,227,132,26,152,145,2,150,166]]",
              "sol": "[bytes(abi.encode(\"212,19,231,233,77,66,200,234,98,155,207,227,30,234,230,19,13,38,98,23,81,254,158,107,134,66,81,40,137,133,237,53\")),bytes(abi.encode(\"103,137,101,119,11,5,75,110,53,196,108,230,130,230,26,151,127,7,107,95,105,143,204,101,227,132,26,152,145,2,150,166\"))]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.352ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[248,249,11,204,103,47,41,141,131,244,87,114,142,101,36,136,221,137,82,166,195,254,53,8,172,150,117,114,123,182,30,176],[177,255,17,46,19,158,164,143,149,161,97,205,253,183,122,86,180,115,240,147,138,109,107,20,242,50,206,210,55,255,158,4]]",
              "sol": "[bytes(abi.encode(\"248,249,11,204,103,47,41,141,131,244,87,114,142,101,36,136,221,137,82,166,195,254,53,8,172,150,117,114,123,182,30,176\")),bytes(abi.encode(\"177,255,17,46,19,158,164,143,149,161,97,205,253,183,122,86,180,115,240,147,138,109,107,20,242,50,206,210,55,255,158,4\"))]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.353ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[83,110,183,30,229,52,153,198,215,140,117,184,233,109,43,117,134,124,230,74,67,179,52,175,250,128,144,210,25,203,251,25],[117,109,225,149,113,151,26,114,218,198,121,248,173,169,82,83,60,72,186,97,182,102,21,60,177,109,181,158,232,238,230,43],[44,140,97,134,12,37,62,118,254,184,54,98,114,218,234,44,229,45,12,58,0,213,115,90,30,165,64,9,37,250,115,198]]",
              "sol": "[bytes(abi.encode(\"83,110,183,30,229,52,153,198,215,140,117,184,233,109,43,117,134,124,230,74,67,179,52,175,250,128,144,210,25,203,251,25\")),bytes(abi.encode(\"117,109,225,149,113,151,26,114,218,198,121,248,173,169,82,83,60,72,186,97,182,102,21,60,177,109,181,158,232,238,230,43\")),bytes(abi.encode(\"44,140,97,134,12,37,62,118,254,184,54,98,114,218,234,44,229,45,12,58,0,213,115,90,30,165,64,9,37,250,115,198\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.353ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[146,5,144,32,253,27,101,54,72,146,119,31,6,83,187,118,183,5,97,208,150,226,13,238,134,120,99,79,9,27,227,238],[176,5,203,1,113,216,46,56,70,24,3,163,218,77,212,250,163,168,239,186,30,215,75,116,255,237,71,172,155,54,30,7],[68,153,85,117,236,220,251,47,92,89,82,6,102,107,226,113,39,222,245,129,92,53,203,23,22,75,50,140,223,183,228,124]]",
              "sol": "[bytes(abi.encode(\"146,5,144,32,253,27,101,54,72,146,119,31,6,83,187,118,183,5,97,208,150,226,13,238,134,120,99,79,9,27,227,238\")),bytes(abi.encode(\"176,5,203,1,113,216,46,56,70,24,3,163,218,77,212,250,163,168,239,186,30,215,75,116,255,237,71,172,155,54,30,7\")),bytes(abi.encode(\"68,153,85,117,236,220,251,47,92,89,82,6,102,107,226,113,39,222,245,129,92,53,203,23,22,75,50,140,223,183,228,124\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.354ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"3h5lm7\"",
              "sol": "\"3h5lm7\""
            },
            {
              "js": "[[55,117,137,97,198,236,117,170,202,206,49,52,240,51,129,108,204,61,51,160,231,190,125,204,145,109,11,52,66,17,201,218],[162,136,162,184,166,179,250,43,37,109,99,95,177,210,18,48,129,45,14,70,168,91,190,135,49,179,175,96,7,150,64,151],[116,203,194,194,70,22,40,245,193,117,168,212,135,174,164,106,238,57,51,120,124,119,238,219,97,190,106,63,58,25,112,124]]",
              "sol": "[bytes(abi.encode(\"55,117,137,97,198,236,117,170,202,206,49,52,240,51,129,108,204,61,51,160,231,190,125,204,145,109,11,52,66,17,201,218\")),bytes(abi.encode(\"162,136,162,184,166,179,250,43,37,109,99,95,177,210,18,48,129,45,14,70,168,91,190,135,49,179,175,96,7,150,64,151\")),bytes(abi.encode(\"116,203,194,194,70,22,40,245,193,117,168,212,135,174,164,106,238,57,51,120,124,119,238,219,97,190,106,63,58,25,112,124\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.354ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[38,120,137,43,230,231,179,125,177,24,222,105,124,10,154,1,255,215,192,51,70,236,27,113,129,63,144,242,51,19,222,108],[122,0,43,79,81,180,228,67,7,3,162,250,88,160,101,138,160,111,209,141,201,106,176,101,181,160,186,100,116,223,127,222],[6,194,120,5,106,167,197,135,216,70,88,135,73,131,134,231,205,208,159,74,22,53,128,169,82,132,137,51,6,237,149,236]]",
              "sol": "[bytes(abi.encode(\"38,120,137,43,230,231,179,125,177,24,222,105,124,10,154,1,255,215,192,51,70,236,27,113,129,63,144,242,51,19,222,108\")),bytes(abi.encode(\"122,0,43,79,81,180,228,67,7,3,162,250,88,160,101,138,160,111,209,141,201,106,176,101,181,160,186,100,116,223,127,222\")),bytes(abi.encode(\"6,194,120,5,106,167,197,135,216,70,88,135,73,131,134,231,205,208,159,74,22,53,128,169,82,132,137,51,6,237,149,236\"))]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.355ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[211,190,212,237,82,36,48,80,204,8,137,72,111,243,63,33,63,50,159,74,24,74,117,215,249,161,4,13,73,28,21,224],[7,185,23,101,112,97,57,142,138,166,149,158,146,191,102,195,180,73,100,95,25,185,206,21,162,123,223,136,136,232,17,3],[91,113,231,247,105,102,105,140,46,119,120,65,100,39,242,27,218,74,36,33,134,26,92,120,9,43,6,127,237,57,15,151],[184,225,86,34,193,212,69,68,39,93,57,199,28,230,89,122,109,206,238,192,211,165,218,191,228,237,12,8,120,5,56,229]]",
              "sol": "[bytes(abi.encode(\"211,190,212,237,82,36,48,80,204,8,137,72,111,243,63,33,63,50,159,74,24,74,117,215,249,161,4,13,73,28,21,224\")),bytes(abi.encode(\"7,185,23,101,112,97,57,142,138,166,149,158,146,191,102,195,180,73,100,95,25,185,206,21,162,123,223,136,136,232,17,3\")),bytes(abi.encode(\"91,113,231,247,105,102,105,140,46,119,120,65,100,39,242,27,218,74,36,33,134,26,92,120,9,43,6,127,237,57,15,151\")),bytes(abi.encode(\"184,225,86,34,193,212,69,68,39,93,57,199,28,230,89,122,109,206,238,192,211,165,218,191,228,237,12,8,120,5,56,229\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.355ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[130,187,65,35,212,251,16,15,152,200,185,60,73,146,19,1,247,105,171,213,247,101,8,214,132,114,73,21,171,3,32,72],[140,19,56,120,227,155,182,204,126,29,129,145,190,146,222,137,57,91,190,167,242,169,18,76,253,185,97,60,61,169,119,248],[151,133,57,58,170,174,62,206,130,163,115,233,229,244,98,90,97,213,63,207,224,57,199,141,189,141,188,104,7,228,86,52],[224,169,119,7,27,24,235,0,83,182,18,53,26,38,113,190,46,157,81,164,216,40,143,127,32,49,169,137,207,10,241,105]]",
              "sol": "[bytes(abi.encode(\"130,187,65,35,212,251,16,15,152,200,185,60,73,146,19,1,247,105,171,213,247,101,8,214,132,114,73,21,171,3,32,72\")),bytes(abi.encode(\"140,19,56,120,227,155,182,204,126,29,129,145,190,146,222,137,57,91,190,167,242,169,18,76,253,185,97,60,61,169,119,248\")),bytes(abi.encode(\"151,133,57,58,170,174,62,206,130,163,115,233,229,244,98,90,97,213,63,207,224,57,199,141,189,141,188,104,7,228,86,52\")),bytes(abi.encode(\"224,169,119,7,27,24,235,0,83,182,18,53,26,38,113,190,46,157,81,164,216,40,143,127,32,49,169,137,207,10,241,105\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.356ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[119,69,14,60,182,191,104,102,254,61,84,7,248,71,217,45,154,173,244,203,95,118,78,128,152,134,65,139,173,63,138,166],[240,195,23,232,134,66,199,61,196,202,60,161,13,44,154,196,60,22,114,166,129,55,41,70,45,68,209,122,37,197,48,74],[125,0,191,231,22,159,244,125,18,79,117,125,177,255,241,190,235,182,196,149,17,166,253,238,36,194,182,4,127,200,149,98],[80,101,163,202,97,188,250,48,73,179,194,140,125,82,40,162,175,43,113,120,73,15,238,47,213,17,162,183,27,206,46,42]]",
              "sol": "[bytes(abi.encode(\"119,69,14,60,182,191,104,102,254,61,84,7,248,71,217,45,154,173,244,203,95,118,78,128,152,134,65,139,173,63,138,166\")),bytes(abi.encode(\"240,195,23,232,134,66,199,61,196,202,60,161,13,44,154,196,60,22,114,166,129,55,41,70,45,68,209,122,37,197,48,74\")),bytes(abi.encode(\"125,0,191,231,22,159,244,125,18,79,117,125,177,255,241,190,235,182,196,149,17,166,253,238,36,194,182,4,127,200,149,98\")),bytes(abi.encode(\"80,101,163,202,97,188,250,48,73,179,194,140,125,82,40,162,175,43,113,120,73,15,238,47,213,17,162,183,27,206,46,42\"))]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.357ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"2ewtjn\"",
              "sol": "\"2ewtjn\""
            },
            {
              "js": "[[26,203,43,82,122,164,206,207,27,176,19,196,9,0,21,135,28,109,205,81,9,99,231,65,115,81,57,232,99,198,23,240],[108,209,138,79,76,19,89,192,221,251,179,189,163,118,160,34,228,33,211,74,14,137,83,69,93,120,160,169,4,40,187,97],[245,253,181,63,80,159,133,18,119,28,134,246,129,168,141,30,254,163,121,133,153,128,76,73,236,247,136,8,112,2,253,46],[107,10,99,249,180,134,244,2,161,113,210,200,192,176,229,7,94,245,233,94,27,111,1,10,209,175,103,45,191,35,167,161]]",
              "sol": "[bytes(abi.encode(\"26,203,43,82,122,164,206,207,27,176,19,196,9,0,21,135,28,109,205,81,9,99,231,65,115,81,57,232,99,198,23,240\")),bytes(abi.encode(\"108,209,138,79,76,19,89,192,221,251,179,189,163,118,160,34,228,33,211,74,14,137,83,69,93,120,160,169,4,40,187,97\")),bytes(abi.encode(\"245,253,181,63,80,159,133,18,119,28,134,246,129,168,141,30,254,163,121,133,153,128,76,73,236,247,136,8,112,2,253,46\")),bytes(abi.encode(\"107,10,99,249,180,134,244,2,161,113,210,200,192,176,229,7,94,245,233,94,27,111,1,10,209,175,103,45,191,35,167,161\"))]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.357ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"pb9s2g\"",
              "sol": "\"pb9s2g\""
            },
            {
              "js": "[[28,94,104,164,143,27,165,217,5,33,198,247,36,170,50,204,142,98,58,67,221,47,46,62,126,26,255,243,110,21,119,175],[254,125,227,144,2,46,168,147,71,247,192,5,165,7,242,229,156,132,60,183,1,51,227,152,37,130,181,153,107,88,137,142],[99,178,105,183,220,150,155,132,233,213,115,115,186,125,207,249,238,229,225,119,159,180,56,36,84,144,155,67,252,167,24,62],[32,190,96,174,38,119,199,193,47,156,166,15,233,47,61,34,237,252,102,110,105,106,232,240,86,157,188,186,149,10,22,200],[72,112,194,158,77,104,75,50,29,34,141,208,201,155,60,61,99,206,2,7,4,148,24,239,178,100,255,245,236,176,128,232]]",
              "sol": "[bytes(abi.encode(\"28,94,104,164,143,27,165,217,5,33,198,247,36,170,50,204,142,98,58,67,221,47,46,62,126,26,255,243,110,21,119,175\")),bytes(abi.encode(\"254,125,227,144,2,46,168,147,71,247,192,5,165,7,242,229,156,132,60,183,1,51,227,152,37,130,181,153,107,88,137,142\")),bytes(abi.encode(\"99,178,105,183,220,150,155,132,233,213,115,115,186,125,207,249,238,229,225,119,159,180,56,36,84,144,155,67,252,167,24,62\")),bytes(abi.encode(\"32,190,96,174,38,119,199,193,47,156,166,15,233,47,61,34,237,252,102,110,105,106,232,240,86,157,188,186,149,10,22,200\")),bytes(abi.encode(\"72,112,194,158,77,104,75,50,29,34,141,208,201,155,60,61,99,206,2,7,4,148,24,239,178,100,255,245,236,176,128,232\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.358ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"pb9s2g\"",
              "sol": "\"pb9s2g\""
            },
            {
              "js": "[[101,17,183,149,202,36,43,158,251,1,34,235,176,177,142,121,102,10,59,114,145,78,4,243,6,12,109,131,33,190,59,109],[71,252,68,179,40,93,127,84,86,90,113,163,227,176,34,187,50,254,70,227,31,186,94,12,51,130,163,117,55,239,42,150],[99,252,167,98,217,17,191,8,234,17,100,62,101,205,4,242,233,106,37,241,83,207,159,140,32,114,40,154,215,58,42,187],[186,60,137,71,1,69,183,66,245,156,207,112,181,37,48,79,255,115,43,146,19,32,243,214,127,207,2,133,191,14,30,128],[164,46,214,178,166,139,241,60,127,95,8,29,223,84,215,101,33,243,24,152,91,134,185,181,55,28,126,48,44,116,250,69]]",
              "sol": "[bytes(abi.encode(\"101,17,183,149,202,36,43,158,251,1,34,235,176,177,142,121,102,10,59,114,145,78,4,243,6,12,109,131,33,190,59,109\")),bytes(abi.encode(\"71,252,68,179,40,93,127,84,86,90,113,163,227,176,34,187,50,254,70,227,31,186,94,12,51,130,163,117,55,239,42,150\")),bytes(abi.encode(\"99,252,167,98,217,17,191,8,234,17,100,62,101,205,4,242,233,106,37,241,83,207,159,140,32,114,40,154,215,58,42,187\")),bytes(abi.encode(\"186,60,137,71,1,69,183,66,245,156,207,112,181,37,48,79,255,115,43,146,19,32,243,214,127,207,2,133,191,14,30,128\")),bytes(abi.encode(\"164,46,214,178,166,139,241,60,127,95,8,29,223,84,215,101,33,243,24,152,91,134,185,181,55,28,126,48,44,116,250,69\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.359ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[218,255,2,29,55,204,136,146,128,141,200,115,12,248,24,184,148,111,116,64,81,202,181,196,229,79,189,63,212,83,36,240],[169,173,72,207,110,10,191,224,34,204,79,31,24,247,171,90,177,51,220,157,137,144,76,145,83,27,249,207,94,150,93,72],[254,251,15,24,220,46,106,178,169,145,147,185,195,34,195,81,224,1,122,243,90,182,48,242,109,100,67,198,168,164,145,146],[110,1,170,213,68,58,96,130,14,255,37,200,174,191,111,198,62,205,241,6,45,129,104,235,87,189,66,26,108,198,104,240],[5,46,79,195,11,24,3,198,120,99,74,145,231,239,25,236,219,218,14,181,96,178,153,208,220,184,169,79,84,111,77,152]]",
              "sol": "[bytes(abi.encode(\"218,255,2,29,55,204,136,146,128,141,200,115,12,248,24,184,148,111,116,64,81,202,181,196,229,79,189,63,212,83,36,240\")),bytes(abi.encode(\"169,173,72,207,110,10,191,224,34,204,79,31,24,247,171,90,177,51,220,157,137,144,76,145,83,27,249,207,94,150,93,72\")),bytes(abi.encode(\"254,251,15,24,220,46,106,178,169,145,147,185,195,34,195,81,224,1,122,243,90,182,48,242,109,100,67,198,168,164,145,146\")),bytes(abi.encode(\"110,1,170,213,68,58,96,130,14,255,37,200,174,191,111,198,62,205,241,6,45,129,104,235,87,189,66,26,108,198,104,240\")),bytes(abi.encode(\"5,46,79,195,11,24,3,198,120,99,74,145,231,239,25,236,219,218,14,181,96,178,153,208,220,184,169,79,84,111,77,152\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.360ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"dvkq5\"",
              "sol": "\"dvkq5\""
            },
            {
              "js": "[[171,19,225,226,36,231,203,207,188,64,213,45,19,61,48,86,88,96,1,188,71,52,222,32,139,240,136,27,40,98,203,89],[27,32,112,235,89,161,232,185,62,79,59,43,211,243,202,125,190,246,105,187,75,145,59,242,38,69,180,47,185,242,121,42],[166,74,61,173,3,68,199,46,118,120,137,89,158,137,13,120,15,43,116,236,79,213,138,145,11,240,25,212,228,37,106,14],[85,213,97,104,57,180,8,209,202,94,67,49,155,231,190,143,208,197,119,148,149,58,239,31,79,174,202,178,110,113,21,222],[56,96,102,116,94,207,233,127,181,243,143,76,236,101,223,38,9,20,20,224,34,251,193,120,171,69,242,113,197,250,216,57]]",
              "sol": "[bytes(abi.encode(\"171,19,225,226,36,231,203,207,188,64,213,45,19,61,48,86,88,96,1,188,71,52,222,32,139,240,136,27,40,98,203,89\")),bytes(abi.encode(\"27,32,112,235,89,161,232,185,62,79,59,43,211,243,202,125,190,246,105,187,75,145,59,242,38,69,180,47,185,242,121,42\")),bytes(abi.encode(\"166,74,61,173,3,68,199,46,118,120,137,89,158,137,13,120,15,43,116,236,79,213,138,145,11,240,25,212,228,37,106,14\")),bytes(abi.encode(\"85,213,97,104,57,180,8,209,202,94,67,49,155,231,190,143,208,197,119,148,149,58,239,31,79,174,202,178,110,113,21,222\")),bytes(abi.encode(\"56,96,102,116,94,207,233,127,181,243,143,76,236,101,223,38,9,20,20,224,34,251,193,120,171,69,242,113,197,250,216,57\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.361ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[193]",
              "sol": "bytes1(\"193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.361ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.361ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.362ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.362ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.362ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"3h5lm7\"",
              "sol": "\"3h5lm7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.363ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"7ftu88\"",
              "sol": "\"7ftu88\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.363ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"2ewtjn\"",
              "sol": "\"2ewtjn\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.363ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.364ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.364ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"xlkqon\"",
              "sol": "\"xlkqon\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.364ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"hy5ulp\"",
              "sol": "\"hy5ulp\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"hy5ulp\"",
              "sol": "\"hy5ulp\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.365ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.365ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"dvkq5\"",
              "sol": "\"dvkq5\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.367ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.368ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.369ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.370ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"\",\"costUSD\",\"UsesExample\"]",
              "sol": "[string(\"\"),string(\"costUSD\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.370ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[134,30,191,214,61,227,10,150,165,143,212,242,245,59,67,39,113,164,26,116,55,191,174,56,225,116,162,226,32,57,94,20],[194,254,47,19,253,25,187,80,188,82,1,9,80,11,230,35,67,220,192,69,227,17,160,162,76,131,25,246,201,110,158,51],[9,135,218,222,1,91,51,164,233,117,199,255,50,128,142,114,248,112,103,72,61,206,35,51,35,2,75,223,132,179,5,199],[156,229,13,89,197,230,149,144,115,120,171,47,21,232,129,212,139,48,143,248,187,247,63,117,28,244,69,168,8,191,215,247],[226,210,195,18,179,156,152,184,129,247,104,117,102,114,66,221,170,11,3,77,243,200,128,10,158,165,204,216,86,196,99,129]]",
              "sol": "[bytes(abi.encode(\"134,30,191,214,61,227,10,150,165,143,212,242,245,59,67,39,113,164,26,116,55,191,174,56,225,116,162,226,32,57,94,20\")),bytes(abi.encode(\"194,254,47,19,253,25,187,80,188,82,1,9,80,11,230,35,67,220,192,69,227,17,160,162,76,131,25,246,201,110,158,51\")),bytes(abi.encode(\"9,135,218,222,1,91,51,164,233,117,199,255,50,128,142,114,248,112,103,72,61,206,35,51,35,2,75,223,132,179,5,199\")),bytes(abi.encode(\"156,229,13,89,197,230,149,144,115,120,171,47,21,232,129,212,139,48,143,248,187,247,63,117,28,244,69,168,8,191,215,247\")),bytes(abi.encode(\"226,210,195,18,179,156,152,184,129,247,104,117,102,114,66,221,170,11,3,77,243,200,128,10,158,165,204,216,86,196,99,129\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.371ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.372ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[175,205,37,48,165,155,49,138,132,68,229,216,157,47,182,77,95,103,57,82,18,18,134,45,185,204,4,99,79,192,15,208]",
              "sol": "stringToBytes32(\"175,205,37,48,165,155,49,138,132,68,229,216,157,47,182,77,95,103,57,82,18,18,134,45,185,204,4,99,79,192,15,208\")"
            },
            {
              "js": "[120,140,13,50,86,38,115,36,187,170,227,46,176,66,62,172,70,91,17,54,117,10,167,122,99,122,229,160,208,166,41,45]",
              "sol": "stringToBytes32(\"120,140,13,50,86,38,115,36,187,170,227,46,176,66,62,172,70,91,17,54,117,10,167,122,99,122,229,160,208,166,41,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.372ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[253,226,225,172,62,39,32,187,6,250,35,227,181,119,54,178,14,18,249,54,158,166,131,199,171,228,78,199,156,134,109,80]",
              "sol": "stringToBytes32(\"253,226,225,172,62,39,32,187,6,250,35,227,181,119,54,178,14,18,249,54,158,166,131,199,171,228,78,199,156,134,109,80\")"
            },
            {
              "js": "[109,210,204,209,97,60,15,17,52,28,135,87,252,58,117,101,243,19,233,13,73,99,211,170,65,223,5,140,139,155,4,182]",
              "sol": "abi.encode(\"109,210,204,209,97,60,15,17,52,28,135,87,252,58,117,101,243,19,233,13,73,99,211,170,65,223,5,140,139,155,4,182\")"
            },
            {
              "js": "[205,189,4,100,84,242,145,100,24,212,215,157,12,71,181,111,204,123,215,224,88,165,77,158,246,106,20,69,39,68,68,143]",
              "sol": "abi.encode(\"205,189,4,100,84,242,145,100,24,212,215,157,12,71,181,111,204,123,215,224,88,165,77,158,246,106,20,69,39,68,68,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.373ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[241,220,72,78,179,25,64,88,95,81,88,38,116,131,12,161,29,244,25,248,179,222,129,242,11,112,184,226,29,163,23,173]",
              "sol": "abi.encode(\"241,220,72,78,179,25,64,88,95,81,88,38,116,131,12,161,29,244,25,248,179,222,129,242,11,112,184,226,29,163,23,173\")"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[10,117,117,233,109,59,119,210,145,189,153,13,64,92,233,156,2,60,141,170,205,138,94,129,31,228,62,170,158,254,75,198]",
              "sol": "abi.encode(\"10,117,117,233,109,59,119,210,145,189,153,13,64,92,233,156,2,60,141,170,205,138,94,129,31,228,62,170,158,254,75,198\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.374ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[185,159,96,57,193,26,84,190,20,17,116,159,242,96,58,218,223,138,63,139,221,60,133,187,110,146,128,107,234,223,68,101]",
              "sol": "stringToBytes32(\"185,159,96,57,193,26,84,190,20,17,116,159,242,96,58,218,223,138,63,139,221,60,133,187,110,146,128,107,234,223,68,101\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[33,216,190,159,31,67,173,121,251,246,133,136,129,159,207,135,81,108,131,208,28,17,207,90,146,244,184,106,229,207,82,44]",
              "sol": "abi.encode(\"33,216,190,159,31,67,173,121,251,246,133,136,129,159,207,135,81,108,131,208,28,17,207,90,146,244,184,106,229,207,82,44\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[5,118,53,193,149,253,235,89,24,187,245,177,92,77,119,111,222,235,223,180,81,252,99,146,42,46,220,174,249,17,147,234]",
              "sol": "stringToBytes32(\"5,118,53,193,149,253,235,89,24,187,245,177,92,77,119,111,222,235,223,180,81,252,99,146,42,46,220,174,249,17,147,234\")"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[10,152,23,102,170,125,194,97,158,149,112,25,116,153,125,224,196,54,171,189,200,239,188,101,99,134,130,121,231,6,209,185]",
              "sol": "abi.encode(\"10,152,23,102,170,125,194,97,158,149,112,25,116,153,125,224,196,54,171,189,200,239,188,101,99,134,130,121,231,6,209,185\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.375ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[155,197,67,221,47,242,223,170,153,12,200,5,205,245,19,150,170,199,177,159,205,83,174,0,243,172,23,227,240,218,170,80]",
              "sol": "stringToBytes32(\"155,197,67,221,47,242,223,170,153,12,200,5,205,245,19,150,170,199,177,159,205,83,174,0,243,172,23,227,240,218,170,80\")"
            },
            {
              "js": "[65,249,236,127,253,91,117,243,245,227,36,183,203,127,189,42,130,147,144,131,87,46,79,211,43,108,81,2,164,96,30,90]",
              "sol": "abi.encode(\"65,249,236,127,253,91,117,243,245,227,36,183,203,127,189,42,130,147,144,131,87,46,79,211,43,108,81,2,164,96,30,90\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[155,197,67,221,47,242,223,170,153,12,200,5,205,245,19,150,170,199,177,159,205,83,174,0,243,172,23,227,240,218,170,80]",
                "sol": "stringToBytes32(\"155,197,67,221,47,242,223,170,153,12,200,5,205,245,19,150,170,199,177,159,205,83,174,0,243,172,23,227,240,218,170,80\")"
              },
              {
                "js": "[15,232,19,63,35,219,252,87,219,197,43,198,176,159,229,206,238,27,172,184,11,78,209,217,233,218,212,105,11,114,190,59,75]",
                "sol": "bytes33(\"15,232,19,63,35,219,252,87,219,197,43,198,176,159,229,206,238,27,172,184,11,78,209,217,233,218,212,105,11,114,190,59,75\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.376ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[27,237,72,106,234,188,83,173,112,190,102,127,158,160,219,233,184,167,11,113,195,252,204,73,79,77,107,92,91,190,158,78]",
              "sol": "abi.encode(\"27,237,72,106,234,188,83,173,112,190,102,127,158,160,219,233,184,167,11,113,195,252,204,73,79,77,107,92,91,190,158,78\")"
            },
            {
              "js": "[190,25,192,156,237,118,151,242,7,85,230,153,217,13,131,60,196,26,240,40,82,171,255,100,31,150,70,187,25,123,45,10]",
              "sol": "stringToBytes32(\"190,25,192,156,237,118,151,242,7,85,230,153,217,13,131,60,196,26,240,40,82,171,255,100,31,150,70,187,25,123,45,10\")"
            },
            {
              "js": "[94,172,71,44,37,156,91,172,39,185,198,237,167,102,177,60,79,40,215,15,159,179,69,20,86,106,251,6,42,109,164,222]",
              "sol": "abi.encode(\"94,172,71,44,37,156,91,172,39,185,198,237,167,102,177,60,79,40,215,15,159,179,69,20,86,106,251,6,42,109,164,222\")"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[91,168,9,80,99,193,34,62,240,198,219,45,50,176,20,150,255,72,157,28,121,14,218,156,13,91,173,130,6,102,78,14]",
              "sol": "abi.encode(\"91,168,9,80,99,193,34,62,240,198,219,45,50,176,20,150,255,72,157,28,121,14,218,156,13,91,173,130,6,102,78,14\")"
            },
            {
              "js": "[50,69,138,253,234,227,129,155,53,94,32,99,23,39,202,16,185,152,195,209,206,76,230,43,107,228,117,93,171,224,176,117]",
              "sol": "stringToBytes32(\"50,69,138,253,234,227,129,155,53,94,32,99,23,39,202,16,185,152,195,209,206,76,230,43,107,228,117,93,171,224,176,117\")"
            },
            {
              "js": "[112,49,141,40,132,144,109,245,248,152,10,218,229,39,143,239,253,208,46,194,184,51,24,231,35,48,3,136,64,71,126,162]",
              "sol": "abi.encode(\"112,49,141,40,132,144,109,245,248,152,10,218,229,39,143,239,253,208,46,194,184,51,24,231,35,48,3,136,64,71,126,162\")"
            },
            {
              "js": "\"hy5ulp\"",
              "sol": "\"hy5ulp\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[46,251,34,104,108,145,215,74,51,30,127,186,18,192,240,236,179,118,1,159,222,149,219,18,145,21,112,54,29,173,164,4]",
              "sol": "abi.encode(\"46,251,34,104,108,145,215,74,51,30,127,186,18,192,240,236,179,118,1,159,222,149,219,18,145,21,112,54,29,173,164,4\")"
            },
            {
              "js": "[48,147,131,163,229,179,42,95,86,97,87,85,159,78,188,227,128,118,20,184,120,3,225,124,6,242,55,197,182,69,96,201]",
              "sol": "stringToBytes32(\"48,147,131,163,229,179,42,95,86,97,87,85,159,78,188,227,128,118,20,184,120,3,225,124,6,242,55,197,182,69,96,201\")"
            },
            {
              "js": "[193,254,26,156,106,158,174,164,77,111,52,103,236,149,207,254,80,44,80,111,156,148,77,129,234,111,98,140,169,139,42,188]",
              "sol": "abi.encode(\"193,254,26,156,106,158,174,164,77,111,52,103,236,149,207,254,80,44,80,111,156,148,77,129,234,111,98,140,169,139,42,188\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[14,117,146,194,133,186,207,77,218,132,74,87,226,97,212,140,48,190,176,157,28,238,46,197,169,23,197,36,135,251,125,35]",
              "sol": "abi.encode(\"14,117,146,194,133,186,207,77,218,132,74,87,226,97,212,140,48,190,176,157,28,238,46,197,169,23,197,36,135,251,125,35\")"
            },
            {
              "js": "[176,254,166,26,103,190,53,141,81,219,134,28,206,105,159,220,83,0,94,179,180,232,70,155,71,224,146,211,95,106,237,161]",
              "sol": "stringToBytes32(\"176,254,166,26,103,190,53,141,81,219,134,28,206,105,159,220,83,0,94,179,180,232,70,155,71,224,146,211,95,106,237,161\")"
            },
            {
              "js": "[213,7,43,33,109,25,141,85,207,63,206,159,55,152,36,237,249,190,221,193,80,134,195,117,205,253,38,242,62,123,64,84]",
              "sol": "abi.encode(\"213,7,43,33,109,25,141,85,207,63,206,159,55,152,36,237,249,190,221,193,80,134,195,117,205,253,38,242,62,123,64,84\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[33,98,199,237,49,12,231,252,57,115,83,95,228,144,31,109,64,26,195,248,246,76,11,107,20,145,65,239,151,80,58,12]",
              "sol": "abi.encode(\"33,98,199,237,49,12,231,252,57,115,83,95,228,144,31,109,64,26,195,248,246,76,11,107,20,145,65,239,151,80,58,12\")"
            },
            {
              "js": "[54,100,204,153,162,49,10,123,242,66,114,194,181,58,94,199,42,26,107,45,36,143,178,166,88,124,55,14,189,151,170,74]",
              "sol": "stringToBytes32(\"54,100,204,153,162,49,10,123,242,66,114,194,181,58,94,199,42,26,107,45,36,143,178,166,88,124,55,14,189,151,170,74\")"
            },
            {
              "js": "[105,46,21,214,245,247,252,163,150,179,236,10,141,230,74,223,44,133,228,104,138,129,248,114,34,246,1,178,246,118,11,122]",
              "sol": "abi.encode(\"105,46,21,214,245,247,252,163,150,179,236,10,141,230,74,223,44,133,228,104,138,129,248,114,34,246,1,178,246,118,11,122\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[213,212,235,234,206,242,105,184,99,116,246,242,197,126,199,97,213,79,2,45,237,120,218,53,42,3,37,214,106,255,233,88]",
              "sol": "abi.encode(\"213,212,235,234,206,242,105,184,99,116,246,242,197,126,199,97,213,79,2,45,237,120,218,53,42,3,37,214,106,255,233,88\")"
            },
            {
              "js": "[175,85,31,171,83,228,143,173,231,120,238,90,77,133,206,170,154,177,168,62,48,107,185,34,45,153,251,117,224,221,31,227]",
              "sol": "stringToBytes32(\"175,85,31,171,83,228,143,173,231,120,238,90,77,133,206,170,154,177,168,62,48,107,185,34,45,153,251,117,224,221,31,227\")"
            },
            {
              "js": "[22,111,160,206,105,37,93,204,203,191,122,58,62,252,20,108,131,28,62,139,219,44,63,203,239,139,213,30,45,86,130,100]",
              "sol": "abi.encode(\"22,111,160,206,105,37,93,204,203,191,122,58,62,252,20,108,131,28,62,139,219,44,63,203,239,139,213,30,45,86,130,100\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[0,54,71,208,65,109,72,25,60,113,187,95,253,193,174,226,135,147,64,176,38,169,88,116,99,229,73,121,2,40,108,188]",
              "sol": "abi.encode(\"0,54,71,208,65,109,72,25,60,113,187,95,253,193,174,226,135,147,64,176,38,169,88,116,99,229,73,121,2,40,108,188\")"
            },
            {
              "js": "[237,5,88,196,17,199,183,209,155,39,136,213,249,27,187,182,121,42,113,176,137,122,174,114,49,46,129,64,55,105,107,195]",
              "sol": "stringToBytes32(\"237,5,88,196,17,199,183,209,155,39,136,213,249,27,187,182,121,42,113,176,137,122,174,114,49,46,129,64,55,105,107,195\")"
            },
            {
              "js": "[76,130,195,171,236,53,32,242,219,42,254,240,99,59,159,166,22,128,179,76,27,38,134,37,151,178,54,69,161,146,2,13]",
              "sol": "abi.encode(\"76,130,195,171,236,53,32,242,219,42,254,240,99,59,159,166,22,128,179,76,27,38,134,37,151,178,54,69,161,146,2,13\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[4,37,22,106,120,149,82,9,50,250,200,192,194,71,100,226,106,164,37,47,208,56,140,191,246,233,118,228,232,116,61,131]",
              "sol": "abi.encode(\"4,37,22,106,120,149,82,9,50,250,200,192,194,71,100,226,106,164,37,47,208,56,140,191,246,233,118,228,232,116,61,131\")"
            },
            {
              "js": "[167,112,87,109,203,142,231,46,47,32,22,161,198,48,64,37,182,238,163,23,72,130,78,95,231,159,151,16,113,242,96,250]",
              "sol": "stringToBytes32(\"167,112,87,109,203,142,231,46,47,32,22,161,198,48,64,37,182,238,163,23,72,130,78,95,231,159,151,16,113,242,96,250\")"
            },
            {
              "js": "[49,171,42,79,119,104,11,61,157,11,249,164,119,23,212,137,36,81,179,61,149,212,255,131,102,220,64,156,220,176,159,60]",
              "sol": "abi.encode(\"49,171,42,79,119,104,11,61,157,11,249,164,119,23,212,137,36,81,179,61,149,212,255,131,102,220,64,156,220,176,159,60\")"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.382ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[118,106,152,249,233,150,255,50,99,135,236,249,109,226,22,4,18,100,187,142,76,92,133,100,215,194,61,205,162,111,11,130]",
              "sol": "abi.encode(\"118,106,152,249,233,150,255,50,99,135,236,249,109,226,22,4,18,100,187,142,76,92,133,100,215,194,61,205,162,111,11,130\")"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "[46,76,232,240,143,125,65,228,174,182,200,228,55,42,121,53,215,6,0,237,43,33,191,163,157,42,182,76,126,49,102,108]",
              "sol": "abi.encode(\"46,76,232,240,143,125,65,228,174,182,200,228,55,42,121,53,215,6,0,237,43,33,191,163,157,42,182,76,126,49,102,108\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.382ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[172,81,199,145,194,57,72,48,125,117,241,209,158,118,126,142,203,88,143,158,124,112,242,37,252,35,106,201,46,69,136,78]",
              "sol": "stringToBytes32(\"172,81,199,145,194,57,72,48,125,117,241,209,158,118,126,142,203,88,143,158,124,112,242,37,252,35,106,201,46,69,136,78\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[255,139,63,199,245,69,129,136,109,135,253,254,210,132,180,51,160,17,233,251,22,64,213,167,35,119,186,213,148,249,51,71]",
              "sol": "stringToBytes32(\"255,139,63,199,245,69,129,136,109,135,253,254,210,132,180,51,160,17,233,251,22,64,213,167,35,119,186,213,148,249,51,71\")"
            },
            {
              "js": "[74,196,128,48,191,58,40,112,168,125,192,239,110,230,159,108,70,212,132,57,75,129,37,100,164,60,15,140,167,207,243,97]",
              "sol": "stringToBytes32(\"74,196,128,48,191,58,40,112,168,125,192,239,110,230,159,108,70,212,132,57,75,129,37,100,164,60,15,140,167,207,243,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.383ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[140,193,249,226,90,65,40,15,10,199,48,218,21,185,255,81,18,158,211,170,177,215,174,2,173,13,35,26,89,206,15,142]",
              "sol": "stringToBytes32(\"140,193,249,226,90,65,40,15,10,199,48,218,21,185,255,81,18,158,211,170,177,215,174,2,173,13,35,26,89,206,15,142\")"
            },
            {
              "js": "[172,44,109,197,144,136,3,182,196,46,99,167,53,125,60,243,116,100,17,164,71]",
              "sol": "abi.encode(\"172,44,109,197,144,136,3,182,196,46,99,167,53,125,60,243,116,100,17,164,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[193,165,178,198,218,5,166,71,64,198,132,198,188,245,197,171,157,173,26,158,49,71,160,125,60,205,224,28,174,186,97,72]",
              "sol": "stringToBytes32(\"193,165,178,198,218,5,166,71,64,198,132,198,188,245,197,171,157,173,26,158,49,71,160,125,60,205,224,28,174,186,97,72\")"
            },
            {
              "js": "[35,215,104,252,120,132,181,20,173,236,122,94,244,156,8,63,162,233,199,107,152,4,222,4,100,150,11,24,255,97,242,51,212,145,37,119,230,22,0,165,183,138,253,42,250,92,34,59,93,19,34,194,16,46,50,102,123,22,31,235,106,239,132,143,204]",
              "sol": "abi.encode(\"35,215,104,252,120,132,181,20,173,236,122,94,244,156,8,63,162,233,199,107,152,4,222,4,100,150,11,24,255,97,242,51,212,145,37,119,230,22,0,165,183,138,253,42,250,92,34,59,93,19,34,194,16,46,50,102,123,22,31,235,106,239,132,143,204\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.385ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.386ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.386ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.387ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.387ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.387ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.388ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.388ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.388ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.388ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.389ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.389ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.390ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.390ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.391ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.394ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.397ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[66,12,139,72,68,201,196,100,84,49,47,131,83,175,188,18,193,130,61,53,96,144,98,6,205,148,206,223,68,1,248,164]",
              "sol": "stringToBytes32(\"66,12,139,72,68,201,196,100,84,49,47,131,83,175,188,18,193,130,61,53,96,144,98,6,205,148,206,223,68,1,248,164\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[115,135,33,188,142,175,197,189,164,99,216,135,179,161,118,73,132,163,252,66,212,123,192,95,110,2,154,241,165,51,8,186]",
              "sol": "abi.encode(\"115,135,33,188,142,175,197,189,164,99,216,135,179,161,118,73,132,163,252,66,212,123,192,95,110,2,154,241,165,51,8,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.398ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.399ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.400ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.400ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[255,231,152,67,212,218,224,32,181,153,68,132,124,235,134,97,6,110,183,24,192,98,66,188,37,79,154,121,184,233,141,130]",
              "sol": "abi.encode(\"255,231,152,67,212,218,224,32,181,153,68,132,124,235,134,97,6,110,183,24,192,98,66,188,37,79,154,121,184,233,141,130\")"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[218,72,241,242,88,121,134,245,168,193,47,98,121,112,154,71,112,143,164,27,251,187,246,191,24,185,184,52,229,224,38,35]",
              "sol": "stringToBytes32(\"218,72,241,242,88,121,134,245,168,193,47,98,121,112,154,71,112,143,164,27,251,187,246,191,24,185,184,52,229,224,38,35\")"
            },
            {
              "js": "[145,153,98,155,66,72,98,153,5,0,7,89,19,25,130,59,44,163,42,100,113,104,195,180,246,113,252,82,67,36,156,196]",
              "sol": "stringToBytes32(\"145,153,98,155,66,72,98,153,5,0,7,89,19,25,130,59,44,163,42,100,113,104,195,180,246,113,252,82,67,36,156,196\")"
            },
            {
              "js": "[63,72,105,106,86,63,35,48,41,211,216,43,55,203,191,51,35,109,73,11,70,149,168,183,11,120,130,205,91,179,201,49]",
              "sol": "stringToBytes32(\"63,72,105,106,86,63,35,48,41,211,216,43,55,203,191,51,35,109,73,11,70,149,168,183,11,120,130,205,91,179,201,49\")"
            },
            {
              "js": "[235,102,226,111,254,192,98,118,58,47,64,185,227,135,88,67,96,226,141,248,254,87,150,248,209,58,152,70,255,98,24,68]",
              "sol": "stringToBytes32(\"235,102,226,111,254,192,98,118,58,47,64,185,227,135,88,67,96,226,141,248,254,87,150,248,209,58,152,70,255,98,24,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.401ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.402ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.403ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.404ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.405ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.405ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.406ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.408ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.410ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:14:17.413ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.414ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.415ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:14:17.416ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}