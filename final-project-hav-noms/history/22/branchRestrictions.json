,{
  "2020-11-13T21:35:31.247ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:37:49.577ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:38:25.867ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:38:43.276ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:39:00.161ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:39:17.334ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:39:34.469ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:39:51.616ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:40:09.064ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:40:26.485ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:40:43.619ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.082ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.085ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [157,155,186,165,112,87,20,15,79,153,178,178,0,66,84,154,118,194,116,247,74,254,10,112,178,156,182,188,250,182,156,135],\"capacity\": 86}",
              "sol": "Buffer.buffer(abi.encode(\"157,155,186,165,112,87,20,15,79,153,178,178,0,66,84,154,118,194,116,247,74,254,10,112,178,156,182,188,250,182,156,135\"),86)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.086ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [140,55,1,148,143,104,137,83,110,131,150,54,98,93,60,148,126,132,203,155,174,210,7,162,113,104,22,229,32,78,180,126],\"capacity\": 20}",
              "sol": "Buffer.buffer(abi.encode(\"140,55,1,148,143,104,137,83,110,131,150,54,98,93,60,148,126,132,203,155,174,210,7,162,113,104,22,229,32,78,180,126\"),20)"
            },
            {
              "js": "[169,174,73,250,201,155,226,68,249,117,215,3,76,170,94,26,194,248,223,156,104,86,124,40,47,117,185,175,216,166,138,176]",
              "sol": "abi.encode(\"169,174,73,250,201,155,226,68,249,117,215,3,76,170,94,26,194,248,223,156,104,86,124,40,47,117,185,175,216,166,138,176\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.087ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [77,140,71,72,141,145,37,203,255,14,236,243,85,240,192,145,140,7,148,68,78,121,66,87,158,37,118,18,205,204,127,226],\"capacity\": 88}",
              "sol": "Buffer.buffer(abi.encode(\"77,140,71,72,141,145,37,203,255,14,236,243,85,240,192,145,140,7,148,68,78,121,66,87,158,37,118,18,205,204,127,226\"),88)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.088ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [73,20,47,86,9,155,28,60,35,39,105,6,234,209,226,136,55,101,109,152,23,39,173,53,59,17,102,159,31,129,128,181],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"73,20,47,86,9,155,28,60,35,39,105,6,234,209,226,136,55,101,109,152,23,39,173,53,59,17,102,159,31,129,128,181\"),60)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.089ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [0,171,63,115,162,135,181,228,29,110,15,68,120,219,206,168,24,251,164,233,210,173,7,233,214,118,171,237,169,184,112,172],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"0,171,63,115,162,135,181,228,29,110,15,68,120,219,206,168,24,251,164,233,210,173,7,233,214,118,171,237,169,184,112,172\"),161)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.090ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [196,18,194,103,88,22,84,253,155,119,6,165,206,31,85,154,162,141,186,62,80,160,196,166,127,152,253,196,228,244,82,137],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"196,18,194,103,88,22,84,253,155,119,6,165,206,31,85,154,162,141,186,62,80,160,196,166,127,152,253,196,228,244,82,137\"),3)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [8,13,154,150,69,236,83,133,71,185,164,159,75,189,198,7,37,171,196,47,94,176,36,139,210,3,108,23,63,1,174,86],\"capacity\": 26}",
              "sol": "Buffer.buffer(abi.encode(\"8,13,154,150,69,236,83,133,71,185,164,159,75,189,198,7,37,171,196,47,94,176,36,139,210,3,108,23,63,1,174,86\"),26)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.091ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [27,115,200,143,180,162,8,120,132,129,75,94,19,245,94,194,222,153,196,135,81,38,247,146,109,115,135,38,162,115,241,57],\"capacity\": 18}",
              "sol": "Buffer.buffer(abi.encode(\"27,115,200,143,180,162,8,120,132,129,75,94,19,245,94,194,222,153,196,135,81,38,247,146,109,115,135,38,162,115,241,57\"),18)"
            },
            {
              "js": "[36,4,36,134,167,68,192,220,224,121,253,253,215,201,177,171,2,76,32,88,28,88,182,209,4,255,48,218,95,134,207,94]",
              "sol": "abi.encode(\"36,4,36,134,167,68,192,220,224,121,253,253,215,201,177,171,2,76,32,88,28,88,182,209,4,255,48,218,95,134,207,94\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.092ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [122,65,15,104,229,198,63,235,44,243,199,152,163,60,185,15,204,180,191,71,29,207,43,188,98,248,252,64,25,198,211,126],\"capacity\": 1532892063}",
              "sol": "Buffer.buffer(abi.encode(\"122,65,15,104,229,198,63,235,44,243,199,152,163,60,185,15,204,180,191,71,29,207,43,188,98,248,252,64,25,198,211,126\"),1532892063)"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.092ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [158,209,149,123,185,200,186,224,176,48,131,134,118,217,104,199,53,143,143,202,245,68,224,200,13,160,128,61,5,43,188,235],\"capacity\": 17}",
              "sol": "Buffer.buffer(abi.encode(\"158,209,149,123,185,200,186,224,176,48,131,134,118,217,104,199,53,143,143,202,245,68,224,200,13,160,128,61,5,43,188,235\"),17)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.093ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [229,172,56,190,209,13,53,53,10,11,92,59,219,108,254,114,144,163,219,4,219,2,229,36,9,67,230,214,122,217,89,107],\"capacity\": 58}",
              "sol": "Buffer.buffer(abi.encode(\"229,172,56,190,209,13,53,53,10,11,92,59,219,108,254,114,144,163,219,4,219,2,229,36,9,67,230,214,122,217,89,107\"),58)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.093ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [17,191,219,211,175,38,173,135,215,231,197,251,49,5,187,243,204,161,1,215,61,26,234,253,79,104,68,91,175,30,68,94],\"capacity\": 2}",
              "sol": "Buffer.buffer(abi.encode(\"17,191,219,211,175,38,173,135,215,231,197,251,49,5,187,243,204,161,1,215,61,26,234,253,79,104,68,91,175,30,68,94\"),2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.097ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.097ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.097ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.098ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.099ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.100ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.100ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.101ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.102ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.102ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.103ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[215,216,249,170,203,17,153,226,224,31,16,239,162,98,100,130,240,179,188,79,202,172,98,205,109,231,125,201,215,209,246,96]",
              "sol": "stringToBytes32(\"215,216,249,170,203,17,153,226,224,31,16,239,162,98,100,130,240,179,188,79,202,172,98,205,109,231,125,201,215,209,246,96\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.104ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[188,124,45,40,16,25,136,208,88,177,236,93,76,42,171,126,4,110,96,100,188,86,116,196,51,164,176,109,44,198,109,2]",
              "sol": "stringToBytes32(\"188,124,45,40,16,25,136,208,88,177,236,93,76,42,171,126,4,110,96,100,188,86,116,196,51,164,176,109,44,198,109,2\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[93,77,0,171,102,171,172,94,31,182,79,13,38,211,118,103,162,198,39,50,178,182,134,6,42,153,120,200,161,2,226,218]",
              "sol": "abi.encode(\"93,77,0,171,102,171,172,94,31,182,79,13,38,211,118,103,162,198,39,50,178,182,134,6,42,153,120,200,161,2,226,218\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.156ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.156ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.157ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.157ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.159ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.159ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.160ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.160ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.161ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.161ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"vi92a5\"",
              "sol": "\"vi92a5\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.162ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"vi92a5\"",
              "sol": "\"vi92a5\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.162ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"vi92a5\"",
              "sol": "\"vi92a5\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.163ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"vi92a5\"",
              "sol": "\"vi92a5\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.163ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.164ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"P\",\"costUSD\",\"\",\"L\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"P\"),string(\"costUSD\"),string(\"\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.164ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ETH\",\"Example\",\"updateEthPrice called\",\"z2jn1h\",\"RevertWithReason\",\"\\x19Ethereum Signed Message:\\n32\",\"Oraclize query was sent, standing by for the answer...\",\"L\"]",
              "sol": "[string(\"ETH\"),string(\"Example\"),string(\"updateEthPrice called\"),string(\"z2jn1h\"),string(\"RevertWithReason\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.165ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"L\",\"trade.totalPrice\",\"L\",\"\",\"\\x19Ethereum Signed Message:\\n32\",\"UsesExample\",\"Example\",\"costUSD\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"L\"),string(\"trade.totalPrice\"),string(\"L\"),string(\"\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"UsesExample\"),string(\"Example\"),string(\"costUSD\")]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.165ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"P\",\"updateEthPrice called\",\"costUSD\",\"0\",\"IsLibrary\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"0\",\"vi92a5\"]",
              "sol": "[string(\"P\"),string(\"updateEthPrice called\"),string(\"costUSD\"),string(\"0\"),string(\"IsLibrary\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"0\"),string(\"vi92a5\")]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.167ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"ETH\"]",
              "sol": "[string(\"ETH\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.168ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"lalc4o\"]",
              "sol": "[string(\"lalc4o\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.168ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"vi92a5\"]",
              "sol": "[string(\"vi92a5\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.169ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"z2jn1h\"",
              "sol": "\"z2jn1h\""
            },
            {
              "js": "[\"lalc4o\"]",
              "sol": "[string(\"lalc4o\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.169ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.170ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.170ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "\"vi92a5\"",
              "sol": "\"vi92a5\""
            },
            {
              "js": "[\"L\",\"z2jn1h\"]",
              "sol": "[string(\"L\"),string(\"z2jn1h\")]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.171ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"z2jn1h\"",
              "sol": "\"z2jn1h\""
            },
            {
              "js": "[\"call updateEthPrice\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.171ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"0f7g5\"",
              "sol": "\"0f7g5\""
            },
            {
              "js": "[\"vi92a5\",\"\",\"r0kddg\"]",
              "sol": "[string(\"vi92a5\"),string(\"\"),string(\"r0kddg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.172ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"P\",\"z2jn1h\",\"r0kddg\"]",
              "sol": "[string(\"P\"),string(\"z2jn1h\"),string(\"r0kddg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.172ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"r0kddg\",\"0f7g5\",\"updateEthPrice called\"]",
              "sol": "[string(\"r0kddg\"),string(\"0f7g5\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.173ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"\",\"Example\",\"z2jn1h\"]",
              "sol": "[string(\"\"),string(\"Example\"),string(\"z2jn1h\")]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.173ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"PayableExample\",\"Oraclize query was sent, standing by for the answer...\",\"\\x19Ethereum Signed Message:\\n32\",\"P\"]",
              "sol": "[string(\"PayableExample\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.174ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"costUSD\",\"ETH\",\"IsLibrary\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"costUSD\"),string(\"ETH\"),string(\"IsLibrary\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.174ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"trade.totalPrice\",\"RevertWithReason\",\"RevertWithReason\",\"ETH\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"RevertWithReason\"),string(\"RevertWithReason\"),string(\"ETH\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.175ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"vi92a5\",\"UsesExample\",\"IsLibrary\",\"trade.totalPrice\"]",
              "sol": "[string(\"vi92a5\"),string(\"UsesExample\"),string(\"IsLibrary\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.176ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"call updateEthPrice\",\"z2jn1h\",\"r0kddg\",\"L\",\"lalc4o\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"z2jn1h\"),string(\"r0kddg\"),string(\"L\"),string(\"lalc4o\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.177ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"hsy1n\",\"P\",\"call updateEthPrice\",\"trade.totalPrice\",\"hsy1n\"]",
              "sol": "[string(\"hsy1n\"),string(\"P\"),string(\"call updateEthPrice\"),string(\"trade.totalPrice\"),string(\"hsy1n\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.178ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"vi92a5\",\"0f7g5\",\"listingID arg\",\"call updateEthPrice\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"vi92a5\"),string(\"0f7g5\"),string(\"listingID arg\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.179ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"listingID arg\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"0\",\"costUSD\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"listingID arg\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"0\"),string(\"costUSD\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.180ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"0f7g5\"",
              "sol": "\"0f7g5\""
            },
            {
              "js": "[[54,152,170,58,106,214,30,183,145,246,153,43,174,24,10,61,132,146,5,126,133,63,13,41,94,154,231,54,225,169,34,226]]",
              "sol": "[bytes(abi.encode(\"54,152,170,58,106,214,30,183,145,246,153,43,174,24,10,61,132,146,5,126,133,63,13,41,94,154,231,54,225,169,34,226\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.181ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[119,239,238,182,48,146,232,29,216,8,55,46,91,234,89,59,71,133,8,142,71,196,244,155,170,90,207,63,36,17,85,94],[62,146,34,218,82,52,152,146,67,11,199,145,79,72,157,78,94,124,195,85,34,39,196,255,42,137,110,192,85,91,226,210],[93,79,190,59,251,9,54,100,59,33,13,45,241,248,35,147,143,23,3,254,229,187,129,175,48,18,11,126,28,190,38,176],[31,152,141,167,64,147,39,141,103,175,146,229,230,219,20,194,139,249,73,46,232,216,211,21,208,89,211,99,123,71,230,42],[169,216,29,236,75,24,90,16,25,46,213,155,120,230,51,133,84,83,235,194,170,190,69,103,36,159,188,55,138,41,58,17],[8,25,29,158,56,70,99,31,112,136,69,210,204,42,186,140,177,181,64,134,127,68,103,39,96,50,205,77,151,79,189,90],[91,91,247,36,130,86,130,213,111,5,99,66,170,73,238,191,177,103,189,223,95,163,154,227,18,181,90,59,5,250,172,59],[249,89,239,157,138,73,77,160,185,86,55,252,233,90,206,252,204,211,187,63,176,175,174,46,198,50,208,208,138,57,226,9],[16,102,216,155,204,68,152,62,135,243,237,219,53,15,145,163,239,7,73,224,12,119,215,142,195,43,243,219,244,237,159,25],[123,106,10,224,17,111,104,165,18,148,18,135,32,23,168,180,64,218,1,237,160,73,180,17,59,178,227,138,91,168,83,210]]",
              "sol": "[bytes(abi.encode(\"119,239,238,182,48,146,232,29,216,8,55,46,91,234,89,59,71,133,8,142,71,196,244,155,170,90,207,63,36,17,85,94\")),bytes(abi.encode(\"62,146,34,218,82,52,152,146,67,11,199,145,79,72,157,78,94,124,195,85,34,39,196,255,42,137,110,192,85,91,226,210\")),bytes(abi.encode(\"93,79,190,59,251,9,54,100,59,33,13,45,241,248,35,147,143,23,3,254,229,187,129,175,48,18,11,126,28,190,38,176\")),bytes(abi.encode(\"31,152,141,167,64,147,39,141,103,175,146,229,230,219,20,194,139,249,73,46,232,216,211,21,208,89,211,99,123,71,230,42\")),bytes(abi.encode(\"169,216,29,236,75,24,90,16,25,46,213,155,120,230,51,133,84,83,235,194,170,190,69,103,36,159,188,55,138,41,58,17\")),bytes(abi.encode(\"8,25,29,158,56,70,99,31,112,136,69,210,204,42,186,140,177,181,64,134,127,68,103,39,96,50,205,77,151,79,189,90\")),bytes(abi.encode(\"91,91,247,36,130,86,130,213,111,5,99,66,170,73,238,191,177,103,189,223,95,163,154,227,18,181,90,59,5,250,172,59\")),bytes(abi.encode(\"249,89,239,157,138,73,77,160,185,86,55,252,233,90,206,252,204,211,187,63,176,175,174,46,198,50,208,208,138,57,226,9\")),bytes(abi.encode(\"16,102,216,155,204,68,152,62,135,243,237,219,53,15,145,163,239,7,73,224,12,119,215,142,195,43,243,219,244,237,159,25\")),bytes(abi.encode(\"123,106,10,224,17,111,104,165,18,148,18,135,32,23,168,180,64,218,1,237,160,73,180,17,59,178,227,138,91,168,83,210\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.182ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[250,200,33,93,253,179,29,1,148,124,101,133,50,172,249,158,184,60,113,233,23,79,115,148,9,63,209,106,146,199,176,135],[44,161,176,104,170,221,129,39,212,117,239,103,9,20,11,162,232,126,240,138,17,237,54,221,59,231,99,76,144,138,75,208],[41,28,129,74,211,173,169,134,30,141,209,73,18,209,47,200,217,26,225,83,13,96,37,39,184,244,189,245,237,120,81,226],[71,74,34,178,113,249,134,219,203,150,30,251,8,101,34,252,110,69,137,19,54,126,125,173,33,117,172,34,26,106,138,52],[2,70,117,117,221,199,233,245,120,107,143,189,246,244,77,150,162,165,39,254,4,151,88,14,146,73,216,176,49,139,11,59],[21,82,228,210,181,206,75,131,60,236,229,203,3,39,241,38,14,121,15,238,132,17,122,66,142,103,0,66,195,13,168,154],[161,135,152,75,16,139,114,105,187,237,106,235,207,174,29,118,173,195,50,87,185,105,74,162,79,44,33,12,176,76,176,221],[55,93,240,109,93,136,208,141,46,171,9,24,201,62,244,68,188,31,111,227,86,192,233,148,234,37,206,113,231,90,94,125],[251,148,176,219,20,201,180,28,124,240,38,254,45,197,75,176,139,127,56,223,30,82,174,11,222,179,120,149,54,224,194,98]]",
              "sol": "[bytes(abi.encode(\"250,200,33,93,253,179,29,1,148,124,101,133,50,172,249,158,184,60,113,233,23,79,115,148,9,63,209,106,146,199,176,135\")),bytes(abi.encode(\"44,161,176,104,170,221,129,39,212,117,239,103,9,20,11,162,232,126,240,138,17,237,54,221,59,231,99,76,144,138,75,208\")),bytes(abi.encode(\"41,28,129,74,211,173,169,134,30,141,209,73,18,209,47,200,217,26,225,83,13,96,37,39,184,244,189,245,237,120,81,226\")),bytes(abi.encode(\"71,74,34,178,113,249,134,219,203,150,30,251,8,101,34,252,110,69,137,19,54,126,125,173,33,117,172,34,26,106,138,52\")),bytes(abi.encode(\"2,70,117,117,221,199,233,245,120,107,143,189,246,244,77,150,162,165,39,254,4,151,88,14,146,73,216,176,49,139,11,59\")),bytes(abi.encode(\"21,82,228,210,181,206,75,131,60,236,229,203,3,39,241,38,14,121,15,238,132,17,122,66,142,103,0,66,195,13,168,154\")),bytes(abi.encode(\"161,135,152,75,16,139,114,105,187,237,106,235,207,174,29,118,173,195,50,87,185,105,74,162,79,44,33,12,176,76,176,221\")),bytes(abi.encode(\"55,93,240,109,93,136,208,141,46,171,9,24,201,62,244,68,188,31,111,227,86,192,233,148,234,37,206,113,231,90,94,125\")),bytes(abi.encode(\"251,148,176,219,20,201,180,28,124,240,38,254,45,197,75,176,139,127,56,223,30,82,174,11,222,179,120,149,54,224,194,98\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.183ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"hsy1n\"",
              "sol": "\"hsy1n\""
            },
            {
              "js": "[[33,116,189,65,53,179,151,44,222,210,213,202,47,198,216,109,74,18,3,130,33,170,28,225,186,8,215,208,142,42,147,100],[171,196,108,22,249,168,199,60,133,181,236,33,232,89,113,25,70,1,247,154,101,102,81,185,2,9,168,188,174,213,157,249],[174,159,225,25,165,124,168,153,35,87,68,37,150,30,22,163,156,176,222,208,84,237,32,245,227,203,141,80,28,249,43,144]]",
              "sol": "[bytes(abi.encode(\"33,116,189,65,53,179,151,44,222,210,213,202,47,198,216,109,74,18,3,130,33,170,28,225,186,8,215,208,142,42,147,100\")),bytes(abi.encode(\"171,196,108,22,249,168,199,60,133,181,236,33,232,89,113,25,70,1,247,154,101,102,81,185,2,9,168,188,174,213,157,249\")),bytes(abi.encode(\"174,159,225,25,165,124,168,153,35,87,68,37,150,30,22,163,156,176,222,208,84,237,32,245,227,203,141,80,28,249,43,144\"))]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.184ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[200,4,181,3,195,106,218,118,98,143,146,143,124,95,129,69,117,190,18,245,32,31,244,153,70,29,124,110,212,200,41,117]]",
              "sol": "[bytes(abi.encode(\"200,4,181,3,195,106,218,118,98,143,146,143,124,95,129,69,117,190,18,245,32,31,244,153,70,29,124,110,212,200,41,117\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.184ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[17,216,75,2,182,178,230,7,5,78,237,61,162,103,156,12,233,159,213,59,178,64,130,210,6,108,68,227,19,166,126,215]]",
              "sol": "[bytes(abi.encode(\"17,216,75,2,182,178,230,7,5,78,237,61,162,103,156,12,233,159,213,59,178,64,130,210,6,108,68,227,19,166,126,215\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.185ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[250,182,79,127,119,115,63,69,176,196,149,64,98,73,110,214,140,50,133,78,234,114,98,187,191,214,37,12,113,98,55,37]]",
              "sol": "[bytes(abi.encode(\"250,182,79,127,119,115,63,69,176,196,149,64,98,73,110,214,140,50,133,78,234,114,98,187,191,214,37,12,113,98,55,37\"))]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.185ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[64,99,113,206,116,83,214,109,132,114,103,91,78,222,187,222,188,185,11,166,190,164,105,227,162,117,4,122,109,57,41,91]]",
              "sol": "[bytes(abi.encode(\"64,99,113,206,116,83,214,109,132,114,103,91,78,222,187,222,188,185,11,166,190,164,105,227,162,117,4,122,109,57,41,91\"))]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.186ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[153,140,72,227,252,168,171,178,107,132,107,46,32,44,167,30,48,224,37,7,159,78,87,232,78,149,91,188,16,98,73,9],[21,61,90,202,198,19,80,30,82,111,237,220,84,133,133,101,12,10,255,183,190,142,13,241,170,69,46,249,125,157,64,147]]",
              "sol": "[bytes(abi.encode(\"153,140,72,227,252,168,171,178,107,132,107,46,32,44,167,30,48,224,37,7,159,78,87,232,78,149,91,188,16,98,73,9\")),bytes(abi.encode(\"21,61,90,202,198,19,80,30,82,111,237,220,84,133,133,101,12,10,255,183,190,142,13,241,170,69,46,249,125,157,64,147\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.187ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[69,214,163,52,86,153,39,63,234,93,113,37,73,147,18,251,241,138,96,138,95,180,62,177,201,197,146,56,178,234,226,110],[15,183,217,225,7,199,57,221,225,84,101,44,210,45,67,125,132,38,88,49,23,135,31,14,0,108,133,103,99,86,12,98]]",
              "sol": "[bytes(abi.encode(\"69,214,163,52,86,153,39,63,234,93,113,37,73,147,18,251,241,138,96,138,95,180,62,177,201,197,146,56,178,234,226,110\")),bytes(abi.encode(\"15,183,217,225,7,199,57,221,225,84,101,44,210,45,67,125,132,38,88,49,23,135,31,14,0,108,133,103,99,86,12,98\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.188ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[180,251,46,235,81,88,240,187,101,215,72,113,106,245,18,147,106,152,8,146,211,156,115,12,176,192,43,66,41,208,194,125],[17,40,1,166,26,30,102,80,144,33,30,210,247,25,112,142,67,135,231,23,110,252,246,251,235,57,132,205,172,58,16,81]]",
              "sol": "[bytes(abi.encode(\"180,251,46,235,81,88,240,187,101,215,72,113,106,245,18,147,106,152,8,146,211,156,115,12,176,192,43,66,41,208,194,125\")),bytes(abi.encode(\"17,40,1,166,26,30,102,80,144,33,30,210,247,25,112,142,67,135,231,23,110,252,246,251,235,57,132,205,172,58,16,81\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.189ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[187,98,139,73,77,113,107,175,217,36,195,10,195,16,151,141,12,149,101,169,33,90,39,226,177,137,126,172,30,107,75,107],[1,27,200,136,144,207,2,87,203,168,159,133,174,133,54,157,114,186,19,176,230,185,177,37,112,92,76,138,7,11,38,34]]",
              "sol": "[bytes(abi.encode(\"187,98,139,73,77,113,107,175,217,36,195,10,195,16,151,141,12,149,101,169,33,90,39,226,177,137,126,172,30,107,75,107\")),bytes(abi.encode(\"1,27,200,136,144,207,2,87,203,168,159,133,174,133,54,157,114,186,19,176,230,185,177,37,112,92,76,138,7,11,38,34\"))]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.189ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[47,30,64,106,97,43,165,204,42,172,157,111,128,81,8,253,22,160,94,11,105,17,1,41,126,61,132,60,119,71,76,185],[247,108,186,75,182,37,193,247,67,11,71,104,119,206,28,51,228,230,166,207,107,40,250,97,156,188,25,244,111,86,51,14],[31,42,84,110,206,57,164,88,94,55,242,201,1,157,183,244,222,189,126,212,120,167,40,41,131,50,163,48,162,56,243,233]]",
              "sol": "[bytes(abi.encode(\"47,30,64,106,97,43,165,204,42,172,157,111,128,81,8,253,22,160,94,11,105,17,1,41,126,61,132,60,119,71,76,185\")),bytes(abi.encode(\"247,108,186,75,182,37,193,247,67,11,71,104,119,206,28,51,228,230,166,207,107,40,250,97,156,188,25,244,111,86,51,14\")),bytes(abi.encode(\"31,42,84,110,206,57,164,88,94,55,242,201,1,157,183,244,222,189,126,212,120,167,40,41,131,50,163,48,162,56,243,233\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.190ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[240,245,201,14,239,128,241,197,159,2,149,142,36,0,175,122,171,119,250,7,205,244,164,12,66,100,229,188,22,181,4,248],[93,8,194,80,28,158,60,115,109,4,214,198,121,62,188,146,225,14,126,16,49,161,66,48,16,170,11,91,203,23,91,237],[77,162,64,101,232,100,4,92,162,1,251,38,4,83,73,67,215,168,199,213,147,56,73,7,229,155,248,10,204,237,29,127]]",
              "sol": "[bytes(abi.encode(\"240,245,201,14,239,128,241,197,159,2,149,142,36,0,175,122,171,119,250,7,205,244,164,12,66,100,229,188,22,181,4,248\")),bytes(abi.encode(\"93,8,194,80,28,158,60,115,109,4,214,198,121,62,188,146,225,14,126,16,49,161,66,48,16,170,11,91,203,23,91,237\")),bytes(abi.encode(\"77,162,64,101,232,100,4,92,162,1,251,38,4,83,73,67,215,168,199,213,147,56,73,7,229,155,248,10,204,237,29,127\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.190ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[130,191,111,219,213,111,192,113,26,1,166,1,132,131,181,119,163,166,150,29,150,97,165,119,0,165,20,197,141,133,163,53],[23,229,45,127,191,77,78,219,158,165,202,5,66,138,241,153,133,4,41,123,215,187,156,168,64,6,245,175,122,149,108,103],[51,63,140,83,184,62,99,4,204,143,73,82,205,100,65,144,116,185,86,231,68,93,67,80,251,78,141,168,100,114,86,174]]",
              "sol": "[bytes(abi.encode(\"130,191,111,219,213,111,192,113,26,1,166,1,132,131,181,119,163,166,150,29,150,97,165,119,0,165,20,197,141,133,163,53\")),bytes(abi.encode(\"23,229,45,127,191,77,78,219,158,165,202,5,66,138,241,153,133,4,41,123,215,187,156,168,64,6,245,175,122,149,108,103\")),bytes(abi.encode(\"51,63,140,83,184,62,99,4,204,143,73,82,205,100,65,144,116,185,86,231,68,93,67,80,251,78,141,168,100,114,86,174\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.191ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[93,237,116,100,128,87,45,24,149,226,73,152,242,117,19,220,91,138,9,108,53,167,163,54,73,33,140,36,53,178,11,183],[186,86,148,188,51,204,201,159,208,150,59,97,110,213,235,176,105,254,88,244,167,187,206,147,134,52,47,53,248,161,200,127],[198,213,27,251,29,147,117,204,139,207,65,108,237,3,198,81,86,206,205,170,177,158,121,251,7,49,229,84,135,152,206,151]]",
              "sol": "[bytes(abi.encode(\"93,237,116,100,128,87,45,24,149,226,73,152,242,117,19,220,91,138,9,108,53,167,163,54,73,33,140,36,53,178,11,183\")),bytes(abi.encode(\"186,86,148,188,51,204,201,159,208,150,59,97,110,213,235,176,105,254,88,244,167,187,206,147,134,52,47,53,248,161,200,127\")),bytes(abi.encode(\"198,213,27,251,29,147,117,204,139,207,65,108,237,3,198,81,86,206,205,170,177,158,121,251,7,49,229,84,135,152,206,151\"))]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.192ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"h6jlfo\"",
              "sol": "\"h6jlfo\""
            },
            {
              "js": "[[156,51,156,154,41,135,37,50,101,28,193,150,103,176,161,181,142,93,197,251,85,160,6,244,249,43,61,33,191,120,206,21],[63,102,126,231,1,7,182,80,205,4,116,206,208,167,1,0,177,197,117,80,49,2,165,179,93,168,14,129,234,147,51,31],[161,130,173,240,4,183,11,218,85,215,179,228,254,231,44,38,215,19,6,22,172,226,39,21,26,116,38,231,230,130,121,193],[174,130,135,197,108,97,8,38,182,77,6,112,40,89,9,20,55,123,250,91,70,160,162,32,213,173,228,74,47,243,38,168]]",
              "sol": "[bytes(abi.encode(\"156,51,156,154,41,135,37,50,101,28,193,150,103,176,161,181,142,93,197,251,85,160,6,244,249,43,61,33,191,120,206,21\")),bytes(abi.encode(\"63,102,126,231,1,7,182,80,205,4,116,206,208,167,1,0,177,197,117,80,49,2,165,179,93,168,14,129,234,147,51,31\")),bytes(abi.encode(\"161,130,173,240,4,183,11,218,85,215,179,228,254,231,44,38,215,19,6,22,172,226,39,21,26,116,38,231,230,130,121,193\")),bytes(abi.encode(\"174,130,135,197,108,97,8,38,182,77,6,112,40,89,9,20,55,123,250,91,70,160,162,32,213,173,228,74,47,243,38,168\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.192ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"hsy1n\"",
              "sol": "\"hsy1n\""
            },
            {
              "js": "[[48,25,251,167,207,206,29,29,68,167,213,90,7,177,89,92,160,31,251,219,35,242,228,183,51,252,15,0,56,66,225,124],[130,17,210,84,88,179,248,201,166,194,96,195,187,41,254,179,217,182,49,93,59,225,243,22,157,56,178,195,204,111,110,144],[87,47,193,103,187,246,221,237,25,183,206,36,116,14,249,17,112,73,107,226,17,158,87,80,99,24,188,164,2,166,36,212],[113,76,129,230,52,45,255,50,72,247,226,34,113,218,100,196,227,59,150,247,250,253,255,20,136,70,11,198,159,236,226,180]]",
              "sol": "[bytes(abi.encode(\"48,25,251,167,207,206,29,29,68,167,213,90,7,177,89,92,160,31,251,219,35,242,228,183,51,252,15,0,56,66,225,124\")),bytes(abi.encode(\"130,17,210,84,88,179,248,201,166,194,96,195,187,41,254,179,217,182,49,93,59,225,243,22,157,56,178,195,204,111,110,144\")),bytes(abi.encode(\"87,47,193,103,187,246,221,237,25,183,206,36,116,14,249,17,112,73,107,226,17,158,87,80,99,24,188,164,2,166,36,212\")),bytes(abi.encode(\"113,76,129,230,52,45,255,50,72,247,226,34,113,218,100,196,227,59,150,247,250,253,255,20,136,70,11,198,159,236,226,180\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.193ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"t46vx\"",
              "sol": "\"t46vx\""
            },
            {
              "js": "[[69,118,22,132,66,217,135,5,94,236,27,124,92,14,99,159,76,233,133,164,81,130,187,24,164,131,128,134,95,152,219,52],[241,161,104,124,79,113,74,214,229,223,173,30,95,100,79,158,73,33,212,82,254,30,32,49,149,231,242,141,168,255,167,2],[15,228,159,186,237,237,99,191,169,106,239,78,172,164,94,122,74,183,87,239,188,98,73,235,104,180,254,105,169,227,46,33],[143,63,59,14,133,70,84,86,42,30,238,42,160,47,212,77,135,116,72,137,176,180,74,195,133,68,185,19,182,115,243,149]]",
              "sol": "[bytes(abi.encode(\"69,118,22,132,66,217,135,5,94,236,27,124,92,14,99,159,76,233,133,164,81,130,187,24,164,131,128,134,95,152,219,52\")),bytes(abi.encode(\"241,161,104,124,79,113,74,214,229,223,173,30,95,100,79,158,73,33,212,82,254,30,32,49,149,231,242,141,168,255,167,2\")),bytes(abi.encode(\"15,228,159,186,237,237,99,191,169,106,239,78,172,164,94,122,74,183,87,239,188,98,73,235,104,180,254,105,169,227,46,33\")),bytes(abi.encode(\"143,63,59,14,133,70,84,86,42,30,238,42,160,47,212,77,135,116,72,137,176,180,74,195,133,68,185,19,182,115,243,149\"))]"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.193ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"z2jn1h\"",
              "sol": "\"z2jn1h\""
            },
            {
              "js": "[[226,59,99,203,173,28,128,15,143,17,111,80,3,20,130,50,59,227,103,165,246,129,39,107,161,114,79,198,141,225,226,92],[83,51,17,193,146,214,17,45,130,43,252,249,230,158,191,109,173,236,9,76,111,47,15,1,31,74,152,30,89,125,201,45],[166,242,98,54,102,33,139,116,170,124,143,239,2,207,102,182,107,216,178,152,46,175,153,230,204,38,242,218,71,214,31,192],[128,232,229,26,115,136,130,169,242,114,96,161,184,164,1,231,188,5,132,166,165,195,233,27,138,33,18,229,96,37,174,54]]",
              "sol": "[bytes(abi.encode(\"226,59,99,203,173,28,128,15,143,17,111,80,3,20,130,50,59,227,103,165,246,129,39,107,161,114,79,198,141,225,226,92\")),bytes(abi.encode(\"83,51,17,193,146,214,17,45,130,43,252,249,230,158,191,109,173,236,9,76,111,47,15,1,31,74,152,30,89,125,201,45\")),bytes(abi.encode(\"166,242,98,54,102,33,139,116,170,124,143,239,2,207,102,182,107,216,178,152,46,175,153,230,204,38,242,218,71,214,31,192\")),bytes(abi.encode(\"128,232,229,26,115,136,130,169,242,114,96,161,184,164,1,231,188,5,132,166,165,195,233,27,138,33,18,229,96,37,174,54\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.194ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ig8bi\"",
              "sol": "\"ig8bi\""
            },
            {
              "js": "[[95,241,86,2,50,239,24,146,52,197,223,54,15,201,182,124,173,112,156,123,27,4,170,119,41,62,210,50,169,232,180,103],[45,253,42,173,240,88,224,128,227,21,98,82,219,84,247,78,113,63,150,186,120,82,130,199,95,182,19,86,193,183,96,13],[122,116,9,183,177,101,61,26,74,14,173,198,144,52,80,28,80,151,1,193,26,85,161,162,226,150,47,177,121,220,15,80],[238,107,243,27,246,25,177,255,132,243,25,47,18,170,185,226,136,160,110,116,143,232,32,29,237,252,220,233,15,37,246,138],[184,103,71,134,166,222,49,249,119,122,78,217,187,176,112,175,99,33,30,236,99,177,207,81,49,91,95,142,235,140,230,163]]",
              "sol": "[bytes(abi.encode(\"95,241,86,2,50,239,24,146,52,197,223,54,15,201,182,124,173,112,156,123,27,4,170,119,41,62,210,50,169,232,180,103\")),bytes(abi.encode(\"45,253,42,173,240,88,224,128,227,21,98,82,219,84,247,78,113,63,150,186,120,82,130,199,95,182,19,86,193,183,96,13\")),bytes(abi.encode(\"122,116,9,183,177,101,61,26,74,14,173,198,144,52,80,28,80,151,1,193,26,85,161,162,226,150,47,177,121,220,15,80\")),bytes(abi.encode(\"238,107,243,27,246,25,177,255,132,243,25,47,18,170,185,226,136,160,110,116,143,232,32,29,237,252,220,233,15,37,246,138\")),bytes(abi.encode(\"184,103,71,134,166,222,49,249,119,122,78,217,187,176,112,175,99,33,30,236,99,177,207,81,49,91,95,142,235,140,230,163\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.195ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"hsy1n\"",
              "sol": "\"hsy1n\""
            },
            {
              "js": "[[58,190,43,47,170,34,138,12,56,222,233,1,114,225,173,33,92,156,38,119,207,113,202,18,222,176,121,55,134,205,191,94],[136,250,175,99,99,224,7,219,103,20,177,128,54,207,233,18,131,214,174,109,9,117,191,242,219,80,163,104,84,141,141,186],[75,201,218,50,54,50,207,69,244,209,37,116,237,42,60,217,226,173,215,117,110,215,225,131,63,140,238,201,39,161,130,83],[80,17,253,45,219,109,156,111,118,190,80,37,117,33,216,153,99,24,37,86,107,190,78,6,19,178,164,165,98,148,106,98],[22,129,173,42,165,175,128,157,135,96,255,110,151,35,220,149,238,107,106,193,167,94,41,26,78,140,62,156,130,2,17,60]]",
              "sol": "[bytes(abi.encode(\"58,190,43,47,170,34,138,12,56,222,233,1,114,225,173,33,92,156,38,119,207,113,202,18,222,176,121,55,134,205,191,94\")),bytes(abi.encode(\"136,250,175,99,99,224,7,219,103,20,177,128,54,207,233,18,131,214,174,109,9,117,191,242,219,80,163,104,84,141,141,186\")),bytes(abi.encode(\"75,201,218,50,54,50,207,69,244,209,37,116,237,42,60,217,226,173,215,117,110,215,225,131,63,140,238,201,39,161,130,83\")),bytes(abi.encode(\"80,17,253,45,219,109,156,111,118,190,80,37,117,33,216,153,99,24,37,86,107,190,78,6,19,178,164,165,98,148,106,98\")),bytes(abi.encode(\"22,129,173,42,165,175,128,157,135,96,255,110,151,35,220,149,238,107,106,193,167,94,41,26,78,140,62,156,130,2,17,60\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.196ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[121,77,215,65,112,56,205,123,9,7,101,103,138,30,228,218,69,92,41,210,62,121,240,132,138,247,213,153,116,50,83,86],[222,237,54,127,24,101,140,71,232,191,4,245,129,212,30,249,98,7,172,52,82,40,216,119,223,213,10,106,203,221,101,7],[41,253,204,242,17,42,196,222,250,136,222,191,156,104,92,58,99,111,224,126,121,79,255,89,119,53,85,148,123,202,206,146],[150,175,134,245,78,136,20,179,187,229,220,191,5,32,163,116,142,160,57,247,3,146,14,108,143,122,141,255,84,91,5,175],[24,25,103,204,189,9,233,152,55,252,195,132,11,2,137,57,196,17,8,161,2,195,76,133,148,22,193,191,53,13,196,10]]",
              "sol": "[bytes(abi.encode(\"121,77,215,65,112,56,205,123,9,7,101,103,138,30,228,218,69,92,41,210,62,121,240,132,138,247,213,153,116,50,83,86\")),bytes(abi.encode(\"222,237,54,127,24,101,140,71,232,191,4,245,129,212,30,249,98,7,172,52,82,40,216,119,223,213,10,106,203,221,101,7\")),bytes(abi.encode(\"41,253,204,242,17,42,196,222,250,136,222,191,156,104,92,58,99,111,224,126,121,79,255,89,119,53,85,148,123,202,206,146\")),bytes(abi.encode(\"150,175,134,245,78,136,20,179,187,229,220,191,5,32,163,116,142,160,57,247,3,146,14,108,143,122,141,255,84,91,5,175\")),bytes(abi.encode(\"24,25,103,204,189,9,233,152,55,252,195,132,11,2,137,57,196,17,8,161,2,195,76,133,148,22,193,191,53,13,196,10\"))]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.197ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"h6jlfo\"",
              "sol": "\"h6jlfo\""
            },
            {
              "js": "[[45,223,84,53,178,166,31,214,146,120,143,148,49,200,223,154,55,18,136,210,208,220,145,209,8,71,65,148,247,248,252,200],[156,157,143,253,47,10,224,51,214,10,229,70,226,28,30,81,128,120,98,190,138,247,115,143,11,103,217,113,89,233,80,129],[240,140,130,53,138,226,54,231,93,254,31,129,100,165,178,130,25,119,28,245,62,50,148,188,97,208,146,26,216,103,142,247],[158,75,182,55,53,222,11,116,113,141,87,240,228,212,199,82,212,153,30,70,136,196,94,1,168,102,233,121,160,110,60,79],[179,157,69,110,64,15,192,148,255,145,87,33,231,118,136,173,20,131,78,126,100,113,113,147,192,9,22,92,218,182,247,219]]",
              "sol": "[bytes(abi.encode(\"45,223,84,53,178,166,31,214,146,120,143,148,49,200,223,154,55,18,136,210,208,220,145,209,8,71,65,148,247,248,252,200\")),bytes(abi.encode(\"156,157,143,253,47,10,224,51,214,10,229,70,226,28,30,81,128,120,98,190,138,247,115,143,11,103,217,113,89,233,80,129\")),bytes(abi.encode(\"240,140,130,53,138,226,54,231,93,254,31,129,100,165,178,130,25,119,28,245,62,50,148,188,97,208,146,26,216,103,142,247\")),bytes(abi.encode(\"158,75,182,55,53,222,11,116,113,141,87,240,228,212,199,82,212,153,30,70,136,196,94,1,168,102,233,121,160,110,60,79\")),bytes(abi.encode(\"179,157,69,110,64,15,192,148,255,145,87,33,231,118,136,173,20,131,78,126,100,113,113,147,192,9,22,92,218,182,247,219\"))]"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.198ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[157]",
              "sol": "bytes1(\"157\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.198ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.198ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.199ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.199ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.199ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"0f7g5\"",
              "sol": "\"0f7g5\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.200ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.200ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"hsy1n\"",
              "sol": "\"hsy1n\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.200ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"ig8bi\"",
              "sol": "\"ig8bi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.200ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.201ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.202ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"z2jn1h\"",
              "sol": "\"z2jn1h\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.202ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"h6jlfo\"",
              "sol": "\"h6jlfo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.202ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ig8bi\"",
              "sol": "\"ig8bi\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.203ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.204ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"h6jlfo\"",
              "sol": "\"h6jlfo\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.205ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.205ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.206ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[125,253,83,186,195,153,226,60,36,57,60,240,99,53,145,221,196,97,104,45,209,18,240,74,87,120,142,156,152,138,87,208],[70,44,157,8,212,132,24,242,236,107,82,27,150,106,101,174,131,145,240,153,250,56,194,112,66,101,47,207,165,162,82,91],[94,17,159,148,149,65,115,237,223,208,8,0,123,216,95,134,38,219,84,133,244,186,93,166,83,13,73,138,97,83,239,204],[52,143,41,149,188,162,191,122,239,92,189,67,124,34,73,81,64,175,123,49,164,138,126,254,245,40,116,14,102,238,131,141],[220,13,21,1,22,85,19,229,202,35,155,60,135,175,194,240,154,84,184,68,146,112,75,24,228,85,15,114,252,148,159,216],[211,26,103,222,113,23,173,7,161,235,180,44,250,11,20,254,240,182,108,187,21,222,37,34,240,151,42,167,94,199,221,192],[36,92,213,168,25,95,201,161,11,150,71,147,14,114,246,57,141,149,57,91,59,129,104,198,174,118,109,198,191,27,178,178],[18,153,140,202,7,72,68,164,60,12,148,162,46,33,183,192,191,86,193,57,186,180,172,75,130,114,231,70,31,39,71,146]]",
              "sol": "[bytes(abi.encode(\"125,253,83,186,195,153,226,60,36,57,60,240,99,53,145,221,196,97,104,45,209,18,240,74,87,120,142,156,152,138,87,208\")),bytes(abi.encode(\"70,44,157,8,212,132,24,242,236,107,82,27,150,106,101,174,131,145,240,153,250,56,194,112,66,101,47,207,165,162,82,91\")),bytes(abi.encode(\"94,17,159,148,149,65,115,237,223,208,8,0,123,216,95,134,38,219,84,133,244,186,93,166,83,13,73,138,97,83,239,204\")),bytes(abi.encode(\"52,143,41,149,188,162,191,122,239,92,189,67,124,34,73,81,64,175,123,49,164,138,126,254,245,40,116,14,102,238,131,141\")),bytes(abi.encode(\"220,13,21,1,22,85,19,229,202,35,155,60,135,175,194,240,154,84,184,68,146,112,75,24,228,85,15,114,252,148,159,216\")),bytes(abi.encode(\"211,26,103,222,113,23,173,7,161,235,180,44,250,11,20,254,240,182,108,187,21,222,37,34,240,151,42,167,94,199,221,192\")),bytes(abi.encode(\"36,92,213,168,25,95,201,161,11,150,71,147,14,114,246,57,141,149,57,91,59,129,104,198,174,118,109,198,191,27,178,178\")),bytes(abi.encode(\"18,153,140,202,7,72,68,164,60,12,148,162,46,33,183,192,191,86,193,57,186,180,172,75,130,114,231,70,31,39,71,146\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.207ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.207ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[175,146,168,142,204,119,74,218,132,187,23,160,188,97,206,77,187,134,68,179,126,3,171,48,152,223,129,10,203,73,1,246]",
              "sol": "stringToBytes32(\"175,146,168,142,204,119,74,218,132,187,23,160,188,97,206,77,187,134,68,179,126,3,171,48,152,223,129,10,203,73,1,246\")"
            },
            {
              "js": "[166,64,153,67,171,128,180,216,88,178,197,208,62,64,142,196,14,167,251,10,97,61,184,66,61,104,175,30,145,41,208,248]",
              "sol": "stringToBytes32(\"166,64,153,67,171,128,180,216,88,178,197,208,62,64,142,196,14,167,251,10,97,61,184,66,61,104,175,30,145,41,208,248\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.208ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[101,115,177,237,102,134,102,228,39,18,249,97,182,100,43,154,237,148,110,127,205,109,198,91,33,211,220,241,56,245,153,102]",
              "sol": "stringToBytes32(\"101,115,177,237,102,134,102,228,39,18,249,97,182,100,43,154,237,148,110,127,205,109,198,91,33,211,220,241,56,245,153,102\")"
            },
            {
              "js": "[177,47,216,226,229,82,203,47,241,113,212,131,64,121,187,22,123,39,114,130,68,155,40,89,13,80,151,42,109,220,184,95]",
              "sol": "abi.encode(\"177,47,216,226,229,82,203,47,241,113,212,131,64,121,187,22,123,39,114,130,68,155,40,89,13,80,151,42,109,220,184,95\")"
            },
            {
              "js": "[88,161,172,54,46,21,76,169,49,31,184,44,102,120,117,229,21,199,43,21,80,205,11,102,98,140,38,244,79,52,22,133]",
              "sol": "abi.encode(\"88,161,172,54,46,21,76,169,49,31,184,44,102,120,117,229,21,199,43,21,80,205,11,102,98,140,38,244,79,52,22,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.208ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[122,192,147,212,22,206,184,255,217,124,109,207,159,239,133,131,22,237,130,135,145,125,54,109,210,235,215,215,61,41,23,64]",
              "sol": "abi.encode(\"122,192,147,212,22,206,184,255,217,124,109,207,159,239,133,131,22,237,130,135,145,125,54,109,210,235,215,215,61,41,23,64\")"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[185,138,157,14,142,10,161,209,1,186,249,201,28,135,245,52,6,181,243,225,114,234,130,7,230,221,237,157,115,70,208,57]",
              "sol": "abi.encode(\"185,138,157,14,142,10,161,209,1,186,249,201,28,135,245,52,6,181,243,225,114,234,130,7,230,221,237,157,115,70,208,57\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.209ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[206,204,205,183,29,13,117,236,18,166,11,236,194,137,168,92,231,63,169,228,207,185,75,147,169,53,11,186,81,245,1,254]",
              "sol": "stringToBytes32(\"206,204,205,183,29,13,117,236,18,166,11,236,194,137,168,92,231,63,169,228,207,185,75,147,169,53,11,186,81,245,1,254\")"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[226,68,65,101,207,141,37,219,6,251,127,238,143,146,247,182,205,115,212,174,126,205,163,255,175,37,187,115,189,54,157,255]",
              "sol": "abi.encode(\"226,68,65,101,207,141,37,219,6,251,127,238,143,146,247,182,205,115,212,174,126,205,163,255,175,37,187,115,189,54,157,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[150,253,190,238,183,75,89,175,10,204,70,121,125,85,114,104,175,219,252,196,222,62,12,234,71,102,67,185,29,51,138,254]",
              "sol": "stringToBytes32(\"150,253,190,238,183,75,89,175,10,204,70,121,125,85,114,104,175,219,252,196,222,62,12,234,71,102,67,185,29,51,138,254\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[137,41,78,146,188,168,173,195,241,230,212,62,232,154,94,46,105,217,24,64,101,39,208,17,68,141,18,45,40,81,138,57]",
              "sol": "abi.encode(\"137,41,78,146,188,168,173,195,241,230,212,62,232,154,94,46,105,217,24,64,101,39,208,17,68,141,18,45,40,81,138,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.210ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[125,80,120,38,229,194,197,36,41,91,7,226,100,237,248,96,83,41,8,49,37,187,49,79,162,2,211,217,193,57,29,80]",
              "sol": "stringToBytes32(\"125,80,120,38,229,194,197,36,41,91,7,226,100,237,248,96,83,41,8,49,37,187,49,79,162,2,211,217,193,57,29,80\")"
            },
            {
              "js": "[167,36,77,224,202,129,205,66,77,12,211,202,72,36,248,56,86,103,180,226,133,99,53,89,111,45,182,63,167,45,47,215]",
              "sol": "abi.encode(\"167,36,77,224,202,129,205,66,77,12,211,202,72,36,248,56,86,103,180,226,133,99,53,89,111,45,182,63,167,45,47,215\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[125,80,120,38,229,194,197,36,41,91,7,226,100,237,248,96,83,41,8,49,37,187,49,79,162,2,211,217,193,57,29,80]",
                "sol": "stringToBytes32(\"125,80,120,38,229,194,197,36,41,91,7,226,100,237,248,96,83,41,8,49,37,187,49,79,162,2,211,217,193,57,29,80\")"
              },
              {
                "js": "[46,16,72,196,252,180,126,96,38,87,122,211,102,122,222,75,137,250,41,28,119,193,15,158,142,111,152,3,11,63,219,116,141]",
                "sol": "bytes33(\"46,16,72,196,252,180,126,96,38,87,122,211,102,122,222,75,137,250,41,28,119,193,15,158,142,111,152,3,11,63,219,116,141\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.211ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[214,151,93,175,84,2,159,182,109,29,180,102,197,82,33,94,249,54,90,32,10,212,121,196,156,38,217,168,254,139,228,214]",
              "sol": "abi.encode(\"214,151,93,175,84,2,159,182,109,29,180,102,197,82,33,94,249,54,90,32,10,212,121,196,156,38,217,168,254,139,228,214\")"
            },
            {
              "js": "[209,111,106,162,88,47,30,143,88,173,118,18,183,21,246,197,46,253,126,102,141,239,88,127,100,25,38,210,116,30,11,74]",
              "sol": "stringToBytes32(\"209,111,106,162,88,47,30,143,88,173,118,18,183,21,246,197,46,253,126,102,141,239,88,127,100,25,38,210,116,30,11,74\")"
            },
            {
              "js": "[119,217,48,125,206,230,38,168,12,31,1,250,115,214,151,211,177,224,211,77,167,0,156,102,95,5,136,74,248,252,199,48]",
              "sol": "abi.encode(\"119,217,48,125,206,230,38,168,12,31,1,250,115,214,151,211,177,224,211,77,167,0,156,102,95,5,136,74,248,252,199,48\")"
            },
            {
              "js": "\"lalc4o\"",
              "sol": "\"lalc4o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[77,60,72,148,219,12,49,88,185,163,107,176,154,208,213,175,13,22,156,215,20,245,60,220,108,163,35,247,109,95,143,218]",
              "sol": "abi.encode(\"77,60,72,148,219,12,49,88,185,163,107,176,154,208,213,175,13,22,156,215,20,245,60,220,108,163,35,247,109,95,143,218\")"
            },
            {
              "js": "[250,10,240,10,180,155,62,21,102,37,109,80,219,49,244,75,61,48,236,95,149,30,173,154,108,143,106,68,66,105,224,101]",
              "sol": "stringToBytes32(\"250,10,240,10,180,155,62,21,102,37,109,80,219,49,244,75,61,48,236,95,149,30,173,154,108,143,106,68,66,105,224,101\")"
            },
            {
              "js": "[159,108,18,185,154,69,129,204,30,242,90,66,112,4,100,42,122,135,213,41,32,39,126,146,238,14,172,247,27,34,7,247]",
              "sol": "abi.encode(\"159,108,18,185,154,69,129,204,30,242,90,66,112,4,100,42,122,135,213,41,32,39,126,146,238,14,172,247,27,34,7,247\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[9,63,71,50,80,21,209,115,87,12,1,52,126,246,21,110,215,54,221,42,230,97,11,46,65,105,0,245,13,114,107,117]",
              "sol": "abi.encode(\"9,63,71,50,80,21,209,115,87,12,1,52,126,246,21,110,215,54,221,42,230,97,11,46,65,105,0,245,13,114,107,117\")"
            },
            {
              "js": "[166,113,183,138,51,122,5,46,179,51,163,229,170,102,246,95,57,242,8,214,194,97,191,91,88,42,238,171,34,235,38,27]",
              "sol": "stringToBytes32(\"166,113,183,138,51,122,5,46,179,51,163,229,170,102,246,95,57,242,8,214,194,97,191,91,88,42,238,171,34,235,38,27\")"
            },
            {
              "js": "[99,147,131,8,64,229,173,105,146,216,192,0,223,247,214,107,98,135,219,150,153,82,26,53,108,31,236,75,252,222,61,153]",
              "sol": "abi.encode(\"99,147,131,8,64,229,173,105,146,216,192,0,223,247,214,107,98,135,219,150,153,82,26,53,108,31,236,75,252,222,61,153\")"
            },
            {
              "js": "\"vjhiqg\"",
              "sol": "\"vjhiqg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[163,26,217,190,6,255,50,39,255,24,40,85,126,218,171,160,97,8,249,211,62,219,224,222,164,83,72,223,100,238,118,170]",
              "sol": "abi.encode(\"163,26,217,190,6,255,50,39,255,24,40,85,126,218,171,160,97,8,249,211,62,219,224,222,164,83,72,223,100,238,118,170\")"
            },
            {
              "js": "[134,168,184,226,201,110,151,122,174,116,99,66,124,101,88,53,17,93,114,99,155,253,66,49,97,77,28,180,177,52,123,145]",
              "sol": "stringToBytes32(\"134,168,184,226,201,110,151,122,174,116,99,66,124,101,88,53,17,93,114,99,155,253,66,49,97,77,28,180,177,52,123,145\")"
            },
            {
              "js": "[89,212,157,83,145,7,88,122,22,94,181,226,115,71,119,22,234,3,80,143,254,115,16,142,75,21,105,217,45,66,55,229]",
              "sol": "abi.encode(\"89,212,157,83,145,7,88,122,22,94,181,226,115,71,119,22,234,3,80,143,254,115,16,142,75,21,105,217,45,66,55,229\")"
            },
            {
              "js": "\"ig8bi\"",
              "sol": "\"ig8bi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[28,182,249,20,77,166,138,120,27,230,229,144,4,155,161,170,183,166,251,193,107,255,54,210,48,172,53,255,244,195,124,108]",
              "sol": "abi.encode(\"28,182,249,20,77,166,138,120,27,230,229,144,4,155,161,170,183,166,251,193,107,255,54,210,48,172,53,255,244,195,124,108\")"
            },
            {
              "js": "[3,30,37,204,100,102,105,46,221,89,234,218,75,247,202,150,85,4,43,86,43,45,29,142,67,14,134,164,12,142,4,164]",
              "sol": "stringToBytes32(\"3,30,37,204,100,102,105,46,221,89,234,218,75,247,202,150,85,4,43,86,43,45,29,142,67,14,134,164,12,142,4,164\")"
            },
            {
              "js": "[27,249,169,10,91,201,165,212,87,108,188,153,15,92,194,155,4,1,217,82,174,107,6,252,145,28,80,83,59,46,154,141]",
              "sol": "abi.encode(\"27,249,169,10,91,201,165,212,87,108,188,153,15,92,194,155,4,1,217,82,174,107,6,252,145,28,80,83,59,46,154,141\")"
            },
            {
              "js": "\"h6jlfo\"",
              "sol": "\"h6jlfo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[22,209,188,209,46,103,203,123,253,180,55,118,97,113,249,87,154,48,24,89,165,204,160,184,63,98,86,160,165,195,250,173]",
              "sol": "abi.encode(\"22,209,188,209,46,103,203,123,253,180,55,118,97,113,249,87,154,48,24,89,165,204,160,184,63,98,86,160,165,195,250,173\")"
            },
            {
              "js": "[177,106,20,41,34,133,1,177,171,90,137,173,250,153,47,86,246,184,115,104,162,85,49,16,152,127,207,64,160,112,47,61]",
              "sol": "stringToBytes32(\"177,106,20,41,34,133,1,177,171,90,137,173,250,153,47,86,246,184,115,104,162,85,49,16,152,127,207,64,160,112,47,61\")"
            },
            {
              "js": "[22,22,246,133,231,81,32,16,106,235,181,248,77,185,178,46,254,95,57,74,26,134,209,197,90,66,53,25,76,87,41,162]",
              "sol": "abi.encode(\"22,22,246,133,231,81,32,16,106,235,181,248,77,185,178,46,254,95,57,74,26,134,209,197,90,66,53,25,76,87,41,162\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[156,41,51,95,114,3,236,199,182,33,53,177,208,136,102,20,239,142,0,5,145,75,120,211,103,113,247,239,128,94,181,35]",
              "sol": "abi.encode(\"156,41,51,95,114,3,236,199,182,33,53,177,208,136,102,20,239,142,0,5,145,75,120,211,103,113,247,239,128,94,181,35\")"
            },
            {
              "js": "[194,115,91,38,174,222,138,181,119,188,91,253,215,73,20,140,184,101,199,61,180,169,95,4,7,96,168,64,1,164,170,1]",
              "sol": "stringToBytes32(\"194,115,91,38,174,222,138,181,119,188,91,253,215,73,20,140,184,101,199,61,180,169,95,4,7,96,168,64,1,164,170,1\")"
            },
            {
              "js": "[4,22,235,95,147,59,107,182,156,67,15,195,58,103,16,47,82,35,192,125,110,226,228,224,116,21,80,129,176,106,244,31]",
              "sol": "abi.encode(\"4,22,235,95,147,59,107,182,156,67,15,195,58,103,16,47,82,35,192,125,110,226,228,224,116,21,80,129,176,106,244,31\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[33,180,84,214,178,254,2,217,103,150,95,197,189,164,142,1,159,4,117,72,93,117,203,35,105,143,48,50,216,149,29,86]",
              "sol": "abi.encode(\"33,180,84,214,178,254,2,217,103,150,95,197,189,164,142,1,159,4,117,72,93,117,203,35,105,143,48,50,216,149,29,86\")"
            },
            {
              "js": "[158,123,128,157,235,58,3,235,52,175,27,220,67,107,254,29,148,61,32,34,165,198,123,48,144,174,24,255,222,107,136,66]",
              "sol": "stringToBytes32(\"158,123,128,157,235,58,3,235,52,175,27,220,67,107,254,29,148,61,32,34,165,198,123,48,144,174,24,255,222,107,136,66\")"
            },
            {
              "js": "[224,69,45,63,56,21,185,149,175,39,79,160,141,228,184,133,100,207,139,83,12,97,109,23,66,30,217,206,60,11,213,174]",
              "sol": "abi.encode(\"224,69,45,63,56,21,185,149,175,39,79,160,141,228,184,133,100,207,139,83,12,97,109,23,66,30,217,206,60,11,213,174\")"
            },
            {
              "js": "\"vjhiqg\"",
              "sol": "\"vjhiqg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.217ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[191,132,207,76,40,146,211,118,218,196,131,42,195,19,145,34,28,95,89,74,69,25,126,50,177,34,73,186,88,147,244,128]",
              "sol": "abi.encode(\"191,132,207,76,40,146,211,118,218,196,131,42,195,19,145,34,28,95,89,74,69,25,126,50,177,34,73,186,88,147,244,128\")"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "[242,216,212,68,59,26,94,199,254,242,50,170,139,21,89,6,140,166,4,173,238,135,163,232,12,143,236,71,75,62,71,112]",
              "sol": "abi.encode(\"242,216,212,68,59,26,94,199,254,242,50,170,139,21,89,6,140,166,4,173,238,135,163,232,12,143,236,71,75,62,71,112\")"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.217ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[98,78,207,5,58,164,166,148,215,213,211,16,217,172,155,138,66,113,38,153,38,26,7,158,149,231,201,221,100,215,51,180]",
              "sol": "stringToBytes32(\"98,78,207,5,58,164,166,148,215,213,211,16,217,172,155,138,66,113,38,153,38,26,7,158,149,231,201,221,100,215,51,180\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[221,125,84,37,198,134,106,36,128,31,212,203,178,134,244,138,145,199,158,109,212,242,250,133,97,101,145,206,115,86,119,192]",
              "sol": "stringToBytes32(\"221,125,84,37,198,134,106,36,128,31,212,203,178,134,244,138,145,199,158,109,212,242,250,133,97,101,145,206,115,86,119,192\")"
            },
            {
              "js": "[218,191,174,94,27,188,102,104,108,119,108,55,34,198,219,205,67,244,182,225,227,133,12,205,209,9,113,220,208,54,214,192]",
              "sol": "stringToBytes32(\"218,191,174,94,27,188,102,104,108,119,108,55,34,198,219,205,67,244,182,225,227,133,12,205,209,9,113,220,208,54,214,192\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.218ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[68,73,70,239,140,25,151,217,125,159,112,111,4,34,167,142,182,157,132,192,217,46,62,21,75,14,214,14,229,168,143,151]",
              "sol": "stringToBytes32(\"68,73,70,239,140,25,151,217,125,159,112,111,4,34,167,142,182,157,132,192,217,46,62,21,75,14,214,14,229,168,143,151\")"
            },
            {
              "js": "[2,190,9,145,148,77,102,132,234,239,139,167,224,134,250,155,210,180,76,87,231,124,44,55,3,14,111,38,30,225,208,206,18,112,8,126,134,2,242,16,197,122,71,103,26,64,104,202,24,47,122,25,134,67,222,115,191,234,242]",
              "sol": "abi.encode(\"2,190,9,145,148,77,102,132,234,239,139,167,224,134,250,155,210,180,76,87,231,124,44,55,3,14,111,38,30,225,208,206,18,112,8,126,134,2,242,16,197,122,71,103,26,64,104,202,24,47,122,25,134,67,222,115,191,234,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[107,89,217,70,104,136,51,187,41,232,108,108,165,49,74,176,250,217,0,1,202,105,167,52,119,156,230,31,2,4,74,79]",
              "sol": "stringToBytes32(\"107,89,217,70,104,136,51,187,41,232,108,108,165,49,74,176,250,217,0,1,202,105,167,52,119,156,230,31,2,4,74,79\")"
            },
            {
              "js": "[75,44,35,221,176,239,31,79,238,201,188,26,176,215,138,139,171,194,58,52,145,161,197,82,191,203,82,199,25,122,227,92,27,165,110,187,254,102,42,69,101,46,34,51,144,165,51,231,215,228,208,102,196,180,93,122,155,253,214,4,7,185,100,132,94]",
              "sol": "abi.encode(\"75,44,35,221,176,239,31,79,238,201,188,26,176,215,138,139,171,194,58,52,145,161,197,82,191,203,82,199,25,122,227,92,27,165,110,187,254,102,42,69,101,46,34,51,144,165,51,231,215,228,208,102,196,180,93,122,155,253,214,4,7,185,100,132,94\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.219ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.220ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.221ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.221ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.221ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.222ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.222ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.222ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.222ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.222ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.223ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.223ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.224ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.225ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.225ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.228ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.231ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[130,131,63,104,84,239,212,176,102,94,5,189,171,189,215,208,114,8,140,149,244,182,119,78,107,194,43,213,26,119,157,120]",
              "sol": "stringToBytes32(\"130,131,63,104,84,239,212,176,102,94,5,189,171,189,215,208,114,8,140,149,244,182,119,78,107,194,43,213,26,119,157,120\")"
            },
            {
              "js": "\"hsy1n\"",
              "sol": "\"hsy1n\""
            },
            {
              "js": "[48,92,152,9,129,91,248,155,202,191,78,103,61,248,37,10,214,79,29,115,174,62,163,171,98,69,241,153,29,120,60,190]",
              "sol": "abi.encode(\"48,92,152,9,129,91,248,155,202,191,78,103,61,248,37,10,214,79,29,115,174,62,163,171,98,69,241,153,29,120,60,190\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.232ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.233ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.234ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.235ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[98,18,31,189,158,222,156,90,117,75,74,239,162,242,80,208,114,219,10,36,67,250,197,181,84,101,94,242,145,178,193,213]",
              "sol": "abi.encode(\"98,18,31,189,158,222,156,90,117,75,74,239,162,242,80,208,114,219,10,36,67,250,197,181,84,101,94,242,145,178,193,213\")"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "[24,194,11,137,226,167,215,4,164,232,54,183,16,97,50,88,107,41,23,209,246,135,89,101,202,41,249,19,139,12,226,13]",
              "sol": "stringToBytes32(\"24,194,11,137,226,167,215,4,164,232,54,183,16,97,50,88,107,41,23,209,246,135,89,101,202,41,249,19,139,12,226,13\")"
            },
            {
              "js": "[193,54,213,110,123,118,46,95,158,135,79,176,226,127,227,121,52,49,112,191,154,11,219,161,148,229,232,120,162,231,225,213]",
              "sol": "stringToBytes32(\"193,54,213,110,123,118,46,95,158,135,79,176,226,127,227,121,52,49,112,191,154,11,219,161,148,229,232,120,162,231,225,213\")"
            },
            {
              "js": "[81,199,32,162,151,96,24,158,240,29,131,198,223,241,160,46,85,106,30,222,230,81,120,232,87,232,177,207,90,53,151,20]",
              "sol": "stringToBytes32(\"81,199,32,162,151,96,24,158,240,29,131,198,223,241,160,46,85,106,30,222,230,81,120,232,87,232,177,207,90,53,151,20\")"
            },
            {
              "js": "[198,110,182,126,5,118,46,1,163,164,43,185,12,95,171,198,144,202,234,228,195,184,86,206,89,62,41,174,192,116,93,246]",
              "sol": "stringToBytes32(\"198,110,182,126,5,118,46,1,163,164,43,185,12,95,171,198,144,202,234,228,195,184,86,206,89,62,41,174,192,116,93,246\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.236ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.237ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.238ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.238ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.239ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.240ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.240ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.243ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "61",
                "sol": "61"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.245ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T21:41:01.249ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.250ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.251ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T21:41:01.253ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}