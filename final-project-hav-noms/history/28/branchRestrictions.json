,{
  "2020-11-13T22:41:45.336ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:44:03.536ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:44:40.715ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:44:57.981ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:45:15.273ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:45:32.888ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:45:50.152ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:46:07.517ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:46:24.868ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:46:42.426ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:00.403ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.894ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.897ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [5,163,110,65,209,153,167,177,192,133,60,200,46,249,98,237,173,222,230,11,169,178,60,112,190,249,214,182,83,92,35,237],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"5,163,110,65,209,153,167,177,192,133,60,200,46,249,98,237,173,222,230,11,169,178,60,112,190,249,214,182,83,92,35,237\"),24)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.897ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [13,129,150,39,147,206,107,210,241,253,227,186,220,168,128,232,82,170,165,233,194,146,7,140,58,83,189,196,175,247,77,65],\"capacity\": 255}",
              "sol": "Buffer.buffer(abi.encode(\"13,129,150,39,147,206,107,210,241,253,227,186,220,168,128,232,82,170,165,233,194,146,7,140,58,83,189,196,175,247,77,65\"),255)"
            },
            {
              "js": "[120,188,206,197,99,238,198,116,58,208,150,84,73,202,149,171,159,94,51,165,194,253,181,102,146,14,207,222,196,117,209,95]",
              "sol": "abi.encode(\"120,188,206,197,99,238,198,116,58,208,150,84,73,202,149,171,159,94,51,165,194,253,181,102,146,14,207,222,196,117,209,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.898ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [219,62,94,136,185,106,96,225,42,156,1,135,114,49,67,251,159,24,139,1,55,188,74,69,82,136,170,212,43,184,101,134],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"219,62,94,136,185,106,96,225,42,156,1,135,114,49,67,251,159,24,139,1,55,188,74,69,82,136,170,212,43,184,101,134\"),1)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.898ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [158,229,217,30,222,245,191,5,163,226,134,153,34,97,64,91,13,86,226,60,71,235,205,117,201,167,246,4,14,141,224,64],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"158,229,217,30,222,245,191,5,163,226,134,153,34,97,64,91,13,86,226,60,71,235,205,117,201,167,246,4,14,141,224,64\"),1532892062)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.901ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [216,149,253,165,174,196,143,1,114,109,31,79,188,75,37,69,192,177,227,139,18,55,45,161,98,49,32,5,26,163,78,99],\"capacity\": 1336}",
              "sol": "Buffer.buffer(abi.encode(\"216,149,253,165,174,196,143,1,114,109,31,79,188,75,37,69,192,177,227,139,18,55,45,161,98,49,32,5,26,163,78,99\"),1336)"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.902ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [109,91,44,191,26,90,1,100,21,73,128,67,185,100,128,241,133,1,17,130,159,60,8,44,26,140,211,152,161,95,102,235],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"109,91,44,191,26,90,1,100,21,73,128,67,185,100,128,241,133,1,17,130,159,60,8,44,26,140,211,152,161,95,102,235\"),4)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [216,138,166,187,10,67,223,234,32,89,10,170,131,98,102,191,123,123,179,2,239,244,221,31,23,120,140,156,88,15,249,108],\"capacity\": 5}",
              "sol": "Buffer.buffer(abi.encode(\"216,138,166,187,10,67,223,234,32,89,10,170,131,98,102,191,123,123,179,2,239,244,221,31,23,120,140,156,88,15,249,108\"),5)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.903ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [34,119,68,151,141,194,211,88,190,99,145,7,81,124,108,213,240,0,65,113,25,60,67,161,217,50,144,235,189,239,218,194],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"34,119,68,151,141,194,211,88,190,99,145,7,81,124,108,213,240,0,65,113,25,60,67,161,217,50,144,235,189,239,218,194\"),49)"
            },
            {
              "js": "[197,5,112,42,242,162,97,186,189,134,23,35,161,202,168,125,162,181,152,230,161,4,19,72,176,83,194,27,198,35,243,24]",
              "sol": "abi.encode(\"197,5,112,42,242,162,97,186,189,134,23,35,161,202,168,125,162,181,152,230,161,4,19,72,176,83,194,27,198,35,243,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.904ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [180,209,67,103,159,117,124,217,53,152,119,135,51,105,217,74,219,43,179,47,134,15,101,111,198,51,138,190,54,101,208,151],\"capacity\": 21}",
              "sol": "Buffer.buffer(abi.encode(\"180,209,67,103,159,117,124,217,53,152,119,135,51,105,217,74,219,43,179,47,134,15,101,111,198,51,138,190,54,101,208,151\"),21)"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.905ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [62,220,75,49,166,99,40,13,241,177,234,58,165,205,81,108,155,225,119,38,162,211,36,174,103,231,99,115,125,245,37,53],\"capacity\": 1532892063}",
              "sol": "Buffer.buffer(abi.encode(\"62,220,75,49,166,99,40,13,241,177,234,58,165,205,81,108,155,225,119,38,162,211,36,174,103,231,99,115,125,245,37,53\"),1532892063)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.905ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [61,133,109,34,252,37,61,81,89,97,163,48,31,178,78,11,76,245,129,213,85,40,95,144,204,72,116,11,79,239,109,124],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"61,133,109,34,252,37,61,81,89,97,163,48,31,178,78,11,76,245,129,213,85,40,95,144,204,72,116,11,79,239,109,124\"),7)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.906ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [58,145,22,102,40,253,75,168,55,228,163,79,217,47,50,39,223,177,103,212,145,55,253,252,226,10,151,145,83,210,148,112],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"58,145,22,102,40,253,75,168,55,228,163,79,217,47,50,39,223,177,103,212,145,55,253,252,226,10,151,145,83,210,148,112\"),2014223716)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.910ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.912ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.912ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.913ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.914ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.914ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "61",
                "sol": "61"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:17.915ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.916ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.917ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.917ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.918ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[123,36,101,142,82,108,169,193,164,85,5,87,203,237,102,87,58,60,244,202,69,209,20,175,63,102,19,122,192,78,116,33]",
              "sol": "stringToBytes32(\"123,36,101,142,82,108,169,193,164,85,5,87,203,237,102,87,58,60,244,202,69,209,20,175,63,102,19,122,192,78,116,33\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.919ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[0,50,170,155,157,18,116,30,241,78,79,159,121,146,182,118,252,37,57,251,182,136,220,187,89,180,53,20,100,54,73,39]",
              "sol": "stringToBytes32(\"0,50,170,155,157,18,116,30,241,78,79,159,121,146,182,118,252,37,57,251,182,136,220,187,89,180,53,20,100,54,73,39\")"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[63,114,214,168,43,229,158,143,204,103,247,25,205,71,198,113,150,47,118,27,73,154,124,23,11,18,37,129,71,242,196,63]",
              "sol": "abi.encode(\"63,114,214,168,43,229,158,143,204,103,247,25,205,71,198,113,150,47,118,27,73,154,124,23,11,18,37,129,71,242,196,63\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.961ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.962ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.962ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.963ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.963ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.963ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.964ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.966ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.966ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.967ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.967ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.968ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.968ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"0cr5qk\"",
              "sol": "\"0cr5qk\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.969ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.969ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"0\",\"\",\"P\",\"listingID arg\",\"updateEthPrice called\"]",
              "sol": "[string(\"0\"),string(\"\"),string(\"P\"),string(\"listingID arg\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.970ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"updateEthPrice called\"]",
              "sol": "[string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.970ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"costUSD\",\"RevertWithReason\",\"0\",\"PayableExample\",\"listingID arg\"]",
              "sol": "[string(\"costUSD\"),string(\"RevertWithReason\"),string(\"0\"),string(\"PayableExample\"),string(\"listingID arg\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.971ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"Example\",\"0\",\"ETH\",\"\\x19Ethereum Signed Message:\\n32\",\"call updateEthPrice\",\"0\",\"RevertWithReason\",\"Example\",\"\",\"call updateEthPrice\"]",
              "sol": "[string(\"Example\"),string(\"0\"),string(\"ETH\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"call updateEthPrice\"),string(\"0\"),string(\"RevertWithReason\"),string(\"Example\"),string(\"\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.972ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"0cr5qk\"",
              "sol": "\"0cr5qk\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.972ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.972ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"costUSD\"]",
              "sol": "[string(\"costUSD\")]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.974ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.974ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"L\",\"\"]",
              "sol": "[string(\"L\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.975ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"bw0ukf\"",
              "sol": "\"bw0ukf\""
            },
            {
              "js": "[\"P\",\"\"]",
              "sol": "[string(\"P\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.975ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"bw0ukf\",\"costUSD\"]",
              "sol": "[string(\"bw0ukf\"),string(\"costUSD\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.976ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"IsLibrary\",\"0\"]",
              "sol": "[string(\"IsLibrary\"),string(\"0\")]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.976ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"IsLibrary\",\"call updateEthPrice\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"IsLibrary\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.977ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"trade.totalPrice\",\"0\",\"UsesExample\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"0\"),string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.977ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"Example\",\"ETH\",\"listingID arg\"]",
              "sol": "[string(\"Example\"),string(\"ETH\"),string(\"listingID arg\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.978ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"bw0ukf\"",
              "sol": "\"bw0ukf\""
            },
            {
              "js": "[\"trade.totalPrice\",\"0\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"0\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.978ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"\",\"0\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"\"),string(\"0\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.979ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"zcc4cr\",\"IsLibrary\",\"Oraclize query was sent, standing by for the answer...\",\"IsLibrary\"]",
              "sol": "[string(\"zcc4cr\"),string(\"IsLibrary\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"IsLibrary\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.979ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"L\",\"call updateEthPrice\",\"UsesExample\",\"P\"]",
              "sol": "[string(\"L\"),string(\"call updateEthPrice\"),string(\"UsesExample\"),string(\"P\")]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.980ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"call updateEthPrice\",\"\\x19Ethereum Signed Message:\\n32\",\"updateEthPrice called\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"updateEthPrice called\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.981ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"trade.totalPrice\",\"IsLibrary\",\"\",\"L\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"trade.totalPrice\"),string(\"IsLibrary\"),string(\"\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.981ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"listingID arg\",\"call updateEthPrice\",\"0\",\"IsLibrary\",\"0\"]",
              "sol": "[string(\"listingID arg\"),string(\"call updateEthPrice\"),string(\"0\"),string(\"IsLibrary\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.982ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"UsesExample\",\"updateEthPrice called\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"IsLibrary\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"UsesExample\"),string(\"updateEthPrice called\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"IsLibrary\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.983ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"listingID arg\",\"listingID arg\",\"\\x19Ethereum Signed Message:\\n32\",\"updateEthPrice called\",\"trade.totalPrice\"]",
              "sol": "[string(\"listingID arg\"),string(\"listingID arg\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"updateEthPrice called\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.984ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[99,191,98,198,22,6,231,27,241,134,55,211,180,134,112,17,192,143,192,105,62,153,205,133,210,53,230,233,120,188,1,156]]",
              "sol": "[bytes(abi.encode(\"99,191,98,198,22,6,231,27,241,134,55,211,180,134,112,17,192,143,192,105,62,153,205,133,210,53,230,233,120,188,1,156\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.984ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[14,106,225,57,63,255,104,71,84,54,7,115,108,255,246,110,251,196,215,250,24,58,100,255,175,66,10,41,70,17,85,56],[37,65,72,112,34,88,58,211,49,5,248,94,193,33,99,28,163,131,135,246,216,42,131,58,141,227,210,82,71,211,88,202]]",
              "sol": "[bytes(abi.encode(\"14,106,225,57,63,255,104,71,84,54,7,115,108,255,246,110,251,196,215,250,24,58,100,255,175,66,10,41,70,17,85,56\")),bytes(abi.encode(\"37,65,72,112,34,88,58,211,49,5,248,94,193,33,99,28,163,131,135,246,216,42,131,58,141,227,210,82,71,211,88,202\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.985ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[44,235,176,44,247,146,108,151,97,56,130,168,167,8,213,57,181,237,191,78,197,43,136,153,20,61,38,82,250,71,194,66],[75,88,15,51,193,173,149,160,96,1,89,165,73,41,184,21,183,92,252,70,38,67,20,11,191,203,80,87,254,14,234,191],[194,214,215,49,95,250,194,216,179,137,238,107,57,235,133,62,63,89,18,170,94,162,154,44,106,106,251,111,45,79,165,5],[122,126,78,205,153,203,85,158,238,36,218,127,112,70,202,160,215,142,48,86,1,232,41,19,140,48,202,67,172,216,249,81],[21,130,251,158,182,139,197,249,100,196,41,112,254,212,74,181,213,185,60,11,75,132,39,252,150,0,148,4,215,85,232,76]]",
              "sol": "[bytes(abi.encode(\"44,235,176,44,247,146,108,151,97,56,130,168,167,8,213,57,181,237,191,78,197,43,136,153,20,61,38,82,250,71,194,66\")),bytes(abi.encode(\"75,88,15,51,193,173,149,160,96,1,89,165,73,41,184,21,183,92,252,70,38,67,20,11,191,203,80,87,254,14,234,191\")),bytes(abi.encode(\"194,214,215,49,95,250,194,216,179,137,238,107,57,235,133,62,63,89,18,170,94,162,154,44,106,106,251,111,45,79,165,5\")),bytes(abi.encode(\"122,126,78,205,153,203,85,158,238,36,218,127,112,70,202,160,215,142,48,86,1,232,41,19,140,48,202,67,172,216,249,81\")),bytes(abi.encode(\"21,130,251,158,182,139,197,249,100,196,41,112,254,212,74,181,213,185,60,11,75,132,39,252,150,0,148,4,215,85,232,76\"))]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.986ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[182,159,99,52,34,166,29,148,22,166,149,6,110,89,176,167,239,16,95,223,9,43,155,144,244,43,213,207,154,233,7,5]]",
              "sol": "[bytes(abi.encode(\"182,159,99,52,34,166,29,148,22,166,149,6,110,89,176,167,239,16,95,223,9,43,155,144,244,43,213,207,154,233,7,5\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.987ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[130,45,27,91,62,167,50,144,159,207,190,177,38,48,153,184,23,174,234,198,147,26,61,127,189,149,18,27,118,33,22,28]]",
              "sol": "[bytes(abi.encode(\"130,45,27,91,62,167,50,144,159,207,190,177,38,48,153,184,23,174,234,198,147,26,61,127,189,149,18,27,118,33,22,28\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.987ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[141,58,25,170,115,156,187,61,160,136,114,210,121,232,25,63,219,191,187,86,36,78,6,128,174,191,163,67,85,209,22,178]]",
              "sol": "[bytes(abi.encode(\"141,58,25,170,115,156,187,61,160,136,114,210,121,232,25,63,219,191,187,86,36,78,6,128,174,191,163,67,85,209,22,178\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.988ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[128,146,148,135,102,62,141,59,253,127,29,228,5,7,28,175,176,251,137,203,96,159,180,238,97,252,55,49,214,1,194,55]]",
              "sol": "[bytes(abi.encode(\"128,146,148,135,102,62,141,59,253,127,29,228,5,7,28,175,176,251,137,203,96,159,180,238,97,252,55,49,214,1,194,55\"))]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.989ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"zcc4cr\"",
              "sol": "\"zcc4cr\""
            },
            {
              "js": "[[153,22,193,102,155,25,6,249,222,138,159,188,244,169,132,178,16,42,30,94,88,218,201,211,179,171,38,39,88,170,71,17]]",
              "sol": "[bytes(abi.encode(\"153,22,193,102,155,25,6,249,222,138,159,188,244,169,132,178,16,42,30,94,88,218,201,211,179,171,38,39,88,170,71,17\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.990ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[6,144,5,195,125,5,96,8,227,104,105,142,58,234,19,148,213,169,163,54,104,157,19,236,190,70,76,200,5,27,149,141],[92,85,205,47,154,134,166,9,228,230,218,114,15,63,162,142,219,87,78,227,124,143,69,118,68,67,212,4,228,209,37,244]]",
              "sol": "[bytes(abi.encode(\"6,144,5,195,125,5,96,8,227,104,105,142,58,234,19,148,213,169,163,54,104,157,19,236,190,70,76,200,5,27,149,141\")),bytes(abi.encode(\"92,85,205,47,154,134,166,9,228,230,218,114,15,63,162,142,219,87,78,227,124,143,69,118,68,67,212,4,228,209,37,244\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.991ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[137,80,81,49,242,69,152,99,140,67,195,147,158,243,104,191,183,110,119,163,153,238,135,108,18,186,245,93,68,25,230,215],[19,46,104,95,6,196,19,124,192,49,149,203,86,24,14,38,13,0,63,233,4,81,105,8,58,136,51,59,150,116,130,240]]",
              "sol": "[bytes(abi.encode(\"137,80,81,49,242,69,152,99,140,67,195,147,158,243,104,191,183,110,119,163,153,238,135,108,18,186,245,93,68,25,230,215\")),bytes(abi.encode(\"19,46,104,95,6,196,19,124,192,49,149,203,86,24,14,38,13,0,63,233,4,81,105,8,58,136,51,59,150,116,130,240\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.991ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[96,46,4,93,211,137,97,83,89,234,148,59,155,220,28,120,95,243,185,192,119,88,255,30,220,139,70,68,73,120,38,211],[209,98,25,123,153,101,11,152,228,234,85,93,145,55,255,116,172,249,94,45,2,95,203,162,237,13,197,167,90,26,211,114]]",
              "sol": "[bytes(abi.encode(\"96,46,4,93,211,137,97,83,89,234,148,59,155,220,28,120,95,243,185,192,119,88,255,30,220,139,70,68,73,120,38,211\")),bytes(abi.encode(\"209,98,25,123,153,101,11,152,228,234,85,93,145,55,255,116,172,249,94,45,2,95,203,162,237,13,197,167,90,26,211,114\"))]"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.992ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[5,212,51,159,64,235,24,22,236,6,118,180,153,165,142,39,176,32,15,76,220,140,253,118,21,88,110,76,41,199,202,14],[183,155,7,189,94,159,11,157,36,191,97,236,248,253,11,1,205,241,229,84,253,155,177,173,171,61,103,7,110,211,118,52]]",
              "sol": "[bytes(abi.encode(\"5,212,51,159,64,235,24,22,236,6,118,180,153,165,142,39,176,32,15,76,220,140,253,118,21,88,110,76,41,199,202,14\")),bytes(abi.encode(\"183,155,7,189,94,159,11,157,36,191,97,236,248,253,11,1,205,241,229,84,253,155,177,173,171,61,103,7,110,211,118,52\"))]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.993ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[247,75,149,57,227,3,219,239,173,180,30,243,232,51,120,241,211,209,171,196,6,70,169,139,16,193,27,224,82,191,2,251],[37,12,189,14,59,244,229,205,237,155,255,210,162,91,249,43,220,119,112,201,39,28,125,19,28,159,55,91,227,127,140,8],[70,80,27,95,215,65,166,127,255,166,79,50,219,31,156,65,136,101,16,4,90,177,220,36,85,63,161,166,143,53,224,248]]",
              "sol": "[bytes(abi.encode(\"247,75,149,57,227,3,219,239,173,180,30,243,232,51,120,241,211,209,171,196,6,70,169,139,16,193,27,224,82,191,2,251\")),bytes(abi.encode(\"37,12,189,14,59,244,229,205,237,155,255,210,162,91,249,43,220,119,112,201,39,28,125,19,28,159,55,91,227,127,140,8\")),bytes(abi.encode(\"70,80,27,95,215,65,166,127,255,166,79,50,219,31,156,65,136,101,16,4,90,177,220,36,85,63,161,166,143,53,224,248\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.993ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[85,190,46,225,50,7,22,209,153,40,178,160,7,31,185,91,147,178,39,0,176,237,97,85,140,242,213,247,57,1,221,9],[37,26,194,41,149,8,54,59,88,122,192,90,16,69,78,245,100,55,17,221,3,235,179,253,169,14,125,201,201,132,24,150],[39,191,78,199,142,60,164,3,172,8,54,22,224,79,187,19,234,132,228,87,132,239,154,143,181,56,117,142,232,60,37,141]]",
              "sol": "[bytes(abi.encode(\"85,190,46,225,50,7,22,209,153,40,178,160,7,31,185,91,147,178,39,0,176,237,97,85,140,242,213,247,57,1,221,9\")),bytes(abi.encode(\"37,26,194,41,149,8,54,59,88,122,192,90,16,69,78,245,100,55,17,221,3,235,179,253,169,14,125,201,201,132,24,150\")),bytes(abi.encode(\"39,191,78,199,142,60,164,3,172,8,54,22,224,79,187,19,234,132,228,87,132,239,154,143,181,56,117,142,232,60,37,141\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.994ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"0cr5qk\"",
              "sol": "\"0cr5qk\""
            },
            {
              "js": "[[114,39,189,59,193,81,56,96,136,1,246,37,187,90,140,214,239,46,139,55,17,93,205,51,6,76,255,111,8,178,238,234],[126,23,88,172,148,235,66,1,62,33,206,47,87,25,150,142,213,7,181,94,3,140,223,196,175,48,62,194,109,219,251,12],[37,105,23,185,36,158,95,167,24,22,75,216,4,179,106,152,165,120,196,244,131,141,55,12,100,205,79,101,162,162,13,128]]",
              "sol": "[bytes(abi.encode(\"114,39,189,59,193,81,56,96,136,1,246,37,187,90,140,214,239,46,139,55,17,93,205,51,6,76,255,111,8,178,238,234\")),bytes(abi.encode(\"126,23,88,172,148,235,66,1,62,33,206,47,87,25,150,142,213,7,181,94,3,140,223,196,175,48,62,194,109,219,251,12\")),bytes(abi.encode(\"37,105,23,185,36,158,95,167,24,22,75,216,4,179,106,152,165,120,196,244,131,141,55,12,100,205,79,101,162,162,13,128\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.995ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[129,223,72,45,185,52,210,53,61,3,64,213,126,226,55,32,203,181,0,247,116,71,253,180,83,180,168,35,228,183,115,1],[84,78,138,154,220,94,86,244,22,193,238,83,201,63,205,95,76,64,152,239,109,191,81,47,160,219,132,147,141,73,82,241],[68,236,47,114,1,111,190,102,58,43,115,68,218,106,109,126,240,149,113,107,174,11,201,116,116,227,135,158,66,108,37,130]]",
              "sol": "[bytes(abi.encode(\"129,223,72,45,185,52,210,53,61,3,64,213,126,226,55,32,203,181,0,247,116,71,253,180,83,180,168,35,228,183,115,1\")),bytes(abi.encode(\"84,78,138,154,220,94,86,244,22,193,238,83,201,63,205,95,76,64,152,239,109,191,81,47,160,219,132,147,141,73,82,241\")),bytes(abi.encode(\"68,236,47,114,1,111,190,102,58,43,115,68,218,106,109,126,240,149,113,107,174,11,201,116,116,227,135,158,66,108,37,130\"))]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.996ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[248,161,167,10,4,209,225,138,196,190,32,168,152,179,168,242,55,246,163,90,143,213,120,36,252,126,13,123,209,54,129,50],[21,1,90,138,175,164,25,149,165,84,51,105,157,148,44,175,111,108,12,141,66,35,184,78,149,55,201,103,34,50,62,210],[188,114,57,243,114,215,250,177,143,219,72,146,143,94,222,184,242,176,17,183,40,6,220,29,210,76,52,121,167,4,119,98],[200,73,110,31,147,173,9,203,239,62,24,159,11,158,233,239,123,208,240,7,93,139,56,250,32,248,26,183,249,126,13,239]]",
              "sol": "[bytes(abi.encode(\"248,161,167,10,4,209,225,138,196,190,32,168,152,179,168,242,55,246,163,90,143,213,120,36,252,126,13,123,209,54,129,50\")),bytes(abi.encode(\"21,1,90,138,175,164,25,149,165,84,51,105,157,148,44,175,111,108,12,141,66,35,184,78,149,55,201,103,34,50,62,210\")),bytes(abi.encode(\"188,114,57,243,114,215,250,177,143,219,72,146,143,94,222,184,242,176,17,183,40,6,220,29,210,76,52,121,167,4,119,98\")),bytes(abi.encode(\"200,73,110,31,147,173,9,203,239,62,24,159,11,158,233,239,123,208,240,7,93,139,56,250,32,248,26,183,249,126,13,239\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.996ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[172,180,230,83,125,114,191,226,164,82,138,81,149,93,24,22,49,114,186,156,185,207,254,206,108,130,175,221,124,40,137,3],[13,247,135,231,3,140,65,193,115,94,80,48,236,39,227,57,100,214,132,175,38,89,211,137,194,97,79,155,81,197,233,253],[13,164,117,153,230,129,242,158,39,111,113,84,158,166,131,32,110,247,18,125,204,195,178,219,192,166,53,94,72,139,228,168],[248,130,195,145,32,219,86,119,120,197,70,206,214,26,201,228,61,155,60,110,70,235,177,15,58,235,37,193,146,224,107,236]]",
              "sol": "[bytes(abi.encode(\"172,180,230,83,125,114,191,226,164,82,138,81,149,93,24,22,49,114,186,156,185,207,254,206,108,130,175,221,124,40,137,3\")),bytes(abi.encode(\"13,247,135,231,3,140,65,193,115,94,80,48,236,39,227,57,100,214,132,175,38,89,211,137,194,97,79,155,81,197,233,253\")),bytes(abi.encode(\"13,164,117,153,230,129,242,158,39,111,113,84,158,166,131,32,110,247,18,125,204,195,178,219,192,166,53,94,72,139,228,168\")),bytes(abi.encode(\"248,130,195,145,32,219,86,119,120,197,70,206,214,26,201,228,61,155,60,110,70,235,177,15,58,235,37,193,146,224,107,236\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.997ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[58,102,44,62,51,106,229,87,21,19,150,234,44,9,230,118,153,177,226,56,62,235,228,72,255,15,190,163,163,229,56,91],[61,175,252,241,164,28,39,5,179,199,43,219,59,141,109,107,56,229,7,78,43,3,248,2,183,116,84,210,26,133,36,84],[59,40,151,127,7,202,129,143,68,237,217,233,49,244,14,148,24,161,97,141,135,165,204,12,203,146,95,84,91,142,140,241],[155,155,37,10,104,83,148,128,168,73,150,39,182,184,48,44,60,7,166,15,151,129,215,137,181,44,67,162,47,23,126,133]]",
              "sol": "[bytes(abi.encode(\"58,102,44,62,51,106,229,87,21,19,150,234,44,9,230,118,153,177,226,56,62,235,228,72,255,15,190,163,163,229,56,91\")),bytes(abi.encode(\"61,175,252,241,164,28,39,5,179,199,43,219,59,141,109,107,56,229,7,78,43,3,248,2,183,116,84,210,26,133,36,84\")),bytes(abi.encode(\"59,40,151,127,7,202,129,143,68,237,217,233,49,244,14,148,24,161,97,141,135,165,204,12,203,146,95,84,91,142,140,241\")),bytes(abi.encode(\"155,155,37,10,104,83,148,128,168,73,150,39,182,184,48,44,60,7,166,15,151,129,215,137,181,44,67,162,47,23,126,133\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.997ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[246,251,145,125,28,238,243,102,155,130,6,140,69,18,72,111,22,131,156,33,240,110,220,85,21,121,33,12,178,17,24,78],[104,115,17,11,172,251,144,243,232,51,5,141,158,124,208,172,70,112,194,162,79,127,185,38,76,119,235,254,95,87,129,88],[192,69,176,79,186,43,12,195,171,10,13,3,73,117,68,108,136,231,175,108,53,194,50,175,224,237,75,245,177,223,144,220],[124,23,123,61,245,210,38,255,147,121,37,165,132,110,140,255,113,163,85,114,40,91,151,101,33,98,11,146,153,142,82,185]]",
              "sol": "[bytes(abi.encode(\"246,251,145,125,28,238,243,102,155,130,6,140,69,18,72,111,22,131,156,33,240,110,220,85,21,121,33,12,178,17,24,78\")),bytes(abi.encode(\"104,115,17,11,172,251,144,243,232,51,5,141,158,124,208,172,70,112,194,162,79,127,185,38,76,119,235,254,95,87,129,88\")),bytes(abi.encode(\"192,69,176,79,186,43,12,195,171,10,13,3,73,117,68,108,136,231,175,108,53,194,50,175,224,237,75,245,177,223,144,220\")),bytes(abi.encode(\"124,23,123,61,245,210,38,255,147,121,37,165,132,110,140,255,113,163,85,114,40,91,151,101,33,98,11,146,153,142,82,185\"))]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.998ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[12,176,181,84,174,187,163,50,71,50,231,196,52,50,213,33,32,134,52,42,223,0,55,241,101,120,11,154,102,36,46,165],[90,232,87,31,10,242,52,87,90,50,230,211,105,59,78,171,3,238,7,34,176,137,212,34,71,176,128,82,59,164,222,165],[83,226,171,33,72,234,33,0,242,190,50,223,222,196,64,52,234,32,141,248,243,50,70,183,220,180,96,111,88,35,138,193],[56,28,228,124,228,24,194,131,123,125,187,223,155,181,182,199,114,173,242,85,169,216,243,6,81,63,124,22,24,58,37,160],[183,41,151,28,89,99,81,253,155,191,96,170,230,101,19,193,253,51,14,224,67,111,14,115,95,88,201,216,95,156,27,33]]",
              "sol": "[bytes(abi.encode(\"12,176,181,84,174,187,163,50,71,50,231,196,52,50,213,33,32,134,52,42,223,0,55,241,101,120,11,154,102,36,46,165\")),bytes(abi.encode(\"90,232,87,31,10,242,52,87,90,50,230,211,105,59,78,171,3,238,7,34,176,137,212,34,71,176,128,82,59,164,222,165\")),bytes(abi.encode(\"83,226,171,33,72,234,33,0,242,190,50,223,222,196,64,52,234,32,141,248,243,50,70,183,220,180,96,111,88,35,138,193\")),bytes(abi.encode(\"56,28,228,124,228,24,194,131,123,125,187,223,155,181,182,199,114,173,242,85,169,216,243,6,81,63,124,22,24,58,37,160\")),bytes(abi.encode(\"183,41,151,28,89,99,81,253,155,191,96,170,230,101,19,193,253,51,14,224,67,111,14,115,95,88,201,216,95,156,27,33\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.998ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[163,184,5,192,138,26,64,88,4,236,125,38,142,58,56,214,113,139,159,170,41,148,173,114,176,14,27,193,180,31,113,203],[113,247,194,125,95,176,176,251,146,138,131,109,88,88,0,164,137,138,39,199,219,27,250,42,190,89,114,9,235,35,36,93],[231,50,255,46,251,147,27,50,115,21,240,175,57,119,153,49,183,30,210,81,42,128,226,88,62,35,17,79,30,129,92,144],[138,234,215,8,187,143,116,54,12,205,84,162,194,108,12,161,56,198,69,88,94,30,80,26,190,161,79,42,70,125,253,239],[196,209,243,180,181,205,90,223,32,182,30,229,101,196,8,11,163,92,254,38,183,247,64,50,255,31,116,93,174,5,160,193]]",
              "sol": "[bytes(abi.encode(\"163,184,5,192,138,26,64,88,4,236,125,38,142,58,56,214,113,139,159,170,41,148,173,114,176,14,27,193,180,31,113,203\")),bytes(abi.encode(\"113,247,194,125,95,176,176,251,146,138,131,109,88,88,0,164,137,138,39,199,219,27,250,42,190,89,114,9,235,35,36,93\")),bytes(abi.encode(\"231,50,255,46,251,147,27,50,115,21,240,175,57,119,153,49,183,30,210,81,42,128,226,88,62,35,17,79,30,129,92,144\")),bytes(abi.encode(\"138,234,215,8,187,143,116,54,12,205,84,162,194,108,12,161,56,198,69,88,94,30,80,26,190,161,79,42,70,125,253,239\")),bytes(abi.encode(\"196,209,243,180,181,205,90,223,32,182,30,229,101,196,8,11,163,92,254,38,183,247,64,50,255,31,116,93,174,5,160,193\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:17.999ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[39,3,141,143,45,33,191,80,98,184,79,12,43,70,18,48,219,117,167,124,202,237,231,61,210,233,101,52,129,9,35,121],[23,15,126,255,10,229,83,229,231,186,201,254,113,160,205,142,52,87,109,0,39,163,198,139,175,88,236,72,58,89,140,85],[92,100,99,255,124,94,65,97,92,253,230,34,208,55,230,179,4,39,88,33,6,78,191,108,131,131,118,136,84,157,191,14],[63,76,34,204,214,205,207,104,179,61,0,182,128,246,10,97,238,243,79,161,180,46,253,245,223,203,214,138,190,214,247,225],[137,112,176,38,92,110,53,40,8,88,56,38,242,80,74,247,233,236,119,220,23,197,10,166,82,13,77,15,227,150,73,90]]",
              "sol": "[bytes(abi.encode(\"39,3,141,143,45,33,191,80,98,184,79,12,43,70,18,48,219,117,167,124,202,237,231,61,210,233,101,52,129,9,35,121\")),bytes(abi.encode(\"23,15,126,255,10,229,83,229,231,186,201,254,113,160,205,142,52,87,109,0,39,163,198,139,175,88,236,72,58,89,140,85\")),bytes(abi.encode(\"92,100,99,255,124,94,65,97,92,253,230,34,208,55,230,179,4,39,88,33,6,78,191,108,131,131,118,136,84,157,191,14\")),bytes(abi.encode(\"63,76,34,204,214,205,207,104,179,61,0,182,128,246,10,97,238,243,79,161,180,46,253,245,223,203,214,138,190,214,247,225\")),bytes(abi.encode(\"137,112,176,38,92,110,53,40,8,88,56,38,242,80,74,247,233,236,119,220,23,197,10,166,82,13,77,15,227,150,73,90\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.000ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[65,68,21,8,234,103,222,150,42,166,174,21,43,243,85,220,2,6,160,148,63,106,6,47,77,125,74,149,167,179,138,60],[189,167,157,27,227,217,44,117,115,148,0,15,206,130,80,203,93,62,107,231,100,168,43,39,206,174,169,119,252,77,39,13],[3,204,227,7,117,78,127,254,229,55,5,195,235,128,250,83,10,234,29,118,55,172,9,153,204,21,75,115,104,186,217,184],[225,247,220,117,103,129,151,45,205,190,187,239,224,82,31,164,19,59,205,133,174,192,153,184,116,224,232,75,102,94,6,18],[229,174,239,129,5,208,205,186,133,205,52,115,60,121,43,11,54,218,42,167,87,167,170,142,79,168,31,180,19,254,84,228]]",
              "sol": "[bytes(abi.encode(\"65,68,21,8,234,103,222,150,42,166,174,21,43,243,85,220,2,6,160,148,63,106,6,47,77,125,74,149,167,179,138,60\")),bytes(abi.encode(\"189,167,157,27,227,217,44,117,115,148,0,15,206,130,80,203,93,62,107,231,100,168,43,39,206,174,169,119,252,77,39,13\")),bytes(abi.encode(\"3,204,227,7,117,78,127,254,229,55,5,195,235,128,250,83,10,234,29,118,55,172,9,153,204,21,75,115,104,186,217,184\")),bytes(abi.encode(\"225,247,220,117,103,129,151,45,205,190,187,239,224,82,31,164,19,59,205,133,174,192,153,184,116,224,232,75,102,94,6,18\")),bytes(abi.encode(\"229,174,239,129,5,208,205,186,133,205,52,115,60,121,43,11,54,218,42,167,87,167,170,142,79,168,31,180,19,254,84,228\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.001ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[116]",
              "sol": "bytes1(\"116\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.001ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.002ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.003ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.003ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.004ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.004ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.005ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.005ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"bw0ukf\"",
              "sol": "\"bw0ukf\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.005ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.006ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.006ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"zcc4cr\"",
              "sol": "\"zcc4cr\""
            },
            {
              "js": "\"958ih\"",
              "sol": "\"958ih\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"0cr5qk\"",
              "sol": "\"0cr5qk\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.006ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.007ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"zcc4cr\"",
              "sol": "\"zcc4cr\""
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.007ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.008ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"958ih\"",
              "sol": "\"958ih\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.009ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.009ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"0\",\"updateEthPrice called\",\"zcc4cr\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"updateEthPrice called\",\"IsLibrary\",\"\"]",
              "sol": "[string(\"0\"),string(\"updateEthPrice called\"),string(\"zcc4cr\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"updateEthPrice called\"),string(\"IsLibrary\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.010ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[203,58,239,76,71,43,18,183,174,177,78,118,126,6,208,91,248,54,43,102,186,34,3,79,100,146,87,201,26,85,185,242],[137,2,195,175,177,97,224,143,98,73,0,19,158,72,119,139,69,78,92,53,180,55,183,148,24,50,133,157,105,219,21,157],[119,223,205,143,69,164,118,53,205,57,188,90,8,34,231,238,219,187,236,103,95,50,242,222,178,30,13,45,20,236,4,14],[17,192,104,233,227,104,123,187,154,200,4,80,191,197,82,125,56,74,38,77,30,56,180,178,20,223,158,145,54,111,177,8],[50,116,222,250,211,3,110,40,84,69,149,156,203,203,236,40,122,130,179,167,114,43,90,175,112,251,83,15,166,50,193,168],[34,47,242,190,236,214,186,61,81,10,73,236,42,100,134,216,181,116,179,58,158,139,22,183,146,165,102,18,75,116,60,142],[188,49,125,221,22,82,169,13,101,39,194,18,84,37,126,2,5,42,122,36,18,114,62,91,135,115,194,246,33,33,166,53],[112,149,44,76,21,166,184,126,139,13,138,155,176,108,25,139,90,181,145,114,18,23,116,10,64,55,129,45,30,0,199,63],[165,194,117,206,23,181,166,112,136,249,255,61,21,29,232,211,11,189,125,92,195,156,151,137,100,252,70,166,186,169,23,56]]",
              "sol": "[bytes(abi.encode(\"203,58,239,76,71,43,18,183,174,177,78,118,126,6,208,91,248,54,43,102,186,34,3,79,100,146,87,201,26,85,185,242\")),bytes(abi.encode(\"137,2,195,175,177,97,224,143,98,73,0,19,158,72,119,139,69,78,92,53,180,55,183,148,24,50,133,157,105,219,21,157\")),bytes(abi.encode(\"119,223,205,143,69,164,118,53,205,57,188,90,8,34,231,238,219,187,236,103,95,50,242,222,178,30,13,45,20,236,4,14\")),bytes(abi.encode(\"17,192,104,233,227,104,123,187,154,200,4,80,191,197,82,125,56,74,38,77,30,56,180,178,20,223,158,145,54,111,177,8\")),bytes(abi.encode(\"50,116,222,250,211,3,110,40,84,69,149,156,203,203,236,40,122,130,179,167,114,43,90,175,112,251,83,15,166,50,193,168\")),bytes(abi.encode(\"34,47,242,190,236,214,186,61,81,10,73,236,42,100,134,216,181,116,179,58,158,139,22,183,146,165,102,18,75,116,60,142\")),bytes(abi.encode(\"188,49,125,221,22,82,169,13,101,39,194,18,84,37,126,2,5,42,122,36,18,114,62,91,135,115,194,246,33,33,166,53\")),bytes(abi.encode(\"112,149,44,76,21,166,184,126,139,13,138,155,176,108,25,139,90,181,145,114,18,23,116,10,64,55,129,45,30,0,199,63\")),bytes(abi.encode(\"165,194,117,206,23,181,166,112,136,249,255,61,21,29,232,211,11,189,125,92,195,156,151,137,100,252,70,166,186,169,23,56\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.011ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.012ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[231,173,198,39,160,125,191,145,83,109,49,15,30,148,100,92,72,110,11,148,215,148,223,131,240,164,196,115,17,2,98,87]",
              "sol": "stringToBytes32(\"231,173,198,39,160,125,191,145,83,109,49,15,30,148,100,92,72,110,11,148,215,148,223,131,240,164,196,115,17,2,98,87\")"
            },
            {
              "js": "[25,74,101,114,145,2,223,180,94,224,42,153,22,72,24,19,16,215,213,11,7,108,37,253,244,217,251,228,143,145,42,150]",
              "sol": "stringToBytes32(\"25,74,101,114,145,2,223,180,94,224,42,153,22,72,24,19,16,215,213,11,7,108,37,253,244,217,251,228,143,145,42,150\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.012ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[246,246,30,223,75,82,62,140,118,89,53,174,11,0,83,41,106,101,129,169,198,154,2,109,184,169,246,55,185,9,255,123]",
              "sol": "stringToBytes32(\"246,246,30,223,75,82,62,140,118,89,53,174,11,0,83,41,106,101,129,169,198,154,2,109,184,169,246,55,185,9,255,123\")"
            },
            {
              "js": "[178,188,176,144,93,98,247,164,205,255,37,129,147,60,62,202,247,84,3,2,74,170,170,11,54,10,201,120,52,254,59,194]",
              "sol": "abi.encode(\"178,188,176,144,93,98,247,164,205,255,37,129,147,60,62,202,247,84,3,2,74,170,170,11,54,10,201,120,52,254,59,194\")"
            },
            {
              "js": "[123,72,22,148,5,255,75,1,232,210,149,92,154,13,39,106,75,222,188,207,226,250,35,96,46,93,68,211,134,78,151,6]",
              "sol": "abi.encode(\"123,72,22,148,5,255,75,1,232,210,149,92,154,13,39,106,75,222,188,207,226,250,35,96,46,93,68,211,134,78,151,6\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.013ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[12,14,180,42,245,37,197,159,35,248,14,44,154,174,169,55,214,122,82,33,202,27,223,19,118,132,81,195,139,69,143,108]",
              "sol": "abi.encode(\"12,14,180,42,245,37,197,159,35,248,14,44,154,174,169,55,214,122,82,33,202,27,223,19,118,132,81,195,139,69,143,108\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[238,231,142,161,78,58,171,153,176,46,184,116,33,104,253,28,112,249,28,126,82,190,50,210,63,60,67,212,10,34,65,153]",
              "sol": "abi.encode(\"238,231,142,161,78,58,171,153,176,46,184,116,33,104,253,28,112,249,28,126,82,190,50,210,63,60,67,212,10,34,65,153\")"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.014ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[170,21,221,69,199,47,187,200,67,140,181,137,215,172,220,14,60,165,222,170,121,58,252,23,210,112,58,250,206,53,123,72]",
              "sol": "stringToBytes32(\"170,21,221,69,199,47,187,200,67,140,181,137,215,172,220,14,60,165,222,170,121,58,252,23,210,112,58,250,206,53,123,72\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[61,170,96,125,230,163,142,226,189,226,93,15,87,243,193,33,144,27,102,68,84,42,145,76,31,34,80,240,246,101,220,51]",
              "sol": "abi.encode(\"61,170,96,125,230,163,142,226,189,226,93,15,87,243,193,33,144,27,102,68,84,42,145,76,31,34,80,240,246,101,220,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[228,104,52,5,6,139,78,206,112,50,250,243,237,243,201,87,58,191,230,123,218,45,73,166,189,232,215,130,251,233,80,141]",
              "sol": "stringToBytes32(\"228,104,52,5,6,139,78,206,112,50,250,243,237,243,201,87,58,191,230,123,218,45,73,166,189,232,215,130,251,233,80,141\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[221,117,223,88,160,197,156,25,186,138,102,28,210,252,67,31,124,27,93,77,133,220,251,74,234,152,88,176,197,113,160,1]",
              "sol": "abi.encode(\"221,117,223,88,160,197,156,25,186,138,102,28,210,252,67,31,124,27,93,77,133,220,251,74,234,152,88,176,197,113,160,1\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.015ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[185,229,121,23,240,51,113,185,193,202,236,69,136,107,7,173,142,190,225,123,90,28,234,199,206,248,234,115,2,67,125,39]",
              "sol": "stringToBytes32(\"185,229,121,23,240,51,113,185,193,202,236,69,136,107,7,173,142,190,225,123,90,28,234,199,206,248,234,115,2,67,125,39\")"
            },
            {
              "js": "[156,124,92,243,201,139,213,170,135,147,254,144,145,94,24,226,138,210,118,104,174,5,98,17,132,90,24,249,69,68,140,227]",
              "sol": "abi.encode(\"156,124,92,243,201,139,213,170,135,147,254,144,145,94,24,226,138,210,118,104,174,5,98,17,132,90,24,249,69,68,140,227\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[185,229,121,23,240,51,113,185,193,202,236,69,136,107,7,173,142,190,225,123,90,28,234,199,206,248,234,115,2,67,125,39]",
                "sol": "stringToBytes32(\"185,229,121,23,240,51,113,185,193,202,236,69,136,107,7,173,142,190,225,123,90,28,234,199,206,248,234,115,2,67,125,39\")"
              },
              {
                "js": "[248,121,248,129,152,237,39,18,159,51,114,48,107,199,149,32,82,246,64,198,194,37,58,26,123,243,196,84,186,241,50,88,221]",
                "sol": "bytes33(\"248,121,248,129,152,237,39,18,159,51,114,48,107,199,149,32,82,246,64,198,194,37,58,26,123,243,196,84,186,241,50,88,221\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.016ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[226,162,154,37,20,121,132,95,225,174,28,184,37,228,78,211,254,246,9,247,53,93,54,60,201,214,114,51,224,11,238,217]",
              "sol": "abi.encode(\"226,162,154,37,20,121,132,95,225,174,28,184,37,228,78,211,254,246,9,247,53,93,54,60,201,214,114,51,224,11,238,217\")"
            },
            {
              "js": "[123,48,107,18,209,60,191,208,25,205,92,24,211,8,30,170,153,65,44,207,82,123,78,241,91,170,83,39,166,243,70,11]",
              "sol": "stringToBytes32(\"123,48,107,18,209,60,191,208,25,205,92,24,211,8,30,170,153,65,44,207,82,123,78,241,91,170,83,39,166,243,70,11\")"
            },
            {
              "js": "[49,104,72,253,245,106,147,17,40,11,244,73,145,160,164,129,245,67,20,26,201,115,34,161,23,74,159,69,112,92,203,211]",
              "sol": "abi.encode(\"49,104,72,253,245,106,147,17,40,11,244,73,145,160,164,129,245,67,20,26,201,115,34,161,23,74,159,69,112,92,203,211\")"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[205,149,244,39,173,10,250,229,53,76,189,6,75,113,21,142,144,102,133,18,186,154,182,179,125,93,108,181,4,212,90,172]",
              "sol": "abi.encode(\"205,149,244,39,173,10,250,229,53,76,189,6,75,113,21,142,144,102,133,18,186,154,182,179,125,93,108,181,4,212,90,172\")"
            },
            {
              "js": "[24,92,67,139,95,27,87,184,139,214,24,34,123,212,162,59,248,167,10,178,155,51,163,232,75,165,202,249,211,38,102,139]",
              "sol": "stringToBytes32(\"24,92,67,139,95,27,87,184,139,214,24,34,123,212,162,59,248,167,10,178,155,51,163,232,75,165,202,249,211,38,102,139\")"
            },
            {
              "js": "[166,115,137,34,21,77,171,128,219,245,44,227,155,0,44,13,179,226,22,170,64,122,223,13,141,61,59,107,136,236,177,40]",
              "sol": "abi.encode(\"166,115,137,34,21,77,171,128,219,245,44,227,155,0,44,13,179,226,22,170,64,122,223,13,141,61,59,107,136,236,177,40\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[95,207,115,233,248,100,30,40,119,219,131,234,58,57,39,104,4,103,66,96,28,77,84,121,221,202,136,249,233,129,245,74]",
              "sol": "abi.encode(\"95,207,115,233,248,100,30,40,119,219,131,234,58,57,39,104,4,103,66,96,28,77,84,121,221,202,136,249,233,129,245,74\")"
            },
            {
              "js": "[33,193,150,137,142,156,45,38,78,134,170,48,117,79,212,101,62,211,73,2,139,27,232,51,151,5,127,93,49,209,207,164]",
              "sol": "stringToBytes32(\"33,193,150,137,142,156,45,38,78,134,170,48,117,79,212,101,62,211,73,2,139,27,232,51,151,5,127,93,49,209,207,164\")"
            },
            {
              "js": "[239,196,54,213,30,130,239,50,221,224,243,215,219,189,45,112,137,43,120,72,159,150,128,75,111,63,42,87,67,224,76,209]",
              "sol": "abi.encode(\"239,196,54,213,30,130,239,50,221,224,243,215,219,189,45,112,137,43,120,72,159,150,128,75,111,63,42,87,67,224,76,209\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[113,71,82,47,205,145,179,113,85,170,93,34,65,152,105,144,111,209,234,47,243,126,159,198,60,122,146,90,20,44,178,106]",
              "sol": "abi.encode(\"113,71,82,47,205,145,179,113,85,170,93,34,65,152,105,144,111,209,234,47,243,126,159,198,60,122,146,90,20,44,178,106\")"
            },
            {
              "js": "[198,250,125,135,119,231,169,72,225,187,202,8,129,90,44,82,223,187,231,250,200,114,93,134,29,120,235,62,194,86,250,122]",
              "sol": "stringToBytes32(\"198,250,125,135,119,231,169,72,225,187,202,8,129,90,44,82,223,187,231,250,200,114,93,134,29,120,235,62,194,86,250,122\")"
            },
            {
              "js": "[62,55,168,230,104,250,85,188,197,227,127,107,158,92,146,184,44,16,170,194,44,189,126,146,232,166,1,13,94,212,165,99]",
              "sol": "abi.encode(\"62,55,168,230,104,250,85,188,197,227,127,107,158,92,146,184,44,16,170,194,44,189,126,146,232,166,1,13,94,212,165,99\")"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[19,144,125,38,95,162,203,96,239,163,189,186,139,2,218,94,221,23,77,30,110,238,109,121,118,41,8,8,128,121,104,170]",
              "sol": "abi.encode(\"19,144,125,38,95,162,203,96,239,163,189,186,139,2,218,94,221,23,77,30,110,238,109,121,118,41,8,8,128,121,104,170\")"
            },
            {
              "js": "[77,99,189,93,200,244,183,168,246,139,161,9,61,220,106,240,98,48,158,173,161,40,122,198,69,34,129,183,115,110,147,172]",
              "sol": "stringToBytes32(\"77,99,189,93,200,244,183,168,246,139,161,9,61,220,106,240,98,48,158,173,161,40,122,198,69,34,129,183,115,110,147,172\")"
            },
            {
              "js": "[196,42,206,9,79,51,218,18,205,0,233,116,176,2,202,16,169,148,132,107,103,58,125,241,100,184,60,119,68,187,96,6]",
              "sol": "abi.encode(\"196,42,206,9,79,51,218,18,205,0,233,116,176,2,202,16,169,148,132,107,103,58,125,241,100,184,60,119,68,187,96,6\")"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[67,115,176,51,44,134,162,64,111,40,235,237,156,145,22,182,135,208,87,101,92,14,212,98,95,215,121,105,237,136,44,205]",
              "sol": "abi.encode(\"67,115,176,51,44,134,162,64,111,40,235,237,156,145,22,182,135,208,87,101,92,14,212,98,95,215,121,105,237,136,44,205\")"
            },
            {
              "js": "[146,235,50,208,57,80,108,43,148,246,153,243,178,238,158,133,57,201,194,124,25,167,192,185,215,208,107,223,77,174,240,6]",
              "sol": "stringToBytes32(\"146,235,50,208,57,80,108,43,148,246,153,243,178,238,158,133,57,201,194,124,25,167,192,185,215,208,107,223,77,174,240,6\")"
            },
            {
              "js": "[53,178,80,87,149,159,89,156,78,114,10,111,76,10,137,249,57,207,8,45,18,115,160,204,117,86,81,145,153,6,238,229]",
              "sol": "abi.encode(\"53,178,80,87,149,159,89,156,78,114,10,111,76,10,137,249,57,207,8,45,18,115,160,204,117,86,81,145,153,6,238,229\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[118,213,75,87,231,73,157,228,111,8,250,113,197,99,32,241,185,78,119,64,198,157,19,52,196,88,28,45,237,113,97,200]",
              "sol": "abi.encode(\"118,213,75,87,231,73,157,228,111,8,250,113,197,99,32,241,185,78,119,64,198,157,19,52,196,88,28,45,237,113,97,200\")"
            },
            {
              "js": "[109,173,150,249,50,40,200,167,20,248,110,184,233,185,80,119,4,193,237,225,79,23,255,161,208,255,88,7,94,193,205,112]",
              "sol": "stringToBytes32(\"109,173,150,249,50,40,200,167,20,248,110,184,233,185,80,119,4,193,237,225,79,23,255,161,208,255,88,7,94,193,205,112\")"
            },
            {
              "js": "[208,119,17,122,182,43,113,90,33,114,242,159,64,227,124,222,150,242,251,110,196,120,178,229,155,7,195,48,77,229,232,8]",
              "sol": "abi.encode(\"208,119,17,122,182,43,113,90,33,114,242,159,64,227,124,222,150,242,251,110,196,120,178,229,155,7,195,48,77,229,232,8\")"
            },
            {
              "js": "\"0cr5qk\"",
              "sol": "\"0cr5qk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[97,89,88,225,95,79,155,168,138,190,150,6,199,235,119,110,125,39,107,246,194,56,215,11,51,164,250,85,233,34,157,93]",
              "sol": "abi.encode(\"97,89,88,225,95,79,155,168,138,190,150,6,199,235,119,110,125,39,107,246,194,56,215,11,51,164,250,85,233,34,157,93\")"
            },
            {
              "js": "[73,108,43,171,160,51,25,183,182,183,255,250,79,99,225,123,45,39,21,118,37,6,121,36,127,71,178,164,80,38,206,155]",
              "sol": "stringToBytes32(\"73,108,43,171,160,51,25,183,182,183,255,250,79,99,225,123,45,39,21,118,37,6,121,36,127,71,178,164,80,38,206,155\")"
            },
            {
              "js": "[123,148,109,153,41,16,83,166,218,121,227,5,57,25,182,171,31,59,53,114,72,129,133,220,227,216,236,46,250,28,160,109]",
              "sol": "abi.encode(\"123,148,109,153,41,16,83,166,218,121,227,5,57,25,182,171,31,59,53,114,72,129,133,220,227,216,236,46,250,28,160,109\")"
            },
            {
              "js": "\"zcc4cr\"",
              "sol": "\"zcc4cr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.024ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[95,88,32,126,190,1,38,86,177,98,71,45,6,53,166,192,12,183,182,40,124,228,190,70,33,247,34,249,209,227,80,155]",
              "sol": "abi.encode(\"95,88,32,126,190,1,38,86,177,98,71,45,6,53,166,192,12,183,182,40,124,228,190,70,33,247,34,249,209,227,80,155\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "[205,90,170,72,100,132,14,216,79,78,30,23,164,54,157,154,93,250,20,112,220,94,137,3,122,236,67,204,165,184,226,137]",
              "sol": "abi.encode(\"205,90,170,72,100,132,14,216,79,78,30,23,164,54,157,154,93,250,20,112,220,94,137,3,122,236,67,204,165,184,226,137\")"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.025ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[89,213,55,29,45,226,69,169,56,2,15,171,177,244,252,124,193,21,250,242,168,32,147,76,17,239,7,50,233,192,224,235]",
              "sol": "stringToBytes32(\"89,213,55,29,45,226,69,169,56,2,15,171,177,244,252,124,193,21,250,242,168,32,147,76,17,239,7,50,233,192,224,235\")"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "[95,133,139,90,62,15,61,200,164,210,179,6,29,85,247,164,115,202,219,41,205,38,124,28,50,181,242,114,225,79,155,152]",
              "sol": "stringToBytes32(\"95,133,139,90,62,15,61,200,164,210,179,6,29,85,247,164,115,202,219,41,205,38,124,28,50,181,242,114,225,79,155,152\")"
            },
            {
              "js": "[215,185,43,113,84,178,228,211,206,252,109,254,171,179,149,131,114,211,154,71,78,10,150,39,210,215,178,220,172,151,76,217]",
              "sol": "stringToBytes32(\"215,185,43,113,84,178,228,211,206,252,109,254,171,179,149,131,114,211,154,71,78,10,150,39,210,215,178,220,172,151,76,217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.026ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[74,96,120,253,198,86,9,66,150,106,236,19,26,225,46,154,76,99,251,191,230,237,244,245,165,166,95,183,61,234,48,52]",
              "sol": "stringToBytes32(\"74,96,120,253,198,86,9,66,150,106,236,19,26,225,46,154,76,99,251,191,230,237,244,245,165,166,95,183,61,234,48,52\")"
            },
            {
              "js": "[104,171,152,29,98,151,167,160,136]",
              "sol": "abi.encode(\"104,171,152,29,98,151,167,160,136\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[30,163,22,115,235,169,182,58,138,137,60,30,248,42,157,104,70,131,13,97,200,20,47,202,141,127,0,19,220,111,250,212]",
              "sol": "stringToBytes32(\"30,163,22,115,235,169,182,58,138,137,60,30,248,42,157,104,70,131,13,97,200,20,47,202,141,127,0,19,220,111,250,212\")"
            },
            {
              "js": "[81,107,42,194,183,67,157,156,111,212,222,100,48,147,134,174,153,121,8,40,137,247,13,58,199,163,24,167,133,248,124,25,13,142,229,128,120,42,19,125,139,72,18,199,140,24,207,166,81,13,168,158,23,134,63,174,137,139,194,154,251,75,77,181,175]",
              "sol": "abi.encode(\"81,107,42,194,183,67,157,156,111,212,222,100,48,147,134,174,153,121,8,40,137,247,13,58,199,163,24,167,133,248,124,25,13,142,229,128,120,42,19,125,139,72,18,199,140,24,207,166,81,13,168,158,23,134,63,174,137,139,194,154,251,75,77,181,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.027ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.028ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.028ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.029ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.029ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.029ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.030ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.031ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.031ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.032ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.032ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.033ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.034ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.034ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.035ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.037ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.041ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[173,87,131,22,126,29,169,73,96,11,53,213,251,244,81,3,111,62,91,136,2,113,217,99,174,245,122,228,10,178,9,47]",
              "sol": "stringToBytes32(\"173,87,131,22,126,29,169,73,96,11,53,213,251,244,81,3,111,62,91,136,2,113,217,99,174,245,122,228,10,178,9,47\")"
            },
            {
              "js": "\"bw0ukf\"",
              "sol": "\"bw0ukf\""
            },
            {
              "js": "[101,61,241,141,0,21,42,151,38,59,235,209,183,190,35,236,92,211,65,233,173,231,108,116,6,44,32,230,251,129,57,74]",
              "sol": "abi.encode(\"101,61,241,141,0,21,42,151,38,59,235,209,183,190,35,236,92,211,65,233,173,231,108,116,6,44,32,230,251,129,57,74\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.042ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.043ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.044ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxyable.address",
              "sol": "contractProxyable"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxyable.address",
                "sol": "contractProxyable"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.045ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[218,249,98,242,105,97,243,160,55,49,59,146,64,111,249,244,155,184,200,82,64,143,198,191,220,26,243,45,88,212,207,249]",
              "sol": "abi.encode(\"218,249,98,242,105,97,243,160,55,49,59,146,64,111,249,244,155,184,200,82,64,143,198,191,220,26,243,45,88,212,207,249\")"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "[122,18,9,163,243,234,110,251,185,130,107,176,31,190,204,79,5,55,108,78,188,2,213,14,151,235,173,38,222,150,201,36]",
              "sol": "stringToBytes32(\"122,18,9,163,243,234,110,251,185,130,107,176,31,190,204,79,5,55,108,78,188,2,213,14,151,235,173,38,222,150,201,36\")"
            },
            {
              "js": "[112,80,27,139,96,131,239,40,72,205,158,210,228,88,44,28,88,158,73,223,167,237,134,242,69,24,179,38,99,232,151,141]",
              "sol": "stringToBytes32(\"112,80,27,139,96,131,239,40,72,205,158,210,228,88,44,28,88,158,73,223,167,237,134,242,69,24,179,38,99,232,151,141\")"
            },
            {
              "js": "[237,175,118,153,158,216,64,198,128,59,122,245,206,246,155,196,13,241,164,50,117,93,136,163,6,184,88,198,156,47,98,10]",
              "sol": "stringToBytes32(\"237,175,118,153,158,216,64,198,128,59,122,245,206,246,155,196,13,241,164,50,117,93,136,163,6,184,88,198,156,47,98,10\")"
            },
            {
              "js": "[36,70,80,224,194,203,100,98,239,176,166,230,12,232,106,37,139,235,240,236,20,246,51,140,215,188,2,109,154,221,207,149]",
              "sol": "stringToBytes32(\"36,70,80,224,194,203,100,98,239,176,166,230,12,232,106,37,139,235,240,236,20,246,51,140,215,188,2,109,154,221,207,149\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.045ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.046ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.047ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.047ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.048ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.048ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.049ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.052ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "87",
                "sol": "87"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.054ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T22:47:18.057ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.057ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.058ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T22:47:18.059ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}