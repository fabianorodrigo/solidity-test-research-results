,{
  "2020-11-10T20:14:26.110ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:16:41.422ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:17:16.803ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:17:33.724ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:17:50.950ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:18:07.969ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:18:25.056ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:18:42.429ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:18:59.811ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:16.896ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:34.113ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.002ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.005ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [111,201,163,148,206,246,179,209,89,104,144,15,232,231,97,190,212,51,50,129,181,158,60,5,121,218,111,27,179,237,220,225],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"111,201,163,148,206,246,179,209,89,104,144,15,232,231,97,190,212,51,50,129,181,158,60,5,121,218,111,27,179,237,220,225\"),60)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.005ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [37,89,172,112,174,4,214,176,64,13,140,41,136,64,61,22,238,71,222,168,188,183,31,35,47,243,205,64,79,151,230,192],\"capacity\": 33}",
              "sol": "Buffer.buffer(abi.encode(\"37,89,172,112,174,4,214,176,64,13,140,41,136,64,61,22,238,71,222,168,188,183,31,35,47,243,205,64,79,151,230,192\"),33)"
            },
            {
              "js": "[187,118,159,108,108,61,201,189,45,83,34,31,153,26,241,155,166,82,151,81,80,118,165,28,155,217,214,15,16,185,101,117]",
              "sol": "abi.encode(\"187,118,159,108,108,61,201,189,45,83,34,31,153,26,241,155,166,82,151,81,80,118,165,28,155,217,214,15,16,185,101,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.006ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [77,161,52,101,35,108,169,187,41,245,88,131,157,246,35,220,152,166,191,206,87,122,139,141,6,89,147,43,102,222,93,116],\"capacity\": 2}",
              "sol": "Buffer.buffer(abi.encode(\"77,161,52,101,35,108,169,187,41,245,88,131,157,246,35,220,152,166,191,206,87,122,139,141,6,89,147,43,102,222,93,116\"),2)"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.006ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [125,50,56,173,189,38,78,4,129,81,253,211,180,151,240,71,146,168,52,178,175,35,25,111,7,25,177,49,191,94,43,191],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"125,50,56,173,189,38,78,4,129,81,253,211,180,151,240,71,146,168,52,178,175,35,25,111,7,25,177,49,191,94,43,191\"),1532892062)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.008ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [58,233,222,81,108,166,39,147,155,180,28,228,13,240,127,20,25,244,140,87,174,82,176,218,104,10,54,194,32,182,17,122],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"58,233,222,81,108,166,39,147,155,180,28,228,13,240,127,20,25,244,140,87,174,82,176,218,104,10,54,194,32,182,17,122\"),27)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.008ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [254,152,95,71,16,205,149,37,204,63,198,224,124,86,96,89,182,39,11,39,147,253,126,29,237,90,93,175,99,191,113,116],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"254,152,95,71,16,205,149,37,204,63,198,224,124,86,96,89,182,39,11,39,147,253,126,29,237,90,93,175,99,191,113,116\"),1024)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [53,103,215,166,163,198,168,234,139,111,124,243,108,78,72,80,3,116,67,37,4,132,58,100,137,156,10,144,232,66,125,11],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"53,103,215,166,163,198,168,234,139,111,124,243,108,78,72,80,3,116,67,37,4,132,58,100,137,156,10,144,232,66,125,11\"),55)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.009ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [246,191,166,130,194,225,34,113,147,227,99,140,110,109,245,96,89,222,40,118,164,224,151,29,66,200,214,233,130,110,12,129],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"246,191,166,130,194,225,34,113,147,227,99,140,110,109,245,96,89,222,40,118,164,224,151,29,66,200,214,233,130,110,12,129\"),28)"
            },
            {
              "js": "[4,38,181,26,66,188,32,136,78,164,33,202,255,74,139,22,100,185,37,102,167,75,35,218,118,212,190,19,243,133,173,235]",
              "sol": "abi.encode(\"4,38,181,26,66,188,32,136,78,164,33,202,255,74,139,22,100,185,37,102,167,75,35,218,118,212,190,19,243,133,173,235\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.011ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [68,92,249,21,90,130,138,12,188,185,9,114,82,216,206,156,51,3,226,254,70,251,17,239,207,166,156,9,219,40,135,94],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"68,92,249,21,90,130,138,12,188,185,9,114,82,216,206,156,51,3,226,254,70,251,17,239,207,166,156,9,219,40,135,94\"),95)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.012ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [92,3,141,126,51,80,79,189,253,164,157,2,77,72,100,174,222,254,197,235,96,141,232,87,76,160,30,25,88,63,78,9],\"capacity\": 56}",
              "sol": "Buffer.buffer(abi.encode(\"92,3,141,126,51,80,79,189,253,164,157,2,77,72,100,174,222,254,197,235,96,141,232,87,76,160,30,25,88,63,78,9\"),56)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.012ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [110,26,147,33,121,212,251,116,3,190,70,237,139,42,17,72,141,30,30,119,102,101,231,197,237,120,82,59,179,254,153,1],\"capacity\": 70}",
              "sol": "Buffer.buffer(abi.encode(\"110,26,147,33,121,212,251,116,3,190,70,237,139,42,17,72,141,30,30,119,102,101,231,197,237,120,82,59,179,254,153,1\"),70)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.012ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [82,26,49,159,41,3,117,151,199,225,161,108,171,98,159,165,124,11,62,114,92,40,134,182,227,184,125,25,179,246,145,232],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"82,26,49,159,41,3,117,151,199,225,161,108,171,98,159,165,124,11,62,114,92,40,134,182,227,184,125,25,179,246,145,232\"),1532892062)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.014ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.015ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.015ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.016ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.016ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.018ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "24",
                "sol": "24"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.018ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.020ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.021ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.022ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.023ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[104,44,17,209,29,211,137,251,188,79,241,245,218,195,112,32,150,231,56,76,84,102,144,195,59,231,77,70,15,78,93,19]",
              "sol": "stringToBytes32(\"104,44,17,209,29,211,137,251,188,79,241,245,218,195,112,32,150,231,56,76,84,102,144,195,59,231,77,70,15,78,93,19\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.023ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[208,237,84,110,141,75,117,160,23,133,244,204,189,230,189,41,26,170,132,69,116,172,53,152,233,209,120,58,39,174,89,102]",
              "sol": "stringToBytes32(\"208,237,84,110,141,75,117,160,23,133,244,204,189,230,189,41,26,170,132,69,116,172,53,152,233,209,120,58,39,174,89,102\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[33,250,199,237,87,96,79,202,55,131,86,224,228,226,181,220,101,96,244,181,65,92,215,20,232,102,70,240,165,60,115,217]",
              "sol": "abi.encode(\"33,250,199,237,87,96,79,202,55,131,86,224,228,226,181,220,101,96,244,181,65,92,215,20,232,102,70,240,165,60,115,217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.067ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.068ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"hirbpp\"",
              "sol": "\"hirbpp\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.068ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.069ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.069ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.069ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"v03m5l\"",
              "sol": "\"v03m5l\""
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.070ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"v03m5l\"",
              "sol": "\"v03m5l\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.070ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.071ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.071ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.072ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.072ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.072ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.074ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"5r9xr\"",
              "sol": "\"5r9xr\""
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.075ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ETH\",\"call updateEthPrice\"]",
              "sol": "[string(\"ETH\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.075ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"v03m5l\"",
              "sol": "\"v03m5l\""
            },
            {
              "js": "[\"listingID arg\",\"v03m5l\"]",
              "sol": "[string(\"listingID arg\"),string(\"v03m5l\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.076ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"5r9xr\"",
              "sol": "\"5r9xr\""
            },
            {
              "js": "[\"updateEthPrice called\",\"\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.076ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"Example\",\"IsLibrary\",\"\\x19Ethereum Signed Message:\\n32\",\"PayableExample\",\"PayableExample\",\"Oraclize query was sent, standing by for the answer...\",\"Example\"]",
              "sol": "[string(\"Example\"),string(\"IsLibrary\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"PayableExample\"),string(\"PayableExample\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Example\")]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.077ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"updateEthPrice called\"]",
              "sol": "[string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.077ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"call updateEthPrice\"]",
              "sol": "[string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.078ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.078ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"hirbpp\"]",
              "sol": "[string(\"hirbpp\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.079ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"PayableExample\",\"hirbpp\"]",
              "sol": "[string(\"PayableExample\"),string(\"hirbpp\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.079ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"hirbpp\"",
              "sol": "\"hirbpp\""
            },
            {
              "js": "[\"ETH\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"ETH\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.080ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"RevertWithReason\",\"\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.080ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[\"ssz99\",\"call updateEthPrice\"]",
              "sol": "[string(\"ssz99\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.081ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"ssz99\"",
              "sol": "\"ssz99\""
            },
            {
              "js": "[\"PayableExample\",\"P\",\"call updateEthPrice\"]",
              "sol": "[string(\"PayableExample\"),string(\"P\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.081ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"5r9xr\"",
              "sol": "\"5r9xr\""
            },
            {
              "js": "[\"RevertWithReason\",\"P\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"P\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.082ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"updateEthPrice called\",\"Example\",\"L\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"Example\"),string(\"L\")]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.083ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[\"v03m5l\",\"Example\",\"ssz99\"]",
              "sol": "[string(\"v03m5l\"),string(\"Example\"),string(\"ssz99\")]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.084ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"hirbpp\"",
              "sol": "\"hirbpp\""
            },
            {
              "js": "[\"P\",\"P\",\"vyaiez\",\"P\"]",
              "sol": "[string(\"P\"),string(\"P\"),string(\"vyaiez\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.085ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Example\",\"ssz99\",\"\",\"PayableExample\"]",
              "sol": "[string(\"Example\"),string(\"ssz99\"),string(\"\"),string(\"PayableExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.085ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Oraclize query was sent, standing by for the answer...\",\"hirbpp\",\"Example\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"hirbpp\"),string(\"Example\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.086ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"Example\",\"L\",\"Oraclize query was sent, standing by for the answer...\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Example\"),string(\"L\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.086ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"39d6g\",\"ETH\",\"\",\"call updateEthPrice\",\"0\"]",
              "sol": "[string(\"39d6g\"),string(\"ETH\"),string(\"\"),string(\"call updateEthPrice\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.087ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"Example\",\"\",\"\\x19Ethereum Signed Message:\\n32\",\"39d6g\",\"kizr3q\"]",
              "sol": "[string(\"Example\"),string(\"\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"39d6g\"),string(\"kizr3q\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.088ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"listingID arg\",\"Example\",\"P\",\"v03m5l\",\"trade.totalPrice\"]",
              "sol": "[string(\"listingID arg\"),string(\"Example\"),string(\"P\"),string(\"v03m5l\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.088ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"ssz99\",\"P\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"ssz99\"),string(\"P\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.089ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"ssz99\"",
              "sol": "\"ssz99\""
            },
            {
              "js": "[[217,85,64,28,192,156,154,252,235,226,66,212,170,26,130,170,156,228,152,216,54,115,41,244,229,188,10,12,186,109,7,158],[114,165,95,147,206,23,74,110,6,135,191,26,89,43,53,70,176,205,227,143,0,83,109,127,110,123,210,15,202,125,129,253],[249,225,218,140,65,12,90,100,144,149,52,187,60,21,19,220,119,19,140,53,171,192,142,229,92,52,203,127,223,88,185,180]]",
              "sol": "[bytes(abi.encode(\"217,85,64,28,192,156,154,252,235,226,66,212,170,26,130,170,156,228,152,216,54,115,41,244,229,188,10,12,186,109,7,158\")),bytes(abi.encode(\"114,165,95,147,206,23,74,110,6,135,191,26,89,43,53,70,176,205,227,143,0,83,109,127,110,123,210,15,202,125,129,253\")),bytes(abi.encode(\"249,225,218,140,65,12,90,100,144,149,52,187,60,21,19,220,119,19,140,53,171,192,142,229,92,52,203,127,223,88,185,180\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.089ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[149,112,174,52,164,151,177,246,205,180,29,93,218,205,41,97,251,56,39,169,124,202,88,191,153,168,57,162,2,101,28,23],[12,83,252,13,221,89,121,120,175,113,40,200,74,195,122,248,83,108,150,3,17,223,115,60,145,102,232,177,129,200,26,41],[199,141,220,46,162,99,201,255,237,39,197,114,121,106,115,111,155,246,253,53,56,177,158,9,95,252,168,82,91,52,218,194],[133,231,164,110,58,202,160,72,63,7,110,134,205,205,201,85,131,74,195,219,171,181,84,174,168,124,40,84,15,197,123,83]]",
              "sol": "[bytes(abi.encode(\"149,112,174,52,164,151,177,246,205,180,29,93,218,205,41,97,251,56,39,169,124,202,88,191,153,168,57,162,2,101,28,23\")),bytes(abi.encode(\"12,83,252,13,221,89,121,120,175,113,40,200,74,195,122,248,83,108,150,3,17,223,115,60,145,102,232,177,129,200,26,41\")),bytes(abi.encode(\"199,141,220,46,162,99,201,255,237,39,197,114,121,106,115,111,155,246,253,53,56,177,158,9,95,252,168,82,91,52,218,194\")),bytes(abi.encode(\"133,231,164,110,58,202,160,72,63,7,110,134,205,205,201,85,131,74,195,219,171,181,84,174,168,124,40,84,15,197,123,83\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.090ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[94,92,244,136,198,110,151,164,192,200,101,42,16,118,186,195,194,37,163,41,160,165,44,61,185,16,70,2,167,108,193,253]]",
              "sol": "[bytes(abi.encode(\"94,92,244,136,198,110,151,164,192,200,101,42,16,118,186,195,194,37,163,41,160,165,44,61,185,16,70,2,167,108,193,253\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.091ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[163,105,194,138,255,61,1,207,219,82,242,13,254,164,130,145,22,61,22,71,216,108,104,147,157,67,249,212,245,35,43,20],[47,176,218,158,57,181,129,49,149,56,215,106,106,84,134,85,165,48,117,24,13,240,231,232,138,106,89,214,53,20,38,161],[150,205,58,136,65,197,89,222,14,155,77,14,52,99,11,220,178,119,150,108,248,183,15,35,43,128,156,246,9,129,96,235],[115,198,153,43,197,185,88,160,172,186,122,140,19,185,233,202,60,244,45,219,41,155,41,158,181,216,90,12,122,164,47,203],[89,134,95,35,44,117,29,28,55,149,152,169,182,133,241,104,159,243,199,57,52,5,92,19,78,232,200,238,149,36,213,217],[73,78,97,136,1,242,173,234,164,119,62,220,57,98,230,76,43,47,167,98,168,4,176,76,43,120,141,150,55,231,9,150]]",
              "sol": "[bytes(abi.encode(\"163,105,194,138,255,61,1,207,219,82,242,13,254,164,130,145,22,61,22,71,216,108,104,147,157,67,249,212,245,35,43,20\")),bytes(abi.encode(\"47,176,218,158,57,181,129,49,149,56,215,106,106,84,134,85,165,48,117,24,13,240,231,232,138,106,89,214,53,20,38,161\")),bytes(abi.encode(\"150,205,58,136,65,197,89,222,14,155,77,14,52,99,11,220,178,119,150,108,248,183,15,35,43,128,156,246,9,129,96,235\")),bytes(abi.encode(\"115,198,153,43,197,185,88,160,172,186,122,140,19,185,233,202,60,244,45,219,41,155,41,158,181,216,90,12,122,164,47,203\")),bytes(abi.encode(\"89,134,95,35,44,117,29,28,55,149,152,169,182,133,241,104,159,243,199,57,52,5,92,19,78,232,200,238,149,36,213,217\")),bytes(abi.encode(\"73,78,97,136,1,242,173,234,164,119,62,220,57,98,230,76,43,47,167,98,168,4,176,76,43,120,141,150,55,231,9,150\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.091ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"vyaiez\"",
              "sol": "\"vyaiez\""
            },
            {
              "js": "[[221,94,142,69,100,134,231,254,165,55,247,252,108,9,24,72,247,118,118,79,247,129,133,99,185,81,125,5,213,114,20,51]]",
              "sol": "[bytes(abi.encode(\"221,94,142,69,100,134,231,254,165,55,247,252,108,9,24,72,247,118,118,79,247,129,133,99,185,81,125,5,213,114,20,51\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.092ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[42,46,108,86,75,3,68,80,34,145,170,14,84,145,18,10,188,239,14,48,243,32,24,146,243,142,183,168,223,112,10,33]]",
              "sol": "[bytes(abi.encode(\"42,46,108,86,75,3,68,80,34,145,170,14,84,145,18,10,188,239,14,48,243,32,24,146,243,142,183,168,223,112,10,33\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.093ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[151,79,199,215,158,7,87,6,207,114,146,185,35,67,189,98,103,130,54,54,16,246,218,93,38,87,139,32,69,47,119,169]]",
              "sol": "[bytes(abi.encode(\"151,79,199,215,158,7,87,6,207,114,146,185,35,67,189,98,103,130,54,54,16,246,218,93,38,87,139,32,69,47,119,169\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.094ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[59,50,140,145,101,25,38,38,31,79,238,56,80,145,229,135,95,99,123,92,111,76,35,88,191,52,194,53,47,224,105,254]]",
              "sol": "[bytes(abi.encode(\"59,50,140,145,101,25,38,38,31,79,238,56,80,145,229,135,95,99,123,92,111,76,35,88,191,52,194,53,47,224,105,254\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.094ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[49,226,63,119,222,208,179,90,193,1,149,119,114,82,159,152,230,196,134,18,9,209,47,171,84,122,196,109,206,30,127,38],[154,242,144,36,94,159,71,3,192,48,132,234,109,23,74,116,116,4,0,103,176,178,225,154,32,12,91,50,112,222,84,148]]",
              "sol": "[bytes(abi.encode(\"49,226,63,119,222,208,179,90,193,1,149,119,114,82,159,152,230,196,134,18,9,209,47,171,84,122,196,109,206,30,127,38\")),bytes(abi.encode(\"154,242,144,36,94,159,71,3,192,48,132,234,109,23,74,116,116,4,0,103,176,178,225,154,32,12,91,50,112,222,84,148\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.094ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"vyaiez\"",
              "sol": "\"vyaiez\""
            },
            {
              "js": "[[241,207,19,19,85,57,3,236,67,127,73,122,205,106,94,204,75,200,172,116,193,143,126,221,86,157,9,46,152,139,85,46],[153,32,69,82,195,144,127,193,88,160,83,140,25,73,3,149,171,53,109,84,155,246,154,155,141,51,4,177,218,6,29,238]]",
              "sol": "[bytes(abi.encode(\"241,207,19,19,85,57,3,236,67,127,73,122,205,106,94,204,75,200,172,116,193,143,126,221,86,157,9,46,152,139,85,46\")),bytes(abi.encode(\"153,32,69,82,195,144,127,193,88,160,83,140,25,73,3,149,171,53,109,84,155,246,154,155,141,51,4,177,218,6,29,238\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.095ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[121,219,254,186,249,116,19,130,240,192,156,149,49,165,141,15,74,229,179,36,70,167,11,101,69,147,13,226,130,138,231,54],[78,87,43,104,16,91,74,187,192,126,94,243,221,30,38,24,37,77,68,241,150,167,46,171,133,97,133,217,202,24,101,217]]",
              "sol": "[bytes(abi.encode(\"121,219,254,186,249,116,19,130,240,192,156,149,49,165,141,15,74,229,179,36,70,167,11,101,69,147,13,226,130,138,231,54\")),bytes(abi.encode(\"78,87,43,104,16,91,74,187,192,126,94,243,221,30,38,24,37,77,68,241,150,167,46,171,133,97,133,217,202,24,101,217\"))]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.096ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[22,60,68,242,220,23,103,157,96,192,243,238,224,88,77,253,89,61,146,241,126,224,194,79,51,217,132,211,244,79,96,169],[149,121,79,65,10,99,31,0,6,187,157,206,215,197,60,108,28,150,34,224,178,57,244,172,110,140,143,232,17,56,152,164]]",
              "sol": "[bytes(abi.encode(\"22,60,68,242,220,23,103,157,96,192,243,238,224,88,77,253,89,61,146,241,126,224,194,79,51,217,132,211,244,79,96,169\")),bytes(abi.encode(\"149,121,79,65,10,99,31,0,6,187,157,206,215,197,60,108,28,150,34,224,178,57,244,172,110,140,143,232,17,56,152,164\"))]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.097ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[245,142,154,31,244,97,15,234,27,199,194,210,66,20,99,27,110,68,5,205,10,177,182,117,88,153,247,171,223,26,185,102],[47,243,4,245,94,115,46,229,212,112,30,9,3,215,252,155,83,38,97,158,221,183,235,224,222,182,215,137,199,32,202,115],[117,58,160,21,229,128,140,103,238,111,74,53,21,146,30,94,94,141,44,151,246,78,144,165,186,117,185,79,126,249,24,39]]",
              "sol": "[bytes(abi.encode(\"245,142,154,31,244,97,15,234,27,199,194,210,66,20,99,27,110,68,5,205,10,177,182,117,88,153,247,171,223,26,185,102\")),bytes(abi.encode(\"47,243,4,245,94,115,46,229,212,112,30,9,3,215,252,155,83,38,97,158,221,183,235,224,222,182,215,137,199,32,202,115\")),bytes(abi.encode(\"117,58,160,21,229,128,140,103,238,111,74,53,21,146,30,94,94,141,44,151,246,78,144,165,186,117,185,79,126,249,24,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.097ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"39d6g\"",
              "sol": "\"39d6g\""
            },
            {
              "js": "[[90,166,245,64,60,11,125,62,228,82,99,1,86,99,55,70,109,27,126,143,3,134,129,61,151,86,180,223,132,39,230,162],[137,47,205,149,223,222,41,60,91,179,72,193,214,165,70,35,135,228,198,159,215,125,251,148,68,183,223,99,69,128,239,215],[55,194,247,142,80,47,117,162,146,55,176,120,24,15,3,76,65,237,152,94,200,174,180,191,9,198,213,12,134,12,76,87]]",
              "sol": "[bytes(abi.encode(\"90,166,245,64,60,11,125,62,228,82,99,1,86,99,55,70,109,27,126,143,3,134,129,61,151,86,180,223,132,39,230,162\")),bytes(abi.encode(\"137,47,205,149,223,222,41,60,91,179,72,193,214,165,70,35,135,228,198,159,215,125,251,148,68,183,223,99,69,128,239,215\")),bytes(abi.encode(\"55,194,247,142,80,47,117,162,146,55,176,120,24,15,3,76,65,237,152,94,200,174,180,191,9,198,213,12,134,12,76,87\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.098ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[26,17,248,15,218,28,182,238,142,29,174,35,147,219,102,215,46,18,221,230,72,175,124,169,35,18,31,168,98,96,195,143],[114,199,204,56,31,174,116,47,105,192,100,195,210,20,142,205,56,11,97,106,23,59,65,213,103,55,107,10,119,5,124,184],[3,53,224,57,128,125,7,223,253,96,110,69,111,67,196,103,9,223,124,231,45,25,130,14,3,178,78,55,251,156,47,247]]",
              "sol": "[bytes(abi.encode(\"26,17,248,15,218,28,182,238,142,29,174,35,147,219,102,215,46,18,221,230,72,175,124,169,35,18,31,168,98,96,195,143\")),bytes(abi.encode(\"114,199,204,56,31,174,116,47,105,192,100,195,210,20,142,205,56,11,97,106,23,59,65,213,103,55,107,10,119,5,124,184\")),bytes(abi.encode(\"3,53,224,57,128,125,7,223,253,96,110,69,111,67,196,103,9,223,124,231,45,25,130,14,3,178,78,55,251,156,47,247\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.099ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[88,157,228,178,186,227,133,9,144,20,94,29,117,142,115,113,158,233,251,97,82,232,231,186,18,118,245,99,64,209,162,108],[61,65,60,0,39,60,17,42,68,94,17,154,78,191,30,128,104,139,238,216,187,184,242,169,154,105,86,195,253,49,70,65],[151,149,67,154,21,223,159,107,16,239,84,19,77,227,250,161,206,6,194,255,103,51,39,221,211,27,5,222,108,94,223,170]]",
              "sol": "[bytes(abi.encode(\"88,157,228,178,186,227,133,9,144,20,94,29,117,142,115,113,158,233,251,97,82,232,231,186,18,118,245,99,64,209,162,108\")),bytes(abi.encode(\"61,65,60,0,39,60,17,42,68,94,17,154,78,191,30,128,104,139,238,216,187,184,242,169,154,105,86,195,253,49,70,65\")),bytes(abi.encode(\"151,149,67,154,21,223,159,107,16,239,84,19,77,227,250,161,206,6,194,255,103,51,39,221,211,27,5,222,108,94,223,170\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.099ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[107,238,26,233,38,34,75,129,13,238,41,81,206,59,219,170,116,152,82,241,121,206,107,69,96,102,6,93,153,83,42,113],[84,9,3,153,110,224,195,157,42,243,23,166,39,240,208,99,88,91,119,213,247,204,78,6,120,104,68,124,169,78,141,127],[229,27,196,3,192,143,250,38,208,178,17,180,188,18,115,32,152,141,49,76,59,141,201,235,168,192,110,61,72,145,189,128],[85,23,106,186,181,70,125,60,207,208,190,26,199,137,128,122,105,114,239,35,193,29,75,202,232,62,24,47,197,232,129,206]]",
              "sol": "[bytes(abi.encode(\"107,238,26,233,38,34,75,129,13,238,41,81,206,59,219,170,116,152,82,241,121,206,107,69,96,102,6,93,153,83,42,113\")),bytes(abi.encode(\"84,9,3,153,110,224,195,157,42,243,23,166,39,240,208,99,88,91,119,213,247,204,78,6,120,104,68,124,169,78,141,127\")),bytes(abi.encode(\"229,27,196,3,192,143,250,38,208,178,17,180,188,18,115,32,152,141,49,76,59,141,201,235,168,192,110,61,72,145,189,128\")),bytes(abi.encode(\"85,23,106,186,181,70,125,60,207,208,190,26,199,137,128,122,105,114,239,35,193,29,75,202,232,62,24,47,197,232,129,206\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.100ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"hirbpp\"",
              "sol": "\"hirbpp\""
            },
            {
              "js": "[[153,149,187,249,134,201,146,90,201,124,135,194,232,182,136,106,206,160,129,120,63,103,156,92,59,83,20,197,3,100,219,147],[74,74,197,58,12,152,168,119,89,117,43,170,9,228,172,227,144,165,30,244,42,53,220,32,200,148,29,115,148,122,88,117],[119,27,53,228,209,19,196,162,1,93,139,165,230,3,106,229,82,140,244,17,86,88,128,3,63,28,67,233,165,93,164,154],[95,210,59,39,244,65,46,159,21,205,126,116,103,220,221,15,245,76,21,25,162,196,176,84,194,153,78,192,34,39,157,196]]",
              "sol": "[bytes(abi.encode(\"153,149,187,249,134,201,146,90,201,124,135,194,232,182,136,106,206,160,129,120,63,103,156,92,59,83,20,197,3,100,219,147\")),bytes(abi.encode(\"74,74,197,58,12,152,168,119,89,117,43,170,9,228,172,227,144,165,30,244,42,53,220,32,200,148,29,115,148,122,88,117\")),bytes(abi.encode(\"119,27,53,228,209,19,196,162,1,93,139,165,230,3,106,229,82,140,244,17,86,88,128,3,63,28,67,233,165,93,164,154\")),bytes(abi.encode(\"95,210,59,39,244,65,46,159,21,205,126,116,103,220,221,15,245,76,21,25,162,196,176,84,194,153,78,192,34,39,157,196\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.100ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[119,238,198,208,171,116,192,141,234,68,84,8,168,142,107,209,157,120,18,203,40,84,112,73,79,82,57,61,151,144,17,215],[43,212,213,240,44,229,191,204,35,16,30,155,123,96,139,99,87,67,17,103,239,115,222,251,248,244,234,204,161,17,81,38],[165,15,255,188,161,207,33,136,207,32,87,47,60,156,192,83,140,206,82,97,59,137,142,77,177,226,146,76,226,17,194,34],[93,146,89,111,18,231,116,154,12,51,146,51,205,123,108,181,20,89,131,129,224,60,161,102,50,49,178,2,102,208,206,46]]",
              "sol": "[bytes(abi.encode(\"119,238,198,208,171,116,192,141,234,68,84,8,168,142,107,209,157,120,18,203,40,84,112,73,79,82,57,61,151,144,17,215\")),bytes(abi.encode(\"43,212,213,240,44,229,191,204,35,16,30,155,123,96,139,99,87,67,17,103,239,115,222,251,248,244,234,204,161,17,81,38\")),bytes(abi.encode(\"165,15,255,188,161,207,33,136,207,32,87,47,60,156,192,83,140,206,82,97,59,137,142,77,177,226,146,76,226,17,194,34\")),bytes(abi.encode(\"93,146,89,111,18,231,116,154,12,51,146,51,205,123,108,181,20,89,131,129,224,60,161,102,50,49,178,2,102,208,206,46\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.101ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"ssz99\"",
              "sol": "\"ssz99\""
            },
            {
              "js": "[[210,93,18,169,192,39,44,197,240,196,45,6,246,121,84,128,97,188,68,76,90,40,182,19,157,249,114,112,13,196,93,235],[197,189,70,130,1,36,84,27,57,52,133,121,92,226,147,16,241,207,89,172,209,60,13,184,68,33,49,40,83,133,79,213],[211,238,248,136,11,113,186,215,181,197,250,225,175,146,130,71,53,236,32,9,69,176,5,25,137,134,33,222,145,15,81,229],[218,8,37,39,19,183,118,77,238,59,129,166,25,210,96,201,73,108,6,176,65,208,106,194,26,138,219,98,31,148,174,174]]",
              "sol": "[bytes(abi.encode(\"210,93,18,169,192,39,44,197,240,196,45,6,246,121,84,128,97,188,68,76,90,40,182,19,157,249,114,112,13,196,93,235\")),bytes(abi.encode(\"197,189,70,130,1,36,84,27,57,52,133,121,92,226,147,16,241,207,89,172,209,60,13,184,68,33,49,40,83,133,79,213\")),bytes(abi.encode(\"211,238,248,136,11,113,186,215,181,197,250,225,175,146,130,71,53,236,32,9,69,176,5,25,137,134,33,222,145,15,81,229\")),bytes(abi.encode(\"218,8,37,39,19,183,118,77,238,59,129,166,25,210,96,201,73,108,6,176,65,208,106,194,26,138,219,98,31,148,174,174\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.102ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[178,243,208,141,174,104,61,63,48,131,83,65,68,2,191,211,48,14,168,45,173,12,8,244,253,48,73,30,251,156,61,82],[166,209,63,239,189,152,94,187,206,16,14,130,53,91,46,28,84,154,134,78,83,125,179,216,150,208,65,160,62,165,118,37],[252,3,107,211,16,7,44,158,90,199,26,170,232,252,37,33,89,226,106,235,146,80,81,210,190,236,245,226,166,120,178,31],[194,136,176,80,162,239,195,112,116,235,140,181,74,85,38,55,0,10,95,107,19,219,19,4,72,199,134,75,202,202,22,12],[178,51,182,9,86,221,24,176,40,116,205,189,227,28,127,74,233,30,139,165,95,9,154,66,115,90,47,218,204,105,215,76]]",
              "sol": "[bytes(abi.encode(\"178,243,208,141,174,104,61,63,48,131,83,65,68,2,191,211,48,14,168,45,173,12,8,244,253,48,73,30,251,156,61,82\")),bytes(abi.encode(\"166,209,63,239,189,152,94,187,206,16,14,130,53,91,46,28,84,154,134,78,83,125,179,216,150,208,65,160,62,165,118,37\")),bytes(abi.encode(\"252,3,107,211,16,7,44,158,90,199,26,170,232,252,37,33,89,226,106,235,146,80,81,210,190,236,245,226,166,120,178,31\")),bytes(abi.encode(\"194,136,176,80,162,239,195,112,116,235,140,181,74,85,38,55,0,10,95,107,19,219,19,4,72,199,134,75,202,202,22,12\")),bytes(abi.encode(\"178,51,182,9,86,221,24,176,40,116,205,189,227,28,127,74,233,30,139,165,95,9,154,66,115,90,47,218,204,105,215,76\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.103ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"39d6g\"",
              "sol": "\"39d6g\""
            },
            {
              "js": "[[185,138,31,230,6,41,54,196,35,71,244,10,253,3,86,23,15,200,73,179,209,35,253,84,51,85,7,80,246,107,54,231],[132,135,40,216,244,206,203,75,185,39,137,167,153,130,166,108,108,194,49,33,206,247,202,114,167,126,2,156,8,178,13,14],[186,128,113,23,244,10,97,104,181,45,120,168,243,16,17,83,201,250,1,73,82,254,59,245,75,4,32,61,30,66,189,215],[181,80,152,229,57,196,12,16,176,229,150,134,175,103,249,32,75,93,29,95,213,219,250,44,208,46,60,165,152,3,231,198],[12,29,127,232,177,179,68,95,255,36,208,92,179,136,185,133,215,172,202,124,212,65,193,80,159,228,218,232,114,49,97,192]]",
              "sol": "[bytes(abi.encode(\"185,138,31,230,6,41,54,196,35,71,244,10,253,3,86,23,15,200,73,179,209,35,253,84,51,85,7,80,246,107,54,231\")),bytes(abi.encode(\"132,135,40,216,244,206,203,75,185,39,137,167,153,130,166,108,108,194,49,33,206,247,202,114,167,126,2,156,8,178,13,14\")),bytes(abi.encode(\"186,128,113,23,244,10,97,104,181,45,120,168,243,16,17,83,201,250,1,73,82,254,59,245,75,4,32,61,30,66,189,215\")),bytes(abi.encode(\"181,80,152,229,57,196,12,16,176,229,150,134,175,103,249,32,75,93,29,95,213,219,250,44,208,46,60,165,152,3,231,198\")),bytes(abi.encode(\"12,29,127,232,177,179,68,95,255,36,208,92,179,136,185,133,215,172,202,124,212,65,193,80,159,228,218,232,114,49,97,192\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.104ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[40,140,215,170,228,124,176,8,135,68,96,34,172,105,122,111,173,117,140,196,1,99,143,153,160,123,244,38,252,111,46,88],[207,57,76,218,116,6,153,218,233,2,128,184,162,139,48,193,217,29,119,102,199,105,83,8,26,207,33,167,167,54,41,146],[249,223,103,182,102,66,190,64,168,241,98,23,145,236,138,19,81,18,142,232,210,168,45,96,72,77,204,51,98,26,67,13],[232,80,253,33,113,10,127,157,219,130,30,17,143,61,19,230,42,62,161,151,5,18,133,1,63,103,64,179,250,160,232,146],[127,212,134,127,155,164,173,22,248,116,138,143,170,113,195,118,102,42,40,105,249,90,138,56,102,199,6,234,139,217,28,191]]",
              "sol": "[bytes(abi.encode(\"40,140,215,170,228,124,176,8,135,68,96,34,172,105,122,111,173,117,140,196,1,99,143,153,160,123,244,38,252,111,46,88\")),bytes(abi.encode(\"207,57,76,218,116,6,153,218,233,2,128,184,162,139,48,193,217,29,119,102,199,105,83,8,26,207,33,167,167,54,41,146\")),bytes(abi.encode(\"249,223,103,182,102,66,190,64,168,241,98,23,145,236,138,19,81,18,142,232,210,168,45,96,72,77,204,51,98,26,67,13\")),bytes(abi.encode(\"232,80,253,33,113,10,127,157,219,130,30,17,143,61,19,230,42,62,161,151,5,18,133,1,63,103,64,179,250,160,232,146\")),bytes(abi.encode(\"127,212,134,127,155,164,173,22,248,116,138,143,170,113,195,118,102,42,40,105,249,90,138,56,102,199,6,234,139,217,28,191\"))]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.105ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"kizr3q\"",
              "sol": "\"kizr3q\""
            },
            {
              "js": "[[202,52,68,156,52,108,139,100,68,52,200,16,95,194,24,36,73,77,17,184,67,75,9,163,78,145,13,34,126,230,113,60],[212,96,248,251,52,14,23,151,173,235,209,123,170,213,209,232,232,69,108,22,29,243,250,127,200,152,52,166,14,146,61,228],[161,158,94,180,191,178,184,179,215,233,19,50,73,110,147,211,59,145,23,197,34,149,244,220,106,30,218,219,30,212,39,71],[243,163,112,97,218,150,120,128,9,112,14,168,166,214,157,147,102,244,62,246,87,136,12,220,116,186,146,114,152,60,89,187],[89,29,15,240,84,254,59,35,126,113,71,57,25,230,52,209,157,225,106,253,127,143,47,213,77,162,172,94,88,94,92,112]]",
              "sol": "[bytes(abi.encode(\"202,52,68,156,52,108,139,100,68,52,200,16,95,194,24,36,73,77,17,184,67,75,9,163,78,145,13,34,126,230,113,60\")),bytes(abi.encode(\"212,96,248,251,52,14,23,151,173,235,209,123,170,213,209,232,232,69,108,22,29,243,250,127,200,152,52,166,14,146,61,228\")),bytes(abi.encode(\"161,158,94,180,191,178,184,179,215,233,19,50,73,110,147,211,59,145,23,197,34,149,244,220,106,30,218,219,30,212,39,71\")),bytes(abi.encode(\"243,163,112,97,218,150,120,128,9,112,14,168,166,214,157,147,102,244,62,246,87,136,12,220,116,186,146,114,152,60,89,187\")),bytes(abi.encode(\"89,29,15,240,84,254,59,35,126,113,71,57,25,230,52,209,157,225,106,253,127,143,47,213,77,162,172,94,88,94,92,112\"))]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.105ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[179]",
              "sol": "bytes1(\"179\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.106ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.106ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.106ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.107ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.107ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"ssz99\"",
              "sol": "\"ssz99\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.107ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.108ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.108ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"vyaiez\"",
              "sol": "\"vyaiez\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.108ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"5r9xr\"",
              "sol": "\"5r9xr\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"39d6g\"",
              "sol": "\"39d6g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.108ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"9wcdv\"",
              "sol": "\"9wcdv\""
            },
            {
              "js": "\"ssz99\"",
              "sol": "\"ssz99\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.109ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.109ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.109ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"kizr3q\"",
              "sol": "\"kizr3q\""
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"zc1wqw\"",
              "sol": "\"zc1wqw\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.111ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.111ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"zc1wqw\"",
              "sol": "\"zc1wqw\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.112ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.113ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"39d6g\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"39d6g\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.113ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[153,44,152,87,3,247,212,102,206,48,25,178,4,132,6,111,240,70,139,250,113,206,86,249,138,157,172,69,126,248,112,245],[230,46,190,158,119,142,119,31,141,191,209,230,252,126,118,237,92,142,181,215,35,123,92,141,226,75,241,54,117,234,229,159],[133,250,56,164,221,108,243,145,253,135,86,16,82,8,11,67,130,199,24,222,20,214,222,86,54,147,91,181,74,170,196,77],[29,130,45,193,91,73,110,247,165,127,185,222,146,22,176,76,156,168,6,68,229,215,58,123,247,86,37,232,83,149,231,100],[150,185,223,215,7,229,221,75,15,49,237,6,251,131,6,27,133,254,201,78,97,79,103,243,144,106,179,56,183,125,144,211],[14,98,201,107,156,79,34,42,154,135,176,150,42,163,110,132,141,155,98,4,86,161,118,24,52,96,149,161,65,173,17,2],[16,37,99,10,99,18,79,196,85,212,158,47,50,173,164,72,164,158,63,234,251,3,178,103,211,121,152,99,143,10,71,84],[33,238,197,1,75,170,67,222,46,122,172,52,149,120,23,92,32,80,75,135,182,189,161,161,77,163,71,170,176,136,221,207]]",
              "sol": "[bytes(abi.encode(\"153,44,152,87,3,247,212,102,206,48,25,178,4,132,6,111,240,70,139,250,113,206,86,249,138,157,172,69,126,248,112,245\")),bytes(abi.encode(\"230,46,190,158,119,142,119,31,141,191,209,230,252,126,118,237,92,142,181,215,35,123,92,141,226,75,241,54,117,234,229,159\")),bytes(abi.encode(\"133,250,56,164,221,108,243,145,253,135,86,16,82,8,11,67,130,199,24,222,20,214,222,86,54,147,91,181,74,170,196,77\")),bytes(abi.encode(\"29,130,45,193,91,73,110,247,165,127,185,222,146,22,176,76,156,168,6,68,229,215,58,123,247,86,37,232,83,149,231,100\")),bytes(abi.encode(\"150,185,223,215,7,229,221,75,15,49,237,6,251,131,6,27,133,254,201,78,97,79,103,243,144,106,179,56,183,125,144,211\")),bytes(abi.encode(\"14,98,201,107,156,79,34,42,154,135,176,150,42,163,110,132,141,155,98,4,86,161,118,24,52,96,149,161,65,173,17,2\")),bytes(abi.encode(\"16,37,99,10,99,18,79,196,85,212,158,47,50,173,164,72,164,158,63,234,251,3,178,103,211,121,152,99,143,10,71,84\")),bytes(abi.encode(\"33,238,197,1,75,170,67,222,46,122,172,52,149,120,23,92,32,80,75,135,182,189,161,161,77,163,71,170,176,136,221,207\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.114ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.114ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[253,108,129,138,92,146,232,64,69,86,150,8,23,198,84,208,4,191,46,8,180,255,54,53,62,187,136,46,162,86,159,126]",
              "sol": "stringToBytes32(\"253,108,129,138,92,146,232,64,69,86,150,8,23,198,84,208,4,191,46,8,180,255,54,53,62,187,136,46,162,86,159,126\")"
            },
            {
              "js": "[131,71,26,169,38,193,76,44,100,88,35,88,100,49,27,208,123,116,52,99,208,116,110,243,150,92,103,9,147,113,247,18]",
              "sol": "stringToBytes32(\"131,71,26,169,38,193,76,44,100,88,35,88,100,49,27,208,123,116,52,99,208,116,110,243,150,92,103,9,147,113,247,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.114ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[3,69,58,206,136,114,37,16,91,1,249,61,243,10,254,28,40,171,79,149,11,150,217,29,123,123,194,201,143,26,237,2]",
              "sol": "stringToBytes32(\"3,69,58,206,136,114,37,16,91,1,249,61,243,10,254,28,40,171,79,149,11,150,217,29,123,123,194,201,143,26,237,2\")"
            },
            {
              "js": "[85,12,152,78,208,147,36,157,226,65,114,37,118,212,158,149,95,203,135,137,163,0,153,143,19,135,198,6,208,7,105,132]",
              "sol": "abi.encode(\"85,12,152,78,208,147,36,157,226,65,114,37,118,212,158,149,95,203,135,137,163,0,153,143,19,135,198,6,208,7,105,132\")"
            },
            {
              "js": "[90,25,86,29,116,130,91,89,51,142,70,181,246,179,103,44,45,141,102,127,155,236,136,106,110,168,86,154,254,52,131,249]",
              "sol": "abi.encode(\"90,25,86,29,116,130,91,89,51,142,70,181,246,179,103,44,45,141,102,127,155,236,136,106,110,168,86,154,254,52,131,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.115ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[192,99,57,163,31,234,143,231,46,147,189,234,93,205,146,89,244,5,221,235,187,84,123,168,163,252,204,32,219,2,235,89]",
              "sol": "abi.encode(\"192,99,57,163,31,234,143,231,46,147,189,234,93,205,146,89,244,5,221,235,187,84,123,168,163,252,204,32,219,2,235,89\")"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[61,218,86,195,135,252,51,242,72,97,253,12,85,192,248,217,126,170,255,196,6,87,128,227,8,6,254,43,142,38,25,162]",
              "sol": "abi.encode(\"61,218,86,195,135,252,51,242,72,97,253,12,85,192,248,217,126,170,255,196,6,87,128,227,8,6,254,43,142,38,25,162\")"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.117ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[182,173,16,15,80,241,128,48,89,237,243,37,118,148,127,223,86,250,20,102,60,12,240,47,155,39,16,185,91,134,17,84]",
              "sol": "stringToBytes32(\"182,173,16,15,80,241,128,48,89,237,243,37,118,148,127,223,86,250,20,102,60,12,240,47,155,39,16,185,91,134,17,84\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[163,21,75,88,95,8,47,163,43,147,247,189,6,73,41,184,169,223,27,87,90,30,106,77,164,67,195,113,14,153,63,248]",
              "sol": "abi.encode(\"163,21,75,88,95,8,47,163,43,147,247,189,6,73,41,184,169,223,27,87,90,30,106,77,164,67,195,113,14,153,63,248\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[55,231,21,13,179,32,254,133,209,10,126,158,78,13,216,71,137,185,120,77,37,63,180,133,226,202,150,63,221,228,86,234]",
              "sol": "stringToBytes32(\"55,231,21,13,179,32,254,133,209,10,126,158,78,13,216,71,137,185,120,77,37,63,180,133,226,202,150,63,221,228,86,234\")"
            },
            {
              "js": "\"5mrwu8q\"",
              "sol": "\"5mrwu8q\""
            },
            {
              "js": "[216,217,8,165,17,58,217,55,204,109,114,65,185,182,106,70,110,194,128,38,33,242,163,133,103,65,57,236,167,117,79,25]",
              "sol": "abi.encode(\"216,217,8,165,17,58,217,55,204,109,114,65,185,182,106,70,110,194,128,38,33,242,163,133,103,65,57,236,167,117,79,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.118ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[3,149,16,21,251,187,17,70,141,38,112,247,222,187,239,236,30,95,130,69,134,119,134,86,150,124,13,195,11,1,162,69]",
              "sol": "stringToBytes32(\"3,149,16,21,251,187,17,70,141,38,112,247,222,187,239,236,30,95,130,69,134,119,134,86,150,124,13,195,11,1,162,69\")"
            },
            {
              "js": "[182,118,6,232,178,240,181,74,168,202,247,198,198,95,103,197,146,114,212,136,57,88,13,215,148,36,8,65,244,123,58,186]",
              "sol": "abi.encode(\"182,118,6,232,178,240,181,74,168,202,247,198,198,95,103,197,146,114,212,136,57,88,13,215,148,36,8,65,244,123,58,186\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[3,149,16,21,251,187,17,70,141,38,112,247,222,187,239,236,30,95,130,69,134,119,134,86,150,124,13,195,11,1,162,69]",
                "sol": "stringToBytes32(\"3,149,16,21,251,187,17,70,141,38,112,247,222,187,239,236,30,95,130,69,134,119,134,86,150,124,13,195,11,1,162,69\")"
              },
              {
                "js": "[44,36,181,189,122,173,139,78,33,203,157,101,29,11,118,157,52,63,45,3,216,81,99,98,9,108,145,100,70,140,239,231,41]",
                "sol": "bytes33(\"44,36,181,189,122,173,139,78,33,203,157,101,29,11,118,157,52,63,45,3,216,81,99,98,9,108,145,100,70,140,239,231,41\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.119ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[129,192,202,120,121,123,98,247,189,96,244,182,121,133,169,151,189,29,1,124,22,129,143,145,7,35,130,36,190,225,140,215]",
              "sol": "abi.encode(\"129,192,202,120,121,123,98,247,189,96,244,182,121,133,169,151,189,29,1,124,22,129,143,145,7,35,130,36,190,225,140,215\")"
            },
            {
              "js": "[8,23,22,72,180,184,76,240,188,21,240,167,87,207,142,123,206,5,225,76,55,135,153,50,180,88,251,112,132,24,137,185]",
              "sol": "stringToBytes32(\"8,23,22,72,180,184,76,240,188,21,240,167,87,207,142,123,206,5,225,76,55,135,153,50,180,88,251,112,132,24,137,185\")"
            },
            {
              "js": "[14,158,226,32,229,255,116,0,102,119,82,212,223,159,113,217,49,48,15,132,95,154,39,196,120,18,22,213,124,48,147,174]",
              "sol": "abi.encode(\"14,158,226,32,229,255,116,0,102,119,82,212,223,159,113,217,49,48,15,132,95,154,39,196,120,18,22,213,124,48,147,174\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[35,11,208,176,31,65,47,112,2,225,67,177,120,85,182,196,36,9,252,4,153,71,201,22,180,230,171,186,70,145,216,29]",
              "sol": "abi.encode(\"35,11,208,176,31,65,47,112,2,225,67,177,120,85,182,196,36,9,252,4,153,71,201,22,180,230,171,186,70,145,216,29\")"
            },
            {
              "js": "[226,32,120,228,48,143,182,40,80,163,189,71,171,34,55,81,54,199,102,202,221,75,206,100,217,157,40,30,16,150,19,196]",
              "sol": "stringToBytes32(\"226,32,120,228,48,143,182,40,80,163,189,71,171,34,55,81,54,199,102,202,221,75,206,100,217,157,40,30,16,150,19,196\")"
            },
            {
              "js": "[154,135,179,88,47,133,190,36,60,78,120,105,247,50,115,232,46,69,180,182,49,225,68,159,166,204,235,122,146,71,170,85]",
              "sol": "abi.encode(\"154,135,179,88,47,133,190,36,60,78,120,105,247,50,115,232,46,69,180,182,49,225,68,159,166,204,235,122,146,71,170,85\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[196,147,204,6,98,146,109,36,138,112,47,60,202,194,230,51,185,244,223,62,140,79,162,75,196,106,170,114,168,255,162,88]",
              "sol": "abi.encode(\"196,147,204,6,98,146,109,36,138,112,47,60,202,194,230,51,185,244,223,62,140,79,162,75,196,106,170,114,168,255,162,88\")"
            },
            {
              "js": "[62,140,126,144,212,159,138,30,236,17,241,40,184,58,148,76,224,31,197,86,178,215,227,75,245,147,59,120,58,195,133,175]",
              "sol": "stringToBytes32(\"62,140,126,144,212,159,138,30,236,17,241,40,184,58,148,76,224,31,197,86,178,215,227,75,245,147,59,120,58,195,133,175\")"
            },
            {
              "js": "[91,156,75,191,175,113,236,162,206,214,91,85,164,24,225,135,123,41,237,203,92,157,140,78,249,225,119,9,8,187,99,28]",
              "sol": "abi.encode(\"91,156,75,191,175,113,236,162,206,214,91,85,164,24,225,135,123,41,237,203,92,157,140,78,249,225,119,9,8,187,99,28\")"
            },
            {
              "js": "\"vyaiez\"",
              "sol": "\"vyaiez\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[249,209,100,129,87,86,234,248,56,99,123,75,101,30,192,94,66,194,43,68,82,129,151,140,111,96,135,4,252,83,44,116]",
              "sol": "abi.encode(\"249,209,100,129,87,86,234,248,56,99,123,75,101,30,192,94,66,194,43,68,82,129,151,140,111,96,135,4,252,83,44,116\")"
            },
            {
              "js": "[97,86,79,37,128,95,172,208,127,45,50,160,32,168,28,233,23,141,19,51,196,9,150,128,198,242,3,140,21,121,0,25]",
              "sol": "stringToBytes32(\"97,86,79,37,128,95,172,208,127,45,50,160,32,168,28,233,23,141,19,51,196,9,150,128,198,242,3,140,21,121,0,25\")"
            },
            {
              "js": "[12,73,255,71,90,232,18,241,53,10,125,238,137,200,246,78,69,53,37,78,108,184,149,206,181,224,192,193,127,243,2,11]",
              "sol": "abi.encode(\"12,73,255,71,90,232,18,241,53,10,125,238,137,200,246,78,69,53,37,78,108,184,149,206,181,224,192,193,127,243,2,11\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[74,22,80,35,162,13,209,91,65,7,100,104,46,25,76,144,77,91,224,100,154,161,16,192,231,184,48,14,92,212,162,34]",
              "sol": "abi.encode(\"74,22,80,35,162,13,209,91,65,7,100,104,46,25,76,144,77,91,224,100,154,161,16,192,231,184,48,14,92,212,162,34\")"
            },
            {
              "js": "[32,85,151,50,135,176,212,94,48,244,208,166,189,41,90,205,147,49,232,44,80,101,242,108,14,222,255,198,78,255,245,184]",
              "sol": "stringToBytes32(\"32,85,151,50,135,176,212,94,48,244,208,166,189,41,90,205,147,49,232,44,80,101,242,108,14,222,255,198,78,255,245,184\")"
            },
            {
              "js": "[209,11,193,37,106,65,19,126,216,173,204,135,61,92,63,132,228,49,150,34,131,89,137,104,111,201,40,127,131,15,25,125]",
              "sol": "abi.encode(\"209,11,193,37,106,65,19,126,216,173,204,135,61,92,63,132,228,49,150,34,131,89,137,104,111,201,40,127,131,15,25,125\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[112,128,158,2,185,110,0,243,67,195,72,208,148,5,17,183,111,249,48,94,51,45,159,111,224,203,168,11,74,15,151,0]",
              "sol": "abi.encode(\"112,128,158,2,185,110,0,243,67,195,72,208,148,5,17,183,111,249,48,94,51,45,159,111,224,203,168,11,74,15,151,0\")"
            },
            {
              "js": "[11,207,223,212,152,110,81,1,45,22,96,209,82,234,104,59,217,220,213,141,149,122,114,151,183,151,207,99,125,103,35,163]",
              "sol": "stringToBytes32(\"11,207,223,212,152,110,81,1,45,22,96,209,82,234,104,59,217,220,213,141,149,122,114,151,183,151,207,99,125,103,35,163\")"
            },
            {
              "js": "[44,164,27,28,132,80,85,30,227,145,238,241,182,185,200,111,120,122,248,94,215,113,254,38,228,91,69,105,244,181,83,36]",
              "sol": "abi.encode(\"44,164,27,28,132,80,85,30,227,145,238,241,182,185,200,111,120,122,248,94,215,113,254,38,228,91,69,105,244,181,83,36\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[106,124,87,138,44,52,56,9,103,177,124,255,107,35,246,236,203,153,255,208,55,190,18,38,29,40,205,204,36,156,242,196]",
              "sol": "abi.encode(\"106,124,87,138,44,52,56,9,103,177,124,255,107,35,246,236,203,153,255,208,55,190,18,38,29,40,205,204,36,156,242,196\")"
            },
            {
              "js": "[88,253,131,166,183,80,181,169,26,253,207,20,210,147,100,162,116,140,106,179,91,171,165,223,125,76,240,178,210,22,15,72]",
              "sol": "stringToBytes32(\"88,253,131,166,183,80,181,169,26,253,207,20,210,147,100,162,116,140,106,179,91,171,165,223,125,76,240,178,210,22,15,72\")"
            },
            {
              "js": "[249,114,21,69,147,126,138,92,171,43,132,143,172,76,155,94,0,199,182,156,219,143,223,117,86,168,75,47,77,3,92,154]",
              "sol": "abi.encode(\"249,114,21,69,147,126,138,92,171,43,132,143,172,76,155,94,0,199,182,156,219,143,223,117,86,168,75,47,77,3,92,154\")"
            },
            {
              "js": "\"vyaiez\"",
              "sol": "\"vyaiez\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[158,35,243,25,235,4,218,66,116,248,206,0,119,228,155,111,179,164,198,31,149,47,232,111,200,234,207,208,71,119,133,106]",
              "sol": "abi.encode(\"158,35,243,25,235,4,218,66,116,248,206,0,119,228,155,111,179,164,198,31,149,47,232,111,200,234,207,208,71,119,133,106\")"
            },
            {
              "js": "[110,245,214,27,45,232,141,102,33,155,50,218,54,246,3,92,126,70,205,240,251,158,116,235,114,23,243,146,245,164,154,214]",
              "sol": "stringToBytes32(\"110,245,214,27,45,232,141,102,33,155,50,218,54,246,3,92,126,70,205,240,251,158,116,235,114,23,243,146,245,164,154,214\")"
            },
            {
              "js": "[243,197,78,168,60,77,196,112,59,0,5,159,55,144,205,46,60,141,60,86,120,220,192,82,164,125,196,150,20,208,130,255]",
              "sol": "abi.encode(\"243,197,78,168,60,77,196,112,59,0,5,159,55,144,205,46,60,141,60,86,120,220,192,82,164,125,196,150,20,208,130,255\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.124ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[105,20,45,75,85,47,190,157,134,108,242,39,17,32,245,159,106,11,7,220,193,188,38,2,17,50,37,112,161,61,142,190]",
              "sol": "abi.encode(\"105,20,45,75,85,47,190,157,134,108,242,39,17,32,245,159,106,11,7,220,193,188,38,2,17,50,37,112,161,61,142,190\")"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "[132,210,41,150,66,62,87,130,150,68,85,221,51,58,156,177,38,34,71,89,101,138,93,147,220,186,84,28,181,64,119,37]",
              "sol": "abi.encode(\"132,210,41,150,66,62,87,130,150,68,85,221,51,58,156,177,38,34,71,89,101,138,93,147,220,186,84,28,181,64,119,37\")"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.125ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[148,186,207,87,52,201,100,253,49,142,218,32,179,249,146,231,200,106,182,78,39,78,28,25,113,160,188,31,230,225,177,82]",
              "sol": "stringToBytes32(\"148,186,207,87,52,201,100,253,49,142,218,32,179,249,146,231,200,106,182,78,39,78,28,25,113,160,188,31,230,225,177,82\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "[7,140,143,240,33,231,64,209,130,77,155,180,9,141,249,21,25,66,70,253,197,163,75,196,62,48,194,95,244,93,56,115]",
              "sol": "stringToBytes32(\"7,140,143,240,33,231,64,209,130,77,155,180,9,141,249,21,25,66,70,253,197,163,75,196,62,48,194,95,244,93,56,115\")"
            },
            {
              "js": "[93,162,93,112,201,115,249,161,153,222,127,27,115,203,111,232,191,212,116,164,247,235,205,145,220,7,246,51,25,250,71,9]",
              "sol": "stringToBytes32(\"93,162,93,112,201,115,249,161,153,222,127,27,115,203,111,232,191,212,116,164,247,235,205,145,220,7,246,51,25,250,71,9\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.126ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[115,178,204,220,60,89,220,144,115,97,134,187,253,217,244,185,5,196,20,80,132,92,70,88,211,54,232,104,21,1,160,177]",
              "sol": "stringToBytes32(\"115,178,204,220,60,89,220,144,115,97,134,187,253,217,244,185,5,196,20,80,132,92,70,88,211,54,232,104,21,1,160,177\")"
            },
            {
              "js": "[188,68,122,189,189,95,124,44,199,79,12,0,219,216,128,96,171,26,186,234,237,246,128,220,90,36,7,228,46,52,129,38,125,128,209,86,90,169,82,103,215,130,180,180,202,52]",
              "sol": "abi.encode(\"188,68,122,189,189,95,124,44,199,79,12,0,219,216,128,96,171,26,186,234,237,246,128,220,90,36,7,228,46,52,129,38,125,128,209,86,90,169,82,103,215,130,180,180,202,52\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[146,75,207,62,200,55,157,120,63,154,101,45,16,90,153,173,28,60,80,187,84,214,195,60,96,102,224,114,249,81,14,247]",
              "sol": "stringToBytes32(\"146,75,207,62,200,55,157,120,63,154,101,45,16,90,153,173,28,60,80,187,84,214,195,60,96,102,224,114,249,81,14,247\")"
            },
            {
              "js": "[35,111,183,44,177,212,123,12,100,10,74,26,240,39,109,224,128,35,106,71,121,186,189,138,109,43,5,11,60,164,130,126,161,37,128,61,137,161,60,82,247,44,50,177,27,200,236,208,141,228,45,97,164,224,237,181,69,72,0,80,35,168,31,167,93]",
              "sol": "abi.encode(\"35,111,183,44,177,212,123,12,100,10,74,26,240,39,109,224,128,35,106,71,121,186,189,138,109,43,5,11,60,164,130,126,161,37,128,61,137,161,60,82,247,44,50,177,27,200,236,208,141,228,45,97,164,224,237,181,69,72,0,80,35,168,31,167,93\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.127ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.128ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.128ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.128ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.128ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.129ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.129ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.129ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.129ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.129ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.130ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.130ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.131ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.131ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.132ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.135ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.137ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[241,86,2,184,33,253,225,89,133,65,186,168,16,243,79,129,164,207,83,78,183,162,9,118,87,228,85,122,249,156,113,214]",
              "sol": "stringToBytes32(\"241,86,2,184,33,253,225,89,133,65,186,168,16,243,79,129,164,207,83,78,183,162,9,118,87,228,85,122,249,156,113,214\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[196,90,32,42,78,174,1,217,160,215,152,14,18,16,0,252,29,236,110,52,206,198,26,135,206,4,141,25,64,105,241,12]",
              "sol": "abi.encode(\"196,90,32,42,78,174,1,217,160,215,152,14,18,16,0,252,29,236,110,52,206,198,26,135,206,4,141,25,64,105,241,12\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.138ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.138ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.139ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxyable.address",
              "sol": "contractProxyable"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxyable.address",
                "sol": "contractProxyable"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.140ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[97,85,22,113,65,151,133,37,122,48,126,6,135,148,185,255,78,177,55,255,52,252,51,218,78,28,41,190,80,160,186,221]",
              "sol": "abi.encode(\"97,85,22,113,65,151,133,37,122,48,126,6,135,148,185,255,78,177,55,255,52,252,51,218,78,28,41,190,80,160,186,221\")"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "[1,255,228,134,116,0,124,146,2,43,196,216,84,82,53,29,207,208,245,3,200,24,154,70,41,22,227,31,237,172,8,87]",
              "sol": "stringToBytes32(\"1,255,228,134,116,0,124,146,2,43,196,216,84,82,53,29,207,208,245,3,200,24,154,70,41,22,227,31,237,172,8,87\")"
            },
            {
              "js": "[93,152,83,96,54,199,184,3,119,93,0,48,20,101,138,6,10,124,188,99,8,245,116,165,68,241,18,151,176,135,7,98]",
              "sol": "stringToBytes32(\"93,152,83,96,54,199,184,3,119,93,0,48,20,101,138,6,10,124,188,99,8,245,116,165,68,241,18,151,176,135,7,98\")"
            },
            {
              "js": "[23,251,246,225,178,251,78,243,30,0,132,50,113,183,37,15,130,126,33,30,35,114,216,8,47,2,130,234,160,125,141,71]",
              "sol": "stringToBytes32(\"23,251,246,225,178,251,78,243,30,0,132,50,113,183,37,15,130,126,33,30,35,114,216,8,47,2,130,234,160,125,141,71\")"
            },
            {
              "js": "[71,166,196,8,193,139,225,98,215,124,171,98,213,105,192,202,229,62,235,55,244,53,101,81,146,111,132,13,129,208,129,16]",
              "sol": "stringToBytes32(\"71,166,196,8,193,139,225,98,215,124,171,98,213,105,192,202,229,62,235,55,244,53,101,81,146,111,132,13,129,208,129,16\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.140ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.141ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.141ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.142ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.142ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.143ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.143ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.146ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.147ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:19:52.151ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.151ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.152ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:19:52.153ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}