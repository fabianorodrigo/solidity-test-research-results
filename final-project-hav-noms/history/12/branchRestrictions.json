,{
  "2020-11-11T05:21:10.583ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:23:32.092ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:24:09.492ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:24:26.941ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:24:44.786ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:25:02.437ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:25:20.129ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:25:37.934ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:25:55.748ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:13.938ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:31.957ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"jymm4q\"",
              "sol": "\"jymm4q\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.222ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.225ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [139,131,80,1,166,172,44,13,188,216,179,232,168,125,184,119,25,239,21,42,168,114,174,195,121,203,222,128,155,62,140,182],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"139,131,80,1,166,172,44,13,188,216,179,232,168,125,184,119,25,239,21,42,168,114,174,195,121,203,222,128,155,62,140,182\"),97)"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.226ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [170,228,22,183,11,197,140,50,134,166,109,142,202,112,243,126,33,108,14,21,45,242,174,103,152,24,52,181,252,71,240,251],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"170,228,22,183,11,197,140,50,134,166,109,142,202,112,243,126,33,108,14,21,45,242,174,103,152,24,52,181,252,71,240,251\"),24)"
            },
            {
              "js": "[24,185,147,248,41,145,8,213,214,3,170,175,135,103,237,83,153,63,114,84,107,65,207,215,54,190,93,231,46,172,176,97]",
              "sol": "abi.encode(\"24,185,147,248,41,145,8,213,214,3,170,175,135,103,237,83,153,63,114,84,107,65,207,215,54,190,93,231,46,172,176,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.226ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [64,120,69,204,242,78,129,201,45,74,205,241,183,230,167,115,171,35,57,41,160,245,118,177,50,4,66,4,13,183,169,186],\"capacity\": 0}",
              "sol": "Buffer.buffer(abi.encode(\"64,120,69,204,242,78,129,201,45,74,205,241,183,230,167,115,171,35,57,41,160,245,118,177,50,4,66,4,13,183,169,186\"),0)"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.226ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [128,225,180,146,64,95,168,85,58,147,50,70,41,110,87,235,74,148,207,114,133,139,199,86,56,75,142,39,143,140,167,70],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"128,225,180,146,64,95,168,85,58,147,50,70,41,110,87,235,74,148,207,114,133,139,199,86,56,75,142,39,143,140,167,70\"),65)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.231ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [110,187,62,235,70,212,120,161,143,178,16,91,233,213,242,101,7,137,121,91,173,248,76,23,87,105,54,216,152,125,0,237],\"capacity\": 1532892063}",
              "sol": "Buffer.buffer(abi.encode(\"110,187,62,235,70,212,120,161,143,178,16,91,233,213,242,101,7,137,121,91,173,248,76,23,87,105,54,216,152,125,0,237\"),1532892063)"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.232ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [225,221,196,144,127,167,26,78,152,248,83,0,226,5,22,251,132,190,125,97,175,98,152,229,182,166,42,165,8,49,34,215],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"225,221,196,144,127,167,26,78,152,248,83,0,226,5,22,251,132,190,125,97,175,98,152,229,182,166,42,165,8,49,34,215\"),24)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [104,104,125,154,31,247,101,84,221,93,244,195,237,153,218,53,72,29,24,23,178,229,195,193,102,171,74,46,76,104,84,132],\"capacity\": 10}",
              "sol": "Buffer.buffer(abi.encode(\"104,104,125,154,31,247,101,84,221,93,244,195,237,153,218,53,72,29,24,23,178,229,195,193,102,171,74,46,76,104,84,132\"),10)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.233ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [182,72,81,19,202,201,66,29,186,173,210,206,18,9,219,152,189,188,185,91,141,63,14,195,28,177,174,94,157,156,168,172],\"capacity\": 64}",
              "sol": "Buffer.buffer(abi.encode(\"182,72,81,19,202,201,66,29,186,173,210,206,18,9,219,152,189,188,185,91,141,63,14,195,28,177,174,94,157,156,168,172\"),64)"
            },
            {
              "js": "[7,125,187,202,12,40,234,158,12,6,53,101,85,74,124,120,14,201,232,97,71,92,52,75,201,6,111,110,39,233,143,174]",
              "sol": "abi.encode(\"7,125,187,202,12,40,234,158,12,6,53,101,85,74,124,120,14,201,232,97,71,92,52,75,201,6,111,110,39,233,143,174\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.234ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [189,198,92,19,164,152,249,128,119,228,61,168,219,28,209,248,39,203,222,251,75,207,192,157,112,17,19,111,74,163,112,227],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"189,198,92,19,164,152,249,128,119,228,61,168,219,28,209,248,39,203,222,251,75,207,192,157,112,17,19,111,74,163,112,227\"),49)"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.234ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [90,115,64,234,214,99,190,255,47,68,4,74,0,42,208,96,208,154,44,206,213,115,181,192,199,44,121,98,138,125,254,83],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"90,115,64,234,214,99,190,255,47,68,4,74,0,42,208,96,208,154,44,206,213,115,181,192,199,44,121,98,138,125,254,83\"),4)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.235ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [133,178,17,242,179,109,70,109,179,57,189,251,79,251,222,201,129,196,245,65,26,234,143,243,108,43,103,204,144,72,191,56],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"133,178,17,242,179,109,70,109,179,57,189,251,79,251,222,201,129,196,245,65,26,234,143,243,108,43,103,204,144,72,191,56\"),65)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.235ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [192,168,39,162,28,135,195,196,36,55,211,174,43,58,196,42,30,91,123,146,93,8,242,48,74,173,68,98,42,183,82,235],\"capacity\": 0}",
              "sol": "Buffer.buffer(abi.encode(\"192,168,39,162,28,135,195,196,36,55,211,174,43,58,196,42,30,91,123,146,93,8,242,48,74,173,68,98,42,183,82,235\"),0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.238ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.238ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.238ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.240ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.241ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.241ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.242ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.242ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.243ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.243ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.244ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[208,12,218,24,186,246,140,59,180,252,225,143,142,225,112,185,64,62,155,52,154,54,226,165,208,139,198,74,121,224,49,119]",
              "sol": "stringToBytes32(\"208,12,218,24,186,246,140,59,180,252,225,143,142,225,112,185,64,62,155,52,154,54,226,165,208,139,198,74,121,224,49,119\")"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.245ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[81,6,233,241,134,84,60,15,29,81,40,94,29,207,195,27,38,225,36,148,171,35,135,9,118,32,26,155,135,229,42,91]",
              "sol": "stringToBytes32(\"81,6,233,241,134,84,60,15,29,81,40,94,29,207,195,27,38,225,36,148,171,35,135,9,118,32,26,155,135,229,42,91\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[95,66,219,164,115,164,217,11,87,20,252,83,254,37,80,247,43,160,35,106,94,148,248,144,164,134,216,58,127,143,31,30]",
              "sol": "abi.encode(\"95,66,219,164,115,164,217,11,87,20,252,83,254,37,80,247,43,160,35,106,94,148,248,144,164,134,216,58,127,143,31,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.301ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.301ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"dlxu3r\"",
              "sol": "\"dlxu3r\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.302ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.302ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.303ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.303ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.303ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.304ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"dlxu3r\"",
              "sol": "\"dlxu3r\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.306ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.306ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.307ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.307ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.307ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.308ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.308ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"bfukyb\",\"dy16wn\",\"Oraclize query was sent, standing by for the answer...\",\"listingID arg\",\"jymm4q\",\"dy16wn\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"bfukyb\"),string(\"dy16wn\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"listingID arg\"),string(\"jymm4q\"),string(\"dy16wn\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.309ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"costUSD\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"costUSD\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.309ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"0\",\"L\",\"call updateEthPrice\",\"\\x19Ethereum Signed Message:\\n32\",\"0\",\"L\",\"dy16wn\"]",
              "sol": "[string(\"0\"),string(\"L\"),string(\"call updateEthPrice\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\"),string(\"L\"),string(\"dy16wn\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.310ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"trade.totalPrice\",\"dy16wn\",\"bfukyb\",\"dlxu3r\",\"Example\",\"IsLibrary\",\"updateEthPrice called\",\"\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"P\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"dy16wn\"),string(\"bfukyb\"),string(\"dlxu3r\"),string(\"Example\"),string(\"IsLibrary\"),string(\"updateEthPrice called\"),string(\"\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"P\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.310ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.311ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"jymm4q\"",
              "sol": "\"jymm4q\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.311ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.312ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"ETH\"]",
              "sol": "[string(\"ETH\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.313ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.314ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Example\",\"dy16wn\"]",
              "sol": "[string(\"Example\"),string(\"dy16wn\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.314ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"RevertWithReason\",\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.315ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"listingID arg\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"listingID arg\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.316ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"trade.totalPrice\",\"P\",\"jymm4q\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"P\"),string(\"jymm4q\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.316ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"0\",\"dy16wn\",\"dy16wn\"]",
              "sol": "[string(\"0\"),string(\"dy16wn\"),string(\"dy16wn\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.317ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"PayableExample\",\"updateEthPrice called\",\"RevertWithReason\"]",
              "sol": "[string(\"PayableExample\"),string(\"updateEthPrice called\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.318ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"PayableExample\",\"RevertWithReason\",\"jymm4q\"]",
              "sol": "[string(\"PayableExample\"),string(\"RevertWithReason\"),string(\"jymm4q\")]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.318ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"jymm4q\",\"updateEthPrice called\",\"dy16wn\",\"updateEthPrice called\"]",
              "sol": "[string(\"jymm4q\"),string(\"updateEthPrice called\"),string(\"dy16wn\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.319ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"P\",\"IsLibrary\",\"ETH\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\"),string(\"IsLibrary\"),string(\"ETH\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.319ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"dy16wn\"",
              "sol": "\"dy16wn\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"RevertWithReason\",\"updateEthPrice called\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"RevertWithReason\"),string(\"updateEthPrice called\")]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.320ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"costUSD\",\"ETH\",\"ETH\",\"call updateEthPrice\"]",
              "sol": "[string(\"costUSD\"),string(\"ETH\"),string(\"ETH\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.320ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"PayableExample\",\"Example\",\"trade.totalPrice\",\"bfukyb\",\"ETH\"]",
              "sol": "[string(\"PayableExample\"),string(\"Example\"),string(\"trade.totalPrice\"),string(\"bfukyb\"),string(\"ETH\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.321ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"call updateEthPrice\",\"0\",\"Example\",\"0\",\"dlxu3r\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"0\"),string(\"Example\"),string(\"0\"),string(\"dlxu3r\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.322ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"dy16wn\",\"P\",\"RevertWithReason\",\"costUSD\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"dy16wn\"),string(\"P\"),string(\"RevertWithReason\"),string(\"costUSD\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.322ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"dy16wn\"",
              "sol": "\"dy16wn\""
            },
            {
              "js": "[\"listingID arg\",\"UsesExample\",\"UsesExample\",\"b5qlo1x\",\"trade.totalPrice\"]",
              "sol": "[string(\"listingID arg\"),string(\"UsesExample\"),string(\"UsesExample\"),string(\"b5qlo1x\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.323ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"dlxu3r\"",
              "sol": "\"dlxu3r\""
            },
            {
              "js": "[[166,211,51,111,91,183,5,107,150,137,145,77,130,68,34,60,223,52,251,240,17,63,222,196,135,159,20,24,76,18,164,98],[93,175,35,91,107,240,90,82,41,81,85,107,139,146,63,110,141,145,145,173,47,205,155,78,139,66,54,176,184,66,9,199],[145,196,75,78,10,154,57,158,170,167,230,88,163,140,33,250,64,45,169,20,59,152,160,156,250,203,173,209,92,240,177,70],[142,163,206,152,19,0,57,206,6,49,220,61,181,90,103,205,119,254,7,63,70,226,56,114,44,69,128,158,199,250,201,192],[201,131,108,69,56,89,9,89,172,226,148,186,13,151,109,161,34,29,67,136,6,167,61,119,60,61,70,6,11,250,56,94],[29,111,33,244,198,181,56,207,33,13,239,5,244,82,53,137,66,230,151,132,25,233,101,36,246,81,122,9,61,223,41,210],[141,149,146,174,28,227,61,245,80,158,166,230,230,206,78,212,168,110,97,56,11,192,127,83,223,227,100,48,148,218,115,86],[132,9,55,52,54,80,81,122,139,154,52,73,102,48,95,83,130,157,37,214,238,197,148,146,166,149,12,88,120,239,50,200]]",
              "sol": "[bytes(abi.encode(\"166,211,51,111,91,183,5,107,150,137,145,77,130,68,34,60,223,52,251,240,17,63,222,196,135,159,20,24,76,18,164,98\")),bytes(abi.encode(\"93,175,35,91,107,240,90,82,41,81,85,107,139,146,63,110,141,145,145,173,47,205,155,78,139,66,54,176,184,66,9,199\")),bytes(abi.encode(\"145,196,75,78,10,154,57,158,170,167,230,88,163,140,33,250,64,45,169,20,59,152,160,156,250,203,173,209,92,240,177,70\")),bytes(abi.encode(\"142,163,206,152,19,0,57,206,6,49,220,61,181,90,103,205,119,254,7,63,70,226,56,114,44,69,128,158,199,250,201,192\")),bytes(abi.encode(\"201,131,108,69,56,89,9,89,172,226,148,186,13,151,109,161,34,29,67,136,6,167,61,119,60,61,70,6,11,250,56,94\")),bytes(abi.encode(\"29,111,33,244,198,181,56,207,33,13,239,5,244,82,53,137,66,230,151,132,25,233,101,36,246,81,122,9,61,223,41,210\")),bytes(abi.encode(\"141,149,146,174,28,227,61,245,80,158,166,230,230,206,78,212,168,110,97,56,11,192,127,83,223,227,100,48,148,218,115,86\")),bytes(abi.encode(\"132,9,55,52,54,80,81,122,139,154,52,73,102,48,95,83,130,157,37,214,238,197,148,146,166,149,12,88,120,239,50,200\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.324ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[181,173,223,211,36,153,113,40,67,169,102,77,172,23,61,226,0,134,160,150,45,208,2,75,179,4,215,21,110,114,156,91],[248,130,216,154,47,26,21,104,87,179,100,192,36,54,148,93,126,242,127,49,70,101,123,64,23,255,217,83,141,154,17,204],[93,144,62,178,140,232,135,116,180,15,93,118,38,156,240,201,12,68,170,242,204,10,234,171,132,51,252,133,226,61,139,127]]",
              "sol": "[bytes(abi.encode(\"181,173,223,211,36,153,113,40,67,169,102,77,172,23,61,226,0,134,160,150,45,208,2,75,179,4,215,21,110,114,156,91\")),bytes(abi.encode(\"248,130,216,154,47,26,21,104,87,179,100,192,36,54,148,93,126,242,127,49,70,101,123,64,23,255,217,83,141,154,17,204\")),bytes(abi.encode(\"93,144,62,178,140,232,135,116,180,15,93,118,38,156,240,201,12,68,170,242,204,10,234,171,132,51,252,133,226,61,139,127\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.325ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[134,67,127,122,91,115,160,85,123,102,87,188,121,85,95,77,249,180,210,184,97,184,208,130,56,87,145,144,227,208,14,107],[85,50,158,207,65,22,252,156,34,24,155,171,154,81,70,44,230,60,245,64,201,217,128,45,235,182,151,166,115,22,181,22],[147,93,215,106,74,208,148,60,177,218,241,53,197,25,85,231,179,91,6,55,245,149,232,216,253,230,220,158,243,108,217,143],[201,199,143,49,238,76,57,119,160,163,234,114,126,196,52,26,34,75,73,255,190,240,130,208,101,91,253,248,234,60,80,78],[69,35,127,48,210,119,119,3,202,185,209,164,1,177,239,10,177,132,90,159,131,230,179,181,132,109,130,135,195,61,159,249],[155,110,207,121,99,83,112,156,218,25,35,72,89,179,119,125,217,47,104,189,157,189,73,128,243,30,99,157,17,43,255,202],[87,61,161,166,113,196,233,94,250,66,87,8,105,99,234,206,153,159,251,32,13,116,44,57,232,90,134,178,57,3,178,211]]",
              "sol": "[bytes(abi.encode(\"134,67,127,122,91,115,160,85,123,102,87,188,121,85,95,77,249,180,210,184,97,184,208,130,56,87,145,144,227,208,14,107\")),bytes(abi.encode(\"85,50,158,207,65,22,252,156,34,24,155,171,154,81,70,44,230,60,245,64,201,217,128,45,235,182,151,166,115,22,181,22\")),bytes(abi.encode(\"147,93,215,106,74,208,148,60,177,218,241,53,197,25,85,231,179,91,6,55,245,149,232,216,253,230,220,158,243,108,217,143\")),bytes(abi.encode(\"201,199,143,49,238,76,57,119,160,163,234,114,126,196,52,26,34,75,73,255,190,240,130,208,101,91,253,248,234,60,80,78\")),bytes(abi.encode(\"69,35,127,48,210,119,119,3,202,185,209,164,1,177,239,10,177,132,90,159,131,230,179,181,132,109,130,135,195,61,159,249\")),bytes(abi.encode(\"155,110,207,121,99,83,112,156,218,25,35,72,89,179,119,125,217,47,104,189,157,189,73,128,243,30,99,157,17,43,255,202\")),bytes(abi.encode(\"87,61,161,166,113,196,233,94,250,66,87,8,105,99,234,206,153,159,251,32,13,116,44,57,232,90,134,178,57,3,178,211\"))]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.327ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[29,79,27,25,139,148,201,16,93,221,246,147,181,45,247,47,183,105,217,244,93,127,189,153,35,226,45,150,75,41,203,237],[42,248,110,197,179,189,228,38,203,149,11,220,114,129,24,123,253,187,130,55,43,212,140,55,38,190,62,32,106,51,236,73],[102,25,74,87,210,148,30,170,120,116,37,100,101,245,50,168,153,82,129,177,17,78,58,229,251,201,124,83,227,90,126,61],[146,185,61,213,67,18,102,130,235,2,33,121,216,253,21,189,79,222,207,233,202,206,205,94,93,184,245,124,184,53,229,214],[117,228,45,56,35,196,20,227,214,201,45,202,18,35,2,8,233,133,160,21,153,113,233,185,213,52,41,219,223,243,77,240],[96,192,12,105,195,37,107,188,139,47,198,133,211,31,160,229,153,57,167,5,173,147,150,186,223,0,250,249,46,240,16,83],[223,80,253,227,172,64,250,182,131,7,93,132,12,11,132,113,251,74,40,82,75,137,244,162,211,85,182,181,243,16,49,111],[81,224,102,185,46,24,12,18,59,244,129,199,138,21,84,35,199,204,175,54,55,39,177,224,80,76,90,85,80,156,84,74],[130,56,246,43,8,31,60,190,241,98,144,215,87,6,80,61,53,177,119,236,217,230,51,124,214,59,173,74,121,25,188,16],[66,76,178,216,196,161,11,74,72,56,158,110,200,10,73,50,83,74,212,31,127,129,240,181,116,115,172,3,192,122,137,248]]",
              "sol": "[bytes(abi.encode(\"29,79,27,25,139,148,201,16,93,221,246,147,181,45,247,47,183,105,217,244,93,127,189,153,35,226,45,150,75,41,203,237\")),bytes(abi.encode(\"42,248,110,197,179,189,228,38,203,149,11,220,114,129,24,123,253,187,130,55,43,212,140,55,38,190,62,32,106,51,236,73\")),bytes(abi.encode(\"102,25,74,87,210,148,30,170,120,116,37,100,101,245,50,168,153,82,129,177,17,78,58,229,251,201,124,83,227,90,126,61\")),bytes(abi.encode(\"146,185,61,213,67,18,102,130,235,2,33,121,216,253,21,189,79,222,207,233,202,206,205,94,93,184,245,124,184,53,229,214\")),bytes(abi.encode(\"117,228,45,56,35,196,20,227,214,201,45,202,18,35,2,8,233,133,160,21,153,113,233,185,213,52,41,219,223,243,77,240\")),bytes(abi.encode(\"96,192,12,105,195,37,107,188,139,47,198,133,211,31,160,229,153,57,167,5,173,147,150,186,223,0,250,249,46,240,16,83\")),bytes(abi.encode(\"223,80,253,227,172,64,250,182,131,7,93,132,12,11,132,113,251,74,40,82,75,137,244,162,211,85,182,181,243,16,49,111\")),bytes(abi.encode(\"81,224,102,185,46,24,12,18,59,244,129,199,138,21,84,35,199,204,175,54,55,39,177,224,80,76,90,85,80,156,84,74\")),bytes(abi.encode(\"130,56,246,43,8,31,60,190,241,98,144,215,87,6,80,61,53,177,119,236,217,230,51,124,214,59,173,74,121,25,188,16\")),bytes(abi.encode(\"66,76,178,216,196,161,11,74,72,56,158,110,200,10,73,50,83,74,212,31,127,129,240,181,116,115,172,3,192,122,137,248\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.328ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[43,208,71,131,126,27,230,246,48,9,119,177,12,159,239,148,222,199,32,16,244,158,109,74,70,90,51,34,55,109,39,45]]",
              "sol": "[bytes(abi.encode(\"43,208,71,131,126,27,230,246,48,9,119,177,12,159,239,148,222,199,32,16,244,158,109,74,70,90,51,34,55,109,39,45\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.329ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "[[210,147,81,213,206,177,112,223,66,148,51,112,232,20,20,223,253,120,199,68,158,206,28,69,228,150,42,75,165,171,244,92]]",
              "sol": "[bytes(abi.encode(\"210,147,81,213,206,177,112,223,66,148,51,112,232,20,20,223,253,120,199,68,158,206,28,69,228,150,42,75,165,171,244,92\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.329ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[83,150,165,27,112,9,89,210,46,71,69,38,136,98,180,247,148,64,13,59,216,55,102,25,33,41,180,177,197,20,213,232]]",
              "sol": "[bytes(abi.encode(\"83,150,165,27,112,9,89,210,46,71,69,38,136,98,180,247,148,64,13,59,216,55,102,25,33,41,180,177,197,20,213,232\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.330ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[120,91,226,108,72,250,185,209,88,59,63,15,124,82,36,211,215,145,162,254,212,59,131,108,184,243,22,84,203,114,14,6]]",
              "sol": "[bytes(abi.encode(\"120,91,226,108,72,250,185,209,88,59,63,15,124,82,36,211,215,145,162,254,212,59,131,108,184,243,22,84,203,114,14,6\"))]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.331ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"dy16wn\"",
              "sol": "\"dy16wn\""
            },
            {
              "js": "[[130,45,206,164,210,126,9,67,18,10,18,81,239,251,41,10,28,196,11,124,225,42,92,109,207,89,135,120,12,224,233,160],[168,80,14,69,107,138,38,194,134,78,46,195,196,205,48,165,118,45,113,32,29,228,40,125,164,156,218,132,17,212,148,13]]",
              "sol": "[bytes(abi.encode(\"130,45,206,164,210,126,9,67,18,10,18,81,239,251,41,10,28,196,11,124,225,42,92,109,207,89,135,120,12,224,233,160\")),bytes(abi.encode(\"168,80,14,69,107,138,38,194,134,78,46,195,196,205,48,165,118,45,113,32,29,228,40,125,164,156,218,132,17,212,148,13\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.331ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[134,121,172,52,72,63,207,245,4,3,183,87,38,223,136,92,36,107,246,65,106,129,251,253,233,111,66,64,105,131,134,111],[7,170,108,140,88,229,153,138,169,255,18,79,34,205,12,94,87,197,55,157,151,212,157,108,213,12,44,48,39,73,64,219]]",
              "sol": "[bytes(abi.encode(\"134,121,172,52,72,63,207,245,4,3,183,87,38,223,136,92,36,107,246,65,106,129,251,253,233,111,66,64,105,131,134,111\")),bytes(abi.encode(\"7,170,108,140,88,229,153,138,169,255,18,79,34,205,12,94,87,197,55,157,151,212,157,108,213,12,44,48,39,73,64,219\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.332ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"jymm4q\"",
              "sol": "\"jymm4q\""
            },
            {
              "js": "[[54,71,20,41,82,248,99,196,123,180,82,80,32,42,94,124,89,146,212,217,123,72,243,69,120,255,163,197,97,33,152,154],[118,216,1,101,89,83,216,83,71,172,43,71,18,91,127,100,38,75,127,48,8,74,159,188,103,148,221,27,218,203,178,62]]",
              "sol": "[bytes(abi.encode(\"54,71,20,41,82,248,99,196,123,180,82,80,32,42,94,124,89,146,212,217,123,72,243,69,120,255,163,197,97,33,152,154\")),bytes(abi.encode(\"118,216,1,101,89,83,216,83,71,172,43,71,18,91,127,100,38,75,127,48,8,74,159,188,103,148,221,27,218,203,178,62\"))]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.333ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[4,156,143,48,64,72,57,172,60,101,120,89,232,72,144,142,23,18,67,9,118,24,59,236,223,227,45,122,235,119,255,215],[184,204,162,243,108,40,129,160,27,46,121,219,218,156,227,249,144,4,70,201,242,186,204,190,242,93,62,86,50,29,45,129]]",
              "sol": "[bytes(abi.encode(\"4,156,143,48,64,72,57,172,60,101,120,89,232,72,144,142,23,18,67,9,118,24,59,236,223,227,45,122,235,119,255,215\")),bytes(abi.encode(\"184,204,162,243,108,40,129,160,27,46,121,219,218,156,227,249,144,4,70,201,242,186,204,190,242,93,62,86,50,29,45,129\"))]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.333ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[245,67,100,57,200,75,105,4,6,254,249,42,201,167,27,164,187,84,200,183,149,150,16,80,95,27,85,199,12,252,250,100],[158,77,26,71,126,155,121,16,78,83,7,201,88,79,8,224,210,171,25,75,71,56,85,131,188,240,220,148,136,110,212,61],[15,56,216,164,238,230,204,186,56,85,74,68,4,156,218,27,50,166,160,103,198,1,217,93,54,176,58,205,252,80,232,225]]",
              "sol": "[bytes(abi.encode(\"245,67,100,57,200,75,105,4,6,254,249,42,201,167,27,164,187,84,200,183,149,150,16,80,95,27,85,199,12,252,250,100\")),bytes(abi.encode(\"158,77,26,71,126,155,121,16,78,83,7,201,88,79,8,224,210,171,25,75,71,56,85,131,188,240,220,148,136,110,212,61\")),bytes(abi.encode(\"15,56,216,164,238,230,204,186,56,85,74,68,4,156,218,27,50,166,160,103,198,1,217,93,54,176,58,205,252,80,232,225\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.335ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[240,109,183,205,1,193,92,3,130,149,121,62,177,188,149,226,235,73,49,165,28,132,167,60,8,113,148,17,107,54,20,80],[43,181,174,146,168,108,189,228,136,188,0,28,241,136,135,243,173,242,2,189,97,215,211,238,150,147,252,13,137,118,76,73],[234,227,156,17,244,164,87,85,252,153,144,227,0,184,83,129,31,213,133,139,146,51,186,187,115,253,233,76,159,201,89,192]]",
              "sol": "[bytes(abi.encode(\"240,109,183,205,1,193,92,3,130,149,121,62,177,188,149,226,235,73,49,165,28,132,167,60,8,113,148,17,107,54,20,80\")),bytes(abi.encode(\"43,181,174,146,168,108,189,228,136,188,0,28,241,136,135,243,173,242,2,189,97,215,211,238,150,147,252,13,137,118,76,73\")),bytes(abi.encode(\"234,227,156,17,244,164,87,85,252,153,144,227,0,184,83,129,31,213,133,139,146,51,186,187,115,253,233,76,159,201,89,192\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.335ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[35,205,26,216,192,58,19,198,46,138,198,87,125,152,197,198,37,171,222,198,206,144,108,204,1,125,229,251,49,219,79,208],[208,180,105,8,254,32,139,37,72,28,1,36,232,195,165,169,114,203,34,28,101,171,68,83,144,17,165,226,70,254,64,77],[138,15,241,189,10,201,151,146,101,254,88,216,106,63,51,181,156,65,153,4,136,198,247,122,155,143,246,121,206,118,193,106]]",
              "sol": "[bytes(abi.encode(\"35,205,26,216,192,58,19,198,46,138,198,87,125,152,197,198,37,171,222,198,206,144,108,204,1,125,229,251,49,219,79,208\")),bytes(abi.encode(\"208,180,105,8,254,32,139,37,72,28,1,36,232,195,165,169,114,203,34,28,101,171,68,83,144,17,165,226,70,254,64,77\")),bytes(abi.encode(\"138,15,241,189,10,201,151,146,101,254,88,216,106,63,51,181,156,65,153,4,136,198,247,122,155,143,246,121,206,118,193,106\"))]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.336ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "[[126,45,95,123,67,141,61,38,14,126,114,217,59,83,193,40,35,150,117,242,38,91,61,87,73,176,229,40,104,91,85,99],[232,146,82,195,3,99,171,166,148,24,3,238,210,176,55,229,45,216,78,210,235,41,248,161,20,215,142,181,82,124,64,84],[153,158,166,119,224,37,231,95,99,113,208,100,182,74,67,112,96,55,186,188,196,44,130,38,159,176,85,126,173,56,28,150]]",
              "sol": "[bytes(abi.encode(\"126,45,95,123,67,141,61,38,14,126,114,217,59,83,193,40,35,150,117,242,38,91,61,87,73,176,229,40,104,91,85,99\")),bytes(abi.encode(\"232,146,82,195,3,99,171,166,148,24,3,238,210,176,55,229,45,216,78,210,235,41,248,161,20,215,142,181,82,124,64,84\")),bytes(abi.encode(\"153,158,166,119,224,37,231,95,99,113,208,100,182,74,67,112,96,55,186,188,196,44,130,38,159,176,85,126,173,56,28,150\"))]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.337ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[3,209,27,240,125,179,59,96,243,190,92,170,180,26,211,175,13,125,215,82,253,11,177,80,133,117,52,88,119,125,146,71],[63,101,193,30,135,131,74,26,44,46,24,239,171,142,19,157,35,71,157,180,67,130,117,145,168,55,111,248,17,115,97,157],[215,66,238,127,203,19,242,107,60,145,106,180,35,207,173,14,194,118,145,196,168,174,225,43,112,16,147,246,250,15,90,61],[73,204,169,28,187,127,5,117,5,150,222,136,16,170,137,193,38,109,58,219,36,206,140,79,36,109,32,8,39,41,188,240]]",
              "sol": "[bytes(abi.encode(\"3,209,27,240,125,179,59,96,243,190,92,170,180,26,211,175,13,125,215,82,253,11,177,80,133,117,52,88,119,125,146,71\")),bytes(abi.encode(\"63,101,193,30,135,131,74,26,44,46,24,239,171,142,19,157,35,71,157,180,67,130,117,145,168,55,111,248,17,115,97,157\")),bytes(abi.encode(\"215,66,238,127,203,19,242,107,60,145,106,180,35,207,173,14,194,118,145,196,168,174,225,43,112,16,147,246,250,15,90,61\")),bytes(abi.encode(\"73,204,169,28,187,127,5,117,5,150,222,136,16,170,137,193,38,109,58,219,36,206,140,79,36,109,32,8,39,41,188,240\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.338ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "[[47,152,55,6,174,145,235,30,122,62,127,44,17,48,192,141,173,203,133,5,176,114,68,88,188,101,86,4,211,28,91,43],[53,51,161,215,115,163,65,115,53,245,98,8,135,159,204,239,240,72,229,123,27,195,17,85,142,165,98,194,132,216,103,101],[149,166,20,152,214,113,190,9,220,146,226,96,80,239,238,225,123,186,195,30,248,145,191,42,153,115,182,62,103,236,133,184],[134,195,129,220,85,3,64,188,196,189,155,186,88,16,74,168,17,156,152,21,154,220,152,76,20,48,165,213,40,125,16,251]]",
              "sol": "[bytes(abi.encode(\"47,152,55,6,174,145,235,30,122,62,127,44,17,48,192,141,173,203,133,5,176,114,68,88,188,101,86,4,211,28,91,43\")),bytes(abi.encode(\"53,51,161,215,115,163,65,115,53,245,98,8,135,159,204,239,240,72,229,123,27,195,17,85,142,165,98,194,132,216,103,101\")),bytes(abi.encode(\"149,166,20,152,214,113,190,9,220,146,226,96,80,239,238,225,123,186,195,30,248,145,191,42,153,115,182,62,103,236,133,184\")),bytes(abi.encode(\"134,195,129,220,85,3,64,188,196,189,155,186,88,16,74,168,17,156,152,21,154,220,152,76,20,48,165,213,40,125,16,251\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.338ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[[192,8,220,108,108,161,112,100,104,172,147,205,169,43,176,202,172,137,48,88,65,246,150,125,28,87,235,169,83,29,11,234],[97,92,231,35,88,56,227,4,26,165,18,61,13,125,70,137,167,224,221,228,131,115,253,197,46,192,191,0,239,248,122,36],[96,114,210,147,151,9,159,213,110,34,84,111,237,56,59,66,117,67,181,20,209,8,31,3,39,55,8,12,57,135,30,34],[103,150,9,241,56,206,0,64,62,147,170,44,26,217,227,93,225,149,151,182,242,127,203,240,182,218,181,58,40,186,8,239]]",
              "sol": "[bytes(abi.encode(\"192,8,220,108,108,161,112,100,104,172,147,205,169,43,176,202,172,137,48,88,65,246,150,125,28,87,235,169,83,29,11,234\")),bytes(abi.encode(\"97,92,231,35,88,56,227,4,26,165,18,61,13,125,70,137,167,224,221,228,131,115,253,197,46,192,191,0,239,248,122,36\")),bytes(abi.encode(\"96,114,210,147,151,9,159,213,110,34,84,111,237,56,59,66,117,67,181,20,209,8,31,3,39,55,8,12,57,135,30,34\")),bytes(abi.encode(\"103,150,9,241,56,206,0,64,62,147,170,44,26,217,227,93,225,149,151,182,242,127,203,240,182,218,181,58,40,186,8,239\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.339ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[34,217,17,97,80,35,141,16,146,218,246,98,122,23,179,157,41,38,43,163,250,13,1,246,163,11,73,177,227,164,62,227],[230,58,55,133,182,166,25,169,165,70,136,73,48,204,180,206,123,27,245,196,99,177,120,228,127,157,18,231,75,77,89,243],[1,117,180,151,156,22,29,59,81,73,138,61,193,153,189,175,181,8,32,31,190,175,154,60,114,101,226,23,79,55,232,121],[201,69,26,127,121,144,135,168,152,178,13,213,177,247,88,132,161,92,84,224,226,148,212,117,9,35,161,141,193,248,113,231]]",
              "sol": "[bytes(abi.encode(\"34,217,17,97,80,35,141,16,146,218,246,98,122,23,179,157,41,38,43,163,250,13,1,246,163,11,73,177,227,164,62,227\")),bytes(abi.encode(\"230,58,55,133,182,166,25,169,165,70,136,73,48,204,180,206,123,27,245,196,99,177,120,228,127,157,18,231,75,77,89,243\")),bytes(abi.encode(\"1,117,180,151,156,22,29,59,81,73,138,61,193,153,189,175,181,8,32,31,190,175,154,60,114,101,226,23,79,55,232,121\")),bytes(abi.encode(\"201,69,26,127,121,144,135,168,152,178,13,213,177,247,88,132,161,92,84,224,226,148,212,117,9,35,161,141,193,248,113,231\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.340ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[[87,155,109,189,14,70,108,79,8,176,12,172,23,99,2,126,35,122,95,141,59,231,176,103,210,117,76,31,87,6,75,107],[3,105,239,69,248,242,164,200,189,234,52,51,78,202,3,7,214,153,89,198,254,205,220,110,202,109,56,84,121,88,213,111],[64,74,115,113,197,31,205,184,244,243,243,99,166,243,19,114,4,75,47,176,136,195,218,229,255,0,168,198,247,78,186,154],[0,230,153,98,64,198,231,121,25,207,67,153,162,37,160,4,0,46,48,37,96,241,90,148,132,103,17,178,156,72,133,142],[34,149,146,135,67,187,98,195,107,172,79,95,252,100,66,6,65,208,35,34,224,174,188,250,201,215,132,167,209,56,126,68]]",
              "sol": "[bytes(abi.encode(\"87,155,109,189,14,70,108,79,8,176,12,172,23,99,2,126,35,122,95,141,59,231,176,103,210,117,76,31,87,6,75,107\")),bytes(abi.encode(\"3,105,239,69,248,242,164,200,189,234,52,51,78,202,3,7,214,153,89,198,254,205,220,110,202,109,56,84,121,88,213,111\")),bytes(abi.encode(\"64,74,115,113,197,31,205,184,244,243,243,99,166,243,19,114,4,75,47,176,136,195,218,229,255,0,168,198,247,78,186,154\")),bytes(abi.encode(\"0,230,153,98,64,198,231,121,25,207,67,153,162,37,160,4,0,46,48,37,96,241,90,148,132,103,17,178,156,72,133,142\")),bytes(abi.encode(\"34,149,146,135,67,187,98,195,107,172,79,95,252,100,66,6,65,208,35,34,224,174,188,250,201,215,132,167,209,56,126,68\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.341ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[219,199,90,94,38,244,100,221,249,169,127,216,142,87,231,251,115,106,160,48,52,129,175,80,117,90,186,236,74,64,233,222],[10,47,253,69,70,209,243,210,145,117,202,179,141,66,158,166,148,172,23,139,150,9,28,213,78,177,49,8,190,164,230,149],[111,130,106,139,6,146,160,251,35,88,49,2,2,93,213,175,14,74,158,207,143,104,53,59,146,182,50,168,41,184,142,226],[92,197,129,77,123,237,176,109,172,81,103,152,39,211,76,143,98,138,170,250,134,72,35,174,201,244,179,134,212,192,44,246],[195,228,168,247,109,85,91,45,78,169,41,88,239,49,106,212,164,106,224,40,184,112,174,206,202,44,103,71,161,164,94,170]]",
              "sol": "[bytes(abi.encode(\"219,199,90,94,38,244,100,221,249,169,127,216,142,87,231,251,115,106,160,48,52,129,175,80,117,90,186,236,74,64,233,222\")),bytes(abi.encode(\"10,47,253,69,70,209,243,210,145,117,202,179,141,66,158,166,148,172,23,139,150,9,28,213,78,177,49,8,190,164,230,149\")),bytes(abi.encode(\"111,130,106,139,6,146,160,251,35,88,49,2,2,93,213,175,14,74,158,207,143,104,53,59,146,182,50,168,41,184,142,226\")),bytes(abi.encode(\"92,197,129,77,123,237,176,109,172,81,103,152,39,211,76,143,98,138,170,250,134,72,35,174,201,244,179,134,212,192,44,246\")),bytes(abi.encode(\"195,228,168,247,109,85,91,45,78,169,41,88,239,49,106,212,164,106,224,40,184,112,174,206,202,44,103,71,161,164,94,170\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.341ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[59,4,115,13,235,205,175,92,253,71,254,4,60,103,45,224,42,73,82,143,132,116,3,78,150,133,54,206,120,128,254,7],[51,165,97,177,115,150,172,171,11,34,114,200,175,200,186,46,82,162,52,213,63,67,78,124,162,79,3,88,85,224,178,47],[241,159,96,28,241,102,252,5,2,139,154,178,166,102,35,63,229,229,171,15,90,149,13,172,198,142,179,224,125,164,75,236],[73,116,202,125,158,106,161,17,148,61,238,120,253,57,113,155,167,0,146,73,39,163,61,24,78,245,28,47,220,125,216,84],[13,44,74,0,102,3,103,211,176,84,221,142,203,139,199,36,47,159,129,39,228,44,26,79,31,166,104,19,100,185,18,49]]",
              "sol": "[bytes(abi.encode(\"59,4,115,13,235,205,175,92,253,71,254,4,60,103,45,224,42,73,82,143,132,116,3,78,150,133,54,206,120,128,254,7\")),bytes(abi.encode(\"51,165,97,177,115,150,172,171,11,34,114,200,175,200,186,46,82,162,52,213,63,67,78,124,162,79,3,88,85,224,178,47\")),bytes(abi.encode(\"241,159,96,28,241,102,252,5,2,139,154,178,166,102,35,63,229,229,171,15,90,149,13,172,198,142,179,224,125,164,75,236\")),bytes(abi.encode(\"73,116,202,125,158,106,161,17,148,61,238,120,253,57,113,155,167,0,146,73,39,163,61,24,78,245,28,47,220,125,216,84\")),bytes(abi.encode(\"13,44,74,0,102,3,103,211,176,84,221,142,203,139,199,36,47,159,129,39,228,44,26,79,31,166,104,19,100,185,18,49\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.342ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[92,91,86,81,20,60,15,221,92,45,250,248,195,23,136,138,123,32,121,116,113,184,160,59,243,68,13,83,78,38,194,190],[249,167,99,21,250,180,81,115,229,18,212,220,220,194,194,170,169,98,137,205,221,222,12,171,8,25,36,82,201,201,97,220],[70,31,236,219,218,162,242,227,235,42,179,93,143,146,210,41,9,213,187,216,178,31,67,56,95,20,202,183,97,244,37,197],[3,52,174,183,242,184,1,155,104,74,91,76,75,135,170,230,246,189,141,189,110,185,8,17,2,124,117,223,78,207,141,192],[97,195,105,99,163,78,162,173,171,154,65,16,127,145,59,171,240,140,157,235,235,244,83,145,67,82,53,125,84,127,12,214]]",
              "sol": "[bytes(abi.encode(\"92,91,86,81,20,60,15,221,92,45,250,248,195,23,136,138,123,32,121,116,113,184,160,59,243,68,13,83,78,38,194,190\")),bytes(abi.encode(\"249,167,99,21,250,180,81,115,229,18,212,220,220,194,194,170,169,98,137,205,221,222,12,171,8,25,36,82,201,201,97,220\")),bytes(abi.encode(\"70,31,236,219,218,162,242,227,235,42,179,93,143,146,210,41,9,213,187,216,178,31,67,56,95,20,202,183,97,244,37,197\")),bytes(abi.encode(\"3,52,174,183,242,184,1,155,104,74,91,76,75,135,170,230,246,189,141,189,110,185,8,17,2,124,117,223,78,207,141,192\")),bytes(abi.encode(\"97,195,105,99,163,78,162,173,171,154,65,16,127,145,59,171,240,140,157,235,235,244,83,145,67,82,53,125,84,127,12,214\"))]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.343ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[164]",
              "sol": "bytes1(\"164\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.344ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.345ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.345ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.345ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.345ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"dy16wn\"",
              "sol": "\"dy16wn\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.346ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"dlxu3r\"",
              "sol": "\"dlxu3r\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.346ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"xazp8d\"",
              "sol": "\"xazp8d\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.346ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"jymm4q\"",
              "sol": "\"jymm4q\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.347ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.347ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.347ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"jymm4q\"",
              "sol": "\"jymm4q\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.348ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"b5qlo1x\"",
              "sol": "\"b5qlo1x\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.348ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"xazp8d\"",
              "sol": "\"xazp8d\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.349ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.349ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"dy16wn\"",
              "sol": "\"dy16wn\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.350ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.350ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"call updateEthPrice\",\"Example\",\"dy16wn\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"Example\"),string(\"dy16wn\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.351ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[184,217,115,91,80,58,101,144,14,242,134,223,232,174,35,11,9,0,69,68,246,130,161,23,156,1,234,239,49,85,163,58],[251,228,240,25,182,194,106,104,154,222,85,183,219,12,8,21,16,228,82,90,10,174,230,117,151,182,82,215,122,90,129,154],[255,97,67,205,6,85,57,133,177,104,99,24,101,187,116,114,111,46,23,162,192,37,94,252,207,185,209,174,200,210,183,133],[121,41,17,109,83,29,48,93,36,70,110,167,232,165,88,80,12,92,55,95,195,207,41,137,16,190,155,152,196,76,238,112],[76,148,2,140,8,69,161,121,155,117,7,174,113,104,185,253,128,52,233,167,171,151,162,60,14,37,173,103,131,84,215,125],[117,17,229,147,8,97,124,101,51,171,142,152,43,204,188,234,217,217,120,122,103,29,29,89,231,158,60,224,161,166,60,46],[59,252,217,26,178,252,216,169,163,182,73,104,210,161,242,203,114,53,76,199,50,55,195,190,22,185,43,141,96,249,119,194]]",
              "sol": "[bytes(abi.encode(\"184,217,115,91,80,58,101,144,14,242,134,223,232,174,35,11,9,0,69,68,246,130,161,23,156,1,234,239,49,85,163,58\")),bytes(abi.encode(\"251,228,240,25,182,194,106,104,154,222,85,183,219,12,8,21,16,228,82,90,10,174,230,117,151,182,82,215,122,90,129,154\")),bytes(abi.encode(\"255,97,67,205,6,85,57,133,177,104,99,24,101,187,116,114,111,46,23,162,192,37,94,252,207,185,209,174,200,210,183,133\")),bytes(abi.encode(\"121,41,17,109,83,29,48,93,36,70,110,167,232,165,88,80,12,92,55,95,195,207,41,137,16,190,155,152,196,76,238,112\")),bytes(abi.encode(\"76,148,2,140,8,69,161,121,155,117,7,174,113,104,185,253,128,52,233,167,171,151,162,60,14,37,173,103,131,84,215,125\")),bytes(abi.encode(\"117,17,229,147,8,97,124,101,51,171,142,152,43,204,188,234,217,217,120,122,103,29,29,89,231,158,60,224,161,166,60,46\")),bytes(abi.encode(\"59,252,217,26,178,252,216,169,163,182,73,104,210,161,242,203,114,53,76,199,50,55,195,190,22,185,43,141,96,249,119,194\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.352ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.353ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[242,55,82,12,120,163,98,113,152,2,144,61,143,163,239,142,66,244,5,0,94,79,61,1,215,150,171,59,219,154,175,57]",
              "sol": "stringToBytes32(\"242,55,82,12,120,163,98,113,152,2,144,61,143,163,239,142,66,244,5,0,94,79,61,1,215,150,171,59,219,154,175,57\")"
            },
            {
              "js": "[236,161,232,146,69,247,128,188,4,179,249,89,153,196,97,113,153,217,161,159,187,5,72,217,99,61,135,15,137,233,107,180]",
              "sol": "stringToBytes32(\"236,161,232,146,69,247,128,188,4,179,249,89,153,196,97,113,153,217,161,159,187,5,72,217,99,61,135,15,137,233,107,180\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.354ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[175,61,121,79,72,216,23,49,219,254,120,39,125,163,132,62,117,63,197,49,127,184,92,217,201,78,18,208,195,5,2,238]",
              "sol": "stringToBytes32(\"175,61,121,79,72,216,23,49,219,254,120,39,125,163,132,62,117,63,197,49,127,184,92,217,201,78,18,208,195,5,2,238\")"
            },
            {
              "js": "[66,107,206,234,255,75,47,253,129,122,46,158,221,57,0,44,226,118,182,48,29,53,247,144,13,100,145,109,154,154,192,73]",
              "sol": "abi.encode(\"66,107,206,234,255,75,47,253,129,122,46,158,221,57,0,44,226,118,182,48,29,53,247,144,13,100,145,109,154,154,192,73\")"
            },
            {
              "js": "[99,145,180,189,193,253,239,58,196,145,178,119,102,204,87,33,109,100,160,217,116,165,247,169,211,187,5,14,243,109,92,22]",
              "sol": "abi.encode(\"99,145,180,189,193,253,239,58,196,145,178,119,102,204,87,33,109,100,160,217,116,165,247,169,211,187,5,14,243,109,92,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.354ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[128,255,239,14,62,69,195,214,186,60,73,234,2,233,179,32,79,168,155,15,71,94,89,234,150,203,68,216,57,76,123,171]",
              "sol": "abi.encode(\"128,255,239,14,62,69,195,214,186,60,73,234,2,233,179,32,79,168,155,15,71,94,89,234,150,203,68,216,57,76,123,171\")"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[238,128,189,42,140,71,64,82,183,117,139,208,246,85,134,174,72,236,221,11,10,98,45,89,135,220,147,60,224,252,21,201]",
              "sol": "abi.encode(\"238,128,189,42,140,71,64,82,183,117,139,208,246,85,134,174,72,236,221,11,10,98,45,89,135,220,147,60,224,252,21,201\")"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.356ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[70,63,113,173,143,35,55,198,171,94,247,194,170,8,174,106,27,109,114,175,99,148,204,72,72,40,183,74,172,198,8,98]",
              "sol": "stringToBytes32(\"70,63,113,173,143,35,55,198,171,94,247,194,170,8,174,106,27,109,114,175,99,148,204,72,72,40,183,74,172,198,8,98\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[129,84,160,5,97,233,242,238,67,130,136,44,251,235,3,195,69,43,200,247,16,105,247,38,221,57,14,188,6,76,161,83]",
              "sol": "abi.encode(\"129,84,160,5,97,233,242,238,67,130,136,44,251,235,3,195,69,43,200,247,16,105,247,38,221,57,14,188,6,76,161,83\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[2,20,75,15,22,69,193,92,156,73,39,244,31,81,59,8,96,54,252,46,71,54,154,11,116,60,101,171,88,89,68,204]",
              "sol": "stringToBytes32(\"2,20,75,15,22,69,193,92,156,73,39,244,31,81,59,8,96,54,252,46,71,54,154,11,116,60,101,171,88,89,68,204\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "[69,144,25,60,106,83,244,120,35,234,153,226,45,83,23,151,29,165,59,121,193,69,161,242,194,141,86,116,12,109,253,244]",
              "sol": "abi.encode(\"69,144,25,60,106,83,244,120,35,234,153,226,45,83,23,151,29,165,59,121,193,69,161,242,194,141,86,116,12,109,253,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.357ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[64,69,81,203,154,22,127,205,214,177,55,113,90,113,156,109,195,139,13,13,174,127,19,218,207,202,29,43,159,156,210,182]",
              "sol": "stringToBytes32(\"64,69,81,203,154,22,127,205,214,177,55,113,90,113,156,109,195,139,13,13,174,127,19,218,207,202,29,43,159,156,210,182\")"
            },
            {
              "js": "[136,77,104,198,114,175,209,137,144,203,29,179,96,246,13,117,56,248,56,220,104,186,7,111,34,215,6,67,182,245,213,169]",
              "sol": "abi.encode(\"136,77,104,198,114,175,209,137,144,203,29,179,96,246,13,117,56,248,56,220,104,186,7,111,34,215,6,67,182,245,213,169\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[64,69,81,203,154,22,127,205,214,177,55,113,90,113,156,109,195,139,13,13,174,127,19,218,207,202,29,43,159,156,210,182]",
                "sol": "stringToBytes32(\"64,69,81,203,154,22,127,205,214,177,55,113,90,113,156,109,195,139,13,13,174,127,19,218,207,202,29,43,159,156,210,182\")"
              },
              {
                "js": "[205,89,90,211,142,2,179,223,137,123,127,42,9,17,165,104,67,231,234,36,5,72,176,125,171,16,159,71,186,216,72,76,51]",
                "sol": "bytes33(\"205,89,90,211,142,2,179,223,137,123,127,42,9,17,165,104,67,231,234,36,5,72,176,125,171,16,159,71,186,216,72,76,51\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.358ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[101,187,8,199,153,180,164,166,205,45,205,137,250,133,61,127,76,10,24,216,237,162,234,183,214,209,29,253,180,41,124,158]",
              "sol": "abi.encode(\"101,187,8,199,153,180,164,166,205,45,205,137,250,133,61,127,76,10,24,216,237,162,234,183,214,209,29,253,180,41,124,158\")"
            },
            {
              "js": "[42,115,89,148,137,221,61,28,102,95,17,212,190,254,235,26,125,252,131,0,204,249,24,93,104,196,222,52,11,223,55,178]",
              "sol": "stringToBytes32(\"42,115,89,148,137,221,61,28,102,95,17,212,190,254,235,26,125,252,131,0,204,249,24,93,104,196,222,52,11,223,55,178\")"
            },
            {
              "js": "[31,165,251,119,26,151,47,213,46,153,222,240,201,138,94,91,103,208,219,47,36,246,228,212,19,98,66,131,214,69,91,225]",
              "sol": "abi.encode(\"31,165,251,119,26,151,47,213,46,153,222,240,201,138,94,91,103,208,219,47,36,246,228,212,19,98,66,131,214,69,91,225\")"
            },
            {
              "js": "\"dy16wn\"",
              "sol": "\"dy16wn\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[37,206,206,205,84,180,38,186,197,67,33,239,129,246,128,36,244,67,106,210,23,42,146,152,65,34,112,171,56,6,0,243]",
              "sol": "abi.encode(\"37,206,206,205,84,180,38,186,197,67,33,239,129,246,128,36,244,67,106,210,23,42,146,152,65,34,112,171,56,6,0,243\")"
            },
            {
              "js": "[188,89,237,246,64,10,252,90,99,101,239,37,201,67,94,135,37,181,84,164,103,63,121,20,114,183,230,62,152,48,37,183]",
              "sol": "stringToBytes32(\"188,89,237,246,64,10,252,90,99,101,239,37,201,67,94,135,37,181,84,164,103,63,121,20,114,183,230,62,152,48,37,183\")"
            },
            {
              "js": "[62,92,220,181,99,54,248,67,21,108,244,135,78,99,132,85,188,146,81,82,202,182,35,16,9,129,246,182,78,232,134,186]",
              "sol": "abi.encode(\"62,92,220,181,99,54,248,67,21,108,244,135,78,99,132,85,188,146,81,82,202,182,35,16,9,129,246,182,78,232,134,186\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[155,22,177,21,151,25,230,240,63,192,208,173,189,6,217,128,91,213,59,234,37,27,63,237,238,41,81,193,187,144,8,144]",
              "sol": "abi.encode(\"155,22,177,21,151,25,230,240,63,192,208,173,189,6,217,128,91,213,59,234,37,27,63,237,238,41,81,193,187,144,8,144\")"
            },
            {
              "js": "[67,225,80,98,94,120,74,65,194,51,114,114,45,151,64,166,177,12,243,227,237,165,196,255,192,48,208,68,63,155,15,170]",
              "sol": "stringToBytes32(\"67,225,80,98,94,120,74,65,194,51,114,114,45,151,64,166,177,12,243,227,237,165,196,255,192,48,208,68,63,155,15,170\")"
            },
            {
              "js": "[142,165,248,131,2,244,150,149,91,149,101,45,99,194,100,106,145,194,139,178,182,164,37,131,46,134,244,222,206,90,174,120]",
              "sol": "abi.encode(\"142,165,248,131,2,244,150,149,91,149,101,45,99,194,100,106,145,194,139,178,182,164,37,131,46,134,244,222,206,90,174,120\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[11,100,6,186,5,83,181,154,221,210,35,2,239,196,111,178,227,205,96,175,163,148,43,115,195,227,141,63,253,253,133,47]",
              "sol": "abi.encode(\"11,100,6,186,5,83,181,154,221,210,35,2,239,196,111,178,227,205,96,175,163,148,43,115,195,227,141,63,253,253,133,47\")"
            },
            {
              "js": "[36,68,74,9,222,44,140,231,173,118,29,66,5,199,169,141,224,227,168,35,28,21,136,21,226,63,210,116,18,74,14,37]",
              "sol": "stringToBytes32(\"36,68,74,9,222,44,140,231,173,118,29,66,5,199,169,141,224,227,168,35,28,21,136,21,226,63,210,116,18,74,14,37\")"
            },
            {
              "js": "[227,103,148,31,108,214,182,66,29,183,54,162,92,184,126,146,205,72,185,139,45,29,157,0,36,117,191,157,54,147,39,34]",
              "sol": "abi.encode(\"227,103,148,31,108,214,182,66,29,183,54,162,92,184,126,146,205,72,185,139,45,29,157,0,36,117,191,157,54,147,39,34\")"
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[41,60,168,41,132,44,190,127,246,150,130,80,213,255,53,98,14,211,12,238,241,141,7,67,20,58,255,248,151,250,28,245]",
              "sol": "abi.encode(\"41,60,168,41,132,44,190,127,246,150,130,80,213,255,53,98,14,211,12,238,241,141,7,67,20,58,255,248,151,250,28,245\")"
            },
            {
              "js": "[171,43,137,158,203,112,52,74,200,145,200,80,72,19,191,230,6,193,180,220,151,203,92,105,160,142,9,183,96,8,251,100]",
              "sol": "stringToBytes32(\"171,43,137,158,203,112,52,74,200,145,200,80,72,19,191,230,6,193,180,220,151,203,92,105,160,142,9,183,96,8,251,100\")"
            },
            {
              "js": "[231,125,72,154,114,229,47,69,119,118,220,85,144,10,194,103,65,157,8,33,29,94,195,33,247,18,201,126,192,56,196,31]",
              "sol": "abi.encode(\"231,125,72,154,114,229,47,69,119,118,220,85,144,10,194,103,65,157,8,33,29,94,195,33,247,18,201,126,192,56,196,31\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[123,200,88,25,185,233,191,245,28,57,250,158,161,191,14,14,212,190,118,183,156,95,77,89,129,93,153,68,187,159,16,103]",
              "sol": "abi.encode(\"123,200,88,25,185,233,191,245,28,57,250,158,161,191,14,14,212,190,118,183,156,95,77,89,129,93,153,68,187,159,16,103\")"
            },
            {
              "js": "[109,125,111,218,197,195,30,69,205,112,27,235,242,63,232,227,97,232,208,76,108,51,90,163,32,54,246,61,241,79,131,12]",
              "sol": "stringToBytes32(\"109,125,111,218,197,195,30,69,205,112,27,235,242,63,232,227,97,232,208,76,108,51,90,163,32,54,246,61,241,79,131,12\")"
            },
            {
              "js": "[39,129,72,232,67,71,14,114,181,38,238,178,42,31,240,130,86,88,140,62,213,108,44,180,5,49,70,81,247,252,45,27]",
              "sol": "abi.encode(\"39,129,72,232,67,71,14,114,181,38,238,178,42,31,240,130,86,88,140,62,213,108,44,180,5,49,70,81,247,252,45,27\")"
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[182,127,100,181,210,155,200,151,218,223,126,43,252,177,64,25,63,14,30,251,179,189,144,1,109,88,1,219,9,254,239,220]",
              "sol": "abi.encode(\"182,127,100,181,210,155,200,151,218,223,126,43,252,177,64,25,63,14,30,251,179,189,144,1,109,88,1,219,9,254,239,220\")"
            },
            {
              "js": "[188,174,213,204,136,187,1,88,235,181,132,121,13,141,223,12,230,10,168,2,236,88,15,193,182,81,8,159,12,13,94,163]",
              "sol": "stringToBytes32(\"188,174,213,204,136,187,1,88,235,181,132,121,13,141,223,12,230,10,168,2,236,88,15,193,182,81,8,159,12,13,94,163\")"
            },
            {
              "js": "[220,34,15,84,94,1,227,243,46,50,70,77,30,248,87,105,174,240,163,12,148,65,182,126,180,199,145,171,146,144,17,168]",
              "sol": "abi.encode(\"220,34,15,84,94,1,227,243,46,50,70,77,30,248,87,105,174,240,163,12,148,65,182,126,180,199,145,171,146,144,17,168\")"
            },
            {
              "js": "\"dlxu3r\"",
              "sol": "\"dlxu3r\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[179,239,137,37,157,96,40,68,105,195,119,18,27,110,209,202,209,197,158,250,26,42,181,65,113,179,133,175,133,109,42,243]",
              "sol": "abi.encode(\"179,239,137,37,157,96,40,68,105,195,119,18,27,110,209,202,209,197,158,250,26,42,181,65,113,179,133,175,133,109,42,243\")"
            },
            {
              "js": "[247,22,29,5,57,205,167,172,79,167,233,252,109,120,218,126,99,221,61,112,184,76,71,163,54,175,75,191,244,112,15,133]",
              "sol": "stringToBytes32(\"247,22,29,5,57,205,167,172,79,167,233,252,109,120,218,126,99,221,61,112,184,76,71,163,54,175,75,191,244,112,15,133\")"
            },
            {
              "js": "[222,38,46,37,90,48,31,16,188,12,29,95,190,181,141,199,29,33,240,194,119,168,21,150,117,56,173,14,188,130,125,141]",
              "sol": "abi.encode(\"222,38,46,37,90,48,31,16,188,12,29,95,190,181,141,199,29,33,240,194,119,168,21,150,117,56,173,14,188,130,125,141\")"
            },
            {
              "js": "\"bfukyb\"",
              "sol": "\"bfukyb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.362ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[148,235,196,22,41,221,33,8,44,34,55,20,37,81,37,254,201,244,156,91,138,226,18,69,218,26,4,158,195,208,188,149]",
              "sol": "abi.encode(\"148,235,196,22,41,221,33,8,44,34,55,20,37,81,37,254,201,244,156,91,138,226,18,69,218,26,4,158,195,208,188,149\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "[130,56,165,197,41,84,159,240,249,225,78,36,16,185,44,69,194,101,185,247,44,207,227,148,249,43,124,184,18,208,185,235]",
              "sol": "abi.encode(\"130,56,165,197,41,84,159,240,249,225,78,36,16,185,44,69,194,101,185,247,44,207,227,148,249,43,124,184,18,208,185,235\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.363ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[63,55,98,188,59,215,8,83,36,157,74,53,241,206,192,186,103,181,7,235,158,217,140,220,169,10,212,55,61,108,159,221]",
              "sol": "stringToBytes32(\"63,55,98,188,59,215,8,83,36,157,74,53,241,206,192,186,103,181,7,235,158,217,140,220,169,10,212,55,61,108,159,221\")"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "[76,2,89,207,187,176,227,28,113,239,183,101,68,55,194,205,83,109,124,170,155,23,103,56,228,100,58,204,213,239,102,150]",
              "sol": "stringToBytes32(\"76,2,89,207,187,176,227,28,113,239,183,101,68,55,194,205,83,109,124,170,155,23,103,56,228,100,58,204,213,239,102,150\")"
            },
            {
              "js": "[17,207,79,170,5,174,45,161,52,155,171,46,51,46,148,216,25,206,239,122,222,11,159,147,114,151,189,100,179,190,2,68]",
              "sol": "stringToBytes32(\"17,207,79,170,5,174,45,161,52,155,171,46,51,46,148,216,25,206,239,122,222,11,159,147,114,151,189,100,179,190,2,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.364ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[1,25,185,150,29,181,8,46,47,163,53,100,17,206,213,248,115,27,52,143,29,210,106,194,89,166,213,85,236,113,191,22]",
              "sol": "stringToBytes32(\"1,25,185,150,29,181,8,46,47,163,53,100,17,206,213,248,115,27,52,143,29,210,106,194,89,166,213,85,236,113,191,22\")"
            },
            {
              "js": "[252,144,244,95,75,97,232]",
              "sol": "abi.encode(\"252,144,244,95,75,97,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[26,80,145,149,128,119,91,229,57,177,104,173,64,177,97,101,189,55,30,156,13,227,32,124,117,17,67,155,7,43,129,236]",
              "sol": "stringToBytes32(\"26,80,145,149,128,119,91,229,57,177,104,173,64,177,97,101,189,55,30,156,13,227,32,124,117,17,67,155,7,43,129,236\")"
            },
            {
              "js": "[41,205,11,157,234,239,183,182,50,141,240,25,94,171,147,128,187,164,47,255,68,212,125,27,158,52,12,194,37,169,137,205,136,62,201,148,187,15,64,66,102,25,25,225,34,88,116,51,170,220,245,196,70,1,138,10,204,241,8,44,92,238,245,224,138]",
              "sol": "abi.encode(\"41,205,11,157,234,239,183,182,50,141,240,25,94,171,147,128,187,164,47,255,68,212,125,27,158,52,12,194,37,169,137,205,136,62,201,148,187,15,64,66,102,25,25,225,34,88,116,51,170,220,245,196,70,1,138,10,204,241,8,44,92,238,245,224,138\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.365ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.366ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.366ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.366ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.366ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.367ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.368ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.368ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.368ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.368ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.369ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.369ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.370ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.370ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.371ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.373ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.375ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[54,212,231,170,47,144,36,47,0,6,201,16,16,69,41,156,211,132,247,113,76,80,75,100,229,146,158,167,99,184,246,212]",
              "sol": "stringToBytes32(\"54,212,231,170,47,144,36,47,0,6,201,16,16,69,41,156,211,132,247,113,76,80,75,100,229,146,158,167,99,184,246,212\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[59,104,201,118,5,161,92,154,137,234,153,231,143,192,7,93,28,60,210,54,223,118,30,167,150,255,134,132,127,181,239,87]",
              "sol": "abi.encode(\"59,104,201,118,5,161,92,154,137,234,153,231,143,192,7,93,28,60,210,54,223,118,30,167,150,255,134,132,127,181,239,87\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.376ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.377ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.378ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.379ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[134,104,76,67,36,127,234,133,202,239,248,194,130,254,90,112,125,8,84,148,14,9,165,134,237,236,175,145,224,99,229,48]",
              "sol": "abi.encode(\"134,104,76,67,36,127,234,133,202,239,248,194,130,254,90,112,125,8,84,148,14,9,165,134,237,236,175,145,224,99,229,48\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "[117,87,105,143,86,139,17,145,191,9,112,37,68,215,99,16,131,166,104,23,132,112,146,93,39,219,99,35,247,156,224,4]",
              "sol": "stringToBytes32(\"117,87,105,143,86,139,17,145,191,9,112,37,68,215,99,16,131,166,104,23,132,112,146,93,39,219,99,35,247,156,224,4\")"
            },
            {
              "js": "[100,198,127,105,41,26,51,253,224,242,186,36,23,27,32,117,7,231,88,228,147,59,185,84,115,200,50,127,134,159,36,142]",
              "sol": "stringToBytes32(\"100,198,127,105,41,26,51,253,224,242,186,36,23,27,32,117,7,231,88,228,147,59,185,84,115,200,50,127,134,159,36,142\")"
            },
            {
              "js": "[208,104,110,158,168,244,21,241,169,180,176,7,154,95,114,142,6,76,62,69,54,60,17,179,40,208,73,61,22,85,67,127]",
              "sol": "stringToBytes32(\"208,104,110,158,168,244,21,241,169,180,176,7,154,95,114,142,6,76,62,69,54,60,17,179,40,208,73,61,22,85,67,127\")"
            },
            {
              "js": "[75,116,82,214,176,223,69,202,154,188,9,231,174,203,113,59,74,76,170,192,194,81,103,41,196,70,172,100,221,106,208,234]",
              "sol": "stringToBytes32(\"75,116,82,214,176,223,69,202,154,188,9,231,174,203,113,59,74,76,170,192,194,81,103,41,196,70,172,100,221,106,208,234\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.380ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.381ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.381ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.382ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.383ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.383ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.384ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.387ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "59",
                "sol": "59"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.389ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "128",
                "sol": "128"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:26:50.391ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.392ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.392ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:26:50.393ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}