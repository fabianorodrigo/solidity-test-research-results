,{
  "2020-11-10T11:36:41.600ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:38:59.068ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:39:34.869ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:39:51.990ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:40:09.099ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:40:26.485ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:40:44.209ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:41:02.224ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:41:19.535ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:41:37.050ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:41:54.424ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.318ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.321ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [230,62,120,161,108,53,180,143,111,34,85,116,44,193,93,187,84,27,221,3,97,136,179,92,43,113,212,48,79,56,198,155],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"230,62,120,161,108,53,180,143,111,34,85,116,44,193,93,187,84,27,221,3,97,136,179,92,43,113,212,48,79,56,198,155\"),97)"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.322ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [239,43,138,87,0,7,84,96,90,169,19,118,41,169,35,35,61,49,192,153,161,141,158,110,63,122,162,133,115,206,206,28],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"239,43,138,87,0,7,84,96,90,169,19,118,41,169,35,35,61,49,192,153,161,141,158,110,63,122,162,133,115,206,206,28\"),27)"
            },
            {
              "js": "[37,207,144,6,209,133,70,138,47,206,64,99,248,172,196,154,112,32,96,49,241,164,18,188,161,198,9,87,13,79,108,84]",
              "sol": "abi.encode(\"37,207,144,6,209,133,70,138,47,206,64,99,248,172,196,154,112,32,96,49,241,164,18,188,161,198,9,87,13,79,108,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.322ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [251,132,242,198,125,185,21,176,234,147,127,179,26,51,218,235,71,158,232,190,12,128,212,132,50,243,146,112,35,82,204,246],\"capacity\": 255}",
              "sol": "Buffer.buffer(abi.encode(\"251,132,242,198,125,185,21,176,234,147,127,179,26,51,218,235,71,158,232,190,12,128,212,132,50,243,146,112,35,82,204,246\"),255)"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.323ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [211,3,176,142,43,58,234,51,201,74,191,228,43,19,197,79,235,199,103,225,67,78,166,154,153,189,134,196,51,91,95,32],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"211,3,176,142,43,58,234,51,201,74,191,228,43,19,197,79,235,199,103,225,67,78,166,154,153,189,134,196,51,91,95,32\"),128)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.324ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [253,239,17,96,29,138,242,102,3,191,101,195,44,91,163,78,19,182,236,101,56,50,39,25,53,158,184,222,87,133,215,75],\"capacity\": 10000}",
              "sol": "Buffer.buffer(abi.encode(\"253,239,17,96,29,138,242,102,3,191,101,195,44,91,163,78,19,182,236,101,56,50,39,25,53,158,184,222,87,133,215,75\"),10000)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.325ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [2,35,73,80,4,129,109,7,130,56,181,144,182,202,2,116,194,34,46,13,255,192,122,61,42,162,155,76,80,116,107,188],\"capacity\": 255}",
              "sol": "Buffer.buffer(abi.encode(\"2,35,73,80,4,129,109,7,130,56,181,144,182,202,2,116,194,34,46,13,255,192,122,61,42,162,155,76,80,116,107,188\"),255)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [122,42,63,147,137,210,192,248,111,149,105,10,66,244,108,180,213,13,163,35,102,216,239,65,70,119,7,82,249,97,175,241],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"122,42,63,147,137,210,192,248,111,149,105,10,66,244,108,180,213,13,163,35,102,216,239,65,70,119,7,82,249,97,175,241\"),2014223716)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.326ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [105,243,31,69,254,52,130,229,115,68,10,77,78,200,141,78,12,54,231,25,181,27,102,232,206,107,96,176,102,67,185,12],\"capacity\": 11}",
              "sol": "Buffer.buffer(abi.encode(\"105,243,31,69,254,52,130,229,115,68,10,77,78,200,141,78,12,54,231,25,181,27,102,232,206,107,96,176,102,67,185,12\"),11)"
            },
            {
              "js": "[31,230,124,88,221,19,155,133,195,138,84,50,74,26,220,36,216,53,94,242,123,131,146,175,95,51,235,103,57,64,197,227]",
              "sol": "abi.encode(\"31,230,124,88,221,19,155,133,195,138,84,50,74,26,220,36,216,53,94,242,123,131,146,175,95,51,235,103,57,64,197,227\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.329ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [35,122,58,65,30,95,70,198,243,209,94,6,164,137,83,117,76,250,103,147,228,18,207,21,170,157,152,29,74,187,88,76],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"35,122,58,65,30,95,70,198,243,209,94,6,164,137,83,117,76,250,103,147,228,18,207,21,170,157,152,29,74,187,88,76\"),60)"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.330ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [16,205,165,185,131,152,112,80,250,208,26,84,253,103,49,103,144,167,68,152,187,217,92,164,60,230,126,54,149,199,151,241],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"16,205,165,185,131,152,112,80,250,208,26,84,253,103,49,103,144,167,68,152,187,217,92,164,60,230,126,54,149,199,151,241\"),3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.330ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [7,12,102,189,171,10,244,217,149,202,96,220,207,100,2,202,248,138,48,120,199,193,33,72,115,218,101,126,59,190,235,24],\"capacity\": 5}",
              "sol": "Buffer.buffer(abi.encode(\"7,12,102,189,171,10,244,217,149,202,96,220,207,100,2,202,248,138,48,120,199,193,33,72,115,218,101,126,59,190,235,24\"),5)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.331ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [154,63,95,3,148,50,76,3,149,39,25,158,166,225,82,222,41,230,37,34,40,191,75,66,43,234,185,79,112,60,97,17],\"capacity\": 22}",
              "sol": "Buffer.buffer(abi.encode(\"154,63,95,3,148,50,76,3,149,39,25,158,166,225,82,222,41,230,37,34,40,191,75,66,43,234,185,79,112,60,97,17\"),22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.333ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.333ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.333ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.334ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.335ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.335ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.336ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.336ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.338ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.338ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.339ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[1,208,29,102,130,144,186,184,20,229,56,183,26,28,37,83,75,34,93,1,131,178,122,60,71,189,127,241,1,244,9,210]",
              "sol": "stringToBytes32(\"1,208,29,102,130,144,186,184,20,229,56,183,26,28,37,83,75,34,93,1,131,178,122,60,71,189,127,241,1,244,9,210\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.340ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[130,212,169,0,32,182,196,117,240,112,23,94,137,141,210,122,235,44,198,7,151,113,47,122,183,43,197,82,236,158,123,99]",
              "sol": "stringToBytes32(\"130,212,169,0,32,182,196,117,240,112,23,94,137,141,210,122,235,44,198,7,151,113,47,122,183,43,197,82,236,158,123,99\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[99,157,201,65,38,163,209,223,158,108,7,168,139,27,179,51,82,117,106,112,5,230,133,96,72,218,24,227,213,1,37,114]",
              "sol": "abi.encode(\"99,157,201,65,38,163,209,223,158,108,7,168,139,27,179,51,82,117,106,112,5,230,133,96,72,218,24,227,213,1,37,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.389ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.390ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.390ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.390ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.391ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.391ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.392ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.392ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.392ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.393ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.393ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.394ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.394ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.396ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.396ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"IsLibrary\",\"trade.totalPrice\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"IsLibrary\"),string(\"trade.totalPrice\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.397ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"ETH\",\"trade.totalPrice\",\"PayableExample\",\"0\",\"costUSD\",\"call updateEthPrice\",\"0\",\"RevertWithReason\",\"call updateEthPrice\",\"trade.totalPrice\"]",
              "sol": "[string(\"ETH\"),string(\"trade.totalPrice\"),string(\"PayableExample\"),string(\"0\"),string(\"costUSD\"),string(\"call updateEthPrice\"),string(\"0\"),string(\"RevertWithReason\"),string(\"call updateEthPrice\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.397ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"call updateEthPrice\",\"Example\",\"ETH\",\"RevertWithReason\",\"RevertWithReason\",\"PayableExample\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"call updateEthPrice\"),string(\"Example\"),string(\"ETH\"),string(\"RevertWithReason\"),string(\"RevertWithReason\"),string(\"PayableExample\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.398ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"RevertWithReason\",\"PayableExample\",\"UsesExample\",\"trade.totalPrice\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"PayableExample\"),string(\"UsesExample\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.399ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.399ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.400ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"trade.totalPrice\"]",
              "sol": "[string(\"trade.totalPrice\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.400ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.401ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.401ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.402ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Example\",\"costUSD\"]",
              "sol": "[string(\"Example\"),string(\"costUSD\")]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.402ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"UsesExample\",\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"UsesExample\"),string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.403ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"trade.totalPrice\",\"\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"trade.totalPrice\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.403ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\",\"L\",\"L\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\"),string(\"L\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.404ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"Example\",\"IsLibrary\",\"IsLibrary\"]",
              "sol": "[string(\"Example\"),string(\"IsLibrary\"),string(\"IsLibrary\")]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.405ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"updateEthPrice called\",\"0\",\"UsesExample\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"0\"),string(\"UsesExample\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.405ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"PayableExample\",\"\\x19Ethereum Signed Message:\\n32\",\"\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"PayableExample\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.406ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"\",\"UsesExample\",\"L\",\"listingID arg\"]",
              "sol": "[string(\"\"),string(\"UsesExample\"),string(\"L\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.406ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"ETH\",\"PayableExample\",\"updateEthPrice called\",\"\"]",
              "sol": "[string(\"ETH\"),string(\"PayableExample\"),string(\"updateEthPrice called\"),string(\"\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.407ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"trade.totalPrice\",\"ETH\",\"0\",\"P\"]",
              "sol": "[string(\"trade.totalPrice\"),string(\"ETH\"),string(\"0\"),string(\"P\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.408ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[\"L\",\"0\",\"RevertWithReason\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"call updateEthPrice\"]",
              "sol": "[string(\"L\"),string(\"0\"),string(\"RevertWithReason\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.408ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[\"RevertWithReason\",\"Example\",\"UsesExample\",\"ETH\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"Example\"),string(\"UsesExample\"),string(\"ETH\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.409ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"\",\"Example\",\"Oraclize query was sent, standing by for the answer...\",\"izzibk\",\"Example\"]",
              "sol": "[string(\"\"),string(\"Example\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"izzibk\"),string(\"Example\")]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.410ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"call updateEthPrice\",\"trade.totalPrice\",\"call updateEthPrice\",\"ETH\",\"Example\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"trade.totalPrice\"),string(\"call updateEthPrice\"),string(\"ETH\"),string(\"Example\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.411ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[18,41,175,129,233,67,132,153,253,175,5,111,221,94,169,6,205,226,62,17,240,154,63,246,63,136,3,114,135,94,48,140],[179,238,239,1,184,8,190,35,213,101,212,45,114,204,78,149,210,112,113,221,60,95,134,56,156,148,199,7,132,49,62,175],[159,13,122,155,158,248,85,181,64,186,41,153,96,182,108,6,4,51,226,171,81,64,171,2,55,16,49,63,198,18,137,99],[170,14,87,71,84,142,139,213,2,198,144,71,159,57,13,91,171,26,158,138,107,210,195,131,188,11,68,101,70,195,66,182],[221,50,253,23,244,86,223,74,159,69,160,223,159,116,20,164,116,133,27,202,163,161,203,27,167,239,89,16,66,211,38,16]]",
              "sol": "[bytes(abi.encode(\"18,41,175,129,233,67,132,153,253,175,5,111,221,94,169,6,205,226,62,17,240,154,63,246,63,136,3,114,135,94,48,140\")),bytes(abi.encode(\"179,238,239,1,184,8,190,35,213,101,212,45,114,204,78,149,210,112,113,221,60,95,134,56,156,148,199,7,132,49,62,175\")),bytes(abi.encode(\"159,13,122,155,158,248,85,181,64,186,41,153,96,182,108,6,4,51,226,171,81,64,171,2,55,16,49,63,198,18,137,99\")),bytes(abi.encode(\"170,14,87,71,84,142,139,213,2,198,144,71,159,57,13,91,171,26,158,138,107,210,195,131,188,11,68,101,70,195,66,182\")),bytes(abi.encode(\"221,50,253,23,244,86,223,74,159,69,160,223,159,116,20,164,116,133,27,202,163,161,203,27,167,239,89,16,66,211,38,16\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.411ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[[10,217,172,221,132,61,74,56,245,237,176,16,248,201,84,69,54,172,200,25,77,67,249,48,68,242,137,247,58,8,118,117]]",
              "sol": "[bytes(abi.encode(\"10,217,172,221,132,61,74,56,245,237,176,16,248,201,84,69,54,172,200,25,77,67,249,48,68,242,137,247,58,8,118,117\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.412ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[148,183,88,239,216,82,159,129,42,90,152,163,232,46,145,17,120,82,148,19,42,82,253,234,214,5,155,112,88,203,201,97],[116,82,31,17,9,8,1,52,54,249,84,5,213,82,139,133,132,25,38,83,79,13,248,143,238,221,54,101,240,111,170,68],[235,183,207,15,75,184,239,222,210,0,1,58,119,140,142,176,3,199,218,165,40,5,176,202,49,50,190,244,6,144,131,57],[40,68,134,156,185,225,165,148,79,65,90,106,61,242,116,17,18,25,16,128,109,51,161,129,177,162,200,173,191,19,10,43],[37,222,146,119,25,131,108,25,156,186,163,254,199,234,120,98,104,193,125,126,225,179,200,234,59,152,203,3,16,13,29,18],[247,16,30,77,129,125,121,86,107,29,74,123,11,255,78,166,7,174,208,177,169,176,253,84,107,26,20,113,103,40,165,114],[131,137,174,183,173,6,129,81,84,104,200,142,94,205,6,22,118,144,1,89,23,58,62,80,38,153,224,29,210,12,45,190]]",
              "sol": "[bytes(abi.encode(\"148,183,88,239,216,82,159,129,42,90,152,163,232,46,145,17,120,82,148,19,42,82,253,234,214,5,155,112,88,203,201,97\")),bytes(abi.encode(\"116,82,31,17,9,8,1,52,54,249,84,5,213,82,139,133,132,25,38,83,79,13,248,143,238,221,54,101,240,111,170,68\")),bytes(abi.encode(\"235,183,207,15,75,184,239,222,210,0,1,58,119,140,142,176,3,199,218,165,40,5,176,202,49,50,190,244,6,144,131,57\")),bytes(abi.encode(\"40,68,134,156,185,225,165,148,79,65,90,106,61,242,116,17,18,25,16,128,109,51,161,129,177,162,200,173,191,19,10,43\")),bytes(abi.encode(\"37,222,146,119,25,131,108,25,156,186,163,254,199,234,120,98,104,193,125,126,225,179,200,234,59,152,203,3,16,13,29,18\")),bytes(abi.encode(\"247,16,30,77,129,125,121,86,107,29,74,123,11,255,78,166,7,174,208,177,169,176,253,84,107,26,20,113,103,40,165,114\")),bytes(abi.encode(\"131,137,174,183,173,6,129,81,84,104,200,142,94,205,6,22,118,144,1,89,23,58,62,80,38,153,224,29,210,12,45,190\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.413ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"xsyfrf\"",
              "sol": "\"xsyfrf\""
            },
            {
              "js": "[[150,182,68,190,95,1,167,124,9,60,211,156,215,214,72,2,2,151,47,88,173,77,66,46,118,248,93,110,201,8,218,23],[103,188,167,215,181,167,25,148,213,200,81,189,234,138,161,185,245,169,102,1,17,184,62,217,170,173,192,86,216,203,19,62],[151,152,139,10,193,85,220,127,238,188,242,113,225,135,120,192,21,231,213,3,0,20,37,131,171,91,240,18,45,163,199,145],[67,54,187,210,175,18,86,203,118,50,122,50,169,134,72,181,151,210,166,232,221,174,38,205,53,19,68,212,185,103,184,15],[150,100,90,6,190,234,237,58,140,15,182,84,213,210,158,54,78,63,203,171,202,174,252,236,131,113,212,237,213,132,145,30],[37,125,75,11,48,209,43,222,119,31,71,174,210,64,2,36,39,3,63,80,172,183,127,11,205,6,140,65,17,94,118,198],[138,9,28,209,240,2,2,76,27,65,166,179,126,153,213,56,152,143,21,16,67,115,181,225,242,137,209,38,6,79,158,101],[244,204,190,99,245,55,202,188,29,153,241,216,250,171,147,76,181,154,255,63,8,0,187,2,217,51,229,114,14,202,28,35],[67,176,192,172,187,41,181,125,180,250,50,33,46,106,154,121,105,240,247,79,73,151,223,196,227,114,103,52,72,224,171,74],[250,129,102,35,249,92,149,198,58,221,239,104,48,254,123,1,74,15,62,181,81,119,124,190,196,180,6,199,136,215,206,31]]",
              "sol": "[bytes(abi.encode(\"150,182,68,190,95,1,167,124,9,60,211,156,215,214,72,2,2,151,47,88,173,77,66,46,118,248,93,110,201,8,218,23\")),bytes(abi.encode(\"103,188,167,215,181,167,25,148,213,200,81,189,234,138,161,185,245,169,102,1,17,184,62,217,170,173,192,86,216,203,19,62\")),bytes(abi.encode(\"151,152,139,10,193,85,220,127,238,188,242,113,225,135,120,192,21,231,213,3,0,20,37,131,171,91,240,18,45,163,199,145\")),bytes(abi.encode(\"67,54,187,210,175,18,86,203,118,50,122,50,169,134,72,181,151,210,166,232,221,174,38,205,53,19,68,212,185,103,184,15\")),bytes(abi.encode(\"150,100,90,6,190,234,237,58,140,15,182,84,213,210,158,54,78,63,203,171,202,174,252,236,131,113,212,237,213,132,145,30\")),bytes(abi.encode(\"37,125,75,11,48,209,43,222,119,31,71,174,210,64,2,36,39,3,63,80,172,183,127,11,205,6,140,65,17,94,118,198\")),bytes(abi.encode(\"138,9,28,209,240,2,2,76,27,65,166,179,126,153,213,56,152,143,21,16,67,115,181,225,242,137,209,38,6,79,158,101\")),bytes(abi.encode(\"244,204,190,99,245,55,202,188,29,153,241,216,250,171,147,76,181,154,255,63,8,0,187,2,217,51,229,114,14,202,28,35\")),bytes(abi.encode(\"67,176,192,172,187,41,181,125,180,250,50,33,46,106,154,121,105,240,247,79,73,151,223,196,227,114,103,52,72,224,171,74\")),bytes(abi.encode(\"250,129,102,35,249,92,149,198,58,221,239,104,48,254,123,1,74,15,62,181,81,119,124,190,196,180,6,199,136,215,206,31\"))]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.413ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[233,195,108,106,202,137,63,19,209,215,155,198,99,151,183,75,71,224,147,95,252,197,60,23,252,163,100,231,64,186,132,238]]",
              "sol": "[bytes(abi.encode(\"233,195,108,106,202,137,63,19,209,215,155,198,99,151,183,75,71,224,147,95,252,197,60,23,252,163,100,231,64,186,132,238\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.414ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[231,208,108,66,162,250,1,7,2,184,179,117,125,130,81,120,149,17,29,197,118,128,253,4,175,123,38,24,78,20,114,168]]",
              "sol": "[bytes(abi.encode(\"231,208,108,66,162,250,1,7,2,184,179,117,125,130,81,120,149,17,29,197,118,128,253,4,175,123,38,24,78,20,114,168\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.415ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[249,231,138,254,215,123,41,50,117,107,239,244,241,194,87,99,141,49,124,155,108,5,77,117,112,231,32,144,120,82,141,102]]",
              "sol": "[bytes(abi.encode(\"249,231,138,254,215,123,41,50,117,107,239,244,241,194,87,99,141,49,124,155,108,5,77,117,112,231,32,144,120,82,141,102\"))]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.416ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[178,60,243,138,236,170,179,218,110,19,20,135,24,128,0,31,239,188,126,138,211,31,99,119,32,245,228,182,122,29,239,16]]",
              "sol": "[bytes(abi.encode(\"178,60,243,138,236,170,179,218,110,19,20,135,24,128,0,31,239,188,126,138,211,31,99,119,32,245,228,182,122,29,239,16\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.416ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[61,108,10,219,163,58,125,203,15,78,66,128,196,94,88,255,255,43,116,252,151,29,73,208,205,3,73,215,161,151,186,64],[198,58,57,18,5,172,167,94,90,205,105,172,243,232,216,180,221,82,154,171,163,194,17,85,89,234,162,83,69,58,195,73]]",
              "sol": "[bytes(abi.encode(\"61,108,10,219,163,58,125,203,15,78,66,128,196,94,88,255,255,43,116,252,151,29,73,208,205,3,73,215,161,151,186,64\")),bytes(abi.encode(\"198,58,57,18,5,172,167,94,90,205,105,172,243,232,216,180,221,82,154,171,163,194,17,85,89,234,162,83,69,58,195,73\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.417ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[[27,108,214,28,207,236,253,178,124,134,54,186,149,152,53,100,214,254,177,203,124,110,204,98,58,82,181,14,43,71,0,91],[22,163,165,237,234,155,253,200,67,115,98,150,50,130,29,80,74,73,148,197,137,192,81,171,157,88,162,48,130,15,239,136]]",
              "sol": "[bytes(abi.encode(\"27,108,214,28,207,236,253,178,124,134,54,186,149,152,53,100,214,254,177,203,124,110,204,98,58,82,181,14,43,71,0,91\")),bytes(abi.encode(\"22,163,165,237,234,155,253,200,67,115,98,150,50,130,29,80,74,73,148,197,137,192,81,171,157,88,162,48,130,15,239,136\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.417ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[161,214,252,225,182,200,199,128,17,209,135,202,231,187,61,82,37,234,34,97,150,94,234,88,187,223,25,148,64,66,37,11],[71,130,161,75,214,234,253,33,44,32,138,56,109,34,21,210,112,2,199,184,14,125,247,162,111,155,174,117,193,55,206,145]]",
              "sol": "[bytes(abi.encode(\"161,214,252,225,182,200,199,128,17,209,135,202,231,187,61,82,37,234,34,97,150,94,234,88,187,223,25,148,64,66,37,11\")),bytes(abi.encode(\"71,130,161,75,214,234,253,33,44,32,138,56,109,34,21,210,112,2,199,184,14,125,247,162,111,155,174,117,193,55,206,145\"))]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.418ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[186,183,130,135,21,14,93,113,7,121,7,202,165,227,124,21,38,247,253,60,25,168,82,31,80,43,77,88,77,221,47,209],[211,157,103,253,69,121,251,163,132,196,43,234,216,96,18,250,67,204,213,243,199,20,178,129,32,43,134,212,181,238,247,216]]",
              "sol": "[bytes(abi.encode(\"186,183,130,135,21,14,93,113,7,121,7,202,165,227,124,21,38,247,253,60,25,168,82,31,80,43,77,88,77,221,47,209\")),bytes(abi.encode(\"211,157,103,253,69,121,251,163,132,196,43,234,216,96,18,250,67,204,213,243,199,20,178,129,32,43,134,212,181,238,247,216\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.418ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[[174,24,115,64,188,91,211,14,57,130,145,127,141,227,134,224,166,104,245,197,205,107,19,252,241,50,37,96,213,109,129,51],[142,164,110,191,27,121,112,158,65,109,179,4,96,175,45,207,234,224,33,86,18,103,171,57,153,82,137,61,159,2,155,205],[143,75,86,176,40,253,76,183,36,239,162,118,224,42,203,35,180,32,196,62,132,149,10,164,216,66,21,80,134,120,0,42]]",
              "sol": "[bytes(abi.encode(\"174,24,115,64,188,91,211,14,57,130,145,127,141,227,134,224,166,104,245,197,205,107,19,252,241,50,37,96,213,109,129,51\")),bytes(abi.encode(\"142,164,110,191,27,121,112,158,65,109,179,4,96,175,45,207,234,224,33,86,18,103,171,57,153,82,137,61,159,2,155,205\")),bytes(abi.encode(\"143,75,86,176,40,253,76,183,36,239,162,118,224,42,203,35,180,32,196,62,132,149,10,164,216,66,21,80,134,120,0,42\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.419ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[206,239,64,227,86,159,44,27,140,233,245,34,100,242,16,49,199,66,80,30,77,105,233,105,219,48,77,2,219,35,133,65],[185,195,123,232,228,5,49,16,180,42,237,28,190,95,44,175,94,131,252,102,25,224,202,106,107,123,117,239,248,126,170,190],[18,198,196,45,164,136,0,127,215,191,210,209,202,242,194,145,54,129,101,50,44,47,223,164,242,3,88,111,57,56,83,98]]",
              "sol": "[bytes(abi.encode(\"206,239,64,227,86,159,44,27,140,233,245,34,100,242,16,49,199,66,80,30,77,105,233,105,219,48,77,2,219,35,133,65\")),bytes(abi.encode(\"185,195,123,232,228,5,49,16,180,42,237,28,190,95,44,175,94,131,252,102,25,224,202,106,107,123,117,239,248,126,170,190\")),bytes(abi.encode(\"18,198,196,45,164,136,0,127,215,191,210,209,202,242,194,145,54,129,101,50,44,47,223,164,242,3,88,111,57,56,83,98\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.419ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[[70,138,240,217,192,119,95,74,217,198,191,123,99,1,190,36,190,80,41,131,245,126,195,115,54,243,144,248,174,57,71,223],[29,136,12,238,186,85,117,67,139,17,29,249,25,15,135,222,109,191,64,166,76,112,212,175,64,166,245,240,59,136,133,188],[7,189,154,201,225,88,204,2,1,56,252,209,236,130,105,40,84,123,28,91,180,7,39,113,143,83,179,175,13,144,204,21]]",
              "sol": "[bytes(abi.encode(\"70,138,240,217,192,119,95,74,217,198,191,123,99,1,190,36,190,80,41,131,245,126,195,115,54,243,144,248,174,57,71,223\")),bytes(abi.encode(\"29,136,12,238,186,85,117,67,139,17,29,249,25,15,135,222,109,191,64,166,76,112,212,175,64,166,245,240,59,136,133,188\")),bytes(abi.encode(\"7,189,154,201,225,88,204,2,1,56,252,209,236,130,105,40,84,123,28,91,180,7,39,113,143,83,179,175,13,144,204,21\"))]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.420ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[110,185,33,62,175,219,97,160,28,26,175,74,220,71,242,251,199,72,63,26,148,41,250,71,113,45,101,161,100,85,106,193],[198,102,81,185,141,116,195,11,144,208,152,112,76,214,223,24,18,157,162,69,61,56,179,1,148,212,229,139,23,179,223,30],[239,155,171,188,186,233,233,191,206,115,146,74,203,129,174,43,203,178,102,135,181,16,5,191,30,77,64,44,2,44,115,209]]",
              "sol": "[bytes(abi.encode(\"110,185,33,62,175,219,97,160,28,26,175,74,220,71,242,251,199,72,63,26,148,41,250,71,113,45,101,161,100,85,106,193\")),bytes(abi.encode(\"198,102,81,185,141,116,195,11,144,208,152,112,76,214,223,24,18,157,162,69,61,56,179,1,148,212,229,139,23,179,223,30\")),bytes(abi.encode(\"239,155,171,188,186,233,233,191,206,115,146,74,203,129,174,43,203,178,102,135,181,16,5,191,30,77,64,44,2,44,115,209\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.420ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[23,59,123,89,113,50,167,35,209,149,148,109,214,170,41,156,36,22,108,113,112,109,252,181,93,113,89,44,65,107,251,121],[131,150,180,223,199,255,101,118,241,185,243,139,89,254,91,208,210,189,1,219,81,96,250,87,213,212,83,82,22,182,115,2],[44,101,116,61,97,225,50,179,67,121,16,124,199,12,162,12,182,98,60,255,133,51,103,174,2,184,61,236,168,184,3,146],[212,198,180,176,61,180,13,112,33,172,180,11,155,107,1,46,32,88,66,253,36,29,245,125,51,115,174,125,115,51,40,229]]",
              "sol": "[bytes(abi.encode(\"23,59,123,89,113,50,167,35,209,149,148,109,214,170,41,156,36,22,108,113,112,109,252,181,93,113,89,44,65,107,251,121\")),bytes(abi.encode(\"131,150,180,223,199,255,101,118,241,185,243,139,89,254,91,208,210,189,1,219,81,96,250,87,213,212,83,82,22,182,115,2\")),bytes(abi.encode(\"44,101,116,61,97,225,50,179,67,121,16,124,199,12,162,12,182,98,60,255,133,51,103,174,2,184,61,236,168,184,3,146\")),bytes(abi.encode(\"212,198,180,176,61,180,13,112,33,172,180,11,155,107,1,46,32,88,66,253,36,29,245,125,51,115,174,125,115,51,40,229\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.421ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"17r2p\"",
              "sol": "\"17r2p\""
            },
            {
              "js": "[[102,134,205,63,249,57,247,211,204,162,39,185,219,95,183,175,189,62,201,66,206,22,135,198,206,51,82,156,238,237,25,92],[6,187,89,64,62,133,241,26,70,97,236,84,240,115,24,122,231,70,71,174,241,125,106,218,132,42,15,92,165,77,85,221],[12,80,248,190,0,80,244,20,54,89,177,139,3,4,31,97,3,253,135,95,97,22,59,14,144,5,54,44,165,187,214,67],[220,6,112,123,91,119,111,28,153,214,187,141,21,224,161,62,148,81,79,172,175,60,99,144,112,200,120,150,118,24,172,120]]",
              "sol": "[bytes(abi.encode(\"102,134,205,63,249,57,247,211,204,162,39,185,219,95,183,175,189,62,201,66,206,22,135,198,206,51,82,156,238,237,25,92\")),bytes(abi.encode(\"6,187,89,64,62,133,241,26,70,97,236,84,240,115,24,122,231,70,71,174,241,125,106,218,132,42,15,92,165,77,85,221\")),bytes(abi.encode(\"12,80,248,190,0,80,244,20,54,89,177,139,3,4,31,97,3,253,135,95,97,22,59,14,144,5,54,44,165,187,214,67\")),bytes(abi.encode(\"220,6,112,123,91,119,111,28,153,214,187,141,21,224,161,62,148,81,79,172,175,60,99,144,112,200,120,150,118,24,172,120\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.421ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[65,151,185,205,195,68,192,25,165,255,153,75,240,105,151,242,109,58,111,8,214,95,31,136,166,204,111,29,111,50,146,221],[105,30,49,32,236,87,157,16,100,27,170,211,186,151,8,201,9,238,154,13,75,57,52,154,75,67,147,255,75,162,54,141],[166,159,28,160,47,185,237,247,246,142,78,69,169,167,148,49,93,107,96,190,149,208,197,117,250,60,150,218,123,255,24,195],[114,210,192,241,214,47,76,161,218,19,77,239,84,178,186,181,235,54,43,60,76,87,11,163,227,206,31,247,134,47,118,248]]",
              "sol": "[bytes(abi.encode(\"65,151,185,205,195,68,192,25,165,255,153,75,240,105,151,242,109,58,111,8,214,95,31,136,166,204,111,29,111,50,146,221\")),bytes(abi.encode(\"105,30,49,32,236,87,157,16,100,27,170,211,186,151,8,201,9,238,154,13,75,57,52,154,75,67,147,255,75,162,54,141\")),bytes(abi.encode(\"166,159,28,160,47,185,237,247,246,142,78,69,169,167,148,49,93,107,96,190,149,208,197,117,250,60,150,218,123,255,24,195\")),bytes(abi.encode(\"114,210,192,241,214,47,76,161,218,19,77,239,84,178,186,181,235,54,43,60,76,87,11,163,227,206,31,247,134,47,118,248\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.423ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"gb0gwi\"",
              "sol": "\"gb0gwi\""
            },
            {
              "js": "[[187,44,212,170,130,17,23,100,194,78,143,22,47,132,101,113,88,103,85,240,100,134,151,251,136,117,146,88,70,194,19,157],[179,140,18,200,139,88,97,161,211,122,78,80,28,114,21,70,71,180,76,23,12,145,43,79,104,48,254,158,5,36,216,18],[145,215,177,59,212,189,53,177,164,7,212,154,141,196,62,179,175,197,27,79,39,223,225,154,78,28,214,51,239,125,85,61],[251,152,182,121,35,171,238,111,42,73,250,155,114,239,173,47,60,17,182,76,163,109,232,149,19,190,183,126,0,135,235,255]]",
              "sol": "[bytes(abi.encode(\"187,44,212,170,130,17,23,100,194,78,143,22,47,132,101,113,88,103,85,240,100,134,151,251,136,117,146,88,70,194,19,157\")),bytes(abi.encode(\"179,140,18,200,139,88,97,161,211,122,78,80,28,114,21,70,71,180,76,23,12,145,43,79,104,48,254,158,5,36,216,18\")),bytes(abi.encode(\"145,215,177,59,212,189,53,177,164,7,212,154,141,196,62,179,175,197,27,79,39,223,225,154,78,28,214,51,239,125,85,61\")),bytes(abi.encode(\"251,152,182,121,35,171,238,111,42,73,250,155,114,239,173,47,60,17,182,76,163,109,232,149,19,190,183,126,0,135,235,255\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.423ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[75,146,51,10,128,210,164,229,188,73,56,38,103,47,102,252,54,198,223,93,4,47,115,246,144,225,141,122,22,207,146,161],[196,35,219,249,159,154,149,158,60,103,207,186,119,180,128,187,29,115,172,101,148,98,166,148,30,47,113,43,89,173,167,48],[4,208,135,163,48,67,18,241,103,16,89,160,111,3,65,127,48,30,215,83,101,19,169,164,37,22,133,249,181,239,205,252],[30,56,67,145,156,90,249,201,240,104,76,186,123,2,233,155,109,148,200,176,188,59,180,140,61,246,208,39,233,101,236,171],[123,190,25,127,34,226,158,249,112,113,251,27,44,237,210,235,134,107,232,33,67,188,18,217,12,236,103,253,122,181,151,223]]",
              "sol": "[bytes(abi.encode(\"75,146,51,10,128,210,164,229,188,73,56,38,103,47,102,252,54,198,223,93,4,47,115,246,144,225,141,122,22,207,146,161\")),bytes(abi.encode(\"196,35,219,249,159,154,149,158,60,103,207,186,119,180,128,187,29,115,172,101,148,98,166,148,30,47,113,43,89,173,167,48\")),bytes(abi.encode(\"4,208,135,163,48,67,18,241,103,16,89,160,111,3,65,127,48,30,215,83,101,19,169,164,37,22,133,249,181,239,205,252\")),bytes(abi.encode(\"30,56,67,145,156,90,249,201,240,104,76,186,123,2,233,155,109,148,200,176,188,59,180,140,61,246,208,39,233,101,236,171\")),bytes(abi.encode(\"123,190,25,127,34,226,158,249,112,113,251,27,44,237,210,235,134,107,232,33,67,188,18,217,12,236,103,253,122,181,151,223\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.424ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[72,201,57,105,225,10,196,2,160,113,50,90,30,12,236,181,50,254,134,231,77,32,126,196,182,185,8,184,75,166,61,217],[90,57,8,135,119,24,42,112,248,150,3,131,192,189,214,125,31,171,217,60,150,193,209,8,77,168,222,14,219,39,141,174],[96,88,68,34,15,91,211,69,240,30,56,9,16,48,83,32,243,224,154,63,127,49,58,0,124,244,120,201,109,232,200,1],[49,68,248,215,0,164,116,83,199,124,176,193,127,205,17,237,246,51,11,139,247,63,106,46,45,144,143,1,2,86,158,141],[31,223,235,254,153,50,22,207,171,172,236,135,33,153,117,163,18,182,106,203,148,95,214,247,230,150,207,72,139,218,61,46]]",
              "sol": "[bytes(abi.encode(\"72,201,57,105,225,10,196,2,160,113,50,90,30,12,236,181,50,254,134,231,77,32,126,196,182,185,8,184,75,166,61,217\")),bytes(abi.encode(\"90,57,8,135,119,24,42,112,248,150,3,131,192,189,214,125,31,171,217,60,150,193,209,8,77,168,222,14,219,39,141,174\")),bytes(abi.encode(\"96,88,68,34,15,91,211,69,240,30,56,9,16,48,83,32,243,224,154,63,127,49,58,0,124,244,120,201,109,232,200,1\")),bytes(abi.encode(\"49,68,248,215,0,164,116,83,199,124,176,193,127,205,17,237,246,51,11,139,247,63,106,46,45,144,143,1,2,86,158,141\")),bytes(abi.encode(\"31,223,235,254,153,50,22,207,171,172,236,135,33,153,117,163,18,182,106,203,148,95,214,247,230,150,207,72,139,218,61,46\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.425ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"17r2p\"",
              "sol": "\"17r2p\""
            },
            {
              "js": "[[47,79,85,208,209,114,140,68,229,128,34,70,156,6,65,65,91,156,96,145,21,119,207,222,96,80,227,229,84,111,225,156],[43,247,108,57,104,232,221,108,21,63,100,62,120,78,234,39,11,35,208,198,41,65,11,133,183,77,235,222,91,209,45,235],[51,28,73,242,194,168,24,134,254,28,103,119,172,244,190,66,118,168,15,173,88,109,124,164,14,94,5,55,4,84,91,226],[62,231,248,202,152,140,71,31,80,99,225,209,172,55,253,16,37,187,80,154,96,203,83,184,34,160,4,148,91,146,205,7],[19,9,244,182,54,230,66,78,200,240,108,233,105,20,103,48,219,150,252,195,208,114,4,199,210,184,158,154,36,186,244,74]]",
              "sol": "[bytes(abi.encode(\"47,79,85,208,209,114,140,68,229,128,34,70,156,6,65,65,91,156,96,145,21,119,207,222,96,80,227,229,84,111,225,156\")),bytes(abi.encode(\"43,247,108,57,104,232,221,108,21,63,100,62,120,78,234,39,11,35,208,198,41,65,11,133,183,77,235,222,91,209,45,235\")),bytes(abi.encode(\"51,28,73,242,194,168,24,134,254,28,103,119,172,244,190,66,118,168,15,173,88,109,124,164,14,94,5,55,4,84,91,226\")),bytes(abi.encode(\"62,231,248,202,152,140,71,31,80,99,225,209,172,55,253,16,37,187,80,154,96,203,83,184,34,160,4,148,91,146,205,7\")),bytes(abi.encode(\"19,9,244,182,54,230,66,78,200,240,108,233,105,20,103,48,219,150,252,195,208,114,4,199,210,184,158,154,36,186,244,74\"))]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.425ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[[122,71,205,78,130,182,224,236,92,169,161,78,1,32,218,2,215,112,226,84,233,239,201,34,101,115,196,58,175,111,26,193],[17,164,142,216,4,232,221,166,248,220,178,141,138,104,38,211,91,233,159,40,78,25,144,84,182,224,245,172,186,32,228,11],[139,95,119,22,115,104,212,37,174,206,14,142,58,245,183,193,204,16,254,57,230,144,142,221,96,1,116,13,1,173,194,5],[64,138,59,109,170,152,221,173,177,196,26,132,16,146,202,88,153,108,167,219,22,156,126,202,115,2,76,21,57,213,119,54],[215,220,27,231,107,78,80,172,87,250,28,10,144,121,46,252,204,121,18,131,242,64,199,226,49,171,41,189,167,137,134,254]]",
              "sol": "[bytes(abi.encode(\"122,71,205,78,130,182,224,236,92,169,161,78,1,32,218,2,215,112,226,84,233,239,201,34,101,115,196,58,175,111,26,193\")),bytes(abi.encode(\"17,164,142,216,4,232,221,166,248,220,178,141,138,104,38,211,91,233,159,40,78,25,144,84,182,224,245,172,186,32,228,11\")),bytes(abi.encode(\"139,95,119,22,115,104,212,37,174,206,14,142,58,245,183,193,204,16,254,57,230,144,142,221,96,1,116,13,1,173,194,5\")),bytes(abi.encode(\"64,138,59,109,170,152,221,173,177,196,26,132,16,146,202,88,153,108,167,219,22,156,126,202,115,2,76,21,57,213,119,54\")),bytes(abi.encode(\"215,220,27,231,107,78,80,172,87,250,28,10,144,121,46,252,204,121,18,131,242,64,199,226,49,171,41,189,167,137,134,254\"))]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.426ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[52]",
              "sol": "bytes1(\"52\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.426ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.427ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.427ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.427ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.428ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.428ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.428ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.429ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.429ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.429ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.430ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"2dmos5a\"",
              "sol": "\"2dmos5a\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.430ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.431ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.431ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"2dmos5a\"",
              "sol": "\"2dmos5a\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.432ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"qzcq77\"",
              "sol": "\"qzcq77\""
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.433ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.433ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"ETH\",\"RevertWithReason\"]",
              "sol": "[string(\"ETH\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.434ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[148,198,164,35,84,75,156,115,114,159,173,59,20,15,254,64,245,71,148,253,29,217,237,51,98,44,194,222,62,132,44,170],[11,242,10,132,47,192,5,88,192,61,167,225,28,172,140,216,226,105,122,13,189,174,253,40,29,54,50,122,169,128,111,89],[251,164,2,96,87,145,78,248,25,222,218,125,213,197,102,50,128,173,22,229,72,128,158,125,47,213,192,70,150,90,166,127],[110,27,192,66,148,168,179,82,255,235,70,30,84,126,135,61,95,186,22,191,135,170,152,174,212,13,56,121,146,95,141,199],[137,55,155,151,15,113,234,185,96,83,12,18,209,184,138,26,207,144,18,39,32,72,24,77,219,128,197,61,78,214,221,243],[71,185,158,148,136,31,26,190,89,32,126,104,121,85,112,76,248,81,47,171,107,218,69,23,169,105,212,57,151,225,184,162],[21,171,229,99,23,42,211,201,227,62,213,193,55,158,101,243,178,115,37,181,124,250,90,146,80,137,228,35,82,165,8,198],[104,107,184,88,58,172,66,193,39,84,251,217,197,94,126,162,176,90,111,113,190,33,124,12,201,223,5,96,210,170,44,83],[230,88,165,7,215,223,122,181,242,201,172,143,204,149,180,30,6,187,235,169,30,77,225,192,14,104,10,81,202,172,9,66],[0,5,229,61,190,218,34,250,98,135,98,127,130,22,129,219,101,25,69,43,151,247,64,217,189,73,72,221,128,23,54,191]]",
              "sol": "[bytes(abi.encode(\"148,198,164,35,84,75,156,115,114,159,173,59,20,15,254,64,245,71,148,253,29,217,237,51,98,44,194,222,62,132,44,170\")),bytes(abi.encode(\"11,242,10,132,47,192,5,88,192,61,167,225,28,172,140,216,226,105,122,13,189,174,253,40,29,54,50,122,169,128,111,89\")),bytes(abi.encode(\"251,164,2,96,87,145,78,248,25,222,218,125,213,197,102,50,128,173,22,229,72,128,158,125,47,213,192,70,150,90,166,127\")),bytes(abi.encode(\"110,27,192,66,148,168,179,82,255,235,70,30,84,126,135,61,95,186,22,191,135,170,152,174,212,13,56,121,146,95,141,199\")),bytes(abi.encode(\"137,55,155,151,15,113,234,185,96,83,12,18,209,184,138,26,207,144,18,39,32,72,24,77,219,128,197,61,78,214,221,243\")),bytes(abi.encode(\"71,185,158,148,136,31,26,190,89,32,126,104,121,85,112,76,248,81,47,171,107,218,69,23,169,105,212,57,151,225,184,162\")),bytes(abi.encode(\"21,171,229,99,23,42,211,201,227,62,213,193,55,158,101,243,178,115,37,181,124,250,90,146,80,137,228,35,82,165,8,198\")),bytes(abi.encode(\"104,107,184,88,58,172,66,193,39,84,251,217,197,94,126,162,176,90,111,113,190,33,124,12,201,223,5,96,210,170,44,83\")),bytes(abi.encode(\"230,88,165,7,215,223,122,181,242,201,172,143,204,149,180,30,6,187,235,169,30,77,225,192,14,104,10,81,202,172,9,66\")),bytes(abi.encode(\"0,5,229,61,190,218,34,250,98,135,98,127,130,22,129,219,101,25,69,43,151,247,64,217,189,73,72,221,128,23,54,191\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.434ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.435ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[205,28,245,91,14,53,48,205,166,216,49,129,169,81,26,84,118,240,20,78,200,242,93,233,177,115,62,138,56,229,4,38]",
              "sol": "stringToBytes32(\"205,28,245,91,14,53,48,205,166,216,49,129,169,81,26,84,118,240,20,78,200,242,93,233,177,115,62,138,56,229,4,38\")"
            },
            {
              "js": "[179,220,220,163,91,3,191,95,92,149,134,244,115,241,133,119,12,47,101,246,241,203,51,80,216,202,4,216,33,88,69,245]",
              "sol": "stringToBytes32(\"179,220,220,163,91,3,191,95,92,149,134,244,115,241,133,119,12,47,101,246,241,203,51,80,216,202,4,216,33,88,69,245\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.435ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[239,175,114,85,123,15,92,152,151,221,18,115,233,83,198,74,74,185,203,131,1,9,222,179,174,63,251,123,20,231,191,37]",
              "sol": "stringToBytes32(\"239,175,114,85,123,15,92,152,151,221,18,115,233,83,198,74,74,185,203,131,1,9,222,179,174,63,251,123,20,231,191,37\")"
            },
            {
              "js": "[27,118,190,204,19,115,40,113,81,116,107,244,212,44,232,139,217,102,204,59,71,197,152,92,111,174,98,0,190,115,236,203]",
              "sol": "abi.encode(\"27,118,190,204,19,115,40,113,81,116,107,244,212,44,232,139,217,102,204,59,71,197,152,92,111,174,98,0,190,115,236,203\")"
            },
            {
              "js": "[186,130,253,120,105,71,142,136,211,226,127,112,0,166,208,50,46,127,151,179,155,241,16,163,12,224,99,141,127,122,219,156]",
              "sol": "abi.encode(\"186,130,253,120,105,71,142,136,211,226,127,112,0,166,208,50,46,127,151,179,155,241,16,163,12,224,99,141,127,122,219,156\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.436ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[207,79,96,14,133,65,100,211,251,229,223,29,81,159,199,241,124,235,103,17,187,171,163,115,177,38,46,152,136,99,109,128]",
              "sol": "abi.encode(\"207,79,96,14,133,65,100,211,251,229,223,29,81,159,199,241,124,235,103,17,187,171,163,115,177,38,46,152,136,99,109,128\")"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[180,250,148,16,35,42,32,30,41,38,217,90,237,240,156,36,165,19,33,2,223,26,164,81,210,91,159,30,184,56,199,190]",
              "sol": "abi.encode(\"180,250,148,16,35,42,32,30,41,38,217,90,237,240,156,36,165,19,33,2,223,26,164,81,210,91,159,30,184,56,199,190\")"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.437ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[130,200,206,33,181,12,45,179,121,31,157,167,191,171,163,44,155,164,30,237,173,138,201,141,26,47,214,223,225,70,30,178]",
              "sol": "stringToBytes32(\"130,200,206,33,181,12,45,179,121,31,157,167,191,171,163,44,155,164,30,237,173,138,201,141,26,47,214,223,225,70,30,178\")"
            },
            {
              "js": "\"gb0gwi\"",
              "sol": "\"gb0gwi\""
            },
            {
              "js": "[141,177,164,79,63,37,51,212,187,178,21,241,195,66,159,22,124,18,105,174,236,209,167,133,202,71,225,30,29,52,161,46]",
              "sol": "abi.encode(\"141,177,164,79,63,37,51,212,187,178,21,241,195,66,159,22,124,18,105,174,236,209,167,133,202,71,225,30,29,52,161,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[123,175,112,167,233,31,54,116,24,150,4,74,194,81,164,57,68,27,247,170,244,121,139,128,175,207,101,148,5,98,218,190]",
              "sol": "stringToBytes32(\"123,175,112,167,233,31,54,116,24,150,4,74,194,81,164,57,68,27,247,170,244,121,139,128,175,207,101,148,5,98,218,190\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[141,106,121,32,167,100,23,56,40,0,220,82,73,154,74,212,12,174,56,69,71,133,139,249,74,27,62,50,241,231,76,25]",
              "sol": "abi.encode(\"141,106,121,32,167,100,23,56,40,0,220,82,73,154,74,212,12,174,56,69,71,133,139,249,74,27,62,50,241,231,76,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.438ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[121,217,15,23,73,41,105,172,138,163,74,14,32,151,59,107,126,107,210,24,151,179,49,158,125,172,77,223,32,76,34,149]",
              "sol": "stringToBytes32(\"121,217,15,23,73,41,105,172,138,163,74,14,32,151,59,107,126,107,210,24,151,179,49,158,125,172,77,223,32,76,34,149\")"
            },
            {
              "js": "[105,216,129,230,17,71,240,133,166,255,52,23,93,70,240,34,230,40,53,191,139,232,172,14,139,254,105,218,15,171,27,69]",
              "sol": "abi.encode(\"105,216,129,230,17,71,240,133,166,255,52,23,93,70,240,34,230,40,53,191,139,232,172,14,139,254,105,218,15,171,27,69\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[121,217,15,23,73,41,105,172,138,163,74,14,32,151,59,107,126,107,210,24,151,179,49,158,125,172,77,223,32,76,34,149]",
                "sol": "stringToBytes32(\"121,217,15,23,73,41,105,172,138,163,74,14,32,151,59,107,126,107,210,24,151,179,49,158,125,172,77,223,32,76,34,149\")"
              },
              {
                "js": "[219,233,89,47,165,73,54,218,202,20,120,214,245,224,180,209,191,113,5,201,106,34,38,71,218,22,196,28,142,135,121,239,89]",
                "sol": "bytes33(\"219,233,89,47,165,73,54,218,202,20,120,214,245,224,180,209,191,113,5,201,106,34,38,71,218,22,196,28,142,135,121,239,89\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.439ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[153,112,156,204,252,82,203,36,45,210,87,43,191,29,84,236,176,236,16,241,40,94,94,203,175,91,226,219,175,0,232,249]",
              "sol": "abi.encode(\"153,112,156,204,252,82,203,36,45,210,87,43,191,29,84,236,176,236,16,241,40,94,94,203,175,91,226,219,175,0,232,249\")"
            },
            {
              "js": "[32,1,96,151,157,220,141,185,204,195,134,161,145,41,223,92,28,21,62,146,231,53,84,118,66,191,124,16,38,161,206,223]",
              "sol": "stringToBytes32(\"32,1,96,151,157,220,141,185,204,195,134,161,145,41,223,92,28,21,62,146,231,53,84,118,66,191,124,16,38,161,206,223\")"
            },
            {
              "js": "[196,110,148,215,196,141,85,212,44,80,69,217,51,115,170,125,253,75,164,217,99,147,110,35,196,209,235,129,139,141,50,240]",
              "sol": "abi.encode(\"196,110,148,215,196,141,85,212,44,80,69,217,51,115,170,125,253,75,164,217,99,147,110,35,196,209,235,129,139,141,50,240\")"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[191,94,106,75,229,59,214,191,53,165,203,57,64,185,99,237,167,51,80,253,135,237,71,97,34,164,199,80,208,42,113,223]",
              "sol": "abi.encode(\"191,94,106,75,229,59,214,191,53,165,203,57,64,185,99,237,167,51,80,253,135,237,71,97,34,164,199,80,208,42,113,223\")"
            },
            {
              "js": "[181,202,232,201,115,144,52,129,44,159,208,89,83,154,34,36,26,218,235,205,85,72,147,115,4,251,232,44,91,119,134,125]",
              "sol": "stringToBytes32(\"181,202,232,201,115,144,52,129,44,159,208,89,83,154,34,36,26,218,235,205,85,72,147,115,4,251,232,44,91,119,134,125\")"
            },
            {
              "js": "[146,92,103,155,163,196,84,145,45,116,166,229,234,241,102,195,113,133,29,214,208,96,31,46,49,71,91,158,250,155,28,161]",
              "sol": "abi.encode(\"146,92,103,155,163,196,84,145,45,116,166,229,234,241,102,195,113,133,29,214,208,96,31,46,49,71,91,158,250,155,28,161\")"
            },
            {
              "js": "\"qzcq77\"",
              "sol": "\"qzcq77\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[84,113,224,245,218,206,95,135,187,95,203,46,97,99,162,7,17,79,249,177,89,126,102,17,33,133,111,42,174,250,62,207]",
              "sol": "abi.encode(\"84,113,224,245,218,206,95,135,187,95,203,46,97,99,162,7,17,79,249,177,89,126,102,17,33,133,111,42,174,250,62,207\")"
            },
            {
              "js": "[160,90,166,113,76,220,103,223,223,99,0,67,87,137,47,64,90,48,17,103,86,243,239,61,71,238,11,105,56,17,25,231]",
              "sol": "stringToBytes32(\"160,90,166,113,76,220,103,223,223,99,0,67,87,137,47,64,90,48,17,103,86,243,239,61,71,238,11,105,56,17,25,231\")"
            },
            {
              "js": "[66,229,111,124,137,53,165,105,205,126,0,144,169,82,183,70,112,220,19,117,103,167,139,67,2,252,253,214,255,54,215,59]",
              "sol": "abi.encode(\"66,229,111,124,137,53,165,105,205,126,0,144,169,82,183,70,112,220,19,117,103,167,139,67,2,252,253,214,255,54,215,59\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[59,34,236,213,87,91,96,108,207,32,189,69,44,168,112,88,149,105,94,36,178,140,3,224,57,174,51,213,117,169,26,217]",
              "sol": "abi.encode(\"59,34,236,213,87,91,96,108,207,32,189,69,44,168,112,88,149,105,94,36,178,140,3,224,57,174,51,213,117,169,26,217\")"
            },
            {
              "js": "[95,84,61,249,72,218,12,41,165,113,5,94,125,112,200,250,2,212,114,118,237,230,113,138,237,233,139,64,211,169,41,250]",
              "sol": "stringToBytes32(\"95,84,61,249,72,218,12,41,165,113,5,94,125,112,200,250,2,212,114,118,237,230,113,138,237,233,139,64,211,169,41,250\")"
            },
            {
              "js": "[248,57,112,26,69,118,8,157,5,228,118,137,84,188,169,152,38,187,15,185,132,93,87,223,57,54,251,102,87,3,142,3]",
              "sol": "abi.encode(\"248,57,112,26,69,118,8,157,5,228,118,137,84,188,169,152,38,187,15,185,132,93,87,223,57,54,251,102,87,3,142,3\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[16,97,100,249,212,201,9,239,128,165,44,251,238,169,152,139,12,62,136,54,227,140,81,154,18,102,255,18,223,177,137,207]",
              "sol": "abi.encode(\"16,97,100,249,212,201,9,239,128,165,44,251,238,169,152,139,12,62,136,54,227,140,81,154,18,102,255,18,223,177,137,207\")"
            },
            {
              "js": "[87,232,86,107,166,223,178,81,76,251,231,124,97,235,13,51,102,201,127,4,76,168,87,101,184,12,97,29,160,112,172,16]",
              "sol": "stringToBytes32(\"87,232,86,107,166,223,178,81,76,251,231,124,97,235,13,51,102,201,127,4,76,168,87,101,184,12,97,29,160,112,172,16\")"
            },
            {
              "js": "[177,232,46,114,248,10,166,8,45,20,149,14,78,54,252,136,132,12,195,234,12,144,32,49,63,250,239,52,57,224,149,163]",
              "sol": "abi.encode(\"177,232,46,114,248,10,166,8,45,20,149,14,78,54,252,136,132,12,195,234,12,144,32,49,63,250,239,52,57,224,149,163\")"
            },
            {
              "js": "\"2dmos5a\"",
              "sol": "\"2dmos5a\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[163,124,7,221,67,15,128,137,92,120,14,18,88,190,30,53,91,91,11,231,134,174,207,192,242,248,193,9,6,147,72,235]",
              "sol": "abi.encode(\"163,124,7,221,67,15,128,137,92,120,14,18,88,190,30,53,91,91,11,231,134,174,207,192,242,248,193,9,6,147,72,235\")"
            },
            {
              "js": "[35,68,127,136,229,21,174,141,170,81,210,60,109,137,255,132,190,52,107,248,171,248,128,114,102,193,184,255,161,165,147,240]",
              "sol": "stringToBytes32(\"35,68,127,136,229,21,174,141,170,81,210,60,109,137,255,132,190,52,107,248,171,248,128,114,102,193,184,255,161,165,147,240\")"
            },
            {
              "js": "[98,26,230,68,4,202,110,184,59,66,219,125,163,98,57,39,36,112,48,24,62,130,109,221,178,245,79,114,51,149,50,62]",
              "sol": "abi.encode(\"98,26,230,68,4,202,110,184,59,66,219,125,163,98,57,39,36,112,48,24,62,130,109,221,178,245,79,114,51,149,50,62\")"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[243,187,91,144,245,221,20,225,130,164,165,170,3,71,17,116,174,145,145,154,31,163,23,132,113,247,148,238,92,65,64,15]",
              "sol": "abi.encode(\"243,187,91,144,245,221,20,225,130,164,165,170,3,71,17,116,174,145,145,154,31,163,23,132,113,247,148,238,92,65,64,15\")"
            },
            {
              "js": "[190,41,48,142,158,122,73,83,155,15,172,122,76,194,88,70,135,2,44,6,225,56,9,119,60,75,180,239,16,116,131,166]",
              "sol": "stringToBytes32(\"190,41,48,142,158,122,73,83,155,15,172,122,76,194,88,70,135,2,44,6,225,56,9,119,60,75,180,239,16,116,131,166\")"
            },
            {
              "js": "[173,20,190,35,137,222,189,74,230,89,201,121,111,74,141,215,79,81,102,79,226,105,69,134,134,82,177,66,162,174,213,3]",
              "sol": "abi.encode(\"173,20,190,35,137,222,189,74,230,89,201,121,111,74,141,215,79,81,102,79,226,105,69,134,134,82,177,66,162,174,213,3\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[210,56,219,225,155,254,202,123,27,10,114,73,252,254,161,172,235,227,254,136,148,53,61,86,49,247,173,182,207,25,128,189]",
              "sol": "abi.encode(\"210,56,219,225,155,254,202,123,27,10,114,73,252,254,161,172,235,227,254,136,148,53,61,86,49,247,173,182,207,25,128,189\")"
            },
            {
              "js": "[244,253,222,180,4,133,5,65,21,143,74,230,153,125,239,112,18,12,107,59,116,247,57,5,83,36,54,254,166,244,236,127]",
              "sol": "stringToBytes32(\"244,253,222,180,4,133,5,65,21,143,74,230,153,125,239,112,18,12,107,59,116,247,57,5,83,36,54,254,166,244,236,127\")"
            },
            {
              "js": "[173,173,179,126,183,136,100,225,52,12,88,145,191,64,100,228,159,20,24,19,86,37,95,132,189,81,218,32,140,109,138,70]",
              "sol": "abi.encode(\"173,173,179,126,183,136,100,225,52,12,88,145,191,64,100,228,159,20,24,19,86,37,95,132,189,81,218,32,140,109,138,70\")"
            },
            {
              "js": "\"17r2p\"",
              "sol": "\"17r2p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.445ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[26,200,209,21,78,84,144,6,231,233,23,28,101,22,17,40,85,240,194,91,197,7,149,141,145,144,139,215,209,244,161,229]",
              "sol": "abi.encode(\"26,200,209,21,78,84,144,6,231,233,23,28,101,22,17,40,85,240,194,91,197,7,149,141,145,144,139,215,209,244,161,229\")"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "[120,96,146,3,99,65,115,99,55,48,177,131,0,6,197,190,113,112,190,16,77,74,61,193,174,15,1,125,76,232,230,49]",
              "sol": "abi.encode(\"120,96,146,3,99,65,115,99,55,48,177,131,0,6,197,190,113,112,190,16,77,74,61,193,174,15,1,125,76,232,230,49\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.446ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[32,182,85,126,222,153,96,220,160,178,164,150,248,98,138,185,100,48,17,163,93,143,122,96,58,34,139,156,154,92,48,72]",
              "sol": "stringToBytes32(\"32,182,85,126,222,153,96,220,160,178,164,150,248,98,138,185,100,48,17,163,93,143,122,96,58,34,139,156,154,92,48,72\")"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "[66,102,134,156,227,187,133,41,43,182,180,228,2,9,183,245,221,66,22,173,132,81,171,158,140,156,136,228,21,160,210,13]",
              "sol": "stringToBytes32(\"66,102,134,156,227,187,133,41,43,182,180,228,2,9,183,245,221,66,22,173,132,81,171,158,140,156,136,228,21,160,210,13\")"
            },
            {
              "js": "[17,176,119,79,18,42,179,62,241,214,105,154,249,38,205,201,48,189,50,138,176,160,203,0,176,226,56,117,250,227,120,8]",
              "sol": "stringToBytes32(\"17,176,119,79,18,42,179,62,241,214,105,154,249,38,205,201,48,189,50,138,176,160,203,0,176,226,56,117,250,227,120,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.447ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[50,11,211,57,253,30,1,77,30,208,192,10,197,131,243,79,151,104,119,49,85,67,20,123,67,116,52,231,27,188,252,2]",
              "sol": "stringToBytes32(\"50,11,211,57,253,30,1,77,30,208,192,10,197,131,243,79,151,104,119,49,85,67,20,123,67,116,52,231,27,188,252,2\")"
            },
            {
              "js": "[7,194,187,122,136,78,242,72,68,62,250,138,12,178,142,177,144,254,169,104,69,232,72,106,75,245,219,82,91,190,34,235,127,94,248,68,51,53,8,165,36,255,9,44,252,202,213,219,158,194,229,163,6,245,42,8,213,136,62,142,183,22,161,98,49,204,114,132,52,196,198]",
              "sol": "abi.encode(\"7,194,187,122,136,78,242,72,68,62,250,138,12,178,142,177,144,254,169,104,69,232,72,106,75,245,219,82,91,190,34,235,127,94,248,68,51,53,8,165,36,255,9,44,252,202,213,219,158,194,229,163,6,245,42,8,213,136,62,142,183,22,161,98,49,204,114,132,52,196,198\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[100,58,236,192,68,129,80,27,131,172,246,17,173,35,202,48,230,82,10,23,92,216,169,13,37,174,138,138,74,144,113,102]",
              "sol": "stringToBytes32(\"100,58,236,192,68,129,80,27,131,172,246,17,173,35,202,48,230,82,10,23,92,216,169,13,37,174,138,138,74,144,113,102\")"
            },
            {
              "js": "[113,144,127,147,115,68,46,55,172,68,72,53,18,46,162,46,231,236,71,188,45,168,154,134,36,107,68,5,232,116,175,4,193,62,135,1,78,245,6,169,251,62,138,29,230,24,184,148,41,5,223,253,122,205,148,229,180,122,60,141,90,215,52,34,147]",
              "sol": "abi.encode(\"113,144,127,147,115,68,46,55,172,68,72,53,18,46,162,46,231,236,71,188,45,168,154,134,36,107,68,5,232,116,175,4,193,62,135,1,78,245,6,169,251,62,138,29,230,24,184,148,41,5,223,253,122,205,148,229,180,122,60,141,90,215,52,34,147\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.448ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.449ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.449ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.449ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.449ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.450ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.450ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.450ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.450ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.451ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.451ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.451ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.452ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.453ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.454ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.456ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.458ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[57,119,9,25,23,166,182,100,48,205,152,169,4,250,75,204,110,173,162,215,218,34,52,111,162,99,160,41,255,31,17,107]",
              "sol": "stringToBytes32(\"57,119,9,25,23,166,182,100,48,205,152,169,4,250,75,204,110,173,162,215,218,34,52,111,162,99,160,41,255,31,17,107\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[181,67,65,6,225,185,225,86,129,243,94,82,105,214,101,14,165,9,86,115,81,14,73,172,157,227,176,151,244,1,150,105]",
              "sol": "abi.encode(\"181,67,65,6,225,185,225,86,129,243,94,82,105,214,101,14,165,9,86,115,81,14,73,172,157,227,176,151,244,1,150,105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.459ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.460ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.461ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.462ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[64,239,51,162,109,62,210,56,140,31,167,24,32,125,173,177,66,138,55,78,31,41,55,34,199,59,151,221,205,131,46,108]",
              "sol": "abi.encode(\"64,239,51,162,109,62,210,56,140,31,167,24,32,125,173,177,66,138,55,78,31,41,55,34,199,59,151,221,205,131,46,108\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[8,93,199,96,151,243,88,203,223,105,160,30,114,241,20,24,203,46,29,218,165,90,142,79,254,189,109,240,78,231,18,47]",
              "sol": "stringToBytes32(\"8,93,199,96,151,243,88,203,223,105,160,30,114,241,20,24,203,46,29,218,165,90,142,79,254,189,109,240,78,231,18,47\")"
            },
            {
              "js": "[75,91,202,43,153,212,246,18,32,131,122,203,114,182,119,29,223,66,213,207,54,7,109,134,68,86,249,249,30,124,88,35]",
              "sol": "stringToBytes32(\"75,91,202,43,153,212,246,18,32,131,122,203,114,182,119,29,223,66,213,207,54,7,109,134,68,86,249,249,30,124,88,35\")"
            },
            {
              "js": "[123,205,7,155,109,237,19,136,100,196,6,156,54,243,165,55,232,35,54,217,94,79,30,59,105,113,155,233,4,43,59,78]",
              "sol": "stringToBytes32(\"123,205,7,155,109,237,19,136,100,196,6,156,54,243,165,55,232,35,54,217,94,79,30,59,105,113,155,233,4,43,59,78\")"
            },
            {
              "js": "[241,122,52,42,238,162,168,6,103,33,236,185,251,51,215,162,8,71,245,96,90,125,119,83,181,111,23,153,164,56,69,148]",
              "sol": "stringToBytes32(\"241,122,52,42,238,162,168,6,103,33,236,185,251,51,215,162,8,71,245,96,90,125,119,83,181,111,23,153,164,56,69,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.463ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.464ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.464ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.465ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.466ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.466ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.467ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.469ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.471ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:42:12.474ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.475ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.476ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:42:12.477ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}