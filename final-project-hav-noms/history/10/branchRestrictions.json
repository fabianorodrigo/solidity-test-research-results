,{
  "2020-11-11T00:56:15.624ZERC20Detailed.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,uint8)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:58:37.686ZEternalStorage.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:59:13.999ZPausable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:59:31.704ZShartCoin.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor() WHEN msg.sender!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor() when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:59:49.403ZState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:00:07.000ZProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:00:24.504ZETHPriceTicker.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:00:42.465ZTokenExchangeState.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:00.232ZMortal.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN _selfDestructBeneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _selfDestructBeneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:18.404ZProxyable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:36.643ZTokenExchange.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,TokenExchangeState,string)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "contractTokenExchangeState.address",
              "sol": "contractTokenExchangeState"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.792ZProxyAddress.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.796ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [233,19,153,236,155,177,22,159,229,242,143,93,178,143,1,208,190,154,245,206,55,143,203,113,156,246,38,229,242,129,81,199],\"capacity\": 33}",
              "sol": "Buffer.buffer(abi.encode(\"233,19,153,236,155,177,22,159,229,242,143,93,178,143,1,208,190,154,245,206,55,143,203,113,156,246,38,229,242,129,81,199\"),33)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.797ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [139,180,61,227,100,175,16,159,165,169,14,15,150,115,180,216,236,9,250,93,77,106,169,242,246,57,111,116,247,79,120,216],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"139,180,61,227,100,175,16,159,165,169,14,15,150,115,180,216,236,9,250,93,77,106,169,242,246,57,111,116,247,79,120,216\"),65)"
            },
            {
              "js": "[37,73,116,228,17,44,172,201,207,185,54,159,149,167,178,131,196,5,209,221,175,88,9,119,39,222,66,72,197,104,0,59]",
              "sol": "abi.encode(\"37,73,116,228,17,44,172,201,207,185,54,159,149,167,178,131,196,5,209,221,175,88,9,119,39,222,66,72,197,104,0,59\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.797ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [111,225,55,167,85,69,81,172,32,176,245,184,191,97,223,77,248,110,86,33,117,198,246,203,56,127,91,45,116,170,226,225],\"capacity\": 66}",
              "sol": "Buffer.buffer(abi.encode(\"111,225,55,167,85,69,81,172,32,176,245,184,191,97,223,77,248,110,86,33,117,198,246,203,56,127,91,45,116,170,226,225\"),66)"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.798ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [48,12,168,228,226,182,87,47,233,111,150,242,99,197,255,196,47,228,244,193,172,23,126,41,167,162,87,243,87,143,211,17],\"capacity\": 70}",
              "sol": "Buffer.buffer(abi.encode(\"48,12,168,228,226,182,87,47,233,111,150,242,99,197,255,196,47,228,244,193,172,23,126,41,167,162,87,243,87,143,211,17\"),70)"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.800ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [138,60,105,46,139,208,86,120,43,97,124,173,44,225,171,131,106,75,50,190,204,83,81,236,154,25,201,55,4,174,1,46],\"capacity\": 10001}",
              "sol": "Buffer.buffer(abi.encode(\"138,60,105,46,139,208,86,120,43,97,124,173,44,225,171,131,106,75,50,190,204,83,81,236,154,25,201,55,4,174,1,46\"),10001)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.800ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [202,2,121,42,248,78,2,52,145,255,124,202,126,222,38,131,51,166,129,147,7,192,81,5,115,120,140,201,30,114,2,75],\"capacity\": 127}",
              "sol": "Buffer.buffer(abi.encode(\"202,2,121,42,248,78,2,52,145,255,124,202,126,222,38,131,51,166,129,147,7,192,81,5,115,120,140,201,30,114,2,75\"),127)"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [170,131,145,160,0,205,56,246,20,90,14,55,103,9,220,204,42,128,20,9,159,147,147,45,76,105,155,197,169,141,35,28],\"capacity\": 69}",
              "sol": "Buffer.buffer(abi.encode(\"170,131,145,160,0,205,56,246,20,90,14,55,103,9,220,204,42,128,20,9,159,147,147,45,76,105,155,197,169,141,35,28\"),69)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.802ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [80,55,203,66,59,41,14,128,6,186,19,137,200,127,60,194,234,229,137,206,155,145,13,177,155,69,240,72,33,227,145,162],\"capacity\": 0}",
              "sol": "Buffer.buffer(abi.encode(\"80,55,203,66,59,41,14,128,6,186,19,137,200,127,60,194,234,229,137,206,155,145,13,177,155,69,240,72,33,227,145,162\"),0)"
            },
            {
              "js": "[188,67,116,236,230,210,215,131,235,135,31,215,197,81,108,55,114,88,201,248,41,117,225,200,137,109,11,69,59,2,85,242]",
              "sol": "abi.encode(\"188,67,116,236,230,210,215,131,235,135,31,215,197,81,108,55,114,88,201,248,41,117,225,200,137,109,11,69,59,2,85,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.803ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [69,45,98,118,226,105,184,65,87,99,82,62,66,96,12,222,42,173,7,198,54,201,191,92,125,138,102,85,212,218,227,236],\"capacity\": 11}",
              "sol": "Buffer.buffer(abi.encode(\"69,45,98,118,226,105,184,65,87,99,82,62,66,96,12,222,42,173,7,198,54,201,191,92,125,138,102,85,212,218,227,236\"),11)"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.803ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [136,136,133,17,39,17,215,175,109,189,160,37,200,101,9,30,250,227,43,37,100,67,186,87,99,87,7,80,50,236,120,223],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"136,136,133,17,39,17,215,175,109,189,160,37,200,101,9,30,250,227,43,37,100,67,186,87,99,87,7,80,50,236,120,223\"),28)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.805ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [10,97,122,234,33,81,210,173,154,20,102,84,128,215,92,17,133,38,190,246,223,79,249,136,37,216,207,129,247,61,53,146],\"capacity\": 11}",
              "sol": "Buffer.buffer(abi.encode(\"10,97,122,234,33,81,210,173,154,20,102,84,128,215,92,17,133,38,190,246,223,79,249,136,37,216,207,129,247,61,53,146\"),11)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.806ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [67,32,167,27,104,31,46,254,56,210,220,56,124,194,86,11,103,99,99,25,160,114,93,183,9,242,30,252,33,224,215,186],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"67,32,167,27,104,31,46,254,56,210,220,56,124,194,86,11,103,99,99,25,160,114,93,183,9,242,30,252,33,224,215,186\"),23)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.808ZProxySafeDecimalMath.testunit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testunit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.808ZProxySafeDecimalMath.testpreciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.808ZProxySafeDecimalMath.testmultiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimal(uint,uint) WHEN UNIT>0",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.809ZProxySafeDecimalMath.testmultiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.810ZProxySafeDecimalMath.testmultiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmultiplyDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.810ZProxySafeDecimalMath.testdivideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimal(uint,uint) WHEN y>0",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdivideDecimal(uint,uint) when NOT comply with: y > 0",
            "parameters": [
              {
                "js": "199999",
                "sol": "199999"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.811ZProxySafeDecimalMath.testdivideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRound(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.811ZProxySafeDecimalMath.testdivideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdivideDecimalRoundPrecise(uint,uint) WHEN 10>0",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.812ZProxySafeDecimalMath.testdecimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdecimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.812ZProxySafeDecimalMath.testpreciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreciseDecimalToDecimal(uint) WHEN 10>0",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.814ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[12,39,141,114,197,115,29,255,193,37,231,78,159,241,84,214,123,182,198,12,21,167,134,135,217,86,76,72,85,80,188,2]",
              "sol": "stringToBytes32(\"12,39,141,114,197,115,29,255,193,37,231,78,159,241,84,214,123,182,198,12,21,167,134,135,217,86,76,72,85,80,188,2\")"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.815ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[189,70,43,216,68,49,226,100,111,133,150,20,136,89,243,93,229,10,37,134,121,164,62,9,215,33,178,233,215,22,0,113]",
              "sol": "stringToBytes32(\"189,70,43,216,68,49,226,100,111,133,150,20,136,89,243,93,229,10,37,134,121,164,62,9,215,33,178,233,215,22,0,113\")"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[223,249,196,50,146,234,209,188,87,130,72,108,219,26,251,128,117,112,100,227,100,118,121,25,56,194,37,165,148,130,11,202]",
              "sol": "abi.encode(\"223,249,196,50,146,234,209,188,87,130,72,108,219,26,251,128,117,112,100,227,100,118,121,25,56,194,37,165,148,130,11,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.861ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.862ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.862ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.863ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.863ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.863ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.864ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.864ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.865ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"call updateEthPrice\"",
              "sol": "\"call updateEthPrice\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.865ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.866ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.866ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.866ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.867ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.867ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"listingID arg\",\"IsLibrary\",\"\"]",
              "sol": "[string(\"listingID arg\"),string(\"IsLibrary\"),string(\"\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.869ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"UsesExample\"]",
              "sol": "[string(\"UsesExample\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.870ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[\"Example\",\"IsLibrary\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"PayableExample\"]",
              "sol": "[string(\"Example\"),string(\"IsLibrary\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"PayableExample\")]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.870ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"ETH\",\"0\",\"listingID arg\",\"updateEthPrice called\",\"RevertWithReason\",\"UsesExample\",\"\"]",
              "sol": "[string(\"ETH\"),string(\"0\"),string(\"listingID arg\"),string(\"updateEthPrice called\"),string(\"RevertWithReason\"),string(\"UsesExample\"),string(\"\")]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.871ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[\"Oraclize query was sent, standing by for the answer...\"]",
              "sol": "[string(\"Oraclize query was sent, standing by for the answer...\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.871ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"ETH\"]",
              "sol": "[string(\"ETH\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.872ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[\"cy1m3\"]",
              "sol": "[string(\"cy1m3\")]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.872ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[\"RevertWithReason\"]",
              "sol": "[string(\"RevertWithReason\")]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.873ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[\"updateEthPrice called\",\"P\"]",
              "sol": "[string(\"updateEthPrice called\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.873ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"P\",\"listingID arg\"]",
              "sol": "[string(\"P\"),string(\"listingID arg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.874ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[\"lj69uj\",\"PayableExample\"]",
              "sol": "[string(\"lj69uj\"),string(\"PayableExample\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.875ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"costUSD\",\"P\"]",
              "sol": "[string(\"costUSD\"),string(\"P\")]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.875ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"9xpxnv\",\"IsLibrary\",\"RevertWithReason\"]",
              "sol": "[string(\"9xpxnv\"),string(\"IsLibrary\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.876ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[\"L\",\"trade.totalPrice\",\"kkpt3j\"]",
              "sol": "[string(\"L\"),string(\"trade.totalPrice\"),string(\"kkpt3j\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.876ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"L\",\"trade.totalPrice\"]",
              "sol": "[string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"L\"),string(\"trade.totalPrice\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.877ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"listingID arg\",\"ETH\",\"q301hp\"]",
              "sol": "[string(\"listingID arg\"),string(\"ETH\"),string(\"q301hp\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.877ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"Example\",\"IsLibrary\",\"trade.totalPrice\",\"call updateEthPrice\"]",
              "sol": "[string(\"Example\"),string(\"IsLibrary\"),string(\"trade.totalPrice\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.878ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[\"ETH\",\"ETH\",\"cy1m3\",\"q301hp\"]",
              "sol": "[string(\"ETH\"),string(\"ETH\"),string(\"cy1m3\"),string(\"q301hp\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.879ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"k1s94t\"",
              "sol": "\"k1s94t\""
            },
            {
              "js": "[\"PayableExample\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"9xpxnv\",\"P\"]",
              "sol": "[string(\"PayableExample\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"9xpxnv\"),string(\"P\")]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.879ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"Oraclize query was sent, standing by for the answer...\"",
              "sol": "\"Oraclize query was sent, standing by for the answer...\""
            },
            {
              "js": "[\"ETH\",\"call updateEthPrice\",\"Example\",\"RevertWithReason\"]",
              "sol": "[string(\"ETH\"),string(\"call updateEthPrice\"),string(\"Example\"),string(\"RevertWithReason\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.880ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"9xpxnv\",\"9xpxnv\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\",\"call updateEthPrice\",\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"]",
              "sol": "[string(\"9xpxnv\"),string(\"9xpxnv\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"),string(\"call updateEthPrice\"),string(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.880ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[\"RevertWithReason\",\"Example\",\"trade.totalPrice\",\"ETH\",\"ETH\"]",
              "sol": "[string(\"RevertWithReason\"),string(\"Example\"),string(\"trade.totalPrice\"),string(\"ETH\"),string(\"ETH\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.881ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"call updateEthPrice\",\"0\",\"cy1m3\",\"\\x19Ethereum Signed Message:\\n32\",\"lj69uj\"]",
              "sol": "[string(\"call updateEthPrice\"),string(\"0\"),string(\"cy1m3\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"lj69uj\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.883ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"k1s94t\"",
              "sol": "\"k1s94t\""
            },
            {
              "js": "[\"P\",\"Oraclize query was sent, standing by for the answer...\",\"L\",\"ETH\",\"call updateEthPrice\"]",
              "sol": "[string(\"P\"),string(\"Oraclize query was sent, standing by for the answer...\"),string(\"L\"),string(\"ETH\"),string(\"call updateEthPrice\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.884ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[178,239,111,140,152,34,177,138,62,253,145,167,18,28,86,74,102,186,77,192,140,230,169,56,228,32,42,198,141,170,32,232],[243,152,107,86,113,211,104,30,236,185,201,133,214,238,46,136,249,156,80,215,231,127,36,210,241,97,191,243,178,17,179,42]]",
              "sol": "[bytes(abi.encode(\"178,239,111,140,152,34,177,138,62,253,145,167,18,28,86,74,102,186,77,192,140,230,169,56,228,32,42,198,141,170,32,232\")),bytes(abi.encode(\"243,152,107,86,113,211,104,30,236,185,201,133,214,238,46,136,249,156,80,215,231,127,36,210,241,97,191,243,178,17,179,42\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.885ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[[26,85,205,35,116,75,87,101,215,171,126,244,50,239,251,112,171,177,160,116,166,51,97,74,8,6,13,0,67,125,172,245],[211,165,19,227,83,168,139,45,140,17,198,105,61,143,112,11,52,222,153,218,136,76,57,187,149,144,82,178,235,193,185,231]]",
              "sol": "[bytes(abi.encode(\"26,85,205,35,116,75,87,101,215,171,126,244,50,239,251,112,171,177,160,116,166,51,97,74,8,6,13,0,67,125,172,245\")),bytes(abi.encode(\"211,165,19,227,83,168,139,45,140,17,198,105,61,143,112,11,52,222,153,218,136,76,57,187,149,144,82,178,235,193,185,231\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.886ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[72,53,171,133,51,251,77,42,244,151,40,19,216,187,253,223,94,61,244,202,49,135,191,149,61,73,16,105,185,97,53,62],[191,18,139,70,104,71,68,139,14,162,19,4,40,146,240,64,223,21,71,182,244,103,213,179,238,191,90,255,156,39,83,192]]",
              "sol": "[bytes(abi.encode(\"72,53,171,133,51,251,77,42,244,151,40,19,216,187,253,223,94,61,244,202,49,135,191,149,61,73,16,105,185,97,53,62\")),bytes(abi.encode(\"191,18,139,70,104,71,68,139,14,162,19,4,40,146,240,64,223,21,71,182,244,103,213,179,238,191,90,255,156,39,83,192\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.886ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[4,129,78,32,112,183,142,139,87,65,48,74,23,193,193,40,48,164,103,144,182,124,233,81,200,76,199,44,190,61,55,35],[41,18,173,146,115,236,30,92,222,174,164,98,55,5,86,48,30,182,111,23,68,35,175,51,87,171,146,175,105,17,88,251],[96,223,57,177,72,11,38,183,138,93,185,34,0,114,222,174,193,226,70,127,248,75,54,4,54,24,211,141,94,36,150,232],[214,51,151,142,114,147,34,84,194,245,128,197,69,156,126,144,91,90,66,97,22,206,119,65,238,28,118,18,98,203,36,124],[216,122,163,74,104,213,234,85,200,109,7,165,87,146,186,7,132,192,55,121,242,156,74,113,54,177,95,207,104,225,127,146]]",
              "sol": "[bytes(abi.encode(\"4,129,78,32,112,183,142,139,87,65,48,74,23,193,193,40,48,164,103,144,182,124,233,81,200,76,199,44,190,61,55,35\")),bytes(abi.encode(\"41,18,173,146,115,236,30,92,222,174,164,98,55,5,86,48,30,182,111,23,68,35,175,51,87,171,146,175,105,17,88,251\")),bytes(abi.encode(\"96,223,57,177,72,11,38,183,138,93,185,34,0,114,222,174,193,226,70,127,248,75,54,4,54,24,211,141,94,36,150,232\")),bytes(abi.encode(\"214,51,151,142,114,147,34,84,194,245,128,197,69,156,126,144,91,90,66,97,22,206,119,65,238,28,118,18,98,203,36,124\")),bytes(abi.encode(\"216,122,163,74,104,213,234,85,200,109,7,165,87,146,186,7,132,192,55,121,242,156,74,113,54,177,95,207,104,225,127,146\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.888ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[[34,170,119,138,215,0,112,144,214,98,55,223,122,71,127,99,80,249,124,66,89,237,190,8,120,28,117,222,225,50,242,144]]",
              "sol": "[bytes(abi.encode(\"34,170,119,138,215,0,112,144,214,98,55,223,122,71,127,99,80,249,124,66,89,237,190,8,120,28,117,222,225,50,242,144\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.888ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"cy1m3\"",
              "sol": "\"cy1m3\""
            },
            {
              "js": "[[25,202,180,5,240,177,189,95,174,200,13,31,221,152,114,89,250,135,238,77,195,225,203,73,117,118,37,89,214,168,43,103]]",
              "sol": "[bytes(abi.encode(\"25,202,180,5,240,177,189,95,174,200,13,31,221,152,114,89,250,135,238,77,195,225,203,73,117,118,37,89,214,168,43,103\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.889ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[[139,78,151,115,107,78,188,186,7,37,33,20,88,41,150,241,6,120,179,156,104,231,229,217,85,106,126,218,65,99,55,179]]",
              "sol": "[bytes(abi.encode(\"139,78,151,115,107,78,188,186,7,37,33,20,88,41,150,241,6,120,179,156,104,231,229,217,85,106,126,218,65,99,55,179\"))]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.890ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "[[123,150,170,31,27,206,156,123,44,248,173,0,30,215,79,8,199,203,24,65,214,69,235,112,197,242,137,87,79,127,50,41]]",
              "sol": "[bytes(abi.encode(\"123,150,170,31,27,206,156,123,44,248,173,0,30,215,79,8,199,203,24,65,214,69,235,112,197,242,137,87,79,127,50,41\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.891ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[[235,242,67,10,205,10,161,16,48,229,200,214,40,23,85,183,14,128,229,76,175,175,201,253,32,80,21,25,20,134,229,129],[117,69,122,208,11,207,126,109,132,36,74,156,97,90,163,234,239,74,217,5,150,25,227,103,157,107,97,248,118,34,50,63]]",
              "sol": "[bytes(abi.encode(\"235,242,67,10,205,10,161,16,48,229,200,214,40,23,85,183,14,128,229,76,175,175,201,253,32,80,21,25,20,134,229,129\")),bytes(abi.encode(\"117,69,122,208,11,207,126,109,132,36,74,156,97,90,163,234,239,74,217,5,150,25,227,103,157,107,97,248,118,34,50,63\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.892ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "[[47,180,98,99,154,94,50,211,89,8,58,212,122,149,48,177,47,158,217,196,147,62,97,122,14,20,232,76,201,231,96,29],[71,244,159,219,58,150,246,192,59,155,164,53,233,182,185,3,108,245,84,165,156,99,119,164,159,175,61,63,141,123,46,196]]",
              "sol": "[bytes(abi.encode(\"47,180,98,99,154,94,50,211,89,8,58,212,122,149,48,177,47,158,217,196,147,62,97,122,14,20,232,76,201,231,96,29\")),bytes(abi.encode(\"71,244,159,219,58,150,246,192,59,155,164,53,233,182,185,3,108,245,84,165,156,99,119,164,159,175,61,63,141,123,46,196\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.894ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "[[92,27,217,127,83,177,210,253,182,180,178,72,74,236,42,241,52,120,188,15,245,140,101,69,68,58,36,15,38,229,3,237],[81,195,58,139,98,51,163,214,178,157,87,30,128,86,1,242,13,198,128,122,172,218,65,143,34,214,204,159,106,160,44,251]]",
              "sol": "[bytes(abi.encode(\"92,27,217,127,83,177,210,253,182,180,178,72,74,236,42,241,52,120,188,15,245,140,101,69,68,58,36,15,38,229,3,237\")),bytes(abi.encode(\"81,195,58,139,98,51,163,214,178,157,87,30,128,86,1,242,13,198,128,122,172,218,65,143,34,214,204,159,106,160,44,251\"))]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.895ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"lj69uj\"",
              "sol": "\"lj69uj\""
            },
            {
              "js": "[[145,102,47,214,177,145,110,139,89,5,235,72,205,9,177,91,33,13,206,91,180,150,122,235,35,245,118,15,25,197,185,48],[147,221,246,116,221,154,94,132,104,58,219,223,215,133,126,229,203,33,81,181,38,250,238,43,102,188,252,167,107,57,67,250]]",
              "sol": "[bytes(abi.encode(\"145,102,47,214,177,145,110,139,89,5,235,72,205,9,177,91,33,13,206,91,180,150,122,235,35,245,118,15,25,197,185,48\")),bytes(abi.encode(\"147,221,246,116,221,154,94,132,104,58,219,223,215,133,126,229,203,33,81,181,38,250,238,43,102,188,252,167,107,57,67,250\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.896ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[167,121,240,65,93,219,154,58,90,114,38,164,154,48,188,76,173,32,149,122,16,156,58,13,209,193,18,221,6,93,218,112],[89,165,235,238,94,146,6,20,159,167,201,12,23,31,219,65,228,21,233,189,81,76,138,171,153,42,100,118,234,147,47,196],[30,47,22,229,144,246,243,15,205,23,200,25,204,241,209,119,253,127,211,164,64,81,198,228,181,117,0,100,91,25,116,94]]",
              "sol": "[bytes(abi.encode(\"167,121,240,65,93,219,154,58,90,114,38,164,154,48,188,76,173,32,149,122,16,156,58,13,209,193,18,221,6,93,218,112\")),bytes(abi.encode(\"89,165,235,238,94,146,6,20,159,167,201,12,23,31,219,65,228,21,233,189,81,76,138,171,153,42,100,118,234,147,47,196\")),bytes(abi.encode(\"30,47,22,229,144,246,243,15,205,23,200,25,204,241,209,119,253,127,211,164,64,81,198,228,181,117,0,100,91,25,116,94\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.897ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[5,176,34,166,127,28,103,225,137,111,105,66,16,25,201,246,82,67,1,84,19,78,49,170,3,208,149,145,36,152,1,61],[8,38,152,214,136,116,133,65,223,244,43,78,143,11,117,211,225,57,157,220,14,246,254,79,121,202,176,49,54,46,220,166],[170,162,177,55,166,125,63,168,202,133,108,187,138,161,71,160,246,24,62,250,78,12,31,103,115,74,80,39,59,215,75,29]]",
              "sol": "[bytes(abi.encode(\"5,176,34,166,127,28,103,225,137,111,105,66,16,25,201,246,82,67,1,84,19,78,49,170,3,208,149,145,36,152,1,61\")),bytes(abi.encode(\"8,38,152,214,136,116,133,65,223,244,43,78,143,11,117,211,225,57,157,220,14,246,254,79,121,202,176,49,54,46,220,166\")),bytes(abi.encode(\"170,162,177,55,166,125,63,168,202,133,108,187,138,161,71,160,246,24,62,250,78,12,31,103,115,74,80,39,59,215,75,29\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.898ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[146,117,121,205,246,253,109,68,63,229,111,174,160,92,192,166,207,44,226,108,115,19,160,30,175,123,18,20,50,70,224,231],[61,23,52,9,236,79,53,124,155,52,89,43,58,80,0,58,232,78,189,251,20,232,221,19,107,45,179,80,208,130,198,146],[218,152,71,62,34,168,115,65,192,201,193,10,238,23,142,136,195,209,188,11,57,66,20,13,65,46,163,209,244,118,124,82]]",
              "sol": "[bytes(abi.encode(\"146,117,121,205,246,253,109,68,63,229,111,174,160,92,192,166,207,44,226,108,115,19,160,30,175,123,18,20,50,70,224,231\")),bytes(abi.encode(\"61,23,52,9,236,79,53,124,155,52,89,43,58,80,0,58,232,78,189,251,20,232,221,19,107,45,179,80,208,130,198,146\")),bytes(abi.encode(\"218,152,71,62,34,168,115,65,192,201,193,10,238,23,142,136,195,209,188,11,57,66,20,13,65,46,163,209,244,118,124,82\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.899ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[[10,80,205,176,27,216,153,29,28,186,118,140,249,222,252,129,5,219,195,239,71,137,88,101,29,196,177,138,42,253,204,27],[101,70,160,81,113,245,86,8,7,27,254,52,48,139,17,102,161,225,248,54,8,212,90,79,206,149,144,7,25,44,231,42],[124,9,196,115,106,234,99,84,179,60,89,67,117,114,164,116,79,116,162,183,212,219,98,55,178,254,133,12,147,196,191,88]]",
              "sol": "[bytes(abi.encode(\"10,80,205,176,27,216,153,29,28,186,118,140,249,222,252,129,5,219,195,239,71,137,88,101,29,196,177,138,42,253,204,27\")),bytes(abi.encode(\"101,70,160,81,113,245,86,8,7,27,254,52,48,139,17,102,161,225,248,54,8,212,90,79,206,149,144,7,25,44,231,42\")),bytes(abi.encode(\"124,9,196,115,106,234,99,84,179,60,89,67,117,114,164,116,79,116,162,183,212,219,98,55,178,254,133,12,147,196,191,88\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.900ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"q301hp\"",
              "sol": "\"q301hp\""
            },
            {
              "js": "[[245,47,48,114,154,199,86,144,72,99,30,64,193,128,45,144,144,247,18,45,147,161,72,124,74,206,253,82,166,29,182,250],[220,180,151,134,49,52,71,186,211,85,142,231,77,76,109,29,240,149,136,251,45,233,252,200,133,59,215,222,16,220,179,170],[84,104,26,57,185,250,59,246,145,152,56,161,12,178,214,207,74,75,232,7,73,146,51,43,177,30,254,43,192,65,16,217],[179,254,191,248,133,147,74,20,0,39,214,95,119,89,66,0,89,107,89,92,216,6,76,26,91,145,108,217,166,122,116,233]]",
              "sol": "[bytes(abi.encode(\"245,47,48,114,154,199,86,144,72,99,30,64,193,128,45,144,144,247,18,45,147,161,72,124,74,206,253,82,166,29,182,250\")),bytes(abi.encode(\"220,180,151,134,49,52,71,186,211,85,142,231,77,76,109,29,240,149,136,251,45,233,252,200,133,59,215,222,16,220,179,170\")),bytes(abi.encode(\"84,104,26,57,185,250,59,246,145,152,56,161,12,178,214,207,74,75,232,7,73,146,51,43,177,30,254,43,192,65,16,217\")),bytes(abi.encode(\"179,254,191,248,133,147,74,20,0,39,214,95,119,89,66,0,89,107,89,92,216,6,76,26,91,145,108,217,166,122,116,233\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.900ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"ckjehc\"",
              "sol": "\"ckjehc\""
            },
            {
              "js": "[[204,47,30,58,42,216,28,241,112,65,97,21,55,206,130,101,4,215,249,5,73,202,249,82,193,51,173,191,19,187,146,134],[167,65,243,179,41,96,220,72,123,241,134,126,147,127,33,62,245,87,229,114,197,240,38,19,248,87,158,39,238,167,201,224],[71,78,236,243,181,127,162,154,206,215,178,74,210,162,136,58,64,171,53,28,212,220,82,150,100,35,58,145,67,61,59,89],[109,70,254,139,7,102,128,23,45,47,226,97,164,239,108,215,166,181,164,113,166,150,166,138,186,169,17,96,240,223,28,213]]",
              "sol": "[bytes(abi.encode(\"204,47,30,58,42,216,28,241,112,65,97,21,55,206,130,101,4,215,249,5,73,202,249,82,193,51,173,191,19,187,146,134\")),bytes(abi.encode(\"167,65,243,179,41,96,220,72,123,241,134,126,147,127,33,62,245,87,229,114,197,240,38,19,248,87,158,39,238,167,201,224\")),bytes(abi.encode(\"71,78,236,243,181,127,162,154,206,215,178,74,210,162,136,58,64,171,53,28,212,220,82,150,100,35,58,145,67,61,59,89\")),bytes(abi.encode(\"109,70,254,139,7,102,128,23,45,47,226,97,164,239,108,215,166,181,164,113,166,150,166,138,186,169,17,96,240,223,28,213\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.901ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "[[85,196,105,153,52,244,221,220,228,32,103,180,62,170,60,24,188,198,64,72,88,249,3,207,217,241,146,119,22,233,60,206],[73,9,170,78,75,65,203,198,172,172,131,102,62,129,99,15,125,250,128,35,138,134,248,30,150,89,72,99,180,14,74,203],[231,205,108,121,49,16,27,118,165,62,125,59,246,149,150,103,249,18,173,123,99,83,24,135,226,254,229,58,54,150,21,212],[85,253,160,217,100,227,8,214,173,64,149,233,133,84,216,30,32,144,60,13,38,131,188,97,192,203,233,45,59,43,228,36]]",
              "sol": "[bytes(abi.encode(\"85,196,105,153,52,244,221,220,228,32,103,180,62,170,60,24,188,198,64,72,88,249,3,207,217,241,146,119,22,233,60,206\")),bytes(abi.encode(\"73,9,170,78,75,65,203,198,172,172,131,102,62,129,99,15,125,250,128,35,138,134,248,30,150,89,72,99,180,14,74,203\")),bytes(abi.encode(\"231,205,108,121,49,16,27,118,165,62,125,59,246,149,150,103,249,18,173,123,99,83,24,135,226,254,229,58,54,150,21,212\")),bytes(abi.encode(\"85,253,160,217,100,227,8,214,173,64,149,233,133,84,216,30,32,144,60,13,38,131,188,97,192,203,233,45,59,43,228,36\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.902ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[[119,236,80,220,234,167,81,251,105,65,154,123,237,112,165,165,36,131,66,98,194,248,196,195,145,192,195,165,157,45,24,200],[207,40,50,103,149,4,251,229,183,82,218,232,109,81,171,126,140,214,21,206,243,198,130,187,89,143,123,4,26,197,12,134],[137,34,225,195,218,85,216,199,17,1,138,112,234,92,179,78,208,218,107,168,31,213,191,56,102,211,11,226,77,64,0,45],[216,171,155,144,72,75,89,45,53,16,88,91,190,196,80,130,33,255,8,187,52,112,212,176,97,101,227,7,24,191,165,178]]",
              "sol": "[bytes(abi.encode(\"119,236,80,220,234,167,81,251,105,65,154,123,237,112,165,165,36,131,66,98,194,248,196,195,145,192,195,165,157,45,24,200\")),bytes(abi.encode(\"207,40,50,103,149,4,251,229,183,82,218,232,109,81,171,126,140,214,21,206,243,198,130,187,89,143,123,4,26,197,12,134\")),bytes(abi.encode(\"137,34,225,195,218,85,216,199,17,1,138,112,234,92,179,78,208,218,107,168,31,213,191,56,102,211,11,226,77,64,0,45\")),bytes(abi.encode(\"216,171,155,144,72,75,89,45,53,16,88,91,190,196,80,130,33,255,8,187,52,112,212,176,97,101,227,7,24,191,165,178\"))]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.903ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[247,172,52,194,147,128,142,245,24,75,110,152,131,230,239,80,151,246,162,241,200,246,192,60,171,28,80,81,107,208,251,143],[209,99,180,197,9,203,199,100,1,93,119,214,122,247,80,52,119,89,163,114,226,240,79,72,244,91,59,109,212,222,62,106],[211,140,56,245,45,181,76,237,27,67,113,135,87,75,166,195,31,98,75,136,99,53,129,53,222,185,191,162,91,10,102,2],[210,72,241,138,4,247,171,7,151,65,196,234,243,25,225,215,47,197,47,46,94,72,219,166,69,48,47,119,117,171,74,107],[14,209,164,236,213,99,194,71,81,57,161,47,93,254,166,2,170,210,168,29,1,91,114,224,46,132,189,6,106,77,52,128]]",
              "sol": "[bytes(abi.encode(\"247,172,52,194,147,128,142,245,24,75,110,152,131,230,239,80,151,246,162,241,200,246,192,60,171,28,80,81,107,208,251,143\")),bytes(abi.encode(\"209,99,180,197,9,203,199,100,1,93,119,214,122,247,80,52,119,89,163,114,226,240,79,72,244,91,59,109,212,222,62,106\")),bytes(abi.encode(\"211,140,56,245,45,181,76,237,27,67,113,135,87,75,166,195,31,98,75,136,99,53,129,53,222,185,191,162,91,10,102,2\")),bytes(abi.encode(\"210,72,241,138,4,247,171,7,151,65,196,234,243,25,225,215,47,197,47,46,94,72,219,166,69,48,47,119,117,171,74,107\")),bytes(abi.encode(\"14,209,164,236,213,99,194,71,81,57,161,47,93,254,166,2,170,210,168,29,1,91,114,224,46,132,189,6,106,77,52,128\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.904ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "[[159,180,211,48,198,36,8,168,73,2,157,131,27,236,240,30,38,243,179,23,128,53,226,184,37,78,143,247,142,103,213,191],[105,186,33,190,69,68,163,118,28,209,164,25,53,185,244,39,231,122,174,42,13,177,148,166,200,204,113,47,152,220,135,126],[83,243,239,52,3,82,244,7,142,204,94,133,86,117,242,66,124,39,195,197,194,9,26,234,251,196,60,228,173,34,97,63],[192,152,28,65,163,7,209,59,59,144,55,207,109,192,132,41,18,6,12,212,158,210,155,199,35,233,216,103,231,46,110,39],[97,41,253,157,125,125,242,72,62,89,95,99,26,43,154,38,243,249,73,255,42,104,250,44,215,158,160,221,174,50,34,85]]",
              "sol": "[bytes(abi.encode(\"159,180,211,48,198,36,8,168,73,2,157,131,27,236,240,30,38,243,179,23,128,53,226,184,37,78,143,247,142,103,213,191\")),bytes(abi.encode(\"105,186,33,190,69,68,163,118,28,209,164,25,53,185,244,39,231,122,174,42,13,177,148,166,200,204,113,47,152,220,135,126\")),bytes(abi.encode(\"83,243,239,52,3,82,244,7,142,204,94,133,86,117,242,66,124,39,195,197,194,9,26,234,251,196,60,228,173,34,97,63\")),bytes(abi.encode(\"192,152,28,65,163,7,209,59,59,144,55,207,109,192,132,41,18,6,12,212,158,210,155,199,35,233,216,103,231,46,110,39\")),bytes(abi.encode(\"97,41,253,157,125,125,242,72,62,89,95,99,26,43,154,38,243,249,73,255,42,104,250,44,215,158,160,221,174,50,34,85\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.906ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "[[213,143,17,239,9,196,6,102,117,86,209,76,52,189,232,49,114,8,253,61,118,122,51,238,214,121,200,64,29,164,229,128],[8,91,211,122,25,147,38,136,48,13,48,117,159,59,18,91,138,240,80,78,202,163,169,103,41,48,98,93,206,142,158,53],[39,49,58,159,109,46,3,225,222,178,143,75,26,129,61,5,145,115,166,114,34,58,35,209,24,51,1,204,69,160,77,127],[87,136,123,88,201,132,135,50,198,52,43,193,166,198,172,147,46,255,44,151,152,208,59,110,126,98,232,207,151,13,121,203],[22,82,14,171,192,102,96,150,75,221,143,250,226,157,210,214,204,185,28,41,124,69,124,172,72,169,252,87,93,57,135,193]]",
              "sol": "[bytes(abi.encode(\"213,143,17,239,9,196,6,102,117,86,209,76,52,189,232,49,114,8,253,61,118,122,51,238,214,121,200,64,29,164,229,128\")),bytes(abi.encode(\"8,91,211,122,25,147,38,136,48,13,48,117,159,59,18,91,138,240,80,78,202,163,169,103,41,48,98,93,206,142,158,53\")),bytes(abi.encode(\"39,49,58,159,109,46,3,225,222,178,143,75,26,129,61,5,145,115,166,114,34,58,35,209,24,51,1,204,69,160,77,127\")),bytes(abi.encode(\"87,136,123,88,201,132,135,50,198,52,43,193,166,198,172,147,46,255,44,151,152,208,59,110,126,98,232,207,151,13,121,203\")),bytes(abi.encode(\"22,82,14,171,192,102,96,150,75,221,143,250,226,157,210,214,204,185,28,41,124,69,124,172,72,169,252,87,93,57,135,193\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.907ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[18,92,58,8,249,104,12,82,251,9,250,145,132,229,121,116,95,249,58,61,27,232,107,156,32,156,133,199,45,202,230,94],[47,115,232,138,248,97,68,204,242,120,122,35,34,241,89,23,125,151,57,17,177,82,43,212,80,175,161,131,126,22,195,25],[38,237,20,80,153,117,227,112,111,62,42,134,189,16,134,124,148,12,213,211,214,58,154,242,22,176,176,108,116,3,231,2],[3,213,236,205,111,13,193,5,73,100,90,88,67,168,26,0,105,89,178,247,176,130,27,200,178,94,194,246,178,115,74,253],[185,44,234,25,223,76,141,175,250,156,232,234,143,64,100,150,106,41,189,105,7,127,139,215,89,148,171,183,84,189,25,119]]",
              "sol": "[bytes(abi.encode(\"18,92,58,8,249,104,12,82,251,9,250,145,132,229,121,116,95,249,58,61,27,232,107,156,32,156,133,199,45,202,230,94\")),bytes(abi.encode(\"47,115,232,138,248,97,68,204,242,120,122,35,34,241,89,23,125,151,57,17,177,82,43,212,80,175,161,131,126,22,195,25\")),bytes(abi.encode(\"38,237,20,80,153,117,227,112,111,62,42,134,189,16,134,124,148,12,213,211,214,58,154,242,22,176,176,108,116,3,231,2\")),bytes(abi.encode(\"3,213,236,205,111,13,193,5,73,100,90,88,67,168,26,0,105,89,178,247,176,130,27,200,178,94,194,246,178,115,74,253\")),bytes(abi.encode(\"185,44,234,25,223,76,141,175,250,156,232,234,143,64,100,150,106,41,189,105,7,127,139,215,89,148,171,183,84,189,25,119\"))]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.909ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[147]",
              "sol": "bytes1(\"147\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.909ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.910ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.910ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.911ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.911ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.911ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.912ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.912ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.912ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"q301hp\"",
              "sol": "\"q301hp\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.913ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "\"k1s94t\"",
              "sol": "\"k1s94t\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.913ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "\"ETH\"",
              "sol": "\"ETH\""
            },
            {
              "js": "\"trade.totalPrice\"",
              "sol": "\"trade.totalPrice\""
            },
            {
              "js": "\"9xpxnv\"",
              "sol": "\"9xpxnv\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.913ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"cy1m3\"",
              "sol": "\"cy1m3\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.914ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"listingID arg\"",
              "sol": "\"listingID arg\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.914ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"updateEthPrice called\"",
              "sol": "\"updateEthPrice called\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.915ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"f79859\"",
              "sol": "\"f79859\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.916ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.917ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"lj69uj\",\"trade.totalPrice\",\"PayableExample\",\"RevertWithReason\",\"q301hp\",\"updateEthPrice called\",\"UsesExample\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"lj69uj\"),string(\"trade.totalPrice\"),string(\"PayableExample\"),string(\"RevertWithReason\"),string(\"q301hp\"),string(\"updateEthPrice called\"),string(\"UsesExample\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.917ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[209,15,255,115,154,200,175,198,91,61,139,232,99,137,236,150,232,232,155,108,236,3,195,139,160,7,212,7,60,187,247,99],[212,35,67,43,213,127,28,59,246,104,39,204,105,165,234,140,86,147,175,185,22,47,186,247,217,130,117,12,211,88,4,238],[130,247,172,222,121,38,225,172,157,5,2,162,104,193,205,134,123,123,12,49,221,81,6,45,230,112,208,127,202,202,83,113]]",
              "sol": "[bytes(abi.encode(\"209,15,255,115,154,200,175,198,91,61,139,232,99,137,236,150,232,232,155,108,236,3,195,139,160,7,212,7,60,187,247,99\")),bytes(abi.encode(\"212,35,67,43,213,127,28,59,246,104,39,204,105,165,234,140,86,147,175,185,22,47,186,247,217,130,117,12,211,88,4,238\")),bytes(abi.encode(\"130,247,172,222,121,38,225,172,157,5,2,162,104,193,205,134,123,123,12,49,221,81,6,45,230,112,208,127,202,202,83,113\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.918ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.918ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[109,12,105,147,162,80,111,90,196,162,119,159,63,154,10,191,144,22,214,109,43,131,44,13,213,96,197,83,81,89,87,45]",
              "sol": "stringToBytes32(\"109,12,105,147,162,80,111,90,196,162,119,159,63,154,10,191,144,22,214,109,43,131,44,13,213,96,197,83,81,89,87,45\")"
            },
            {
              "js": "[247,185,111,168,142,143,170,148,146,220,193,21,249,229,56,10,8,155,173,194,45,110,43,110,115,12,223,3,230,114,144,209]",
              "sol": "stringToBytes32(\"247,185,111,168,142,143,170,148,146,220,193,21,249,229,56,10,8,155,173,194,45,110,43,110,115,12,223,3,230,114,144,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.919ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[252,181,181,44,17,234,80,212,99,38,3,67,56,105,203,155,161,115,110,222,137,100,223,67,114,109,164,30,9,233,87,179]",
              "sol": "stringToBytes32(\"252,181,181,44,17,234,80,212,99,38,3,67,56,105,203,155,161,115,110,222,137,100,223,67,114,109,164,30,9,233,87,179\")"
            },
            {
              "js": "[75,181,124,105,17,184,23,131,67,176,32,249,151,126,64,175,186,204,228,61,18,18,96,62,191,75,110,114,122,155,79,255]",
              "sol": "abi.encode(\"75,181,124,105,17,184,23,131,67,176,32,249,151,126,64,175,186,204,228,61,18,18,96,62,191,75,110,114,122,155,79,255\")"
            },
            {
              "js": "[104,151,3,182,0,201,174,248,126,241,102,178,134,167,43,171,112,140,211,78,186,107,52,107,141,240,69,80,48,15,194,226]",
              "sol": "abi.encode(\"104,151,3,182,0,201,174,248,126,241,102,178,134,167,43,171,112,140,211,78,186,107,52,107,141,240,69,80,48,15,194,226\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.919ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[115,86,100,153,144,117,194,230,146,92,98,104,161,161,226,251,183,90,164,76,174,20,12,210,192,103,180,48,209,41,247,145]",
              "sol": "abi.encode(\"115,86,100,153,144,117,194,230,146,92,98,104,161,161,226,251,183,90,164,76,174,20,12,210,192,103,180,48,209,41,247,145\")"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[247,100,76,11,4,120,187,53,100,117,11,162,242,222,22,159,100,198,16,23,191,17,220,200,5,184,90,43,192,247,91,83]",
              "sol": "abi.encode(\"247,100,76,11,4,120,187,53,100,117,11,162,242,222,22,159,100,198,16,23,191,17,220,200,5,184,90,43,192,247,91,83\")"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.921ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[44,208,99,131,126,128,112,115,205,127,140,69,139,158,33,242,195,3,198,123,2,115,162,73,27,204,179,122,94,79,112,164]",
              "sol": "stringToBytes32(\"44,208,99,131,126,128,112,115,205,127,140,69,139,158,33,242,195,3,198,123,2,115,162,73,27,204,179,122,94,79,112,164\")"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "[57,51,178,211,152,199,28,103,114,67,224,135,110,155,239,233,114,141,97,220,90,101,229,57,114,235,9,23,206,149,9,9]",
              "sol": "abi.encode(\"57,51,178,211,152,199,28,103,114,67,224,135,110,155,239,233,114,141,97,220,90,101,229,57,114,235,9,23,206,149,9,9\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[65,236,110,50,152,24,197,184,211,84,43,159,5,172,114,170,88,34,140,107,47,14,39,156,237,55,62,56,244,122,139,159]",
              "sol": "stringToBytes32(\"65,236,110,50,152,24,197,184,211,84,43,159,5,172,114,170,88,34,140,107,47,14,39,156,237,55,62,56,244,122,139,159\")"
            },
            {
              "js": "\"costUSD\"",
              "sol": "\"costUSD\""
            },
            {
              "js": "[125,109,95,36,124,22,8,161,161,141,159,83,139,248,83,58,92,135,59,14,52,195,107,85,179,225,193,20,248,210,46,153]",
              "sol": "abi.encode(\"125,109,95,36,124,22,8,161,161,141,159,83,139,248,83,58,92,135,59,14,52,195,107,85,179,225,193,20,248,210,46,153\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.921ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[41,36,109,59,126,31,90,211,24,73,166,170,161,186,26,136,227,239,42,203,200,15,237,236,115,108,182,31,127,85,111,243]",
              "sol": "stringToBytes32(\"41,36,109,59,126,31,90,211,24,73,166,170,161,186,26,136,227,239,42,203,200,15,237,236,115,108,182,31,127,85,111,243\")"
            },
            {
              "js": "[37,76,208,108,204,161,13,104,74,69,66,173,111,46,31,14,92,170,215,196,68,185,27,25,183,47,139,255,221,217,83,176]",
              "sol": "abi.encode(\"37,76,208,108,204,161,13,104,74,69,66,173,111,46,31,14,92,170,215,196,68,185,27,25,183,47,139,255,221,217,83,176\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[41,36,109,59,126,31,90,211,24,73,166,170,161,186,26,136,227,239,42,203,200,15,237,236,115,108,182,31,127,85,111,243]",
                "sol": "stringToBytes32(\"41,36,109,59,126,31,90,211,24,73,166,170,161,186,26,136,227,239,42,203,200,15,237,236,115,108,182,31,127,85,111,243\")"
              },
              {
                "js": "[31,165,214,120,30,65,176,178,179,193,233,181,179,29,104,22,101,173,235,152,141,243,117,49,74,205,7,14,204,188,246,134,231]",
                "sol": "bytes33(\"31,165,214,120,30,65,176,178,179,193,233,181,179,29,104,22,101,173,235,152,141,243,117,49,74,205,7,14,204,188,246,134,231\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.922ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[188,126,125,93,29,230,203,228,241,80,251,130,150,243,102,244,159,44,58,196,194,21,71,34,126,104,191,218,144,73,212,170]",
              "sol": "abi.encode(\"188,126,125,93,29,230,203,228,241,80,251,130,150,243,102,244,159,44,58,196,194,21,71,34,126,104,191,218,144,73,212,170\")"
            },
            {
              "js": "[1,43,143,58,253,82,59,44,178,196,36,82,145,174,184,54,213,139,242,20,158,78,90,139,53,89,242,24,121,137,56,212]",
              "sol": "stringToBytes32(\"1,43,143,58,253,82,59,44,178,196,36,82,145,174,184,54,213,139,242,20,158,78,90,139,53,89,242,24,121,137,56,212\")"
            },
            {
              "js": "[184,197,232,96,184,58,26,212,158,236,240,6,69,124,201,184,161,88,227,78,21,165,80,12,154,104,192,132,70,68,129,173]",
              "sol": "abi.encode(\"184,197,232,96,184,58,26,212,158,236,240,6,69,124,201,184,161,88,227,78,21,165,80,12,154,104,192,132,70,68,129,173\")"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[37,227,12,246,229,144,124,91,64,209,237,206,164,187,119,69,243,187,177,54,92,148,55,106,241,237,168,207,115,133,177,253]",
              "sol": "abi.encode(\"37,227,12,246,229,144,124,91,64,209,237,206,164,187,119,69,243,187,177,54,92,148,55,106,241,237,168,207,115,133,177,253\")"
            },
            {
              "js": "[165,251,108,158,39,182,167,11,128,58,12,68,80,248,43,17,33,81,89,231,115,151,59,100,46,150,153,111,155,51,245,1]",
              "sol": "stringToBytes32(\"165,251,108,158,39,182,167,11,128,58,12,68,80,248,43,17,33,81,89,231,115,151,59,100,46,150,153,111,155,51,245,1\")"
            },
            {
              "js": "[46,149,13,237,100,132,110,1,90,76,48,57,178,127,174,152,199,92,16,77,160,15,30,164,93,117,12,73,147,72,30,10]",
              "sol": "abi.encode(\"46,149,13,237,100,132,110,1,90,76,48,57,178,127,174,152,199,92,16,77,160,15,30,164,93,117,12,73,147,72,30,10\")"
            },
            {
              "js": "\"cy1m3\"",
              "sol": "\"cy1m3\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[145,147,12,49,162,237,108,101,128,202,170,125,254,145,149,110,3,41,101,108,174,53,48,119,243,26,96,184,45,212,79,94]",
              "sol": "abi.encode(\"145,147,12,49,162,237,108,101,128,202,170,125,254,145,149,110,3,41,101,108,174,53,48,119,243,26,96,184,45,212,79,94\")"
            },
            {
              "js": "[69,173,19,242,187,87,67,251,211,113,111,137,115,46,147,130,244,170,204,179,51,201,36,51,78,77,205,4,218,185,6,97]",
              "sol": "stringToBytes32(\"69,173,19,242,187,87,67,251,211,113,111,137,115,46,147,130,244,170,204,179,51,201,36,51,78,77,205,4,218,185,6,97\")"
            },
            {
              "js": "[12,26,96,176,238,66,108,225,11,117,121,124,249,160,229,13,209,151,237,91,90,149,48,193,142,59,10,198,159,175,139,215]",
              "sol": "abi.encode(\"12,26,96,176,238,66,108,225,11,117,121,124,249,160,229,13,209,151,237,91,90,149,48,193,142,59,10,198,159,175,139,215\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[69,7,215,199,175,29,157,145,86,140,154,152,207,36,89,130,48,113,227,30,173,246,254,247,53,175,20,212,109,103,176,209]",
              "sol": "abi.encode(\"69,7,215,199,175,29,157,145,86,140,154,152,207,36,89,130,48,113,227,30,173,246,254,247,53,175,20,212,109,103,176,209\")"
            },
            {
              "js": "[132,30,239,158,208,6,190,217,29,104,249,15,189,85,132,15,95,62,196,140,192,45,20,4,63,251,0,213,198,121,71,54]",
              "sol": "stringToBytes32(\"132,30,239,158,208,6,190,217,29,104,249,15,189,85,132,15,95,62,196,140,192,45,20,4,63,251,0,213,198,121,71,54\")"
            },
            {
              "js": "[178,61,33,249,53,109,198,158,253,195,201,113,163,205,49,11,109,2,160,217,232,89,77,228,229,76,234,209,112,215,170,107]",
              "sol": "abi.encode(\"178,61,33,249,53,109,198,158,253,195,201,113,163,205,49,11,109,2,160,217,232,89,77,228,229,76,234,209,112,215,170,107\")"
            },
            {
              "js": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\"",
              "sol": "\"Oraclize query was NOT sent, please add some ETH to cover for the query fee!\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[232,218,102,30,172,66,61,172,74,18,21,109,68,200,70,158,85,249,103,133,217,248,95,23,83,31,50,107,243,147,156,45]",
              "sol": "abi.encode(\"232,218,102,30,172,66,61,172,74,18,21,109,68,200,70,158,85,249,103,133,217,248,95,23,83,31,50,107,243,147,156,45\")"
            },
            {
              "js": "[100,182,205,222,190,34,229,129,237,76,249,28,86,217,151,204,152,156,187,11,36,8,83,125,152,110,79,156,242,167,33,124]",
              "sol": "stringToBytes32(\"100,182,205,222,190,34,229,129,237,76,249,28,86,217,151,204,152,156,187,11,36,8,83,125,152,110,79,156,242,167,33,124\")"
            },
            {
              "js": "[96,149,72,228,91,79,68,208,144,78,49,54,128,86,192,183,73,179,82,66,156,51,121,94,142,186,12,21,103,82,101,113]",
              "sol": "abi.encode(\"96,149,72,228,91,79,68,208,144,78,49,54,128,86,192,183,73,179,82,66,156,51,121,94,142,186,12,21,103,82,101,113\")"
            },
            {
              "js": "\"ckjehc\"",
              "sol": "\"ckjehc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[103,220,200,172,33,4,155,24,160,202,144,46,106,215,16,38,138,137,57,24,196,196,95,120,129,45,11,25,117,80,121,131]",
              "sol": "abi.encode(\"103,220,200,172,33,4,155,24,160,202,144,46,106,215,16,38,138,137,57,24,196,196,95,120,129,45,11,25,117,80,121,131\")"
            },
            {
              "js": "[118,13,154,53,230,208,93,62,100,110,49,2,69,18,51,140,0,215,130,78,166,92,222,56,38,176,63,17,247,177,221,148]",
              "sol": "stringToBytes32(\"118,13,154,53,230,208,93,62,100,110,49,2,69,18,51,140,0,215,130,78,166,92,222,56,38,176,63,17,247,177,221,148\")"
            },
            {
              "js": "[169,111,216,175,121,251,94,210,123,73,125,95,168,214,178,127,137,140,217,220,179,138,16,0,252,192,140,62,80,254,189,123]",
              "sol": "abi.encode(\"169,111,216,175,121,251,94,210,123,73,125,95,168,214,178,127,137,140,217,220,179,138,16,0,252,192,140,62,80,254,189,123\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[29,219,255,239,70,239,180,151,55,166,244,90,25,184,77,242,65,235,193,196,137,104,29,165,247,39,40,172,197,116,207,14]",
              "sol": "abi.encode(\"29,219,255,239,70,239,180,151,55,166,244,90,25,184,77,242,65,235,193,196,137,104,29,165,247,39,40,172,197,116,207,14\")"
            },
            {
              "js": "[7,50,3,156,31,238,99,76,108,211,122,222,36,79,109,85,229,146,18,132,83,6,170,71,102,48,30,111,96,57,78,216]",
              "sol": "stringToBytes32(\"7,50,3,156,31,238,99,76,108,211,122,222,36,79,109,85,229,146,18,132,83,6,170,71,102,48,30,111,96,57,78,216\")"
            },
            {
              "js": "[203,100,222,143,32,140,152,110,130,2,69,93,55,21,3,163,47,169,126,134,67,104,151,8,178,202,171,12,121,227,209,131]",
              "sol": "abi.encode(\"203,100,222,143,32,140,152,110,130,2,69,93,55,21,3,163,47,169,126,134,67,104,151,8,178,202,171,12,121,227,209,131\")"
            },
            {
              "js": "\"ckjehc\"",
              "sol": "\"ckjehc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[196,30,246,187,218,102,208,171,82,139,57,166,102,245,120,172,253,90,213,225,5,93,19,233,116,129,60,115,42,72,251,144]",
              "sol": "abi.encode(\"196,30,246,187,218,102,208,171,82,139,57,166,102,245,120,172,253,90,213,225,5,93,19,233,116,129,60,115,42,72,251,144\")"
            },
            {
              "js": "[83,59,109,150,83,5,32,13,192,98,245,123,9,247,151,106,87,209,118,113,7,176,23,108,149,40,206,34,85,173,248,235]",
              "sol": "stringToBytes32(\"83,59,109,150,83,5,32,13,192,98,245,123,9,247,151,106,87,209,118,113,7,176,23,108,149,40,206,34,85,173,248,235\")"
            },
            {
              "js": "[143,61,202,249,36,153,13,146,209,170,211,88,179,23,223,254,234,36,157,219,104,168,20,123,59,125,154,167,239,128,69,180]",
              "sol": "abi.encode(\"143,61,202,249,36,153,13,146,209,170,211,88,179,23,223,254,234,36,157,219,104,168,20,123,59,125,154,167,239,128,69,180\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.928ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[232,180,125,121,39,42,241,76,126,224,50,184,147,246,128,229,110,62,151,219,178,226,23,45,46,101,127,82,102,13,246,207]",
              "sol": "abi.encode(\"232,180,125,121,39,42,241,76,126,224,50,184,147,246,128,229,110,62,151,219,178,226,23,45,46,101,127,82,102,13,246,207\")"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "[71,97,65,161,139,62,27,90,219,227,122,123,167,149,29,142,126,93,120,136,52,240,214,218,18,115,188,15,51,205,22,201]",
              "sol": "abi.encode(\"71,97,65,161,139,62,27,90,219,227,122,123,167,149,29,142,126,93,120,136,52,240,214,218,18,115,188,15,51,205,22,201\")"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.929ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[111,231,62,241,129,146,149,29,223,70,206,123,194,48,171,116,240,231,0,246,222,41,99,106,45,253,77,104,47,67,146,116]",
              "sol": "stringToBytes32(\"111,231,62,241,129,146,149,29,223,70,206,123,194,48,171,116,240,231,0,246,222,41,99,106,45,253,77,104,47,67,146,116\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "[204,207,136,180,50,52,111,130,184,146,214,54,81,54,150,182,84,239,117,93,124,115,193,81,159,161,9,57,104,0,61,158]",
              "sol": "stringToBytes32(\"204,207,136,180,50,52,111,130,184,146,214,54,81,54,150,182,84,239,117,93,124,115,193,81,159,161,9,57,104,0,61,158\")"
            },
            {
              "js": "[34,108,121,133,149,71,90,70,200,226,215,191,205,204,28,23,52,147,126,65,167,180,25,170,207,138,88,149,186,50,185,31]",
              "sol": "stringToBytes32(\"34,108,121,133,149,71,90,70,200,226,215,191,205,204,28,23,52,147,126,65,167,180,25,170,207,138,88,149,186,50,185,31\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.930ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[21,124,154,135,222,92,59,193,222,47,206,174,105,154,196,5,35,121,100,139,182,16,250,58,206,248,238,190,62,9,65,247]",
              "sol": "stringToBytes32(\"21,124,154,135,222,92,59,193,222,47,206,174,105,154,196,5,35,121,100,139,182,16,250,58,206,248,238,190,62,9,65,247\")"
            },
            {
              "js": "[232]",
              "sol": "abi.encode(\"232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[32,141,205,197,135,75,231,152,195,196,189,105,137,125,95,44,36,6,172,177,251,110,152,233,206,188,165,48,105,182,233,202]",
              "sol": "stringToBytes32(\"32,141,205,197,135,75,231,152,195,196,189,105,137,125,95,44,36,6,172,177,251,110,152,233,206,188,165,48,105,182,233,202\")"
            },
            {
              "js": "[88,202,140,61,186,4,97,179,213,17,153,68,39,137,97,242,75,8,27,2,200,171,147,19,3,234,204,226,97,0,141,53,245,224,104,36,23,22,25,194,80,154,15,197,220,231,216,182,144,38,217,144,214,93,29,56,248,64,218,119,48,192,6,119,143]",
              "sol": "abi.encode(\"88,202,140,61,186,4,97,179,213,17,153,68,39,137,97,242,75,8,27,2,200,171,147,19,3,234,204,226,97,0,141,53,245,224,104,36,23,22,25,194,80,154,15,197,220,231,216,182,144,38,217,144,214,93,29,56,248,64,218,119,48,192,6,119,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.931ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.933ZPublicSafeDecimalMath.unit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.933ZPublicSafeDecimalMath.preciseUnit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseUnit()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.933ZPublicSafeDecimalMath.multiplyDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimal(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.933ZPublicSafeDecimalMath.multiplyDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.934ZPublicSafeDecimalMath.multiplyDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute multiplyDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.934ZPublicSafeDecimalMath.divideDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimal(uint,uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.934ZPublicSafeDecimalMath.divideDecimalRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRound(uint,uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.934ZPublicSafeDecimalMath.divideDecimalRoundPrecise": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute divideDecimalRoundPrecise(uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.935ZPublicSafeDecimalMath.decimalToPreciseDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decimalToPreciseDecimal(uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.935ZPublicSafeDecimalMath.preciseDecimalToDecimal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute preciseDecimalToDecimal(uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.936ZMortal.setSelfDestructBeneficiary": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setSelfDestructBeneficiary(address) WHEN msg.sender==_owner,_beneficiary!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setSelfDestructBeneficiary(address) when NOT comply with: _beneficiary != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.937ZMortal.initiateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initiateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail initiateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.937ZMortal.terminateSelfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute terminateSelfDestruct() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail terminateSelfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.937ZMortal.selfDestruct": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute selfDestruct() WHEN msg.sender==_owner,selfDestructInitiated==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail selfDestruct() when NOT comply with: selfDestructInitiated == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.940ZPausable.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "36-38",
          "restrictions": [
            "_paused == paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "44-46",
          "restrictions": [
            "paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "paused != true",
            "_paused != paused"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN paused!=true,_paused!=paused,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.943ZETHPriceTicker.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[44,165,14,33,147,167,29,177,180,214,96,186,116,223,94,17,221,60,178,98,167,146,98,214,84,27,30,153,131,207,182,106]",
              "sol": "stringToBytes32(\"44,165,14,33,147,167,29,177,180,214,96,186,116,223,94,17,221,60,178,98,167,146,98,214,84,27,30,153,131,207,182,106\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[63,130,53,242,124,56,57,110,233,51,235,179,200,84,212,171,126,80,81,144,75,8,248,134,63,148,126,16,39,26,31,18]",
              "sol": "abi.encode(\"63,130,53,242,124,56,57,110,233,51,235,179,200,84,212,171,126,80,81,144,75,8,248,134,63,148,126,16,39,26,31,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.944ZETHPriceTicker.update": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute update()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.944ZState.setAssociatedContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setAssociatedContract(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setAssociatedContract(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.946ZProxy.setTarget": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setTarget(Proxyable) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractTokenExchange.address",
              "sol": "contractTokenExchange"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setTarget(Proxyable) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractTokenExchange.address",
                "sol": "contractTokenExchange"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.947ZProxy._emit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[22,123,255,83,160,73,235,62,237,14,113,212,114,32,85,53,138,180,10,29,121,64,118,141,246,193,240,161,232,114,75,232]",
              "sol": "abi.encode(\"22,123,255,83,160,73,235,62,237,14,113,212,114,32,85,53,138,180,10,29,121,64,118,141,246,193,240,161,232,114,75,232\")"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "[236,108,152,210,175,89,204,131,164,78,67,40,76,254,48,242,102,15,17,210,194,39,28,94,87,45,167,56,38,182,168,237]",
              "sol": "stringToBytes32(\"236,108,152,210,175,89,204,131,164,78,67,40,76,254,48,242,102,15,17,210,194,39,28,94,87,45,167,56,38,182,168,237\")"
            },
            {
              "js": "[37,27,114,164,128,96,87,76,181,197,69,2,137,41,207,12,187,63,193,229,175,110,137,114,214,223,69,49,164,140,201,57]",
              "sol": "stringToBytes32(\"37,27,114,164,128,96,87,76,181,197,69,2,137,41,207,12,187,63,193,229,175,110,137,114,214,223,69,49,164,140,201,57\")"
            },
            {
              "js": "[249,34,36,214,39,187,208,129,65,39,89,28,144,215,179,190,82,87,166,240,182,119,232,118,181,194,152,214,76,247,245,181]",
              "sol": "stringToBytes32(\"249,34,36,214,39,187,208,129,65,39,89,28,144,215,179,190,82,87,166,240,182,119,232,118,181,194,152,214,76,247,245,181\")"
            },
            {
              "js": "[99,17,63,74,191,20,220,200,9,149,175,61,143,3,126,80,242,1,54,78,192,101,48,252,165,181,39,135,147,138,156,42]",
              "sol": "stringToBytes32(\"99,17,63,74,191,20,220,200,9,149,175,61,143,3,126,80,242,1,54,78,192,101,48,252,165,181,39,135,147,138,156,42\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.947ZProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.948ZProxyable.setProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setProxy(address) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "contractProxy.address",
              "sol": "contractProxy.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setProxy(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractProxy.address",
                "sol": "contractProxy.address"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.949ZProxyable.setMessageSender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMessageSender(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.950ZTokenExchange.getTradeListingCount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeListingCount()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.950ZTokenExchange.getTradeList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeList()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.951ZTokenExchange.getTrade": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTrade(uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.951ZTokenExchange.createTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createTradeListing(uint,uint,address) WHEN paused!=true,amount>0,ethRate>0",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "contractShartCoin.address",
              "sol": "contractShartCoin.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "33",
                "sol": "33"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail createTradeListing(uint,uint,address) when NOT comply with: ethRate > 0",
            "parameters": [
              {
                "js": "33",
                "sol": "33"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractShartCoin.address",
                "sol": "contractShartCoin.address"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.954ZTokenExchange.withdrawMyDepositedTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawMyDepositedTokens(uint) WHEN paused!=true",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawMyDepositedTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.956ZTokenExchange.exchangeEtherForTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute exchangeEtherForTokens(uint) WHEN paused!=true,reentrancyLock!=true",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail exchangeEtherForTokens(uint) when NOT comply with: paused != true",
            "parameters": [
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:01:54.959ZTokenExchange.getTradeCostPriceInUSD": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTradeCostPriceInUSD(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.960ZTokenExchange.callOracle": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute callOracle()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.960ZTokenExchange.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute <unamed>()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:01:54.962ZProxyTokenExchange.testremoveTradeListing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testremoveTradeListing(uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}