,{
  "2020-11-11T00:24:11.378ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[21,148,89,247,245,37,198,80,121,116,42,226,210,41,34,178,148,51,227,82,139,245,143,239,72,73,65,200,233,56,79,216]",
              "sol": "abi.encode(\"21,148,89,247,245,37,198,80,121,116,42,226,210,41,34,178,148,51,227,82,139,245,143,239,72,73,65,200,233,56,79,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.379ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 257,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(257,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.380ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(31,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.380ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(33,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.381ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(0,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(20,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.382ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 1}",
              "sol": "RLPReader.RLPItem(34,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.383ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(1,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 256}",
                "sol": "RLPReader.RLPItem(2,256)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:24:11.384ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(21,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 31}",
                "sol": "RLPReader.RLPItem(22,31)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:24:11.384ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(31,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 2}",
                "sol": "RLPReader.RLPItem(0,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 2}",
                "sol": "RLPReader.RLPItem(34,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:24:11.385ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(33,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 256}",
                "sol": "RLPReader.RLPItem(34,256)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:24:11.385ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(22,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 0}",
                "sol": "RLPReader.RLPItem(0,0)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:24:11.386ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[245,210,138,107,165,161,222,204,196,16,231,86,167,81,90,25,20,92,79,120,147,141,3,19,196,155,240,222,224,177,119,40]",
              "sol": "abi.encode(\"245,210,138,107,165,161,222,204,196,16,231,86,167,81,90,25,20,92,79,120,147,141,3,19,196,155,240,222,224,177,119,40\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.387ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[43,186,8,97,243,80,21,37,255,13,14,119,201,226,184,95,82,75,14,113,250,234,26,216,36,127,36,193,34,194,133,114]",
              "sol": "abi.encode(\"43,186,8,97,243,80,21,37,255,13,14,119,201,226,184,95,82,75,14,113,250,234,26,216,36,127,36,193,34,194,133,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.388ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[181,180,122,220,191,194,79,225,7,219,137,222,124,218,153,56,81,14,168,86,138,181,249,63,153,135,192,176,126,193,97,30]",
              "sol": "abi.encode(\"181,180,122,220,191,194,79,225,7,219,137,222,124,218,153,56,81,14,168,86,138,181,249,63,153,135,192,176,126,193,97,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.388ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[12,85,171,248,244,120,51,248,170,240,119,55,124,110,231,106,100,37,85,223,121,67,244,80,168,96,76,20,203,208,242,161]",
              "sol": "abi.encode(\"12,85,171,248,244,120,51,248,170,240,119,55,124,110,231,106,100,37,85,223,121,67,244,80,168,96,76,20,203,208,242,161\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.388ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[233,152,89,205,0,4,170,208,193,40,225,92,47,206,225,35,134,254,86,33,151,214,91,231,208,195,229,40,84,218,56,219]",
              "sol": "abi.encode(\"233,152,89,205,0,4,170,208,193,40,225,92,47,206,225,35,134,254,86,33,151,214,91,231,208,195,229,40,84,218,56,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.388ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[128,185,29,240,130,74,123,108,247,8,160,124,243,57,29,131,22,200,224,229,231,162,81,189,120,63,246,235,102,128,152,216]",
              "sol": "abi.encode(\"128,185,29,240,130,74,123,108,247,8,160,124,243,57,29,131,22,200,224,229,231,162,81,189,120,63,246,235,102,128,152,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.389ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[136,203,126,204,243,98,210,31,180,100,30,59,49,230,42,84,175,139,10,227,208,37,58,195,220,250,105,46,8,57,238,107]",
              "sol": "abi.encode(\"136,203,126,204,243,98,210,31,180,100,30,59,49,230,42,84,175,139,10,227,208,37,58,195,220,250,105,46,8,57,238,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.389ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[133,220,32,127,39,151,36,64,49,117,216,58,255,29,203,34,194,3,151,207,191,76,104,233,133,54,213,98,50,82,193,229]",
              "sol": "abi.encode(\"133,220,32,127,39,151,36,64,49,117,216,58,255,29,203,34,194,3,151,207,191,76,104,233,133,54,213,98,50,82,193,229\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.389ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[132,54,195,53,28,167,172,112,114,213,140,47,150,147,58,228,141,209,208,205,56,13,235,193,64,181,13,187,19,62,109,134]",
              "sol": "abi.encode(\"132,54,195,53,28,167,172,112,114,213,140,47,150,147,58,228,141,209,208,205,56,13,235,193,64,181,13,187,19,62,109,134\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.390ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[206,75,150,93,191,224,143,32,12,217,198,14,42,238,140,53,205,241,44,230,159,167,176,69,150,11,148,98,138,101,199,232]",
              "sol": "abi.encode(\"206,75,150,93,191,224,143,32,12,217,198,14,42,238,140,53,205,241,44,230,159,167,176,69,150,11,148,98,138,101,199,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.390ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[173,179,116,50,194,80,89,79,146,148,30,209,250,223,100,226,168,8,76,159,174,188,27,101,3,102,161,244,81,193,173,208]",
              "sol": "abi.encode(\"173,179,116,50,194,80,89,79,146,148,30,209,250,223,100,226,168,8,76,159,174,188,27,101,3,102,161,244,81,193,173,208\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.390ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[225,86,143,243,2,88,155,202,47,173,220,140,183,139,83,90,23,153,226,154,26,244,191,117,251,239,106,113,58,45,192,237]",
              "sol": "abi.encode(\"225,86,143,243,2,88,155,202,47,173,220,140,183,139,83,90,23,153,226,154,26,244,191,117,251,239,106,113,58,45,192,237\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.390ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[245,75,253,178,8,168,188,53,44,86,15,223,14,195,219,89,114,154,205,106,137,24,43,226,218,177,41,40,87,237,215,163]",
              "sol": "abi.encode(\"245,75,253,178,8,168,188,53,44,86,15,223,14,195,219,89,114,154,205,106,137,24,43,226,218,177,41,40,87,237,215,163\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.391ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[204,238,154,141,187,179,142,212,46,134,254,229,246,86,18,215,198,98,19,98,238,100,169,175,45,23,253,228,153,247,130,67]",
              "sol": "abi.encode(\"204,238,154,141,187,179,142,212,46,134,254,229,246,86,18,215,198,98,19,98,238,100,169,175,45,23,253,228,153,247,130,67\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:24:11.391ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[54,92,158,28,227,43,173,76,141,231,142,219,85,116,244,67,47,151,153,58,210,181,251,247,26,177,32,96,230,213,165,128]",
              "sol": "abi.encode(\"54,92,158,28,227,43,173,76,141,231,142,219,85,116,244,67,47,151,153,58,210,181,251,247,26,177,32,96,230,213,165,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}