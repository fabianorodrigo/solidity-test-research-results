,{
  "2020-11-12T11:40:06.446ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[84,70,117,241,28,28,200,47,133,83,36,99,144,216,106,90,211,153,242,199,132,48,27,207,83,122,140,61,67,205,157,101]",
              "sol": "abi.encode(\"84,70,117,241,28,28,200,47,133,83,36,99,144,216,106,90,211,153,242,199,132,48,27,207,83,122,140,61,67,205,157,101\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.447ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 256,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(256,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.447ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 2,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(2,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.448ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(1,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.448ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(0,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(22,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.449ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(31,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.450ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(1,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 31}",
                "sol": "RLPReader.RLPItem(2,31)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:40:06.451ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(21,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 256}",
                "sol": "RLPReader.RLPItem(22,256)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:40:06.452ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 33}",
              "sol": "RLPReader.RLPItem(3,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 33}",
                "sol": "RLPReader.RLPItem(0,33)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 33}",
                "sol": "RLPReader.RLPItem(34,33)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:40:06.453ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(33,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 3}",
                "sol": "RLPReader.RLPItem(34,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:40:06.454ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(21,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 21}",
                "sol": "RLPReader.RLPItem(0,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:40:06.455ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[159,228,208,253,221,57,220,195,235,7,177,162,30,222,97,102,182,5,6,124,116,149,160,228,206,211,82,186,215,244,1,156]",
              "sol": "abi.encode(\"159,228,208,253,221,57,220,195,235,7,177,162,30,222,97,102,182,5,6,124,116,149,160,228,206,211,82,186,215,244,1,156\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.456ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[78,254,215,154,15,160,220,192,0,128,33,225,116,22,109,7,238,38,254,210,123,0,58,37,102,219,14,70,71,53,214,90]",
              "sol": "abi.encode(\"78,254,215,154,15,160,220,192,0,128,33,225,116,22,109,7,238,38,254,210,123,0,58,37,102,219,14,70,71,53,214,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.457ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[234,70,183,218,222,21,181,9,148,139,39,69,94,191,14,43,225,207,208,130,179,54,122,105,194,48,185,217,62,240,75,220]",
              "sol": "abi.encode(\"234,70,183,218,222,21,181,9,148,139,39,69,94,191,14,43,225,207,208,130,179,54,122,105,194,48,185,217,62,240,75,220\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.457ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[213,143,145,207,76,121,101,159,229,211,67,106,237,231,216,171,84,16,64,118,221,3,146,93,100,151,137,114,59,33,122,79]",
              "sol": "abi.encode(\"213,143,145,207,76,121,101,159,229,211,67,106,237,231,216,171,84,16,64,118,221,3,146,93,100,151,137,114,59,33,122,79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.457ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[119,229,63,11,171,194,36,54,247,67,64,242,183,182,238,3,108,109,95,249,4,253,74,34,60,37,179,158,228,88,51,255]",
              "sol": "abi.encode(\"119,229,63,11,171,194,36,54,247,67,64,242,183,182,238,3,108,109,95,249,4,253,74,34,60,37,179,158,228,88,51,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.458ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[214,200,138,179,93,245,55,197,249,29,75,130,120,223,48,247,152,226,225,21,2,216,19,139,114,66,43,45,113,116,231,216]",
              "sol": "abi.encode(\"214,200,138,179,93,245,55,197,249,29,75,130,120,223,48,247,152,226,225,21,2,216,19,139,114,66,43,45,113,116,231,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.458ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[162,81,14,74,87,190,136,66,177,124,14,146,45,225,92,60,208,210,141,79,18,19,149,137,111,177,106,251,243,247,178,189]",
              "sol": "abi.encode(\"162,81,14,74,87,190,136,66,177,124,14,146,45,225,92,60,208,210,141,79,18,19,149,137,111,177,106,251,243,247,178,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.458ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[3,158,43,65,238,192,189,200,163,93,4,36,251,223,160,167,188,89,206,23,197,119,118,112,140,63,104,36,64,16,106,227]",
              "sol": "abi.encode(\"3,158,43,65,238,192,189,200,163,93,4,36,251,223,160,167,188,89,206,23,197,119,118,112,140,63,104,36,64,16,106,227\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.459ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[230,211,78,247,15,200,32,66,96,18,242,223,148,231,109,127,76,46,172,197,85,223,20,181,195,96,2,29,156,13,230,25]",
              "sol": "abi.encode(\"230,211,78,247,15,200,32,66,96,18,242,223,148,231,109,127,76,46,172,197,85,223,20,181,195,96,2,29,156,13,230,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.459ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[211,204,25,9,76,255,209,68,96,6,15,34,230,106,140,181,156,151,58,154,59,36,121,37,76,56,128,34,249,136,240,192]",
              "sol": "abi.encode(\"211,204,25,9,76,255,209,68,96,6,15,34,230,106,140,181,156,151,58,154,59,36,121,37,76,56,128,34,249,136,240,192\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.459ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[55,247,218,119,0,78,149,65,211,64,36,191,245,138,241,217,232,107,254,58,234,187,191,104,132,135,200,63,22,24,16,57]",
              "sol": "abi.encode(\"55,247,218,119,0,78,149,65,211,64,36,191,245,138,241,217,232,107,254,58,234,187,191,104,132,135,200,63,22,24,16,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.459ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[233,49,207,130,11,114,201,158,232,34,79,252,225,126,118,118,54,123,198,237,107,175,4,204,82,64,150,14,141,78,246,202]",
              "sol": "abi.encode(\"233,49,207,130,11,114,201,158,232,34,79,252,225,126,118,118,54,123,198,237,107,175,4,204,82,64,150,14,141,78,246,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.460ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[143,224,113,242,140,133,60,70,118,26,81,71,143,130,70,195,21,47,85,0,88,137,106,15,186,167,62,6,2,67,174,155]",
              "sol": "abi.encode(\"143,224,113,242,140,133,60,70,118,26,81,71,143,130,70,195,21,47,85,0,88,137,106,15,186,167,62,6,2,67,174,155\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.460ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[145,87,155,213,4,158,188,102,122,20,81,196,220,111,15,40,42,209,118,84,211,186,25,179,246,112,117,62,163,188,123,150]",
              "sol": "abi.encode(\"145,87,155,213,4,158,188,102,122,20,81,196,220,111,15,40,42,209,118,84,211,186,25,179,246,112,117,62,163,188,123,150\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:40:06.460ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[251,173,147,166,20,70,97,195,160,79,189,227,203,62,150,235,245,12,109,66,90,39,8,233,55,252,102,69,181,25,65,38]",
              "sol": "abi.encode(\"251,173,147,166,20,70,97,195,160,79,189,227,203,62,150,235,245,12,109,66,90,39,8,233,55,252,102,69,181,25,65,38\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}