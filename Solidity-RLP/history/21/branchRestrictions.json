,{
  "2020-11-12T06:30:58.911ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[221,224,125,174,121,155,186,54,157,9,47,140,33,247,141,27,19,71,232,162,75,185,71,92,59,183,100,0,46,136,247,158]",
              "sol": "abi.encode(\"221,224,125,174,121,155,186,54,157,9,47,140,33,247,141,27,19,71,232,162,75,185,71,92,59,183,100,0,46,136,247,158\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.912ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(3,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.913ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(34,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.913ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(21,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.913ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(0,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(20,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.914ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(20,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.914ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(1,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 255}",
                "sol": "RLPReader.RLPItem(2,255)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:30:58.915ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(21,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 22}",
                "sol": "RLPReader.RLPItem(22,22)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:30:58.915ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 257}",
              "sol": "RLPReader.RLPItem(22,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 257}",
                "sol": "RLPReader.RLPItem(0,257)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 257}",
                "sol": "RLPReader.RLPItem(34,257)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:30:58.916ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(33,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 31}",
                "sol": "RLPReader.RLPItem(34,31)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:30:58.917ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(34,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 21}",
                "sol": "RLPReader.RLPItem(0,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:30:58.920ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[231,121,149,197,50,232,35,163,146,63,120,30,10,197,240,2,154,194,89,109,186,213,146,203,150,205,4,183,212,36,113,172]",
              "sol": "abi.encode(\"231,121,149,197,50,232,35,163,146,63,120,30,10,197,240,2,154,194,89,109,186,213,146,203,150,205,4,183,212,36,113,172\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.921ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[87,36,123,249,204,134,149,169,37,62,32,131,9,235,41,31,16,179,70,190,136,53,17,243,56,246,201,129,222,119,5,209]",
              "sol": "abi.encode(\"87,36,123,249,204,134,149,169,37,62,32,131,9,235,41,31,16,179,70,190,136,53,17,243,56,246,201,129,222,119,5,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.921ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[214,126,7,102,139,55,127,198,77,46,207,15,77,250,193,205,23,172,18,41,235,113,182,222,245,184,128,108,68,88,198,173]",
              "sol": "abi.encode(\"214,126,7,102,139,55,127,198,77,46,207,15,77,250,193,205,23,172,18,41,235,113,182,222,245,184,128,108,68,88,198,173\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.922ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[215,102,9,182,110,143,36,95,146,142,192,236,78,148,245,162,43,62,205,219,215,196,158,204,166,191,83,83,225,108,249,164]",
              "sol": "abi.encode(\"215,102,9,182,110,143,36,95,146,142,192,236,78,148,245,162,43,62,205,219,215,196,158,204,166,191,83,83,225,108,249,164\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.922ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[244,82,92,192,185,3,245,7,14,23,216,196,207,175,139,88,3,140,212,119,85,217,231,80,150,181,105,13,203,114,177,174]",
              "sol": "abi.encode(\"244,82,92,192,185,3,245,7,14,23,216,196,207,175,139,88,3,140,212,119,85,217,231,80,150,181,105,13,203,114,177,174\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.923ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[145,213,138,9,202,185,108,0,123,246,232,38,75,231,45,73,132,188,40,215,0,179,30,216,217,210,48,160,194,182,251,97]",
              "sol": "abi.encode(\"145,213,138,9,202,185,108,0,123,246,232,38,75,231,45,73,132,188,40,215,0,179,30,216,217,210,48,160,194,182,251,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.923ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[29,40,112,252,49,55,208,19,81,91,24,2,164,208,110,75,228,143,62,186,95,42,228,14,242,83,93,6,12,62,16,145]",
              "sol": "abi.encode(\"29,40,112,252,49,55,208,19,81,91,24,2,164,208,110,75,228,143,62,186,95,42,228,14,242,83,93,6,12,62,16,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.923ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[231,100,171,77,206,232,255,236,204,146,83,163,97,132,116,196,130,94,132,216,118,7,140,205,110,25,101,112,47,3,14,155]",
              "sol": "abi.encode(\"231,100,171,77,206,232,255,236,204,146,83,163,97,132,116,196,130,94,132,216,118,7,140,205,110,25,101,112,47,3,14,155\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.924ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[156,213,229,177,91,138,37,147,231,187,220,239,183,182,176,125,84,129,18,246,28,128,46,30,103,125,49,22,146,38,146,191]",
              "sol": "abi.encode(\"156,213,229,177,91,138,37,147,231,187,220,239,183,182,176,125,84,129,18,246,28,128,46,30,103,125,49,22,146,38,146,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.924ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[138,103,68,27,185,172,10,33,209,187,131,86,228,246,165,121,107,11,2,112,191,162,234,15,143,118,129,243,167,203,237,76]",
              "sol": "abi.encode(\"138,103,68,27,185,172,10,33,209,187,131,86,228,246,165,121,107,11,2,112,191,162,234,15,143,118,129,243,167,203,237,76\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.925ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[172,163,167,46,103,87,230,198,2,12,104,181,191,138,228,44,129,181,190,100,190,215,83,120,145,6,24,11,33,164,0,32]",
              "sol": "abi.encode(\"172,163,167,46,103,87,230,198,2,12,104,181,191,138,228,44,129,181,190,100,190,215,83,120,145,6,24,11,33,164,0,32\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.925ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[111,126,241,36,78,93,90,145,48,21,76,166,157,195,151,100,28,231,77,121,152,105,76,41,164,240,57,238,213,167,124,112]",
              "sol": "abi.encode(\"111,126,241,36,78,93,90,145,48,21,76,166,157,195,151,100,28,231,77,121,152,105,76,41,164,240,57,238,213,167,124,112\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.925ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[30,30,233,159,203,15,18,43,31,194,223,180,128,83,247,190,189,114,38,224,125,0,31,217,66,105,51,34,89,225,93,113]",
              "sol": "abi.encode(\"30,30,233,159,203,15,18,43,31,194,223,180,128,83,247,190,189,114,38,224,125,0,31,217,66,105,51,34,89,225,93,113\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.926ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[252,143,212,49,117,188,46,103,254,153,173,238,126,75,60,252,210,219,213,123,220,16,136,161,201,88,225,119,231,109,187,156]",
              "sol": "abi.encode(\"252,143,212,49,117,188,46,103,254,153,173,238,126,75,60,252,210,219,213,123,220,16,136,161,201,88,225,119,231,109,187,156\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:30:58.926ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[160,189,60,143,199,253,112,222,241,47,44,104,52,235,239,193,40,252,36,131,78,251,252,174,56,110,150,248,42,133,40,212]",
              "sol": "abi.encode(\"160,189,60,143,199,253,112,222,241,47,44,104,52,235,239,193,40,252,36,131,78,251,252,174,56,110,150,248,42,133,40,212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}