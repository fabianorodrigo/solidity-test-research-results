{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Solidity-RLP',
  contracts:
   { Helper:
      { projectGraph: [Circular],
        name: 'Helper',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isList:
            [ { name: 'isList',
                signature: 'isList(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           itemLength:
            [ { name: 'itemLength',
                signature: 'itemLength(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           rlpLen:
            [ { name: 'rlpLen',
                signature: 'rlpLen(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payloadLen:
            [ { name: 'payloadLen',
                signature: 'payloadLen(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           numItems:
            [ { name: 'numItems',
                signature: 'numItems(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toRlpBytes:
            [ { name: 'toRlpBytes',
                signature: 'toRlpBytes(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toBytes:
            [ { name: 'toBytes',
                signature: 'toBytes(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toUint:
            [ { name: 'toUint',
                signature: 'toUint(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toUintStrict:
            [ { name: 'toUintStrict',
                signature: 'toUintStrict(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toAddress:
            [ { name: 'toAddress',
                signature: 'toAddress(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toBoolean:
            [ { name: 'toBoolean',
                signature: 'toBoolean(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           bytesToString:
            [ { name: 'bytesToString',
                signature: 'bytesToString(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           customDestructure:
            [ { name: 'customDestructure',
                signature: 'customDestructure(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           customNestedDestructure:
            [ { name: 'customNestedDestructure',
                signature: 'customNestedDestructure(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           customNestedToRlpBytes:
            [ { name: 'customNestedToRlpBytes',
                signature: 'customNestedToRlpBytes(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _itemLength:
            [ { name: '_itemLength',
                signature: '_itemLength(uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { STRING_SHORT_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'STRING_SHORT_START',
              isArray: false,
              initialValue: 128,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           STRING_LONG_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'STRING_LONG_START',
              isArray: false,
              initialValue: 184,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           LIST_SHORT_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'LIST_SHORT_START',
              isArray: false,
              initialValue: 192,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           LIST_LONG_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'LIST_LONG_START',
              isArray: false,
              initialValue: 248,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { RLPReader:
            { projectGraph: [Circular],
              name: 'RLPReader',
              kind: 'library',
              isAbstract: false,
              functions:
               { toRlpItem: [Array],
                 rlpLen: [Array],
                 payloadLen: [Array],
                 toList: [Array],
                 isList: [Array],
                 toRlpBytes: [Array],
                 toBoolean: [Array],
                 toAddress: [Array],
                 toUint: [Array],
                 toUintStrict: [Array],
                 toBytes: [Array],
                 numItems: [Array],
                 _itemLength: [Array],
                 _payloadOffset: [Array],
                 copy: [Array] },
              modifiers: {},
              stateVariables:
               { STRING_SHORT_START: [Object],
                 STRING_LONG_START: [Object],
                 LIST_SHORT_START: [Object],
                 LIST_LONG_START: [Object],
                 WORD_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: { RLPItem: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RLPReader',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Solidity-RLP/contracts/RLPReader.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Helper',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'RLPReader',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'RLPReader',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'RLPReader',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isList',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'itemLength',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rlpLen',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payloadLen',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'numItems',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toRlpBytes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toBytes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toUint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toUintStrict',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toBoolean',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'bytesToString',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'customDestructure',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'customNestedDestructure',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'customNestedToRlpBytes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_itemLength',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 138, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Solidity-RLP/contracts/Helper.sol' },
     RLPReader:
      { projectGraph: [Circular],
        name: 'RLPReader',
        kind: 'library',
        isAbstract: false,
        functions:
         { toRlpItem:
            [ { name: 'toRlpItem',
                signature: 'toRlpItem(bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           rlpLen:
            [ { name: 'rlpLen',
                signature: 'rlpLen(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payloadLen:
            [ { name: 'payloadLen',
                signature: 'payloadLen(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toList:
            [ { name: 'toList',
                signature: 'toList(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isList:
            [ { name: 'isList',
                signature: 'isList(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toRlpBytes:
            [ { name: 'toRlpBytes',
                signature: 'toRlpBytes(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           toBoolean:
            [ { name: 'toBoolean',
                signature: 'toBoolean(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toAddress:
            [ { name: 'toAddress',
                signature: 'toAddress(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toUint:
            [ { name: 'toUint',
                signature: 'toUint(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toUintStrict:
            [ { name: 'toUintStrict',
                signature: 'toUintStrict(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toBytes:
            [ { name: 'toBytes',
                signature: 'toBytes(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           numItems:
            [ { name: 'numItems',
                signature: 'numItems(RLPReader.RLPItem)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _itemLength:
            [ { name: '_itemLength',
                signature: '_itemLength(uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _payloadOffset:
            [ { name: '_payloadOffset',
                signature: '_payloadOffset(uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           copy:
            [ { name: 'copy',
                signature: 'copy(uint,uint,uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { STRING_SHORT_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'STRING_SHORT_START',
              isArray: false,
              initialValue: 128,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           STRING_LONG_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'STRING_LONG_START',
              isArray: false,
              initialValue: 184,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           LIST_SHORT_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'LIST_SHORT_START',
              isArray: false,
              initialValue: 192,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           LIST_LONG_START:
            { functionsWrite: {},
              contract: [Circular],
              name: 'LIST_LONG_START',
              isArray: false,
              initialValue: 248,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           WORD_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'WORD_SIZE',
              isArray: false,
              initialValue: 32,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs:
         { RLPItem:
            { name: 'RLPItem',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RLPReader',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'RLPItem',
                members: [Array],
                loc: [Object],
                parentName: 'RLPReader' },
              { type: 'FunctionDefinition',
                name: 'toRlpItem',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rlpLen',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payloadLen',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toList',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isList',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toRlpBytes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toBoolean',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toUint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toUintStrict',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toBytes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'numItems',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_itemLength',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_payloadOffset',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'copy',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 265, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Solidity-RLP/contracts/RLPReader.sol' } },
  structs:
   { RLPItem:
      { name: 'RLPItem',
        contract:
         { projectGraph: [Circular],
           name: 'RLPReader',
           kind: 'library',
           isAbstract: false,
           functions:
            { toRlpItem: [ [Object] ],
              rlpLen: [ [Object] ],
              payloadLen: [ [Object] ],
              toList: [ [Object] ],
              isList: [ [Object] ],
              toRlpBytes: [ [Object] ],
              toBoolean: [ [Object] ],
              toAddress: [ [Object] ],
              toUint: [ [Object] ],
              toUintStrict: [ [Object] ],
              toBytes: [ [Object] ],
              numItems: [ [Object] ],
              _itemLength: [ [Object] ],
              _payloadOffset: [ [Object] ],
              copy: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { STRING_SHORT_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'STRING_SHORT_START',
                 isArray: false,
                 initialValue: 128,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              STRING_LONG_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'STRING_LONG_START',
                 isArray: false,
                 initialValue: 184,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              LIST_SHORT_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'LIST_SHORT_START',
                 isArray: false,
                 initialValue: 192,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              LIST_LONG_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'LIST_LONG_START',
                 isArray: false,
                 initialValue: 248,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              WORD_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'WORD_SIZE',
                 isArray: false,
                 initialValue: 32,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs: { RLPItem: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RLPReader',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Solidity-RLP/contracts/RLPReader.sol' },
        parameters:
         [ { name: 'len',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'memPtr',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'RLPReader.RLPItem':
      { name: 'RLPItem',
        contract:
         { projectGraph: [Circular],
           name: 'RLPReader',
           kind: 'library',
           isAbstract: false,
           functions:
            { toRlpItem: [ [Object] ],
              rlpLen: [ [Object] ],
              payloadLen: [ [Object] ],
              toList: [ [Object] ],
              isList: [ [Object] ],
              toRlpBytes: [ [Object] ],
              toBoolean: [ [Object] ],
              toAddress: [ [Object] ],
              toUint: [ [Object] ],
              toUintStrict: [ [Object] ],
              toBytes: [ [Object] ],
              numItems: [ [Object] ],
              _itemLength: [ [Object] ],
              _payloadOffset: [ [Object] ],
              copy: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { STRING_SHORT_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'STRING_SHORT_START',
                 isArray: false,
                 initialValue: 128,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              STRING_LONG_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'STRING_LONG_START',
                 isArray: false,
                 initialValue: 184,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              LIST_SHORT_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'LIST_SHORT_START',
                 isArray: false,
                 initialValue: 192,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              LIST_LONG_START:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'LIST_LONG_START',
                 isArray: false,
                 initialValue: 248,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              WORD_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'WORD_SIZE',
                 isArray: false,
                 initialValue: 32,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs: { RLPItem: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RLPReader',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Solidity-RLP/contracts/RLPReader.sol' },
        parameters:
         [ { name: 'len',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'memPtr',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums: {} }