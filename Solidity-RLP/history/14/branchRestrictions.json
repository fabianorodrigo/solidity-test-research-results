,{
  "2020-11-11T15:01:31.422ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[245,13,238,222,129,172,91,77,35,202,18,249,117,164,145,144,236,53,119,251,196,141,221,104,39,161,151,234,252,233,12,175]",
              "sol": "abi.encode(\"245,13,238,222,129,172,91,77,35,202,18,249,117,164,145,144,236,53,119,251,196,141,221,104,39,161,151,234,252,233,12,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.423ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(32,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.423ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 257,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(257,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.424ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(20,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.424ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 256}",
              "sol": "RLPReader.RLPItem(0,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(31,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.425ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 1}",
              "sol": "RLPReader.RLPItem(3,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.425ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(1,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 255}",
                "sol": "RLPReader.RLPItem(2,255)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:01:31.426ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(21,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 2}",
                "sol": "RLPReader.RLPItem(22,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:01:31.426ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(33,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 21}",
                "sol": "RLPReader.RLPItem(0,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 21}",
                "sol": "RLPReader.RLPItem(34,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:01:31.427ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(33,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 32}",
                "sol": "RLPReader.RLPItem(34,32)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:01:31.428ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(3,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 3}",
                "sol": "RLPReader.RLPItem(0,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:01:31.429ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[186,176,119,100,156,172,212,179,182,169,39,31,38,213,113,224,2,232,120,130,102,183,210,40,5,129,189,166,118,53,131,151]",
              "sol": "abi.encode(\"186,176,119,100,156,172,212,179,182,169,39,31,38,213,113,224,2,232,120,130,102,183,210,40,5,129,189,166,118,53,131,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.429ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[225,213,155,58,179,217,152,152,237,224,129,216,149,75,234,243,88,33,65,157,6,54,239,141,205,180,46,193,171,48,28,119]",
              "sol": "abi.encode(\"225,213,155,58,179,217,152,152,237,224,129,216,149,75,234,243,88,33,65,157,6,54,239,141,205,180,46,193,171,48,28,119\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.429ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[227,18,222,188,222,201,125,139,19,87,160,115,49,40,74,163,129,118,251,114,56,203,252,133,96,22,139,148,226,162,30,177]",
              "sol": "abi.encode(\"227,18,222,188,222,201,125,139,19,87,160,115,49,40,74,163,129,118,251,114,56,203,252,133,96,22,139,148,226,162,30,177\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.430ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[211,116,91,120,120,212,84,163,75,226,70,164,205,3,249,86,210,241,127,28,250,187,243,32,71,140,253,166,14,28,91,5]",
              "sol": "abi.encode(\"211,116,91,120,120,212,84,163,75,226,70,164,205,3,249,86,210,241,127,28,250,187,243,32,71,140,253,166,14,28,91,5\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.430ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[97,145,173,161,203,196,96,135,8,171,123,117,107,213,35,222,4,242,34,255,76,215,81,168,126,19,216,45,161,63,205,209]",
              "sol": "abi.encode(\"97,145,173,161,203,196,96,135,8,171,123,117,107,213,35,222,4,242,34,255,76,215,81,168,126,19,216,45,161,63,205,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.430ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[111,171,207,5,114,129,12,54,39,230,14,81,230,35,77,187,113,176,56,108,5,242,188,55,37,108,110,252,249,76,224,155]",
              "sol": "abi.encode(\"111,171,207,5,114,129,12,54,39,230,14,81,230,35,77,187,113,176,56,108,5,242,188,55,37,108,110,252,249,76,224,155\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.430ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[84,171,233,248,245,223,33,48,62,168,83,217,21,75,32,240,2,134,79,232,28,29,112,30,202,48,170,251,221,242,175,98]",
              "sol": "abi.encode(\"84,171,233,248,245,223,33,48,62,168,83,217,21,75,32,240,2,134,79,232,28,29,112,30,202,48,170,251,221,242,175,98\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.431ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[165,237,182,106,247,4,23,156,1,106,244,49,172,217,194,211,140,190,86,189,187,29,170,72,171,83,83,123,23,184,204,6]",
              "sol": "abi.encode(\"165,237,182,106,247,4,23,156,1,106,244,49,172,217,194,211,140,190,86,189,187,29,170,72,171,83,83,123,23,184,204,6\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.431ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[153,23,132,77,101,135,8,42,49,184,141,185,80,45,70,13,7,217,143,62,4,69,169,47,164,119,32,29,22,203,9,152]",
              "sol": "abi.encode(\"153,23,132,77,101,135,8,42,49,184,141,185,80,45,70,13,7,217,143,62,4,69,169,47,164,119,32,29,22,203,9,152\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.431ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[141,145,93,60,145,213,187,204,44,162,165,181,181,169,26,18,26,37,47,78,85,99,16,80,220,84,237,104,203,59,14,67]",
              "sol": "abi.encode(\"141,145,93,60,145,213,187,204,44,162,165,181,181,169,26,18,26,37,47,78,85,99,16,80,220,84,237,104,203,59,14,67\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.431ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[223,193,12,56,133,44,17,12,194,93,89,246,215,54,127,228,86,108,215,116,22,104,231,1,252,60,143,29,68,21,150,186]",
              "sol": "abi.encode(\"223,193,12,56,133,44,17,12,194,93,89,246,215,54,127,228,86,108,215,116,22,104,231,1,252,60,143,29,68,21,150,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.432ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[209,254,37,113,6,113,118,49,162,63,171,244,116,246,72,211,89,106,199,79,169,127,168,77,192,142,56,44,178,60,231,173]",
              "sol": "abi.encode(\"209,254,37,113,6,113,118,49,162,63,171,244,116,246,72,211,89,106,199,79,169,127,168,77,192,142,56,44,178,60,231,173\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.432ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[9,70,103,193,58,83,181,225,135,119,99,70,23,0,132,127,69,220,195,17,114,83,194,60,136,92,60,131,244,152,169,236]",
              "sol": "abi.encode(\"9,70,103,193,58,83,181,225,135,119,99,70,23,0,132,127,69,220,195,17,114,83,194,60,136,92,60,131,244,152,169,236\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.432ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[156,125,118,94,18,41,106,161,206,157,52,76,116,134,90,157,26,208,155,178,24,227,42,24,20,1,183,47,218,216,69,25]",
              "sol": "abi.encode(\"156,125,118,94,18,41,106,161,206,157,52,76,116,134,90,157,26,208,155,178,24,227,42,24,20,1,183,47,218,216,69,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:01:31.433ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[17,131,188,246,144,2,37,105,112,139,187,235,50,82,212,196,80,146,76,126,124,159,61,93,189,191,186,34,243,52,65,206]",
              "sol": "abi.encode(\"17,131,188,246,144,2,37,105,112,139,187,235,50,82,212,196,80,146,76,126,124,159,61,93,189,191,186,34,243,52,65,206\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}