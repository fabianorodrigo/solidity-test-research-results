,{
  "2020-11-13T01:00:39.619ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[132,118,201,200,45,143,151,185,37,146,236,148,238,198,53,32,87,188,127,63,98,157,95,138,155,13,146,145,247,84,104,121]",
              "sol": "abi.encode(\"132,118,201,200,45,143,151,185,37,146,236,148,238,198,53,32,87,188,127,63,98,157,95,138,155,13,146,145,247,84,104,121\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.620ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(32,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.620ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 20,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(20,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.620ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 255,\"memPtr\": 33}",
              "sol": "RLPReader.RLPItem(255,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.621ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(0,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(1,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.622ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(3,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.622ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(1,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 2}",
                "sol": "RLPReader.RLPItem(2,2)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:00:39.622ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(21,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 3}",
                "sol": "RLPReader.RLPItem(22,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:00:39.623ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(31,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 3}",
                "sol": "RLPReader.RLPItem(0,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 3}",
                "sol": "RLPReader.RLPItem(34,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:00:39.624ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(33,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 21}",
                "sol": "RLPReader.RLPItem(34,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:00:39.624ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 257}",
              "sol": "RLPReader.RLPItem(33,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 257}",
                "sol": "RLPReader.RLPItem(0,257)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:00:39.625ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[134,155,182,31,102,193,43,191,25,49,57,71,183,189,218,221,175,252,229,31,53,164,231,153,41,159,205,193,159,125,4,54]",
              "sol": "abi.encode(\"134,155,182,31,102,193,43,191,25,49,57,71,183,189,218,221,175,252,229,31,53,164,231,153,41,159,205,193,159,125,4,54\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.625ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[213,223,112,210,117,118,173,240,102,30,34,88,130,169,13,195,73,131,21,210,21,20,177,159,37,7,77,107,197,138,28,135]",
              "sol": "abi.encode(\"213,223,112,210,117,118,173,240,102,30,34,88,130,169,13,195,73,131,21,210,21,20,177,159,37,7,77,107,197,138,28,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.626ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[245,125,98,87,44,11,199,153,189,122,248,210,51,13,22,235,77,51,129,98,46,198,209,26,102,56,215,228,110,179,181,205]",
              "sol": "abi.encode(\"245,125,98,87,44,11,199,153,189,122,248,210,51,13,22,235,77,51,129,98,46,198,209,26,102,56,215,228,110,179,181,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.626ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[115,119,20,225,255,254,227,206,43,153,64,122,200,138,47,94,54,123,108,107,137,55,75,44,129,1,115,77,221,212,116,154]",
              "sol": "abi.encode(\"115,119,20,225,255,254,227,206,43,153,64,122,200,138,47,94,54,123,108,107,137,55,75,44,129,1,115,77,221,212,116,154\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.626ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[122,141,18,35,208,16,27,75,93,32,5,107,131,86,189,171,90,53,156,125,30,53,230,125,49,17,192,62,194,44,194,142]",
              "sol": "abi.encode(\"122,141,18,35,208,16,27,75,93,32,5,107,131,86,189,171,90,53,156,125,30,53,230,125,49,17,192,62,194,44,194,142\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.626ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[24,164,214,219,168,95,84,111,64,133,182,200,140,12,196,229,52,14,138,115,249,203,197,108,169,77,129,225,194,153,174,101]",
              "sol": "abi.encode(\"24,164,214,219,168,95,84,111,64,133,182,200,140,12,196,229,52,14,138,115,249,203,197,108,169,77,129,225,194,153,174,101\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.627ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[130,160,108,115,175,49,27,235,175,128,33,144,157,29,139,148,150,62,100,241,168,226,31,148,196,172,201,41,65,145,75,249]",
              "sol": "abi.encode(\"130,160,108,115,175,49,27,235,175,128,33,144,157,29,139,148,150,62,100,241,168,226,31,148,196,172,201,41,65,145,75,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.627ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[233,78,183,206,59,112,245,162,27,55,128,27,63,208,70,232,96,255,135,10,233,191,146,49,163,164,217,76,249,228,130,23]",
              "sol": "abi.encode(\"233,78,183,206,59,112,245,162,27,55,128,27,63,208,70,232,96,255,135,10,233,191,146,49,163,164,217,76,249,228,130,23\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.627ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[224,158,174,49,145,232,203,198,145,89,9,13,242,80,85,229,251,51,146,228,158,91,235,147,188,3,26,0,126,166,33,75]",
              "sol": "abi.encode(\"224,158,174,49,145,232,203,198,145,89,9,13,242,80,85,229,251,51,146,228,158,91,235,147,188,3,26,0,126,166,33,75\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.627ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[100,212,10,130,105,95,63,224,3,128,134,248,158,43,228,98,221,117,250,7,66,201,35,127,109,216,215,72,246,191,42,51]",
              "sol": "abi.encode(\"100,212,10,130,105,95,63,224,3,128,134,248,158,43,228,98,221,117,250,7,66,201,35,127,109,216,215,72,246,191,42,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.628ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[187,105,148,151,224,201,151,101,124,65,132,39,200,58,2,222,86,200,85,122,203,231,137,251,92,32,143,29,78,94,218,49]",
              "sol": "abi.encode(\"187,105,148,151,224,201,151,101,124,65,132,39,200,58,2,222,86,200,85,122,203,231,137,251,92,32,143,29,78,94,218,49\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.628ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[226,147,120,100,238,32,208,120,35,28,109,132,74,31,179,6,237,167,109,130,48,176,232,255,83,205,156,131,29,203,101,101]",
              "sol": "abi.encode(\"226,147,120,100,238,32,208,120,35,28,109,132,74,31,179,6,237,167,109,130,48,176,232,255,83,205,156,131,29,203,101,101\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.628ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[153,187,251,60,166,59,148,210,209,3,120,138,210,13,115,98,12,9,198,89,46,125,228,205,68,2,220,89,10,70,60,66]",
              "sol": "abi.encode(\"153,187,251,60,166,59,148,210,209,3,120,138,210,13,115,98,12,9,198,89,46,125,228,205,68,2,220,89,10,70,60,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.628ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[169,12,80,191,200,170,70,111,177,211,120,98,164,58,57,198,236,166,245,86,127,3,101,210,193,214,118,181,156,141,44,20]",
              "sol": "abi.encode(\"169,12,80,191,200,170,70,111,177,211,120,98,164,58,57,198,236,166,245,86,127,3,101,210,193,214,118,181,156,141,44,20\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:00:39.629ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[68,62,169,191,0,254,25,43,181,57,14,87,177,117,250,249,150,253,134,206,194,132,180,89,133,161,196,156,89,189,136,6]",
              "sol": "abi.encode(\"68,62,169,191,0,254,25,43,181,57,14,87,177,117,250,249,150,253,134,206,194,132,180,89,133,161,196,156,89,189,136,6\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}