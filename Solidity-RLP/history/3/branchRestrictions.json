,{
  "2020-11-10T08:50:17.651ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[57,127,123,33,152,86,214,242,232,92,28,74,136,9,76,144,188,100,28,4,185,250,54,2,218,239,179,105,147,234,179,100]",
              "sol": "abi.encode(\"57,127,123,33,152,86,214,242,232,92,28,74,136,9,76,144,188,100,28,4,185,250,54,2,218,239,179,105,147,234,179,100\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.651ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 257,\"memPtr\": 22}",
              "sol": "RLPReader.RLPItem(257,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.652ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(32,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.652ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 1}",
              "sol": "RLPReader.RLPItem(34,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.653ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 31}",
              "sol": "RLPReader.RLPItem(0,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 0}",
              "sol": "RLPReader.RLPItem(1,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.653ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 2,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(2,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.654ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(1,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 20}",
                "sol": "RLPReader.RLPItem(2,20)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T08:50:17.654ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 34}",
              "sol": "RLPReader.RLPItem(21,34)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 34}",
                "sol": "RLPReader.RLPItem(22,34)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T08:50:17.655ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 22,\"memPtr\": 1}",
              "sol": "RLPReader.RLPItem(22,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 1}",
                "sol": "RLPReader.RLPItem(0,1)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 1}",
                "sol": "RLPReader.RLPItem(34,1)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T08:50:17.655ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 34}",
              "sol": "RLPReader.RLPItem(33,34)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 34}",
                "sol": "RLPReader.RLPItem(34,34)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T08:50:17.656ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 32,\"memPtr\": 3}",
              "sol": "RLPReader.RLPItem(32,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 3}",
                "sol": "RLPReader.RLPItem(0,3)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T08:50:17.657ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[136,8,35,98,14,100,129,78,255,206,132,215,84,76,46,58,247,87,9,59,164,119,218,155,7,244,219,23,115,52,103,99]",
              "sol": "abi.encode(\"136,8,35,98,14,100,129,78,255,206,132,215,84,76,46,58,247,87,9,59,164,119,218,155,7,244,219,23,115,52,103,99\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.657ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[142,131,62,133,69,138,82,7,41,214,34,254,178,253,43,138,55,57,21,52,5,153,88,72,56,2,210,251,70,94,133,22]",
              "sol": "abi.encode(\"142,131,62,133,69,138,82,7,41,214,34,254,178,253,43,138,55,57,21,52,5,153,88,72,56,2,210,251,70,94,133,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.657ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[111,43,53,40,57,76,147,44,188,149,219,44,88,254,7,167,250,189,159,141,59,130,185,115,166,16,3,192,20,255,209,80]",
              "sol": "abi.encode(\"111,43,53,40,57,76,147,44,188,149,219,44,88,254,7,167,250,189,159,141,59,130,185,115,166,16,3,192,20,255,209,80\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.658ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[87,18,46,28,2,189,181,51,78,44,172,187,237,252,49,211,111,29,26,246,46,150,117,166,201,160,220,122,80,135,249,150]",
              "sol": "abi.encode(\"87,18,46,28,2,189,181,51,78,44,172,187,237,252,49,211,111,29,26,246,46,150,117,166,201,160,220,122,80,135,249,150\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.658ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[110,46,239,206,108,134,89,107,195,253,92,39,238,206,156,208,176,59,146,35,57,162,216,191,14,73,43,196,88,187,57,226]",
              "sol": "abi.encode(\"110,46,239,206,108,134,89,107,195,253,92,39,238,206,156,208,176,59,146,35,57,162,216,191,14,73,43,196,88,187,57,226\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.658ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[99,173,59,79,149,56,169,227,249,191,153,168,209,45,17,56,238,41,77,15,180,209,81,218,226,79,26,142,71,235,224,118]",
              "sol": "abi.encode(\"99,173,59,79,149,56,169,227,249,191,153,168,209,45,17,56,238,41,77,15,180,209,81,218,226,79,26,142,71,235,224,118\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.658ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[219,96,194,145,190,198,99,13,244,71,70,18,57,108,136,127,150,207,125,235,223,188,126,211,251,111,8,94,163,113,255,240]",
              "sol": "abi.encode(\"219,96,194,145,190,198,99,13,244,71,70,18,57,108,136,127,150,207,125,235,223,188,126,211,251,111,8,94,163,113,255,240\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.658ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[97,154,38,169,224,121,250,12,18,241,137,48,243,80,114,222,58,180,120,13,85,88,107,240,220,62,152,93,116,89,55,155]",
              "sol": "abi.encode(\"97,154,38,169,224,121,250,12,18,241,137,48,243,80,114,222,58,180,120,13,85,88,107,240,220,62,152,93,116,89,55,155\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.659ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[74,35,201,29,91,75,39,116,57,204,196,214,242,141,176,236,190,61,126,242,15,105,130,133,148,35,3,70,112,100,252,214]",
              "sol": "abi.encode(\"74,35,201,29,91,75,39,116,57,204,196,214,242,141,176,236,190,61,126,242,15,105,130,133,148,35,3,70,112,100,252,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.659ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[170,223,122,167,1,116,216,94,139,188,220,177,136,5,151,118,182,169,246,122,133,146,105,167,2,54,100,123,144,176,80,118]",
              "sol": "abi.encode(\"170,223,122,167,1,116,216,94,139,188,220,177,136,5,151,118,182,169,246,122,133,146,105,167,2,54,100,123,144,176,80,118\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.659ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[245,183,46,33,163,127,226,187,184,222,41,182,192,96,179,44,66,150,252,77,98,117,140,167,110,172,221,168,116,188,40,95]",
              "sol": "abi.encode(\"245,183,46,33,163,127,226,187,184,222,41,182,192,96,179,44,66,150,252,77,98,117,140,167,110,172,221,168,116,188,40,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.660ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[243,112,247,187,70,153,7,134,246,224,0,251,104,168,151,220,171,135,187,182,17,176,238,75,162,198,147,34,255,173,181,82]",
              "sol": "abi.encode(\"243,112,247,187,70,153,7,134,246,224,0,251,104,168,151,220,171,135,187,182,17,176,238,75,162,198,147,34,255,173,181,82\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.660ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[121,119,251,219,114,250,16,64,235,223,46,235,138,137,106,160,131,94,139,216,82,71,103,59,153,35,18,155,37,177,194,18]",
              "sol": "abi.encode(\"121,119,251,219,114,250,16,64,235,223,46,235,138,137,106,160,131,94,139,216,82,71,103,59,153,35,18,155,37,177,194,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.660ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[39,44,31,72,93,239,94,47,230,17,42,241,141,170,154,60,33,251,23,147,86,166,224,236,143,192,21,29,205,34,81,18]",
              "sol": "abi.encode(\"39,44,31,72,93,239,94,47,230,17,42,241,141,170,154,60,33,251,23,147,86,166,224,236,143,192,21,29,205,34,81,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T08:50:17.661ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[136,85,250,55,115,246,140,51,72,236,30,219,165,103,69,225,226,105,14,85,49,219,112,9,0,107,170,239,98,168,48,103]",
              "sol": "abi.encode(\"136,85,250,55,115,246,140,51,72,236,30,219,165,103,69,225,226,105,14,85,49,219,112,9,0,107,170,239,98,168,48,103\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}