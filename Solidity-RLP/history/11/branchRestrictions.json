,{
  "2020-11-11T02:45:56.088ZProxyRLPReader.testtoRlpItem": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpItem(bytes)",
          "parameters": [
            {
              "js": "[68,150,170,76,12,34,229,148,57,139,95,195,183,37,159,113,5,111,112,95,136,195,145,134,157,110,152,179,181,112,147,17]",
              "sol": "abi.encode(\"68,150,170,76,12,34,229,148,57,139,95,195,183,37,159,113,5,111,112,95,136,195,145,134,157,110,152,179,181,112,147,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.089ZProxyRLPReader.testrlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrlpLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 31,\"memPtr\": 257}",
              "sol": "RLPReader.RLPItem(31,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.089ZProxyRLPReader.testpayloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpayloadLen(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 3,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(3,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.090ZProxyRLPReader.testtoList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoList(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 255,\"memPtr\": 2}",
              "sol": "RLPReader.RLPItem(255,2)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.090ZProxyRLPReader.testisList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "66-66",
          "restrictions": [
            "item.len == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len==0",
          "parameters": [
            {
              "js": "{\"len\": 0,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(0,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "item.len != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisList(RLPReader.RLPItem) WHEN item.len!=0",
          "parameters": [
            {
              "js": "{\"len\": 34,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(34,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.091ZProxyRLPReader.testtoRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoRlpBytes(RLPReader.RLPItem)",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 20}",
              "sol": "RLPReader.RLPItem(33,20)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.091ZProxyRLPReader.testtoBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBoolean(RLPReader.RLPItem) WHEN item.len==1",
          "parameters": [
            {
              "js": "{\"len\": 1,\"memPtr\": 34}",
              "sol": "RLPReader.RLPItem(1,34)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBoolean(RLPReader.RLPItem) when NOT comply with: item.len == 1",
            "parameters": [
              {
                "js": "{len : 2,memPtr : 34}",
                "sol": "RLPReader.RLPItem(2,34)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:45:56.092ZProxyRLPReader.testtoAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoAddress(RLPReader.RLPItem) WHEN item.len==21",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 21}",
              "sol": "RLPReader.RLPItem(21,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoAddress(RLPReader.RLPItem) when NOT comply with: item.len == 21",
            "parameters": [
              {
                "js": "{len : 22,memPtr : 21}",
                "sol": "RLPReader.RLPItem(22,21)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:45:56.092ZProxyRLPReader.testtoUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUint(RLPReader.RLPItem) WHEN item.len>0,item.len<=33",
          "parameters": [
            {
              "js": "{\"len\": 21,\"memPtr\": 255}",
              "sol": "RLPReader.RLPItem(21,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 255}",
                "sol": "RLPReader.RLPItem(0,255)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testtoUint(RLPReader.RLPItem) when NOT comply with: item.len <= 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 255}",
                "sol": "RLPReader.RLPItem(34,255)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:45:56.093ZProxyRLPReader.testtoUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoUintStrict(RLPReader.RLPItem) WHEN item.len==33",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(33,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoUintStrict(RLPReader.RLPItem) when NOT comply with: item.len == 33",
            "parameters": [
              {
                "js": "{len : 34,memPtr : 32}",
                "sol": "RLPReader.RLPItem(34,32)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:45:56.093ZProxyRLPReader.testtoBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoBytes(RLPReader.RLPItem) WHEN item.len>0",
          "parameters": [
            {
              "js": "{\"len\": 33,\"memPtr\": 32}",
              "sol": "RLPReader.RLPItem(33,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testtoBytes(RLPReader.RLPItem) when NOT comply with: item.len > 0",
            "parameters": [
              {
                "js": "{len : 0,memPtr : 32}",
                "sol": "RLPReader.RLPItem(0,32)"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:45:56.094ZHelper.isList": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isList(bytes)",
          "parameters": [
            {
              "js": "[24,19,232,113,138,172,70,161,241,238,162,180,104,75,145,5,174,104,218,206,11,183,193,131,174,168,156,185,64,105,199,251]",
              "sol": "abi.encode(\"24,19,232,113,138,172,70,161,241,238,162,180,104,75,145,5,174,104,218,206,11,183,193,131,174,168,156,185,64,105,199,251\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.094ZHelper.itemLength": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute itemLength(bytes)",
          "parameters": [
            {
              "js": "[107,124,225,160,2,248,91,252,207,148,4,176,215,8,25,92,223,5,85,202,78,97,95,223,188,226,76,129,101,137,142,64]",
              "sol": "abi.encode(\"107,124,225,160,2,248,91,252,207,148,4,176,215,8,25,92,223,5,85,202,78,97,95,223,188,226,76,129,101,137,142,64\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.095ZHelper.rlpLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute rlpLen(bytes)",
          "parameters": [
            {
              "js": "[236,44,238,22,23,249,16,250,59,86,106,141,83,60,174,160,177,76,91,143,106,149,208,111,87,185,196,222,206,18,33,207]",
              "sol": "abi.encode(\"236,44,238,22,23,249,16,250,59,86,106,141,83,60,174,160,177,76,91,143,106,149,208,111,87,185,196,222,206,18,33,207\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.095ZHelper.payloadLen": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute payloadLen(bytes)",
          "parameters": [
            {
              "js": "[2,189,86,102,84,223,79,190,22,113,202,144,152,102,212,212,164,205,161,191,112,39,144,12,98,176,7,183,230,168,95,117]",
              "sol": "abi.encode(\"2,189,86,102,84,223,79,190,22,113,202,144,152,102,212,212,164,205,161,191,112,39,144,12,98,176,7,183,230,168,95,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.095ZHelper.numItems": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute numItems(bytes)",
          "parameters": [
            {
              "js": "[127,189,226,227,237,223,12,17,246,129,33,41,235,33,135,166,71,175,209,104,26,228,33,109,85,222,165,205,161,112,108,87]",
              "sol": "abi.encode(\"127,189,226,227,237,223,12,17,246,129,33,41,235,33,135,166,71,175,209,104,26,228,33,109,85,222,165,205,161,112,108,87\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.095ZHelper.toRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[47,163,165,6,94,204,201,115,23,18,242,84,15,114,47,254,110,76,187,167,38,124,98,5,191,13,45,71,205,234,115,131]",
              "sol": "abi.encode(\"47,163,165,6,94,204,201,115,23,18,242,84,15,114,47,254,110,76,187,167,38,124,98,5,191,13,45,71,205,234,115,131\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.096ZHelper.toBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBytes(bytes)",
          "parameters": [
            {
              "js": "[245,131,44,106,49,136,131,149,214,115,128,243,110,77,46,51,187,175,247,74,155,234,14,88,67,82,29,22,35,216,130,75]",
              "sol": "abi.encode(\"245,131,44,106,49,136,131,149,214,115,128,243,110,77,46,51,187,175,247,74,155,234,14,88,67,82,29,22,35,216,130,75\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.096ZHelper.toUint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUint(bytes)",
          "parameters": [
            {
              "js": "[204,47,65,124,20,76,125,148,171,130,166,123,206,229,59,117,193,122,117,12,98,146,75,126,176,15,254,45,89,65,183,69]",
              "sol": "abi.encode(\"204,47,65,124,20,76,125,148,171,130,166,123,206,229,59,117,193,122,117,12,98,146,75,126,176,15,254,45,89,65,183,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.096ZHelper.toUintStrict": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toUintStrict(bytes)",
          "parameters": [
            {
              "js": "[236,244,88,76,84,3,127,180,196,225,209,52,56,48,251,30,188,143,162,71,78,150,51,61,139,43,46,99,40,11,44,141]",
              "sol": "abi.encode(\"236,244,88,76,84,3,127,180,196,225,209,52,56,48,251,30,188,143,162,71,78,150,51,61,139,43,46,99,40,11,44,141\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.096ZHelper.toAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toAddress(bytes)",
          "parameters": [
            {
              "js": "[249,231,26,145,210,139,157,249,48,97,188,58,100,176,173,86,134,98,140,145,13,220,192,232,226,174,178,136,97,134,158,192]",
              "sol": "abi.encode(\"249,231,26,145,210,139,157,249,48,97,188,58,100,176,173,86,134,98,140,145,13,220,192,232,226,174,178,136,97,134,158,192\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.097ZHelper.toBoolean": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute toBoolean(bytes)",
          "parameters": [
            {
              "js": "[221,94,167,231,99,35,170,85,169,72,10,89,177,51,239,5,148,134,4,78,197,188,70,57,246,234,133,8,41,56,150,236]",
              "sol": "abi.encode(\"221,94,167,231,99,35,170,85,169,72,10,89,177,51,239,5,148,134,4,78,197,188,70,57,246,234,133,8,41,56,150,236\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.098ZHelper.bytesToString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute bytesToString(bytes)",
          "parameters": [
            {
              "js": "[254,231,31,68,218,17,237,244,49,52,130,86,60,11,176,42,73,214,219,26,42,215,25,100,8,247,168,34,192,255,183,53]",
              "sol": "abi.encode(\"254,231,31,68,218,17,237,244,49,52,130,86,60,11,176,42,73,214,219,26,42,215,25,100,8,247,168,34,192,255,183,53\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.098ZHelper.customDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customDestructure(bytes)",
          "parameters": [
            {
              "js": "[48,248,133,210,133,115,194,124,242,147,121,36,9,24,113,0,151,178,92,30,146,152,183,199,25,35,34,188,213,212,137,232]",
              "sol": "abi.encode(\"48,248,133,210,133,115,194,124,242,147,121,36,9,24,113,0,151,178,92,30,146,152,183,199,25,35,34,188,213,212,137,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.098ZHelper.customNestedDestructure": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedDestructure(bytes)",
          "parameters": [
            {
              "js": "[31,3,139,104,45,197,84,38,84,155,83,9,205,162,137,74,100,83,45,127,157,128,57,56,178,82,10,241,192,109,169,27]",
              "sol": "abi.encode(\"31,3,139,104,45,197,84,38,84,155,83,9,205,162,137,74,100,83,45,127,157,128,57,56,178,82,10,241,192,109,169,27\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:45:56.099ZHelper.customNestedToRlpBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute customNestedToRlpBytes(bytes)",
          "parameters": [
            {
              "js": "[180,231,70,251,144,65,198,23,90,9,117,6,108,70,180,2,21,253,147,197,224,233,30,206,112,151,163,75,229,54,215,98]",
              "sol": "abi.encode(\"180,231,70,251,144,65,198,23,90,9,117,6,108,70,180,2,21,253,147,197,224,233,30,206,112,151,163,75,229,54,215,98\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}