{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve',
  contracts:
   { BondingCurve:
      { projectGraph: [Circular],
        name: 'BondingCurve',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           buyTokens:
            [ { name: 'buyTokens',
                signature: 'buyTokens(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           sellTokens:
            [ { name: 'sellTokens',
                signature: 'sellTokens(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           changeTargetPrice:
            [ { name: 'changeTargetPrice',
                signature: 'changeTargetPrice(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           queryNextPrice:
            [ { name: 'queryNextPrice',
                signature: 'queryNextPrice()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getTokenSupply:
            [ { name: 'getTokenSupply',
                signature: 'getTokenSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getTokenBalance:
            [ { name: 'getTokenBalance',
                signature: 'getTokenBalance()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           findNextHolder:
            [ { name: 'findNextHolder',
                signature: 'findNextHolder()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { validHolder:
            { name: 'validHolder',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'validHolder',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { mToken:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'mToken',
              isArray: false,
              initialValue: null,
              type: 'Token',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mHolders',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BondingCurve.Holder)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           arrayHolders:
            { functionsWrite: { buyTokens: [Array] },
              contract: [Circular],
              name: 'arrayHolders',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           curSoldPrice:
            { functionsWrite: {},
              contract: [Circular],
              name: 'curSoldPrice',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           supply:
            { functionsWrite:
               { constructor: [Array], buyTokens: [Array], sellTokens: [Array] },
              contract: [Circular],
              name: 'supply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initPrice:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'initPrice',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Token:
            { projectGraph: [Circular],
              name: 'Token',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables:
               { owner: [Object],
                 name: [Object],
                 symbol: [Object],
                 decimals: [Object],
                 initialSupply: [Object],
                 totalSupply: [Object],
                 balances: [Object],
                 allowed: [Object],
                 test1: [Object],
                 test2: [Object],
                 test3: [Object] },
              dependencies: { StandardToken: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 ERC20Basic: [Object],
                 BasicToken: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Token',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/Token.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
        inheritsFrom: {},
        structs:
         { Holder:
            { name: 'Holder',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BondingCurve',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Holder',
                members: [Array],
                loc: [Object],
                parentName: 'BondingCurve' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'validHolder',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buyTokens',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sellTokens',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'changeTargetPrice',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'queryNextPrice',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getTokenSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getTokenBalance',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'findNextHolder',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 149, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/BondingCurve.sol' },
     PriorityQueue:
      { projectGraph: [Circular],
        name: 'PriorityQueue',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           insertOrder:
            [ { name: 'insertOrder',
                signature: 'insertOrder(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           getMinOrder:
            [ { name: 'getMinOrder',
                signature: 'getMinOrder()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getMin:
            [ { name: 'getMin',
                signature: 'getMin()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           delMin:
            [ { name: 'delMin',
                signature: 'delMin()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _minChild:
            [ { name: '_minChild',
                signature: '_minChild(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _percUp:
            [ { name: '_percUp',
                signature: '_percUp(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _percDown:
            [ { name: '_percDown',
                signature: '_percDown(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _splitElement:
            [ { name: '_splitElement',
                signature: '_splitElement(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { orderIndex:
            { functionsWrite: { insertOrder: [Array] },
              contract: [Circular],
              name: 'orderIndex',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mOrders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mOrders',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>PriorityQueue.Order)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           heapList:
            { functionsWrite: { constructor: [Array], insertOrder: [Array] },
              contract: [Circular],
              name: 'heapList',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentSize:
            { functionsWrite:
               { constructor: [Array], insertOrder: [Array], delMin: [Array] },
              contract: [Circular],
              name: 'currentSize',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
        inheritsFrom: {},
        structs:
         { Order:
            { name: 'Order',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PriorityQueue',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Order',
                members: [Array],
                loc: [Object],
                parentName: 'PriorityQueue' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'insertOrder',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getMinOrder',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getMin',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'delMin',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_minChild',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_percUp',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_percDown',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_splitElement',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 },
              end: { line: 168, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/PriorityQueue.sol' },
     Token:
      { projectGraph: [Circular],
        name: 'Token',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: 'TestToken',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: 'TOKEN',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialSupply',
              isArray: false,
              initialValue: 10000,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           test1:
            { functionsWrite: {},
              contract: [Circular],
              name: 'test1',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           test2:
            { functionsWrite: {},
              contract: [Circular],
              name: 'test2',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           test3:
            { functionsWrite: {},
              contract: [Circular],
              name: 'test3',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: {},
              stateVariables:
               { allowed: [Object],
                 test1: [Object],
                 test2: [Object],
                 test3: [Object],
                 balances: [Object],
                 totalSupply: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object], ERC20Basic: [Object], BasicToken: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/StandardToken.sol' } },
        inheritsFrom:
         { StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/BasicToken.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Token',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/Token.sol' },
     BasicToken:
      { projectGraph: [Circular],
        name: 'BasicToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
        inheritsFrom:
         { ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BasicToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 39, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/BasicToken.sol' },
     EIP20:
      { projectGraph: [Circular],
        name: 'EIP20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20Interface:
            { projectGraph: [Circular],
              name: 'EIP20Interface',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20Interface',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/EIP20Interface.sol' } },
        inheritsFrom:
         { EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/EIP20Interface.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 70, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/EIP20.sol' },
     EIP20Interface:
      { projectGraph: [Circular],
        name: 'EIP20Interface',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Interface',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/EIP20Interface.sol' },
     ERC20:
      { projectGraph: [Circular],
        name: 'ERC20',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' } },
        inheritsFrom:
         { ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20.sol' },
     ERC20Basic:
      { projectGraph: [Circular],
        name: 'ERC20Basic',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Basic',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' },
     Ownable:
      { projectGraph: [Circular],
        name: 'Ownable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { mOwner:
            { functionsWrite: { constructor: [Array], transferOwnership: [Array] },
              contract: [Circular],
              name: 'mOwner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/Ownable.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' },
     StandardToken:
      { projectGraph: [Circular],
        name: 'StandardToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseApproval:
            [ { name: 'increaseApproval',
                signature: 'increaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseApproval:
            [ { name: 'decreaseApproval',
                signature: 'decreaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           test1:
            { functionsWrite: { approve: [Array] },
              contract: [Circular],
              name: 'test1',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           test2:
            { functionsWrite: { approve: [Array] },
              contract: [Circular],
              name: 'test2',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           test3:
            { functionsWrite: { approve: [Array] },
              contract: [Circular],
              name: 'test3',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasicToken:
            { projectGraph: [Circular],
              name: 'BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions: { transfer: [Array], balanceOf: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply: [Object] },
              dependencies: { ERC20Basic: [Object], SafeMath: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/BasicToken.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/ERC20Basic.sol' },
              parameters: [],
              level: 1 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/BasicToken.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandardToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 91, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/StandardToken.sol' } },
  structs:
   { Holder:
      { name: 'Holder',
        contract:
         { projectGraph: [Circular],
           name: 'BondingCurve',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              buyTokens: [ [Object] ],
              sellTokens: [ [Object] ],
              changeTargetPrice: [ [Object] ],
              queryNextPrice: [ [Object] ],
              getTokenSupply: [ [Object] ],
              getTokenBalance: [ [Object] ],
              findNextHolder: [ [Object] ] },
           modifiers:
            { validHolder:
               { name: 'validHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { mToken:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'mToken',
                 isArray: false,
                 initialValue: null,
                 type: 'Token',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              mHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'mHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>BondingCurve.Holder)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              arrayHolders:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'arrayHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              curSoldPrice:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'curSoldPrice',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              supply:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'supply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initPrice:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'initPrice',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Token:
               { projectGraph: [Circular],
                 name: 'Token',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/Token.sol' },
              SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Holder: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'BondingCurve',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/BondingCurve.sol' },
        parameters:
         [ { name: 'holder',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'ntoken',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'target',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'BondingCurve.Holder':
      { name: 'Holder',
        contract:
         { projectGraph: [Circular],
           name: 'BondingCurve',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              buyTokens: [ [Object] ],
              sellTokens: [ [Object] ],
              changeTargetPrice: [ [Object] ],
              queryNextPrice: [ [Object] ],
              getTokenSupply: [ [Object] ],
              getTokenBalance: [ [Object] ],
              findNextHolder: [ [Object] ] },
           modifiers:
            { validHolder:
               { name: 'validHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { mToken:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'mToken',
                 isArray: false,
                 initialValue: null,
                 type: 'Token',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              mHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'mHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>BondingCurve.Holder)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              arrayHolders:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'arrayHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              curSoldPrice:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'curSoldPrice',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              supply:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'supply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initPrice:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'initPrice',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Token:
               { projectGraph: [Circular],
                 name: 'Token',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/Token.sol' },
              SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Holder: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'BondingCurve',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/BondingCurve.sol' },
        parameters:
         [ { name: 'holder',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'ntoken',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'target',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Order:
      { name: 'Order',
        contract:
         { projectGraph: [Circular],
           name: 'PriorityQueue',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              insertOrder: [ [Object] ],
              getMinOrder: [ [Object] ],
              getMin: [ [Object] ],
              delMin: [ [Object] ],
              _minChild: [ [Object] ],
              _percUp: [ [Object] ],
              _percDown: [ [Object] ],
              _splitElement: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { orderIndex:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'orderIndex',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              mOrders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'mOrders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>PriorityQueue.Order)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              owner:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              heapList:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'heapList',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[]',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentSize:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'currentSize',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Order: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'PriorityQueue',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/PriorityQueue.sol' },
        parameters:
         [ { name: 'id',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'price',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'amount',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'owner',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'PriorityQueue.Order':
      { name: 'Order',
        contract:
         { projectGraph: [Circular],
           name: 'PriorityQueue',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              insertOrder: [ [Object] ],
              getMinOrder: [ [Object] ],
              getMin: [ [Object] ],
              delMin: [ [Object] ],
              _minChild: [ [Object] ],
              _percUp: [ [Object] ],
              _percDown: [ [Object] ],
              _splitElement: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { orderIndex:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'orderIndex',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              mOrders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'mOrders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>PriorityQueue.Order)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              owner:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              heapList:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'heapList',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[]',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentSize:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'currentSize',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/zeppelin/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Order: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'PriorityQueue',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/equilibrium-bonding-curve/contracts/PriorityQueue.sol' },
        parameters:
         [ { name: 'id',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'price',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'amount',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'owner',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums: {} }